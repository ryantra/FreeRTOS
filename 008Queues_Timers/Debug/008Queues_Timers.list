
008Queues_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a40  08008a40  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019304  20000094  08008adc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019398  08008adc  00029398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba3d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003917  00000000  00000000  0003bb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  0003f418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  000407f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a94e  00000000  00000000  00041a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001151c  00000000  00000000  0005c37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c8e1  00000000  00000000  0006d89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a17b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059fc  00000000  00000000  0010a1f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800856c 	.word	0x0800856c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800856c 	.word	0x0800856c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e00e      	b.n	80005da <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <led_effect_stop+0x38>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	2103      	movs	r1, #3
 80005d0:	f005 ff90 	bl	80064f4 <xTimerGenericCommand>
	for(int i = 0; i < 4; i++)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	dded      	ble.n	80005bc <led_effect_stop+0xc>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2001927c 	.word	0x2001927c

080005ec <led_effect>:

void led_effect(int n)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005f4:	f7ff ffdc 	bl	80005b0 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <led_effect+0x34>)
 80005fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000602:	f005 f88d 	bl	8005720 <xTaskGetTickCount>
 8000606:	4602      	mov	r2, r0
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2101      	movs	r1, #1
 8000612:	4620      	mov	r0, r4
 8000614:	f005 ff6e 	bl	80064f4 <xTimerGenericCommand>

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	2001927c 	.word	0x2001927c

08000624 <turn_off_all_leds>:



void turn_off_all_leds(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <turn_off_all_leds+0x38>)
 8000630:	f001 fdc0 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <turn_off_all_leds+0x38>)
 800063c:	f001 fdba 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <turn_off_all_leds+0x38>)
 8000648:	f001 fdb4 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <turn_off_all_leds+0x38>)
 8000654:	f001 fdae 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <turn_on_all_leds+0x38>)
 800066c:	f001 fda2 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <turn_on_all_leds+0x38>)
 8000678:	f001 fd9c 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <turn_on_all_leds+0x38>)
 8000684:	f001 fd96 	bl	80021b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	4802      	ldr	r0, [pc, #8]	; (8000698 <turn_on_all_leds+0x38>)
 8000690:	f001 fd90 	bl	80021b4 <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020400 	.word	0x40020400

0800069c <LED_control>:
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LED4_Pin, GPIO_PIN_RESET);
}

void LED_control(int value)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e014      	b.n	80006d4 <LED_control+0x38>
		HAL_GPIO_WritePin(LED1_GPIO_Port, (LED1_Pin << i), ((value >> i)& 0x1));
 80006aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	b299      	uxth	r1, r3
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	fa42 f303 	asr.w	r3, r2, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <LED_control+0x48>)
 80006ca:	f001 fd73 	bl	80021b4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	dde7      	ble.n	80006aa <LED_control+0xe>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400

080006e8 <LED_effect1>:

void LED_effect1(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LED_effect1+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <LED_effect1+0x28>)
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <LED_effect1+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <LED_effect1+0x1e>
 8000700:	f7ff ff90 	bl	8000624 <turn_off_all_leds>
}
 8000704:	e001      	b.n	800070a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000706:	f7ff ffab 	bl	8000660 <turn_on_all_leds>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000

08000714 <LED_effect2>:

void LED_effect2(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_all_leds() : turn_off_all_leds();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LED_effect2+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <LED_effect2+0x28>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <LED_effect2+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <LED_effect2+0x1e>
 800072c:	f7ff ff98 	bl	8000660 <turn_on_all_leds>
}
 8000730:	e001      	b.n	8000736 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_all_leds() : turn_off_all_leds();
 8000732:	f7ff ff77 	bl	8000624 <turn_off_all_leds>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000004 	.word	0x20000004

08000740 <LED_effect3>:

void LED_effect3(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	static int i = 1;
	LED_control(0x1 << (i++ % 4));
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <LED_effect3+0x2c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <LED_effect3+0x2c>)
 800074c:	600a      	str	r2, [r1, #0]
 800074e:	425a      	negs	r2, r3
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	f002 0203 	and.w	r2, r2, #3
 8000758:	bf58      	it	pl
 800075a:	4253      	negpl	r3, r2
 800075c:	2201      	movs	r2, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff9a 	bl	800069c <LED_control>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000008 	.word	0x20000008

08000770 <LED_effect4>:

void LED_effect4(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	static int i = 1;
	LED_control(0x1 >> (i++ % 4));
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <LED_effect4+0x2c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <LED_effect4+0x2c>)
 800077c:	600a      	str	r2, [r1, #0]
 800077e:	425a      	negs	r2, r3
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	f002 0203 	and.w	r2, r2, #3
 8000788:	bf58      	it	pl
 800078a:	4253      	negpl	r3, r2
 800078c:	2201      	movs	r2, #1
 800078e:	fa42 f303 	asr.w	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff82 	bl	800069c <LED_control>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000000c 	.word	0x2000000c

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f001 fa3d 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f90b 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f9dd 	bl	8000b6c <MX_GPIO_Init>
  MX_RTC_Init();
 80007b2:	f000 f98b 	bl	8000acc <MX_RTC_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 f9af 	bl	8000b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <main+0x1c0>)
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	22fa      	movs	r2, #250	; 0xfa
 80007c6:	4967      	ldr	r1, [pc, #412]	; (8000964 <main+0x1c4>)
 80007c8:	4867      	ldr	r0, [pc, #412]	; (8000968 <main+0x1c8>)
 80007ca:	f004 fd6b 	bl	80052a4 <xTaskCreate>
 80007ce:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d009      	beq.n	80007ea <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007da:	f383 8811 	msr	BASEPRI, r3
 80007de:	f3bf 8f6f 	isb	sy
 80007e2:	f3bf 8f4f 	dsb	sy
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	e7fe      	b.n	80007e8 <main+0x48>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 80007ea:	4b60      	ldr	r3, [pc, #384]	; (800096c <main+0x1cc>)
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	22fa      	movs	r2, #250	; 0xfa
 80007f6:	495e      	ldr	r1, [pc, #376]	; (8000970 <main+0x1d0>)
 80007f8:	485e      	ldr	r0, [pc, #376]	; (8000974 <main+0x1d4>)
 80007fa:	f004 fd53 	bl	80052a4 <xTaskCreate>
 80007fe:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d009      	beq.n	800081a <main+0x7a>
 8000806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080a:	f383 8811 	msr	BASEPRI, r3
 800080e:	f3bf 8f6f 	isb	sy
 8000812:	f3bf 8f4f 	dsb	sy
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	e7fe      	b.n	8000818 <main+0x78>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800081a:	4b57      	ldr	r3, [pc, #348]	; (8000978 <main+0x1d8>)
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	2302      	movs	r3, #2
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	22fa      	movs	r2, #250	; 0xfa
 8000826:	4955      	ldr	r1, [pc, #340]	; (800097c <main+0x1dc>)
 8000828:	4855      	ldr	r0, [pc, #340]	; (8000980 <main+0x1e0>)
 800082a:	f004 fd3b 	bl	80052a4 <xTaskCreate>
 800082e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d009      	beq.n	800084a <main+0xaa>
 8000836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e7fe      	b.n	8000848 <main+0xa8>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <main+0x1e4>)
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2302      	movs	r3, #2
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	22fa      	movs	r2, #250	; 0xfa
 8000856:	494c      	ldr	r1, [pc, #304]	; (8000988 <main+0x1e8>)
 8000858:	484c      	ldr	r0, [pc, #304]	; (800098c <main+0x1ec>)
 800085a:	f004 fd23 	bl	80052a4 <xTaskCreate>
 800085e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d009      	beq.n	800087a <main+0xda>
 8000866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086a:	f383 8811 	msr	BASEPRI, r3
 800086e:	f3bf 8f6f 	isb	sy
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	e7fe      	b.n	8000878 <main+0xd8>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <main+0x1f0>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	2302      	movs	r3, #2
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	22fa      	movs	r2, #250	; 0xfa
 8000886:	4943      	ldr	r1, [pc, #268]	; (8000994 <main+0x1f4>)
 8000888:	4843      	ldr	r0, [pc, #268]	; (8000998 <main+0x1f8>)
 800088a:	f004 fd0b 	bl	80052a4 <xTaskCreate>
 800088e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d009      	beq.n	80008aa <main+0x10a>
 8000896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089a:	f383 8811 	msr	BASEPRI, r3
 800089e:	f3bf 8f6f 	isb	sy
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e7fe      	b.n	80008a8 <main+0x108>

  q_data = xQueueCreate(10, sizeof(char));
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	200a      	movs	r0, #10
 80008b0:	f003 ffc2 	bl	8004838 <xQueueGenericCreate>
 80008b4:	4602      	mov	r2, r0
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <main+0x1fc>)
 80008b8:	601a      	str	r2, [r3, #0]
  configASSERT(q_data != NULL);
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <main+0x1fc>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d109      	bne.n	80008d6 <main+0x136>
 80008c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c6:	f383 8811 	msr	BASEPRI, r3
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	e7fe      	b.n	80008d4 <main+0x134>

  q_print = xQueueCreate(10, sizeof(size_t));
 80008d6:	2200      	movs	r2, #0
 80008d8:	2104      	movs	r1, #4
 80008da:	200a      	movs	r0, #10
 80008dc:	f003 ffac 	bl	8004838 <xQueueGenericCreate>
 80008e0:	4602      	mov	r2, r0
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <main+0x200>)
 80008e4:	601a      	str	r2, [r3, #0]
  configASSERT(q_print != NULL);
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <main+0x200>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <main+0x162>
 80008ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f2:	f383 8811 	msr	BASEPRI, r3
 80008f6:	f3bf 8f6f 	isb	sy
 80008fa:	f3bf 8f4f 	dsb	sy
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	e7fe      	b.n	8000900 <main+0x160>



  //Software timer for LED effects
  for(int i = 0; i < 4; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	e013      	b.n	8000930 <main+0x190>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	3301      	adds	r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <main+0x204>)
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800091a:	4823      	ldr	r0, [pc, #140]	; (80009a8 <main+0x208>)
 800091c:	f005 fd8e 	bl	800643c <xTimerCreate>
 8000920:	4601      	mov	r1, r0
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <main+0x20c>)
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 4; i++)
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	3301      	adds	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	2b03      	cmp	r3, #3
 8000934:	dde8      	ble.n	8000908 <main+0x168>

  rtc_timer = xTimerCreate("rtc_report_time", pdMS_TO_TICKS(1000), pdTRUE, NULL, rtc_report_callback);
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <main+0x210>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <main+0x214>)
 8000944:	f005 fd7a 	bl	800643c <xTimerCreate>
 8000948:	4602      	mov	r2, r0
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <main+0x218>)
 800094c:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	491a      	ldr	r1, [pc, #104]	; (80009bc <main+0x21c>)
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <main+0x220>)
 8000954:	f003 f802 	bl	800395c <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000958:	f004 fde8 	bl	800552c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095c:	e7fe      	b.n	800095c <main+0x1bc>
 800095e:	bf00      	nop
 8000960:	2001929c 	.word	0x2001929c
 8000964:	08008584 	.word	0x08008584
 8000968:	080013b1 	.word	0x080013b1
 800096c:	20019294 	.word	0x20019294
 8000970:	08008590 	.word	0x08008590
 8000974:	08001aa5 	.word	0x08001aa5
 8000978:	200192c4 	.word	0x200192c4
 800097c:	0800859c 	.word	0x0800859c
 8000980:	08001a65 	.word	0x08001a65
 8000984:	200192c8 	.word	0x200192c8
 8000988:	080085a8 	.word	0x080085a8
 800098c:	0800148d 	.word	0x0800148d
 8000990:	20019290 	.word	0x20019290
 8000994:	080085b4 	.word	0x080085b4
 8000998:	08001601 	.word	0x08001601
 800099c:	20019298 	.word	0x20019298
 80009a0:	200192a0 	.word	0x200192a0
 80009a4:	08000c8d 	.word	0x08000c8d
 80009a8:	080085c0 	.word	0x080085c0
 80009ac:	2001927c 	.word	0x2001927c
 80009b0:	08000c79 	.word	0x08000c79
 80009b4:	080085cc 	.word	0x080085cc
 80009b8:	2001928c 	.word	0x2001928c
 80009bc:	200192cc 	.word	0x200192cc
 80009c0:	200192d0 	.word	0x200192d0

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09a      	sub	sp, #104	; 0x68
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 fd23 	bl	800741e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <SystemClock_Config+0x100>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <SystemClock_Config+0x100>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <SystemClock_Config+0x100>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <SystemClock_Config+0x104>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <SystemClock_Config+0x104>)
 8000a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0x104>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a32:	230a      	movs	r3, #10
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a46:	2300      	movs	r3, #0
 8000a48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fbc1 	bl	80021e8 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a6c:	f000 f992 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fe1b 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a98:	f000 f97c 	bl	8000d94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f830 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000ab6:	f000 f96d 	bl	8000d94 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3768      	adds	r7, #104	; 0x68
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_RTC_Init+0x44>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_RTC_Init+0x48>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_RTC_Init+0x44>)
 8000ad8:	2240      	movs	r2, #64	; 0x40
 8000ada:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_RTC_Init+0x44>)
 8000ade:	227f      	movs	r2, #127	; 0x7f
 8000ae0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_RTC_Init+0x44>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_RTC_Init+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_RTC_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_RTC_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_RTC_Init+0x44>)
 8000afc:	f002 f8f8 	bl	8002cf0 <HAL_RTC_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b06:	f000 f945 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200192a4 	.word	0x200192a4
 8000b14:	40002800 	.word	0x40002800

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f002 fe1e 	bl	8003790 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f91b 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200192d0 	.word	0x200192d0
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_GPIO_Init+0xf8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bf8:	f001 fadc 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <MX_GPIO_Init+0x100>)
 8000c04:	f001 fad6 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_GPIO_Init+0x104>)
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4815      	ldr	r0, [pc, #84]	; (8000c74 <MX_GPIO_Init+0x108>)
 8000c1e:	f001 f947 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c22:	2320      	movs	r3, #32
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000c3a:	f001 f939 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000c3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_GPIO_Init+0x100>)
 8000c58:	f001 f92a 	bl	8001eb0 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	10210000 	.word	0x10210000
 8000c74:	40020800 	.word	0x40020800

08000c78 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback(TimerHandle_t xTimer)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	show_time_date_itm();
 8000c80:	f000 f890 	bl	8000da4 <show_time_date_itm>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f005 ff31 	bl	8006afc <pvTimerGetTimerID>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d816      	bhi.n	8000cd4 <led_effect_callback+0x48>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <led_effect_callback+0x20>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cc3 	.word	0x08000cc3
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000ccf 	.word	0x08000ccf
	{
	case 1:
		LED_effect1();
 8000cbc:	f7ff fd14 	bl	80006e8 <LED_effect1>
		break;
 8000cc0:	e008      	b.n	8000cd4 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000cc2:	f7ff fd27 	bl	8000714 <LED_effect2>
		break;
 8000cc6:	e005      	b.n	8000cd4 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000cc8:	f7ff fd3a 	bl	8000740 <LED_effect3>
		break;
 8000ccc:	e002      	b.n	8000cd4 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000cce:	f7ff fd4f 	bl	8000770 <LED_effect4>
		break;
 8000cd2:	bf00      	nop
	}


}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	if(!xQueueIsQueueFullFromISR(q_data))
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_UART_RxCpltCallback+0x84>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fa59 	bl	80051a0 <xQueueIsQueueFullFromISR>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d107      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x28>
	{

		/*Enqueue data byte */
		xQueueSendFromISR(q_data, (void*)&user_data,NULL);
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_UART_RxCpltCallback+0x84>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4919      	ldr	r1, [pc, #100]	; (8000d64 <HAL_UART_RxCpltCallback+0x88>)
 8000cfe:	f003 ff15 	bl	8004b2c <xQueueGenericSendFromISR>
 8000d02:	e013      	b.n	8000d2c <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_RxCpltCallback+0x88>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b0a      	cmp	r3, #10
 8000d0c:	d10e      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x50>
		{
			/*Make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_UART_RxCpltCallback+0x84>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f107 010f 	add.w	r1, r7, #15
 8000d16:	2200      	movs	r2, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f889 	bl	8004e30 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_UART_RxCpltCallback+0x84>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	2200      	movs	r2, #0
 8000d26:	490f      	ldr	r1, [pc, #60]	; (8000d64 <HAL_UART_RxCpltCallback+0x88>)
 8000d28:	f003 ff00 	bl	8004b2c <xQueueGenericSendFromISR>
		}
	}


	/*Send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_UART_RxCpltCallback+0x88>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d10a      	bne.n	8000d4c <HAL_UART_RxCpltCallback+0x70>
	{
		//send notification to command handling task
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_UART_RxCpltCallback+0x8c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	f005 f9e2 	bl	8006110 <xTaskGenericNotifyFromISR>
	}

	/*Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data,1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4905      	ldr	r1, [pc, #20]	; (8000d64 <HAL_UART_RxCpltCallback+0x88>)
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_UART_RxCpltCallback+0x90>)
 8000d52:	f002 fe03 	bl	800395c <HAL_UART_Receive_IT>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20019298 	.word	0x20019298
 8000d64:	200192cc 	.word	0x200192cc
 8000d68:	20019294 	.word	0x20019294
 8000d6c:	200192d0 	.word	0x200192d0

08000d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d82:	f000 ff71 	bl	8001c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40000c00 	.word	0x40000c00

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <show_time_date_itm>:

#include "main.h"


 void show_time_date_itm(void)
 {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	2204      	movs	r2, #4
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fb33 	bl	800741e <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2214      	movs	r2, #20
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fb2d 	bl	800741e <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4815      	ldr	r0, [pc, #84]	; (8000e20 <show_time_date_itm+0x7c>)
 8000dcc:	f002 f8de 	bl	8002f8c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <show_time_date_itm+0x7c>)
 8000dda:	f002 f9dc 	bl	8003196 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <show_time_date_itm+0x44>
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <show_time_date_itm+0x80>)
 8000de6:	e000      	b.n	8000dea <show_time_date_itm+0x46>
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <show_time_date_itm+0x84>)
 8000dea:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000dec:	793b      	ldrb	r3, [r7, #4]
 8000dee:	4619      	mov	r1, r3
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	461a      	mov	r2, r3
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	480b      	ldr	r0, [pc, #44]	; (8000e2c <show_time_date_itm+0x88>)
 8000e00:	f006 fb16 	bl	8007430 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000e04:	7e7b      	ldrb	r3, [r7, #25]
 8000e06:	4619      	mov	r1, r3
 8000e08:	7ebb      	ldrb	r3, [r7, #26]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	7efb      	ldrb	r3, [r7, #27]
 8000e0e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <show_time_date_itm+0x8c>)
 8000e14:	f006 fb0c 	bl	8007430 <iprintf>

 }
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200192a4 	.word	0x200192a4
 8000e24:	080085dc 	.word	0x080085dc
 8000e28:	080085e0 	.word	0x080085e0
 8000e2c:	080085e4 	.word	0x080085e4
 8000e30:	080085f8 	.word	0x080085f8

08000e34 <show_time_date>:

void show_time_date(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	2204      	movs	r2, #4
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f006 faeb 	bl	800741e <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2214      	movs	r2, #20
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 fae5 	bl	800741e <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <show_time_date+0xac>)
 8000e5c:	f002 f896 	bl	8002f8c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <show_time_date+0xac>)
 8000e6a:	f002 f994 	bl	8003196 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <show_time_date+0x44>
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <show_time_date+0xb0>)
 8000e76:	e000      	b.n	8000e7a <show_time_date+0x46>
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <show_time_date+0xb4>)
 8000e7a:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	461a      	mov	r2, r3
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	4619      	mov	r1, r3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	9101      	str	r1, [sp, #4]
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a16      	ldr	r2, [pc, #88]	; (8000eec <show_time_date+0xb8>)
 8000e94:	4916      	ldr	r1, [pc, #88]	; (8000ef0 <show_time_date+0xbc>)
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <show_time_date+0xc0>)
 8000e98:	f006 fae2 	bl	8007460 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <show_time_date+0xc4>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea6:	4915      	ldr	r1, [pc, #84]	; (8000efc <show_time_date+0xc8>)
 8000ea8:	f003 fd46 	bl	8004938 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000eac:	7e7b      	ldrb	r3, [r7, #25]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	7ebb      	ldrb	r3, [r7, #26]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	7efb      	ldrb	r3, [r7, #27]
 8000eb6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4910      	ldr	r1, [pc, #64]	; (8000f00 <show_time_date+0xcc>)
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <show_time_date+0xd0>)
 8000ec2:	f006 facd 	bl	8007460 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <show_time_date+0xc4>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <show_time_date+0xd4>)
 8000ed2:	f003 fd31 	bl	8004938 <xQueueGenericSend>
}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200192a4 	.word	0x200192a4
 8000ee4:	080085dc 	.word	0x080085dc
 8000ee8:	080085e0 	.word	0x080085e0
 8000eec:	08008608 	.word	0x08008608
 8000ef0:	0800861c 	.word	0x0800861c
 8000ef4:	200000b4 	.word	0x200000b4
 8000ef8:	200192a0 	.word	0x200192a0
 8000efc:	20000010 	.word	0x20000010
 8000f00:	080085f8 	.word	0x080085f8
 8000f04:	200000dc 	.word	0x200000dc
 8000f08:	20000014 	.word	0x20000014

08000f0c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000f26:	2200      	movs	r2, #0
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <rtc_configure_time+0x2c>)
 8000f2c:	f001 ff71 	bl	8002e12 <HAL_RTC_SetTime>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200192a4 	.word	0x200192a4

08000f3c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <rtc_configure_date+0x1c>)
 8000f4a:	f002 f87d 	bl	8003048 <HAL_RTC_SetDate>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200192a4 	.word	0x200192a4

08000f5c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	if(time){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d807      	bhi.n	8000f84 <validate_rtc_information+0x28>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7a:	d803      	bhi.n	8000f84 <validate_rtc_information+0x28>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	2b3b      	cmp	r3, #59	; 0x3b
 8000f82:	d901      	bls.n	8000f88 <validate_rtc_information+0x2c>
			return 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e015      	b.n	8000fb4 <validate_rtc_information+0x58>
	}

	if(date){
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d011      	beq.n	8000fb2 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	789b      	ldrb	r3, [r3, #2]
 8000f92:	2b1f      	cmp	r3, #31
 8000f94:	d80b      	bhi.n	8000fae <validate_rtc_information+0x52>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d807      	bhi.n	8000fae <validate_rtc_information+0x52>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	78db      	ldrb	r3, [r3, #3]
 8000fa2:	2b63      	cmp	r3, #99	; 0x63
 8000fa4:	d803      	bhi.n	8000fae <validate_rtc_information+0x52>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	2b0c      	cmp	r3, #12
 8000fac:	d901      	bls.n	8000fb2 <validate_rtc_information+0x56>
			return 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <validate_rtc_information+0x58>
	}

	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_RTC_MspInit+0x24>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d102      	bne.n	8001028 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_RTC_MspInit+0x28>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40002800 	.word	0x40002800
 8001038:	42470e3c 	.word	0x42470e3c

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_UART_MspInit+0x94>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d133      	bne.n	80010c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_UART_MspInit+0x98>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0x98>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001096:	230c      	movs	r3, #12
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <HAL_UART_MspInit+0x9c>)
 80010b2:	f000 fefd 	bl	8001eb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2106      	movs	r1, #6
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 feac 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f000 fec5 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2032      	movs	r0, #50	; 0x32
 80010f2:	f000 fe91 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010f6:	2032      	movs	r0, #50	; 0x32
 80010f8:	f000 feaa 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_InitTick+0xa4>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_InitTick+0xa4>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_InitTick+0xa4>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fcc2 	bl	8002aac <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001128:	f001 fc98 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 800112c:	4603      	mov	r3, r0
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_InitTick+0xa8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3b01      	subs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_InitTick+0xac>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_InitTick+0xb0>)
 8001144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_InitTick+0xac>)
 8001148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_InitTick+0xac>)
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_InitTick+0xac>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_InitTick+0xac>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_InitTick+0xac>)
 8001162:	f002 f8f7 	bl	8003354 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d104      	bne.n	8001176 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_InitTick+0xac>)
 800116e:	f002 f926 	bl	80033be <HAL_TIM_Base_Start_IT>
 8001172:	4603      	mov	r3, r0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	431bde83 	.word	0x431bde83
 8001188:	20019310 	.word	0x20019310
 800118c:	40000c00 	.word	0x40000c00

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <USART2_IRQHandler+0x10>)
 80011ca:	f002 fc1d 	bl	8003a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200192d0 	.word	0x200192d0

080011d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <TIM5_IRQHandler+0x10>)
 80011de:	f002 f912 	bl	8003406 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20019310 	.word	0x20019310

080011ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <ITM_SendChar+0x48>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <ITM_SendChar+0x48>)
 80011fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001200:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <ITM_SendChar+0x4c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <ITM_SendChar+0x4c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800120e:	bf00      	nop
 8001210:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f8      	beq.n	8001210 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800121e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	6013      	str	r3, [r2, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000edfc 	.word	0xe000edfc
 8001238:	e0000e00 	.word	0xe0000e00

0800123c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
	}

return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffab 	bl	80011ec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>

	}
	return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f006 f834 	bl	80073b4 <__errno>
 800134c:	4602      	mov	r2, r0
 800134e:	230c      	movs	r3, #12
 8001350:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20020000 	.word	0x20020000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000104 	.word	0x20000104
 8001380:	20019398 	.word	0x20019398

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <SystemInit+0x28>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <SystemInit+0x28>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SystemInit+0x28>)
 800139a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139e:	609a      	str	r2, [r3, #8]
#endif
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <menu_task>:
int extract_command(command_t *cmd);

const char *msg_inv = "*****Invalid Option*****\n";

void menu_task(void *param)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	const char* msg_menu = 	"==================================\n"
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <menu_task+0xc4>)
 80013ba:	60bb      	str	r3, [r7, #8]
								"Exit				-----> 2\n"
								"Enter your choice here 	: ";

	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <menu_task+0xc8>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	2300      	movs	r3, #0
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ca:	f003 fab5 	bl	8004938 <xQueueGenericSend>

		//waits for menu commands
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2000      	movs	r0, #0
 80013e0:	f004 fd3c 	bl	8005e5c <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d12d      	bne.n	800144c <menu_task+0x9c>
		{
			option = cmd->payload[0] - 48;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3b30      	subs	r3, #48	; 0x30
 80013f6:	613b      	str	r3, [r7, #16]
			switch(option)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d010      	beq.n	8001420 <menu_task+0x70>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d02d      	beq.n	800145e <menu_task+0xae>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d119      	bne.n	800143a <menu_task+0x8a>
			{
			case 0:
				curr_state = sLedEffect;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <menu_task+0xcc>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <menu_task+0xd0>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2300      	movs	r3, #0
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	f004 fd9d 	bl	8005f58 <xTaskGenericNotify>
			break;
 800141e:	e01f      	b.n	8001460 <menu_task+0xb0>

			case 1:
				curr_state = sRtcMenu;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <menu_task+0xcc>)
 8001422:	2202      	movs	r2, #2
 8001424:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <menu_task+0xd4>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	f004 fd90 	bl	8005f58 <xTaskGenericNotify>
			break;
 8001438:	e012      	b.n	8001460 <menu_task+0xb0>

			case 2:
				break;

			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <menu_task+0xc8>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001444:	4910      	ldr	r1, [pc, #64]	; (8001488 <menu_task+0xd8>)
 8001446:	f003 fa77 	bl	8004938 <xQueueGenericSend>
			continue;
 800144a:	e012      	b.n	8001472 <menu_task+0xc2>
			}

		}else
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <menu_task+0xc8>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001456:	490c      	ldr	r1, [pc, #48]	; (8001488 <menu_task+0xd8>)
 8001458:	f003 fa6e 	bl	8004938 <xQueueGenericSend>
			continue;
 800145c:	e009      	b.n	8001472 <menu_task+0xc2>
				break;
 800145e:	bf00      	nop
		}

		//wait ti run again when some other tasks notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f004 fcf5 	bl	8005e5c <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001472:	e7a3      	b.n	80013bc <menu_task+0xc>
 8001474:	08008650 	.word	0x08008650
 8001478:	200192a0 	.word	0x200192a0
 800147c:	200000b0 	.word	0x200000b0
 8001480:	200192c8 	.word	0x200192c8
 8001484:	20019290 	.word	0x20019290
 8001488:	2000001c 	.word	0x2000001c

0800148c <led_task>:
	}//end of while super loop

}

void led_task(void *param)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_led = 	"==============================\n"
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <led_task+0x104>)
 8001496:	60fb      	str	r3, [r7, #12]
								"(none, e1, e2, e3, e4) \n"
								"Enter your choice here : ";
	while(1)
	{
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f004 fcd9 	bl	8005e5c <xTaskGenericNotifyWait>
		/*TODO: Print LED menu */
		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <led_task+0x108>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f107 010c 	add.w	r1, r7, #12
 80014b2:	2300      	movs	r3, #0
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b8:	f003 fa3e 	bl	8004938 <xQueueGenericSend>


		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80014bc:	f107 0210 	add.w	r2, r7, #16
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f004 fcc5 	bl	8005e5c <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d843      	bhi.n	8001566 <led_task+0xda>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	492d      	ldr	r1, [pc, #180]	; (8001598 <led_task+0x10c>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fe7c 	bl	80001e0 <strcmp>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <led_task+0x68>
				led_effect_stop();
 80014ee:	f7ff f85f 	bl	80005b0 <led_effect_stop>
 80014f2:	e040      	b.n	8001576 <led_task+0xea>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	4929      	ldr	r1, [pc, #164]	; (800159c <led_task+0x110>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fe71 	bl	80001e0 <strcmp>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <led_task+0x80>
				led_effect(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff f871 	bl	80005ec <led_effect>
 800150a:	e034      	b.n	8001576 <led_task+0xea>
			else if (! strcmp((char*)cmd->payload,"e2"))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	4924      	ldr	r1, [pc, #144]	; (80015a0 <led_task+0x114>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe fe65 	bl	80001e0 <strcmp>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <led_task+0x98>
				led_effect(2);
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff f865 	bl	80005ec <led_effect>
 8001522:	e028      	b.n	8001576 <led_task+0xea>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	491f      	ldr	r1, [pc, #124]	; (80015a4 <led_task+0x118>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fe59 	bl	80001e0 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <led_task+0xb0>
				led_effect(3);
 8001534:	2003      	movs	r0, #3
 8001536:	f7ff f859 	bl	80005ec <led_effect>
 800153a:	e01c      	b.n	8001576 <led_task+0xea>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	491a      	ldr	r1, [pc, #104]	; (80015a8 <led_task+0x11c>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe4d 	bl	80001e0 <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <led_task+0xc8>
				led_effect(4);
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff f84d 	bl	80005ec <led_effect>
 8001552:	e010      	b.n	8001576 <led_task+0xea>
			else
				/*TODO: print invalid message */
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <led_task+0x108>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	2300      	movs	r3, #0
 800155a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155e:	4913      	ldr	r1, [pc, #76]	; (80015ac <led_task+0x120>)
 8001560:	f003 f9ea 	bl	8004938 <xQueueGenericSend>
 8001564:	e007      	b.n	8001576 <led_task+0xea>
		}else
			/*TODO: print invalid message */
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <led_task+0x108>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001570:	490e      	ldr	r1, [pc, #56]	; (80015ac <led_task+0x120>)
 8001572:	f003 f9e1 	bl	8004938 <xQueueGenericSend>

		/*TODO : update state variable */
		curr_state = sMainMenu;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <led_task+0x124>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <led_task+0x128>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	f004 fce5 	bl	8005f58 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800158e:	e783      	b.n	8001498 <led_task+0xc>
 8001590:	08008708 	.word	0x08008708
 8001594:	200192a0 	.word	0x200192a0
 8001598:	08008790 	.word	0x08008790
 800159c:	08008798 	.word	0x08008798
 80015a0:	0800879c 	.word	0x0800879c
 80015a4:	080087a0 	.word	0x080087a0
 80015a8:	080087a4 	.word	0x080087a4
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	200000b0 	.word	0x200000b0
 80015b4:	2001929c 	.word	0x2001929c

080015b8 <getnumber>:
	}

}

uint8_t getnumber(uint8_t *p , int len)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	dd0f      	ble.n	80015e8 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3301      	adds	r3, #1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b30      	subs	r3, #48	; 0x30
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e003      	b.n	80015f0 <getnumber+0x38>
	else
		value = p[0] - 48;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3b30      	subs	r3, #48	; 0x30
 80015ee:	60fb      	str	r3, [r7, #12]

	return value;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	b2db      	uxtb	r3, r3

}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <rtc_task>:

void rtc_task(void *param)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b09b      	sub	sp, #108	; 0x6c
 8001604:	af02      	add	r7, sp, #8
 8001606:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 		=   "========================\n"
 8001608:	4bb0      	ldr	r3, [pc, #704]	; (80018cc <rtc_task+0x2cc>)
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
									"|         RTC          |\n"
									"========================\n";

		const char* msg_rtc2 	=   "Configure Time            ----> 0\n"
 800160c:	4bb0      	ldr	r3, [pc, #704]	; (80018d0 <rtc_task+0x2d0>)
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
									"Enable reporting          ----> 2\n"
									"Exit                      ----> 3\n"
									"Enter your choice here : ";


		const char *msg_rtc_hh 		= "Enter hour(1-12):";
 8001610:	4bb0      	ldr	r3, [pc, #704]	; (80018d4 <rtc_task+0x2d4>)
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
		const char *msg_rtc_mm 		= "Enter minutes(0-59):";
 8001614:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <rtc_task+0x2d8>)
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
		const char *msg_rtc_ss 		= "Enter seconds(0-59):";
 8001618:	4bb0      	ldr	r3, [pc, #704]	; (80018dc <rtc_task+0x2dc>)
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c

		const char *msg_rtc_dd  	= "Enter date(1-31):";
 800161c:	4bb0      	ldr	r3, [pc, #704]	; (80018e0 <rtc_task+0x2e0>)
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
		const char *msg_rtc_mo  	= "Enter month(1-12):";
 8001620:	4bb0      	ldr	r3, [pc, #704]	; (80018e4 <rtc_task+0x2e4>)
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
		const char *msg_rtc_dow	 	= "Enter day(1-7 sun:1):";
 8001624:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <rtc_task+0x2e8>)
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
		const char *msg_rtc_yr  	= "Enter year(0-99):";
 8001628:	4bb0      	ldr	r3, [pc, #704]	; (80018ec <rtc_task+0x2ec>)
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c

		const char *msg_conf 		= "Configuration successful\n";
 800162c:	4bb0      	ldr	r3, [pc, #704]	; (80018f0 <rtc_task+0x2f0>)
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
		const char *msg_rtc_report 	= "Enable time&date reporting(y/n)?: ";
 8001630:	4bb0      	ldr	r3, [pc, #704]	; (80018f4 <rtc_task+0x2f4>)
 8001632:	627b      	str	r3, [r7, #36]	; 0x24


	while(1)
	{
		/*TODO: Notify wait (wait till someone notifies)		 */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f004 fc0b 	bl	8005e5c <xTaskGenericNotifyWait>
				/*TODO : Print the menu and show current date and time information */
				xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001646:	4bac      	ldr	r3, [pc, #688]	; (80018f8 <rtc_task+0x2f8>)
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800164e:	2300      	movs	r3, #0
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	f003 f970 	bl	8004938 <xQueueGenericSend>
				show_time_date();
 8001658:	f7ff fbec 	bl	8000e34 <show_time_date>
				xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 800165c:	4ba6      	ldr	r3, [pc, #664]	; (80018f8 <rtc_task+0x2f8>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001664:	2300      	movs	r3, #0
 8001666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800166a:	f003 f965 	bl	8004938 <xQueueGenericSend>

				while(curr_state != sMainMenu){
 800166e:	e1de      	b.n	8001a2e <rtc_task+0x42e>

					/*TODO: Wait for command notification (Notify wait) */
					xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001670:	f107 0220 	add.w	r2, r7, #32
 8001674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2000      	movs	r0, #0
 8001682:	f004 fbeb 	bl	8005e5c <xTaskGenericNotifyWait>
					cmd = (command_t*)cmd_addr;
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	65fb      	str	r3, [r7, #92]	; 0x5c

					switch(curr_state)
 800168a:	4b9c      	ldr	r3, [pc, #624]	; (80018fc <rtc_task+0x2fc>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3b02      	subs	r3, #2
 8001690:	2b03      	cmp	r3, #3
 8001692:	f200 81cc 	bhi.w	8001a2e <rtc_task+0x42e>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <rtc_task+0x9c>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	0800175f 	.word	0x0800175f
 80016a4:	08001845 	.word	0x08001845
 80016a8:	080019ab 	.word	0x080019ab
					{
						case sRtcMenu:
						{

							/*TODO: process RTC menu commands */
							if(cmd->len == 1)
 80016ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d148      	bne.n	8001746 <rtc_task+0x146>
							{
								menu_code = cmd->payload[0] - 48;
 80016b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3b30      	subs	r3, #48	; 0x30
 80016ba:	653b      	str	r3, [r7, #80]	; 0x50
								switch(menu_code)
 80016bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d835      	bhi.n	800172e <rtc_task+0x12e>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <rtc_task+0xc8>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016f3 	.word	0x080016f3
 80016d0:	0800170d 	.word	0x0800170d
 80016d4:	08001727 	.word	0x08001727
								{
								case 0:
									curr_state = sRtcTimeConfig;
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <rtc_task+0x2fc>)
 80016da:	2203      	movs	r2, #3
 80016dc:	701a      	strb	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80016de:	4b86      	ldr	r3, [pc, #536]	; (80018f8 <rtc_task+0x2f8>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80016e6:	2300      	movs	r3, #0
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ec:	f003 f924 	bl	8004938 <xQueueGenericSend>
									break;
 80016f0:	e034      	b.n	800175c <rtc_task+0x15c>
								case 1:
									curr_state = sRtcDateConfig;
 80016f2:	4b82      	ldr	r3, [pc, #520]	; (80018fc <rtc_task+0x2fc>)
 80016f4:	2204      	movs	r2, #4
 80016f6:	701a      	strb	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <rtc_task+0x2f8>)
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001700:	2300      	movs	r3, #0
 8001702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001706:	f003 f917 	bl	8004938 <xQueueGenericSend>
									break;
 800170a:	e027      	b.n	800175c <rtc_task+0x15c>
								case 2 :
									curr_state = sRtcReport;
 800170c:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <rtc_task+0x2fc>)
 800170e:	2205      	movs	r2, #5
 8001710:	701a      	strb	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 8001712:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <rtc_task+0x2f8>)
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800171a:	2300      	movs	r3, #0
 800171c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001720:	f003 f90a 	bl	8004938 <xQueueGenericSend>
									break;
 8001724:	e01a      	b.n	800175c <rtc_task+0x15c>
								case 3 :
									curr_state = sMainMenu;
 8001726:	4b75      	ldr	r3, [pc, #468]	; (80018fc <rtc_task+0x2fc>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
									break;
 800172c:	e016      	b.n	800175c <rtc_task+0x15c>
								default:
									curr_state = sMainMenu;
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <rtc_task+0x2fc>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <rtc_task+0x2f8>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800173e:	4970      	ldr	r1, [pc, #448]	; (8001900 <rtc_task+0x300>)
 8001740:	f003 f8fa 	bl	8004938 <xQueueGenericSend>
 8001744:	e173      	b.n	8001a2e <rtc_task+0x42e>
								}

							}else
							{
								curr_state = sMainMenu;
 8001746:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <rtc_task+0x2fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <rtc_task+0x2f8>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001756:	496a      	ldr	r1, [pc, #424]	; (8001900 <rtc_task+0x300>)
 8001758:	f003 f8ee 	bl	8004938 <xQueueGenericSend>
							}
							break;
 800175c:	e167      	b.n	8001a2e <rtc_task+0x42e>

						case sRtcTimeConfig:
						{
							/*get hh, mm, ss infor and configure RTC */
							/*take care of invalid entries */
						switch(rtc_state)
 800175e:	4b69      	ldr	r3, [pc, #420]	; (8001904 <rtc_task+0x304>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d01d      	beq.n	80017a2 <rtc_task+0x1a2>
 8001766:	2b02      	cmp	r3, #2
 8001768:	d035      	beq.n	80017d6 <rtc_task+0x1d6>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d169      	bne.n	8001842 <rtc_task+0x242>
							{
								case HH_CONFIG:
								{
									uint8_t hour = getnumber(cmd->payload , cmd->len);
 800176e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f7ff ff1e 	bl	80015b8 <getnumber>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
									time.Hours = hour;
 8001782:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001786:	733b      	strb	r3, [r7, #12]
									rtc_state = MM_CONFIG;
 8001788:	4b5e      	ldr	r3, [pc, #376]	; (8001904 <rtc_task+0x304>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <rtc_task+0x2f8>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001796:	2300      	movs	r3, #0
 8001798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179c:	f003 f8cc 	bl	8004938 <xQueueGenericSend>
									break;
 80017a0:	e04f      	b.n	8001842 <rtc_task+0x242>
								}
								case MM_CONFIG:
								{
									uint8_t min = getnumber(cmd->payload , cmd->len);
 80017a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f7ff ff04 	bl	80015b8 <getnumber>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
									time.Minutes = min;
 80017b6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80017ba:	737b      	strb	r3, [r7, #13]
									rtc_state = SS_CONFIG;
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <rtc_task+0x304>)
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <rtc_task+0x2f8>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017ca:	2300      	movs	r3, #0
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d0:	f003 f8b2 	bl	8004938 <xQueueGenericSend>
									break;
 80017d4:	e035      	b.n	8001842 <rtc_task+0x242>
								}
								case SS_CONFIG:
								{
									uint8_t sec = getnumber(cmd->payload , cmd->len);
 80017d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f7ff feea 	bl	80015b8 <getnumber>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
									time.Seconds = sec;
 80017ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017ee:	73bb      	strb	r3, [r7, #14]
									if(!validate_rtc_information(&time,NULL))
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fbb0 	bl	8000f5c <validate_rtc_information>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d110      	bne.n	8001824 <rtc_task+0x224>
									{
										rtc_configure_time(&time);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fb80 	bl	8000f0c <rtc_configure_time>
										xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <rtc_task+0x2f8>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001814:	2300      	movs	r3, #0
 8001816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800181a:	f003 f88d 	bl	8004938 <xQueueGenericSend>
										show_time_date();
 800181e:	f7ff fb09 	bl	8000e34 <show_time_date>
 8001822:	e007      	b.n	8001834 <rtc_task+0x234>
									}else
										xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <rtc_task+0x2f8>)
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <rtc_task+0x300>)
 8001830:	f003 f882 	bl	8004938 <xQueueGenericSend>

									curr_state = sMainMenu;
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <rtc_task+0x2fc>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
									rtc_state = 0;
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <rtc_task+0x304>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
									break;
 8001840:	bf00      	nop
								}
							}
							break;
 8001842:	e0f4      	b.n	8001a2e <rtc_task+0x42e>
						case sRtcDateConfig:
						{
							/*get date, month, day , year info and configure RTC */

							/*take care of invalid entries */
							switch(rtc_state)
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <rtc_task+0x304>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	f200 80f0 	bhi.w	8001a2e <rtc_task+0x42e>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <rtc_task+0x254>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	08001899 	.word	0x08001899
 800185c:	0800193d 	.word	0x0800193d
 8001860:	08001909 	.word	0x08001909
								{
									case DATE_CONFIG:
									{
										uint8_t d = getnumber(cmd->payload , cmd->len);
 8001864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f7ff fea3 	bl	80015b8 <getnumber>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
										date.Date = d;
 8001878:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800187c:	72bb      	strb	r3, [r7, #10]
										rtc_state = MONTH_CONFIG;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <rtc_task+0x304>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
										xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <rtc_task+0x2f8>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800188c:	2300      	movs	r3, #0
 800188e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001892:	f003 f851 	bl	8004938 <xQueueGenericSend>
										break;
 8001896:	e087      	b.n	80019a8 <rtc_task+0x3a8>
									}
									case MONTH_CONFIG:
									{
										uint8_t month = getnumber(cmd->payload , cmd->len);
 8001898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fe89 	bl	80015b8 <getnumber>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
										date.Month = month;
 80018ac:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80018b0:	727b      	strb	r3, [r7, #9]
										rtc_state = DAY_CONFIG;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <rtc_task+0x304>)
 80018b4:	2203      	movs	r2, #3
 80018b6:	601a      	str	r2, [r3, #0]
										xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <rtc_task+0x2f8>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018c0:	2300      	movs	r3, #0
 80018c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c6:	f003 f837 	bl	8004938 <xQueueGenericSend>
										break;
 80018ca:	e06d      	b.n	80019a8 <rtc_task+0x3a8>
 80018cc:	080087a8 	.word	0x080087a8
 80018d0:	080087f4 	.word	0x080087f4
 80018d4:	08008898 	.word	0x08008898
 80018d8:	080088ac 	.word	0x080088ac
 80018dc:	080088c4 	.word	0x080088c4
 80018e0:	080088dc 	.word	0x080088dc
 80018e4:	080088f0 	.word	0x080088f0
 80018e8:	08008904 	.word	0x08008904
 80018ec:	0800891c 	.word	0x0800891c
 80018f0:	08008930 	.word	0x08008930
 80018f4:	0800894c 	.word	0x0800894c
 80018f8:	200192a0 	.word	0x200192a0
 80018fc:	200000b0 	.word	0x200000b0
 8001900:	2000001c 	.word	0x2000001c
 8001904:	20000108 	.word	0x20000108
									}
									case DAY_CONFIG:
									{
										uint8_t day = getnumber(cmd->payload , cmd->len);
 8001908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800190a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f7ff fe51 	bl	80015b8 <getnumber>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
										date.WeekDay = day;
 800191c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001920:	723b      	strb	r3, [r7, #8]
										rtc_state = YEAR_CONFIG;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <rtc_task+0x44c>)
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
										xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <rtc_task+0x450>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001930:	2300      	movs	r3, #0
 8001932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001936:	f002 ffff 	bl	8004938 <xQueueGenericSend>
										break;
 800193a:	e035      	b.n	80019a8 <rtc_task+0x3a8>
									}
									case YEAR_CONFIG:
									{
										uint8_t year = getnumber(cmd->payload , cmd->len);
 800193c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800193e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4619      	mov	r1, r3
 8001944:	4610      	mov	r0, r2
 8001946:	f7ff fe37 	bl	80015b8 <getnumber>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
										date.Year = year;
 8001950:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001954:	72fb      	strb	r3, [r7, #11]

										if(!validate_rtc_information(NULL,&date))
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff fafd 	bl	8000f5c <validate_rtc_information>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d110      	bne.n	800198a <rtc_task+0x38a>
										{
											rtc_configure_date(&date);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fae5 	bl	8000f3c <rtc_configure_date>
											xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <rtc_task+0x450>)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800197a:	2300      	movs	r3, #0
 800197c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001980:	f002 ffda 	bl	8004938 <xQueueGenericSend>
											show_time_date();
 8001984:	f7ff fa56 	bl	8000e34 <show_time_date>
 8001988:	e007      	b.n	800199a <rtc_task+0x39a>
										}else
											xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <rtc_task+0x450>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001994:	492f      	ldr	r1, [pc, #188]	; (8001a54 <rtc_task+0x454>)
 8001996:	f002 ffcf 	bl	8004938 <xQueueGenericSend>

										curr_state = sMainMenu;
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <rtc_task+0x458>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
										rtc_state = 0;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <rtc_task+0x44c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
										break;
 80019a6:	bf00      	nop
									}
								}
							break;
 80019a8:	e041      	b.n	8001a2e <rtc_task+0x42e>
						}

						case sRtcReport:
						{
							/*enable or disable RTC current time reporting over ITM printf */
							if(cmd->len == 1)
 80019aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d131      	bne.n	8001a16 <rtc_task+0x416>
							{
								if(cmd->payload[0] == 'y')
 80019b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b79      	cmp	r3, #121	; 0x79
 80019b8:	d115      	bne.n	80019e6 <rtc_task+0x3e6>
								{
									if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <rtc_task+0x45c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 f874 	bl	8006aac <xTimerIsTimerActive>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d12d      	bne.n	8001a26 <rtc_task+0x426>
										xTimerStart(rtc_timer,portMAX_DELAY);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <rtc_task+0x45c>)
 80019cc:	681c      	ldr	r4, [r3, #0]
 80019ce:	f003 fea7 	bl	8005720 <xTaskGetTickCount>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2300      	movs	r3, #0
 80019dc:	2101      	movs	r1, #1
 80019de:	4620      	mov	r0, r4
 80019e0:	f004 fd88 	bl	80064f4 <xTimerGenericCommand>
 80019e4:	e01f      	b.n	8001a26 <rtc_task+0x426>
								}else if (cmd->payload[0] == 'n')
 80019e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b6e      	cmp	r3, #110	; 0x6e
 80019ec:	d10a      	bne.n	8001a04 <rtc_task+0x404>
								{
									xTimerStop(rtc_timer,portMAX_DELAY);
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <rtc_task+0x45c>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2300      	movs	r3, #0
 80019fa:	2200      	movs	r2, #0
 80019fc:	2103      	movs	r1, #3
 80019fe:	f004 fd79 	bl	80064f4 <xTimerGenericCommand>
 8001a02:	e010      	b.n	8001a26 <rtc_task+0x426>
								}else
								{
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <rtc_task+0x450>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <rtc_task+0x454>)
 8001a10:	f002 ff92 	bl	8004938 <xQueueGenericSend>
 8001a14:	e007      	b.n	8001a26 <rtc_task+0x426>
								}

							}else
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <rtc_task+0x450>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <rtc_task+0x454>)
 8001a22:	f002 ff89 	bl	8004938 <xQueueGenericSend>

							curr_state = sMainMenu;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <rtc_task+0x458>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
							break;
 8001a2c:	bf00      	nop
				while(curr_state != sMainMenu){
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <rtc_task+0x458>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae1c 	bne.w	8001670 <rtc_task+0x70>
					}// switch end

				} //while end

				   /*TODO : Notify menu task */
					xTaskNotify(handle_menu_task,0,eNoAction);
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <rtc_task+0x460>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	f004 fa87 	bl	8005f58 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001a4a:	e5f3      	b.n	8001634 <rtc_task+0x34>
 8001a4c:	20000108 	.word	0x20000108
 8001a50:	200192a0 	.word	0x200192a0
 8001a54:	2000001c 	.word	0x2000001c
 8001a58:	200000b0 	.word	0x200000b0
 8001a5c:	2001928c 	.word	0x2001928c
 8001a60:	2001929c 	.word	0x2001929c

08001a64 <print_task>:
	}



void print_task(void *param)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <print_task+0x38>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f107 010c 	add.w	r1, r7, #12
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 f8fd 	bl	8004c78 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001a7e:	68fc      	ldr	r4, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fbb6 	bl	80001f4 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a90:	4621      	mov	r1, r4
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <print_task+0x3c>)
 8001a94:	f001 fec9 	bl	800382a <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001a98:	e7e8      	b.n	8001a6c <print_task+0x8>
 8001a9a:	bf00      	nop
 8001a9c:	200192a0 	.word	0x200192a0
 8001aa0:	200192d0 	.word	0x200192d0

08001aa4 <cmd_handler_task>:
	}

}

void cmd_handler_task(void *param)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		//TODO: Implement notify wait
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f004 f9cf 	bl	8005e5c <xTaskGenericNotifyWait>
 8001abe:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d1f2      	bne.n	8001aac <cmd_handler_task+0x8>
		{
			//process the user data(command) stored in input data queue
			process_command(&cmd);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f802 	bl	8001ad4 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ad0:	e7ec      	b.n	8001aac <cmd_handler_task+0x8>
	...

08001ad4 <process_command>:
	}

}

void process_command(command_t *cmd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f83d 	bl	8001b5c <extract_command>

	switch(curr_state)
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <process_command+0x78>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d82c      	bhi.n	8001b44 <process_command+0x70>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <process_command+0x1c>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b09 	.word	0x08001b09
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b31 	.word	0x08001b31
 8001afc:	08001b31 	.word	0x08001b31
 8001b00:	08001b31 	.word	0x08001b31
 8001b04:	08001b31 	.word	0x08001b31
	{
	case sMainMenu:
		//Notify menu task with the command
		xTaskNotify(handle_menu_task, (uint32_t)cmd,eSetValueWithOverwrite);
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <process_command+0x7c>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2303      	movs	r3, #3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f004 fa1f 	bl	8005f58 <xTaskGenericNotify>
	break;
 8001b1a:	e013      	b.n	8001b44 <process_command+0x70>

	case sLedEffect:
		//Notify LED task with the command
		xTaskNotify(handle_led_task, (uint32_t)cmd,eSetValueWithOverwrite);
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <process_command+0x80>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	2300      	movs	r3, #0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2303      	movs	r3, #3
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f004 fa15 	bl	8005f58 <xTaskGenericNotify>
	break;
 8001b2e:	e009      	b.n	8001b44 <process_command+0x70>

	case sRtcMenu:
	case sRtcTimeConfig:
	case sRtcDateConfig:
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd,eSetValueWithOverwrite);
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <process_command+0x84>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f004 fa0b 	bl	8005f58 <xTaskGenericNotify>
	break;
 8001b42:	bf00      	nop


	}
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200000b0 	.word	0x200000b0
 8001b50:	2001929c 	.word	0x2001929c
 8001b54:	200192c8 	.word	0x200192c8
 8001b58:	20019290 	.word	0x20019290

08001b5c <extract_command>:

int extract_command(command_t *cmd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <extract_command+0x70>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f9ec 	bl	8004f46 <uxQueueMessagesWaiting>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]
	if(!status)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <extract_command+0x22>
	return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7c:	e022      	b.n	8001bc4 <extract_command+0x68>

	uint8_t i = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0);
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <extract_command+0x70>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f107 010f 	add.w	r1, r7, #15
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 f873 	bl	8004c78 <xQueueReceive>
 8001b92:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d106      	bne.n	8001ba8 <extract_command+0x4c>
			cmd->payload[i++] = item;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	75fa      	strb	r2, [r7, #23]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	7bf9      	ldrb	r1, [r7, #15]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d1e9      	bne.n	8001b82 <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]

	return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20019298 	.word	0x20019298

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bd6:	e003      	b.n	8001be0 <LoopCopyDataInit>

08001bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bde:	3104      	adds	r1, #4

08001be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be8:	d3f6      	bcc.n	8001bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bec:	e002      	b.n	8001bf4 <LoopFillZerobss>

08001bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bf0:	f842 3b04 	str.w	r3, [r2], #4

08001bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf8:	d3f9      	bcc.n	8001bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff fbc3 	bl	8001384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f005 fbdf 	bl	80073c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7fe fdcd 	bl	80007a0 <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c0c:	08008a48 	.word	0x08008a48
  ldr  r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c14:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001c18:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001c1c:	20019398 	.word	0x20019398

08001c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 f8d8 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fa42 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff f9b2 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000024 	.word	0x20000024
 8001c8c:	20019350 	.word	0x20019350

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20019350 	.word	0x20019350

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2a:	f7ff ff61 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff ffb1 	bl	8001d9c <NVIC_EncodePriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff54 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00c      	b.n	8001ea4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e159      	b.n	8002180 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8148 	bne.w	800217a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d00b      	beq.n	8001f0a <HAL_GPIO_Init+0x5a>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001efe:	2b11      	cmp	r3, #17
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0xfc>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b12      	cmp	r3, #18
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a2 	beq.w	800217a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b56      	ldr	r3, [pc, #344]	; (8002194 <HAL_GPIO_Init+0x2e4>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a55      	ldr	r2, [pc, #340]	; (8002194 <HAL_GPIO_Init+0x2e4>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_GPIO_Init+0x2e4>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a48      	ldr	r2, [pc, #288]	; (800219c <HAL_GPIO_Init+0x2ec>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x202>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a47      	ldr	r2, [pc, #284]	; (80021a0 <HAL_GPIO_Init+0x2f0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x1fe>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <HAL_GPIO_Init+0x2f4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x1fa>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_GPIO_Init+0x2f8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x1f6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a44      	ldr	r2, [pc, #272]	; (80021ac <HAL_GPIO_Init+0x2fc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x1f2>
 800209e:	2304      	movs	r3, #4
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <HAL_GPIO_Init+0x300>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f6:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <HAL_GPIO_Init+0x300>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020fc:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_GPIO_Init+0x300>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002120:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <HAL_GPIO_Init+0x300>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_GPIO_Init+0x300>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_GPIO_Init+0x300>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_GPIO_Init+0x300>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_GPIO_Init+0x300>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f aea2 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e25b      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d075      	beq.n	80022f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002206:	4ba3      	ldr	r3, [pc, #652]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00c      	beq.n	800222c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4ba0      	ldr	r3, [pc, #640]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221a:	2b08      	cmp	r3, #8
 800221c:	d112      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b9d      	ldr	r3, [pc, #628]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b99      	ldr	r3, [pc, #612]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d157      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e236      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b91      	ldr	r3, [pc, #580]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a90      	ldr	r2, [pc, #576]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a8a      	ldr	r2, [pc, #552]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a87      	ldr	r2, [pc, #540]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 8002280:	4b84      	ldr	r3, [pc, #528]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a83      	ldr	r2, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b81      	ldr	r3, [pc, #516]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a80      	ldr	r2, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fcf6 	bl	8001c90 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fcf2 	bl	8001c90 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1fb      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fce2 	bl	8001c90 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fcde 	bl	8001c90 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1e7      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b62      	ldr	r3, [pc, #392]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1bb      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4952      	ldr	r1, [pc, #328]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x2b0>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7ff fc97 	bl	8001c90 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff fc93 	bl	8001c90 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e19c      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4940      	ldr	r1, [pc, #256]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_RCC_OscConfig+0x2b0>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc76 	bl	8001c90 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc72 	bl	8001c90 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e17b      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x2b4>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7ff fc56 	bl	8001c90 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc52 	bl	8001c90 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e15b      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x200>
 8002406:	e015      	b.n	8002434 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x2b4>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff fc3f 	bl	8001c90 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002416:	f7ff fc3b 	bl	8001c90 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e144      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a0 	beq.w	8002582 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_OscConfig+0x2b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d121      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x2b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_RCC_OscConfig+0x2b8>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff fc01 	bl	8001c90 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e011      	b.n	80024b6 <HAL_RCC_OscConfig+0x2ce>
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	42470000 	.word	0x42470000
 800249c:	42470e80 	.word	0x42470e80
 80024a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7ff fbf4 	bl	8001c90 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0fd      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b81      	ldr	r3, [pc, #516]	; (80026bc <HAL_RCC_OscConfig+0x4d4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2f0>
 80024ca:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x32a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x312>
 80024e0:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a76      	ldr	r2, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	4b74      	ldr	r3, [pc, #464]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a73      	ldr	r2, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x32a>
 80024fa:	4b71      	ldr	r3, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b6e      	ldr	r3, [pc, #440]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a6d      	ldr	r2, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7ff fbb9 	bl	8001c90 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff fbb5 	bl	8001c90 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0bc      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x33a>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fba3 	bl	8001c90 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fb9f 	bl	8001c90 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0a6      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8092 	beq.w	80026b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d05c      	beq.n	8002652 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d141      	bne.n	8002624 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <HAL_RCC_OscConfig+0x4dc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb73 	bl	8001c90 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fb6f 	bl	8001c90 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e078      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	3b01      	subs	r3, #1
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	4933      	ldr	r1, [pc, #204]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fb48 	bl	8001c90 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff fb44 	bl	8001c90 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04d      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x41c>
 8002622:	e045      	b.n	80026b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x4dc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fb31 	bl	8001c90 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fb2d 	bl	8001c90 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e036      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x44a>
 8002650:	e02e      	b.n	80026b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e029      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	429a      	cmp	r2, r3
 8002670:	d11c      	bne.n	80026ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d115      	bne.n	80026ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268c:	4293      	cmp	r3, r2
 800268e:	d10d      	bne.n	80026ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40007000 	.word	0x40007000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470060 	.word	0x42470060

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7ff fa6a 	bl	8001c90 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7ff fa66 	bl	8001c90 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4601      	mov	r1, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	fa21 f303 	lsr.w	r3, r1, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc34 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08008988 	.word	0x08008988
 800288c:	20000018 	.word	0x20000018
 8002890:	20000020 	.word	0x20000020

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028aa:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d007      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x32>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d008      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x38>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80b4 	bne.w	8002a28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028c2:	60bb      	str	r3, [r7, #8]
       break;
 80028c4:	e0b3      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c6:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028c8:	60bb      	str	r3, [r7, #8]
      break;
 80028ca:	e0b0      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d04a      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	ea03 0501 	and.w	r5, r3, r1
 80028f8:	ea04 0602 	and.w	r6, r4, r2
 80028fc:	4629      	mov	r1, r5
 80028fe:	4632      	mov	r2, r6
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	0154      	lsls	r4, r2, #5
 800290a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800290e:	014b      	lsls	r3, r1, #5
 8002910:	4619      	mov	r1, r3
 8002912:	4622      	mov	r2, r4
 8002914:	1b49      	subs	r1, r1, r5
 8002916:	eb62 0206 	sbc.w	r2, r2, r6
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	0194      	lsls	r4, r2, #6
 8002924:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002928:	018b      	lsls	r3, r1, #6
 800292a:	1a5b      	subs	r3, r3, r1
 800292c:	eb64 0402 	sbc.w	r4, r4, r2
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	00e2      	lsls	r2, r4, #3
 800293a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800293e:	00d9      	lsls	r1, r3, #3
 8002940:	460b      	mov	r3, r1
 8002942:	4614      	mov	r4, r2
 8002944:	195b      	adds	r3, r3, r5
 8002946:	eb44 0406 	adc.w	r4, r4, r6
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	0262      	lsls	r2, r4, #9
 8002954:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002958:	0259      	lsls	r1, r3, #9
 800295a:	460b      	mov	r3, r1
 800295c:	4614      	mov	r4, r2
 800295e:	4618      	mov	r0, r3
 8002960:	4621      	mov	r1, r4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	461a      	mov	r2, r3
 800296a:	4623      	mov	r3, r4
 800296c:	f7fd fca0 	bl	80002b0 <__aeabi_uldivmod>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e049      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	ea03 0501 	and.w	r5, r3, r1
 800298e:	ea04 0602 	and.w	r6, r4, r2
 8002992:	4629      	mov	r1, r5
 8002994:	4632      	mov	r2, r6
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	0154      	lsls	r4, r2, #5
 80029a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029a4:	014b      	lsls	r3, r1, #5
 80029a6:	4619      	mov	r1, r3
 80029a8:	4622      	mov	r2, r4
 80029aa:	1b49      	subs	r1, r1, r5
 80029ac:	eb62 0206 	sbc.w	r2, r2, r6
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f04f 0400 	mov.w	r4, #0
 80029b8:	0194      	lsls	r4, r2, #6
 80029ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	1a5b      	subs	r3, r3, r1
 80029c2:	eb64 0402 	sbc.w	r4, r4, r2
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	00e2      	lsls	r2, r4, #3
 80029d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029d4:	00d9      	lsls	r1, r3, #3
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	195b      	adds	r3, r3, r5
 80029dc:	eb44 0406 	adc.w	r4, r4, r6
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	02a2      	lsls	r2, r4, #10
 80029ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ee:	0299      	lsls	r1, r3, #10
 80029f0:	460b      	mov	r3, r1
 80029f2:	4614      	mov	r4, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	461a      	mov	r2, r3
 8002a00:	4623      	mov	r3, r4
 8002a02:	f7fd fc55 	bl	80002b0 <__aeabi_uldivmod>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	60bb      	str	r3, [r7, #8]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a2a:	60bb      	str	r3, [r7, #8]
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000018 	.word	0x20000018

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a60:	f7ff fff0 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a64:	4601      	mov	r1, r0
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08008998 	.word	0x08008998

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a88:	f7ff ffdc 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0b5b      	lsrs	r3, r3, #13
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08008998 	.word	0x08008998

08002aac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	220f      	movs	r2, #15
 8002aba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_RCC_GetClockConfig+0x5c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	08db      	lsrs	r3, r3, #3
 8002ae6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_RCC_GetClockConfig+0x60>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d038      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff f8a7 	bl	8001c90 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b46:	f7ff f8a3 	bl	8001c90 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0bd      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	495a      	ldr	r1, [pc, #360]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b84:	f7ff f884 	bl	8001c90 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b8c:	f7ff f880 	bl	8001c90 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e09a      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8083 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc8:	4b45      	ldr	r3, [pc, #276]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a42      	ldr	r2, [pc, #264]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be0:	f7ff f856 	bl	8001c90 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff f852 	bl	8001c90 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e06c      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d02f      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d028      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c34:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c3a:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f820 	bl	8001c90 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7ff f81c 	bl	8001c90 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e034      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c82:	d10d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	4911      	ldr	r1, [pc, #68]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
 8002c9e:	e005      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7d1a      	ldrb	r2, [r3, #20]
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	42470068 	.word	0x42470068
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42470e40 	.word	0x42470e40
 8002cec:	424711e0 	.word	0x424711e0

08002cf0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e083      	b.n	8002e0a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7f5b      	ldrb	r3, [r3, #29]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe f97c 	bl	8001010 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	22ca      	movs	r2, #202	; 0xca
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2253      	movs	r2, #83	; 0x53
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 faa8 	bl	8003284 <RTC_EnterInitMode>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e05e      	b.n	8002e0a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d2      	ldr	r2, [r2, #12]
 8002d86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002daa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10e      	bne.n	8002dd8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa3a 	bl	8003234 <HAL_RTC_WaitForSynchro>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e018      	b.n	8002e0a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e12:	b590      	push	{r4, r7, lr}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	7f1b      	ldrb	r3, [r3, #28]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_RTC_SetTime+0x1c>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0aa      	b.n	8002f84 <HAL_RTC_SetTime+0x172>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d126      	bne.n	8002e8e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fa3f 	bl	80032dc <RTC_ByteToBcd2>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fa38 	bl	80032dc <RTC_ByteToBcd2>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e70:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	789b      	ldrb	r3, [r3, #2]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fa30 	bl	80032dc <RTC_ByteToBcd2>
 8002e7c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e7e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	78db      	ldrb	r3, [r3, #3]
 8002e86:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e018      	b.n	8002ec0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002eae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002eb4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	78db      	ldrb	r3, [r3, #3]
 8002eba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	22ca      	movs	r2, #202	; 0xca
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2253      	movs	r2, #83	; 0x53
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f9d7 	bl	8003284 <RTC_EnterInitMode>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e047      	b.n	8002f84 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002efe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d111      	bne.n	8002f6e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f972 	bl	8003234 <HAL_RTC_WaitForSynchro>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	22ff      	movs	r2, #255	; 0xff
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2204      	movs	r2, #4
 8002f62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00a      	b.n	8002f84 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002f82:	2300      	movs	r3, #0
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd90      	pop	{r4, r7, pc}

08002f8c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11a      	bne.n	800303e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f983 	bl	8003318 <RTC_Bcd2ToByte>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f97a 	bl	8003318 <RTC_Bcd2ToByte>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f971 	bl	8003318 <RTC_Bcd2ToByte>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_RTC_SetDate+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e094      	b.n	800318e <HAL_RTC_SetDate+0x146>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2202      	movs	r2, #2
 800306e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_RTC_SetDate+0x4c>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	f023 0310 	bic.w	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
 800308c:	330a      	adds	r3, #10
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11c      	bne.n	80030d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f91c 	bl	80032dc <RTC_ByteToBcd2>
 80030a4:	4603      	mov	r3, r0
 80030a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f915 	bl	80032dc <RTC_ByteToBcd2>
 80030b2:	4603      	mov	r3, r0
 80030b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f90d 	bl	80032dc <RTC_ByteToBcd2>
 80030c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e00e      	b.n	80030f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	78db      	ldrb	r3, [r3, #3]
 80030d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80030e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	22ca      	movs	r2, #202	; 0xca
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2253      	movs	r2, #83	; 0x53
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8be 	bl	8003284 <RTC_EnterInitMode>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	22ff      	movs	r2, #255	; 0xff
 8003114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2204      	movs	r2, #4
 800311a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e033      	b.n	800318e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003130:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003134:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003144:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d111      	bne.n	8003178 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f86d 	bl	8003234 <HAL_RTC_WaitForSynchro>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2204      	movs	r2, #4
 800316c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00a      	b.n	800318e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}

08003196 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	0b5b      	lsrs	r3, r3, #13
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11a      	bne.n	800322a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	78db      	ldrb	r3, [r3, #3]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f88d 	bl	8003318 <RTC_Bcd2ToByte>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f884 	bl	8003318 <RTC_Bcd2ToByte>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	789b      	ldrb	r3, [r3, #2]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f87b 	bl	8003318 <RTC_Bcd2ToByte>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003250:	f7fe fd1e 	bl	8001c90 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003256:	e009      	b.n	800326c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003258:	f7fe fd1a 	bl	8001c90 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003266:	d901      	bls.n	800326c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e007      	b.n	800327c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ee      	beq.n	8003258 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fcf2 	bl	8001c90 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032ae:	e009      	b.n	80032c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032b0:	f7fe fcee 	bl	8001c90 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032be:	d901      	bls.n	80032c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e007      	b.n	80032d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ee      	beq.n	80032b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80032ea:	e005      	b.n	80032f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	3b0a      	subs	r3, #10
 80032f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	2b09      	cmp	r3, #9
 80032fc:	d8f6      	bhi.n	80032ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	b2da      	uxtb	r2, r3
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	4313      	orrs	r3, r2
 800330a:	b2db      	uxtb	r3, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4413      	add	r3, r2
 8003346:	b2db      	uxtb	r3, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e01d      	b.n	80033a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f815 	bl	80033aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f000 f968 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d122      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0202 	mvn.w	r2, #2
 8003432:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f8ee 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 800344e:	e005      	b.n	800345c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8e0 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8f1 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d122      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d11b      	bne.n	80034b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0204 	mvn.w	r2, #4
 8003486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8c4 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80034a2:	e005      	b.n	80034b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8b6 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8c7 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d122      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0208 	mvn.w	r2, #8
 80034da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f89a 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80034f6:	e005      	b.n	8003504 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f88c 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f89d 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0210 	mvn.w	r2, #16
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2208      	movs	r2, #8
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f870 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f862 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f873 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10e      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0201 	mvn.w	r2, #1
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd fbf3 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d10e      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8e3 	bl	800377c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d10e      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f838 	bl	8003652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d10e      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d107      	bne.n	800360e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0220 	mvn.w	r2, #32
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8ad 	bl	8003768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a34      	ldr	r2, [pc, #208]	; (800374c <TIM_Base_SetConfig+0xe4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a31      	ldr	r2, [pc, #196]	; (8003750 <TIM_Base_SetConfig+0xe8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a30      	ldr	r2, [pc, #192]	; (8003754 <TIM_Base_SetConfig+0xec>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <TIM_Base_SetConfig+0xf0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a25      	ldr	r2, [pc, #148]	; (800374c <TIM_Base_SetConfig+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d017      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <TIM_Base_SetConfig+0xe8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <TIM_Base_SetConfig+0xec>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00f      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a20      	ldr	r2, [pc, #128]	; (8003758 <TIM_Base_SetConfig+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1f      	ldr	r2, [pc, #124]	; (800375c <TIM_Base_SetConfig+0xf4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <TIM_Base_SetConfig+0xf8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <TIM_Base_SetConfig+0xfc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d108      	bne.n	8003704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <TIM_Base_SetConfig+0xe4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d103      	bne.n	8003738 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	615a      	str	r2, [r3, #20]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e03f      	b.n	8003822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fc40 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb97 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b088      	sub	sp, #32
 800382e:	af02      	add	r7, sp, #8
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	f040 8083 	bne.w	8003952 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Transmit+0x2e>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e07b      	b.n	8003954 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_UART_Transmit+0x40>
 8003866:	2302      	movs	r3, #2
 8003868:	e074      	b.n	8003954 <HAL_UART_Transmit+0x12a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003880:	f7fe fa06 	bl	8001c90 <HAL_GetTick>
 8003884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800389a:	e042      	b.n	8003922 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d122      	bne.n	80038fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2200      	movs	r2, #0
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f9b6 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e042      	b.n	8003954 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3302      	adds	r3, #2
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	e017      	b.n	8003922 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	e013      	b.n	8003922 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f993 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e01f      	b.n	8003954 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	60ba      	str	r2, [r7, #8]
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1b7      	bne.n	800389c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	2140      	movs	r1, #64	; 0x40
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f97a 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e006      	b.n	8003954 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d140      	bne.n	80039f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_UART_Receive_IT+0x26>
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e039      	b.n	80039fa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_UART_Receive_IT+0x38>
 8003990:	2302      	movs	r3, #2
 8003992:	e032      	b.n	80039fa <HAL_UART_Receive_IT+0x9e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2222      	movs	r2, #34	; 0x22
 80039b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0220 	orr.w	r2, r2, #32
 80039f2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_UART_IRQHandler+0x52>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9d6 	bl	8003e04 <UART_Receive_IT>
      return;
 8003a58:	e0d1      	b.n	8003bfe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80b0 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x1ba>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_UART_IRQHandler+0x70>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80a5 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_UART_IRQHandler+0x90>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xb0>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	f043 0202 	orr.w	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_UART_IRQHandler+0xd0>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00f      	beq.n	8003b02 <HAL_UART_IRQHandler+0xfa>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_UART_IRQHandler+0xee>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d078      	beq.n	8003bfc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_UART_IRQHandler+0x11c>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f970 	bl	8003e04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	bf0c      	ite	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	2300      	movne	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_UART_IRQHandler+0x144>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d031      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8b9 	bl	8003cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d123      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <HAL_UART_IRQHandler+0x1fc>)
 8003b7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe f971 	bl	8001e6c <HAL_DMA_Abort_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d016      	beq.n	8003bbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9e:	e00e      	b.n	8003bbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f83b 	bl	8003c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba6:	e00a      	b.n	8003bbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f837 	bl	8003c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bae:	e006      	b.n	8003bbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f833 	bl	8003c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bbc:	e01e      	b.n	8003bfc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbe:	bf00      	nop
    return;
 8003bc0:	e01c      	b.n	8003bfc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_UART_IRQHandler+0x1d6>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8a6 	bl	8003d28 <UART_Transmit_IT>
    return;
 8003bdc:	e00f      	b.n	8003bfe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1f6>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8ee 	bl	8003dd4 <UART_EndTransmit_IT>
    return;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_IRQHandler+0x1f6>
    return;
 8003bfc:	bf00      	nop
  }
}
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	08003d01 	.word	0x08003d01

08003c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	e02c      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c48:	d028      	beq.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c50:	f7fe f81e 	bl	8001c90 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d21d      	bcs.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00f      	b.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d0c3      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ff7e 	bl	8003c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d144      	bne.n	8003dc6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d11a      	bne.n	8003d7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]
 8003d6e:	e00e      	b.n	8003d8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	621a      	str	r2, [r3, #32]
 8003d7a:	e008      	b.n	8003d8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	1c59      	adds	r1, r3, #1
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6211      	str	r1, [r2, #32]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff07 	bl	8003c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b22      	cmp	r3, #34	; 0x22
 8003e16:	d171      	bne.n	8003efc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d123      	bne.n	8003e6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10e      	bne.n	8003e4e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e4c:	e029      	b.n	8003ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e01b      	b.n	8003ea2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6858      	ldr	r0, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	1c59      	adds	r1, r3, #1
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6291      	str	r1, [r2, #40]	; 0x28
 8003e82:	b2c2      	uxtb	r2, r0
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e00c      	b.n	8003ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	1c58      	adds	r0, r3, #1
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	6288      	str	r0, [r1, #40]	; 0x28
 8003e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d120      	bne.n	8003ef8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0220 	bic.w	r2, r2, #32
 8003ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fc fef4 	bl	8000cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e002      	b.n	8003efe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f4a:	f023 030c 	bic.w	r3, r3, #12
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f76:	f040 818b 	bne.w	8004290 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4ac1      	ldr	r2, [pc, #772]	; (8004284 <UART_SetConfig+0x37c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d005      	beq.n	8003f90 <UART_SetConfig+0x88>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4abf      	ldr	r2, [pc, #764]	; (8004288 <UART_SetConfig+0x380>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f040 80bd 	bne.w	800410a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fd78 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8003f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	461d      	mov	r5, r3
 8003f9a:	f04f 0600 	mov.w	r6, #0
 8003f9e:	46a8      	mov	r8, r5
 8003fa0:	46b1      	mov	r9, r6
 8003fa2:	eb18 0308 	adds.w	r3, r8, r8
 8003fa6:	eb49 0409 	adc.w	r4, r9, r9
 8003faa:	4698      	mov	r8, r3
 8003fac:	46a1      	mov	r9, r4
 8003fae:	eb18 0805 	adds.w	r8, r8, r5
 8003fb2:	eb49 0906 	adc.w	r9, r9, r6
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fca:	4688      	mov	r8, r1
 8003fcc:	4691      	mov	r9, r2
 8003fce:	eb18 0005 	adds.w	r0, r8, r5
 8003fd2:	eb49 0106 	adc.w	r1, r9, r6
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	461d      	mov	r5, r3
 8003fdc:	f04f 0600 	mov.w	r6, #0
 8003fe0:	196b      	adds	r3, r5, r5
 8003fe2:	eb46 0406 	adc.w	r4, r6, r6
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	f7fc f961 	bl	80002b0 <__aeabi_uldivmod>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4ba5      	ldr	r3, [pc, #660]	; (800428c <UART_SetConfig+0x384>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	461d      	mov	r5, r3
 8004004:	f04f 0600 	mov.w	r6, #0
 8004008:	46a9      	mov	r9, r5
 800400a:	46b2      	mov	sl, r6
 800400c:	eb19 0309 	adds.w	r3, r9, r9
 8004010:	eb4a 040a 	adc.w	r4, sl, sl
 8004014:	4699      	mov	r9, r3
 8004016:	46a2      	mov	sl, r4
 8004018:	eb19 0905 	adds.w	r9, r9, r5
 800401c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004034:	4689      	mov	r9, r1
 8004036:	4692      	mov	sl, r2
 8004038:	eb19 0005 	adds.w	r0, r9, r5
 800403c:	eb4a 0106 	adc.w	r1, sl, r6
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	461d      	mov	r5, r3
 8004046:	f04f 0600 	mov.w	r6, #0
 800404a:	196b      	adds	r3, r5, r5
 800404c:	eb46 0406 	adc.w	r4, r6, r6
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	f7fc f92c 	bl	80002b0 <__aeabi_uldivmod>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
 800405c:	461a      	mov	r2, r3
 800405e:	4b8b      	ldr	r3, [pc, #556]	; (800428c <UART_SetConfig+0x384>)
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	2164      	movs	r1, #100	; 0x64
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	3332      	adds	r3, #50	; 0x32
 8004072:	4a86      	ldr	r2, [pc, #536]	; (800428c <UART_SetConfig+0x384>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004080:	4498      	add	r8, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	461d      	mov	r5, r3
 8004086:	f04f 0600 	mov.w	r6, #0
 800408a:	46a9      	mov	r9, r5
 800408c:	46b2      	mov	sl, r6
 800408e:	eb19 0309 	adds.w	r3, r9, r9
 8004092:	eb4a 040a 	adc.w	r4, sl, sl
 8004096:	4699      	mov	r9, r3
 8004098:	46a2      	mov	sl, r4
 800409a:	eb19 0905 	adds.w	r9, r9, r5
 800409e:	eb4a 0a06 	adc.w	sl, sl, r6
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040b6:	4689      	mov	r9, r1
 80040b8:	4692      	mov	sl, r2
 80040ba:	eb19 0005 	adds.w	r0, r9, r5
 80040be:	eb4a 0106 	adc.w	r1, sl, r6
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	461d      	mov	r5, r3
 80040c8:	f04f 0600 	mov.w	r6, #0
 80040cc:	196b      	adds	r3, r5, r5
 80040ce:	eb46 0406 	adc.w	r4, r6, r6
 80040d2:	461a      	mov	r2, r3
 80040d4:	4623      	mov	r3, r4
 80040d6:	f7fc f8eb 	bl	80002b0 <__aeabi_uldivmod>
 80040da:	4603      	mov	r3, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	461a      	mov	r2, r3
 80040e0:	4b6a      	ldr	r3, [pc, #424]	; (800428c <UART_SetConfig+0x384>)
 80040e2:	fba3 1302 	umull	r1, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2164      	movs	r1, #100	; 0x64
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	3332      	adds	r3, #50	; 0x32
 80040f4:	4a65      	ldr	r2, [pc, #404]	; (800428c <UART_SetConfig+0x384>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	f003 0207 	and.w	r2, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4442      	add	r2, r8
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	e26f      	b.n	80045ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800410a:	f7fe fca7 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 800410e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	461d      	mov	r5, r3
 8004114:	f04f 0600 	mov.w	r6, #0
 8004118:	46a8      	mov	r8, r5
 800411a:	46b1      	mov	r9, r6
 800411c:	eb18 0308 	adds.w	r3, r8, r8
 8004120:	eb49 0409 	adc.w	r4, r9, r9
 8004124:	4698      	mov	r8, r3
 8004126:	46a1      	mov	r9, r4
 8004128:	eb18 0805 	adds.w	r8, r8, r5
 800412c:	eb49 0906 	adc.w	r9, r9, r6
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800413c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004140:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004144:	4688      	mov	r8, r1
 8004146:	4691      	mov	r9, r2
 8004148:	eb18 0005 	adds.w	r0, r8, r5
 800414c:	eb49 0106 	adc.w	r1, r9, r6
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	461d      	mov	r5, r3
 8004156:	f04f 0600 	mov.w	r6, #0
 800415a:	196b      	adds	r3, r5, r5
 800415c:	eb46 0406 	adc.w	r4, r6, r6
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f8a4 	bl	80002b0 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	461a      	mov	r2, r3
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <UART_SetConfig+0x384>)
 8004170:	fba3 2302 	umull	r2, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	461d      	mov	r5, r3
 800417e:	f04f 0600 	mov.w	r6, #0
 8004182:	46a9      	mov	r9, r5
 8004184:	46b2      	mov	sl, r6
 8004186:	eb19 0309 	adds.w	r3, r9, r9
 800418a:	eb4a 040a 	adc.w	r4, sl, sl
 800418e:	4699      	mov	r9, r3
 8004190:	46a2      	mov	sl, r4
 8004192:	eb19 0905 	adds.w	r9, r9, r5
 8004196:	eb4a 0a06 	adc.w	sl, sl, r6
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ae:	4689      	mov	r9, r1
 80041b0:	4692      	mov	sl, r2
 80041b2:	eb19 0005 	adds.w	r0, r9, r5
 80041b6:	eb4a 0106 	adc.w	r1, sl, r6
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	461d      	mov	r5, r3
 80041c0:	f04f 0600 	mov.w	r6, #0
 80041c4:	196b      	adds	r3, r5, r5
 80041c6:	eb46 0406 	adc.w	r4, r6, r6
 80041ca:	461a      	mov	r2, r3
 80041cc:	4623      	mov	r3, r4
 80041ce:	f7fc f86f 	bl	80002b0 <__aeabi_uldivmod>
 80041d2:	4603      	mov	r3, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <UART_SetConfig+0x384>)
 80041da:	fba3 1302 	umull	r1, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2164      	movs	r1, #100	; 0x64
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <UART_SetConfig+0x384>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041fa:	4498      	add	r8, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	461d      	mov	r5, r3
 8004200:	f04f 0600 	mov.w	r6, #0
 8004204:	46a9      	mov	r9, r5
 8004206:	46b2      	mov	sl, r6
 8004208:	eb19 0309 	adds.w	r3, r9, r9
 800420c:	eb4a 040a 	adc.w	r4, sl, sl
 8004210:	4699      	mov	r9, r3
 8004212:	46a2      	mov	sl, r4
 8004214:	eb19 0905 	adds.w	r9, r9, r5
 8004218:	eb4a 0a06 	adc.w	sl, sl, r6
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800422c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004230:	4689      	mov	r9, r1
 8004232:	4692      	mov	sl, r2
 8004234:	eb19 0005 	adds.w	r0, r9, r5
 8004238:	eb4a 0106 	adc.w	r1, sl, r6
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	461d      	mov	r5, r3
 8004242:	f04f 0600 	mov.w	r6, #0
 8004246:	196b      	adds	r3, r5, r5
 8004248:	eb46 0406 	adc.w	r4, r6, r6
 800424c:	461a      	mov	r2, r3
 800424e:	4623      	mov	r3, r4
 8004250:	f7fc f82e 	bl	80002b0 <__aeabi_uldivmod>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	461a      	mov	r2, r3
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <UART_SetConfig+0x384>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	; 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	3332      	adds	r3, #50	; 0x32
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <UART_SetConfig+0x384>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 0207 	and.w	r2, r3, #7
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4442      	add	r2, r8
 8004280:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004282:	e1b2      	b.n	80045ea <UART_SetConfig+0x6e2>
 8004284:	40011000 	.word	0x40011000
 8004288:	40011400 	.word	0x40011400
 800428c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4ad7      	ldr	r2, [pc, #860]	; (80045f4 <UART_SetConfig+0x6ec>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d005      	beq.n	80042a6 <UART_SetConfig+0x39e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4ad6      	ldr	r2, [pc, #856]	; (80045f8 <UART_SetConfig+0x6f0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	f040 80d1 	bne.w	8004448 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a6:	f7fe fbed 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 80042aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	469a      	mov	sl, r3
 80042b0:	f04f 0b00 	mov.w	fp, #0
 80042b4:	46d0      	mov	r8, sl
 80042b6:	46d9      	mov	r9, fp
 80042b8:	eb18 0308 	adds.w	r3, r8, r8
 80042bc:	eb49 0409 	adc.w	r4, r9, r9
 80042c0:	4698      	mov	r8, r3
 80042c2:	46a1      	mov	r9, r4
 80042c4:	eb18 080a 	adds.w	r8, r8, sl
 80042c8:	eb49 090b 	adc.w	r9, r9, fp
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042e0:	4688      	mov	r8, r1
 80042e2:	4691      	mov	r9, r2
 80042e4:	eb1a 0508 	adds.w	r5, sl, r8
 80042e8:	eb4b 0609 	adc.w	r6, fp, r9
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	f04f 0400 	mov.w	r4, #0
 80042fe:	0094      	lsls	r4, r2, #2
 8004300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004304:	008b      	lsls	r3, r1, #2
 8004306:	461a      	mov	r2, r3
 8004308:	4623      	mov	r3, r4
 800430a:	4628      	mov	r0, r5
 800430c:	4631      	mov	r1, r6
 800430e:	f7fb ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
 8004316:	461a      	mov	r2, r3
 8004318:	4bb8      	ldr	r3, [pc, #736]	; (80045fc <UART_SetConfig+0x6f4>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	469b      	mov	fp, r3
 8004328:	f04f 0c00 	mov.w	ip, #0
 800432c:	46d9      	mov	r9, fp
 800432e:	46e2      	mov	sl, ip
 8004330:	eb19 0309 	adds.w	r3, r9, r9
 8004334:	eb4a 040a 	adc.w	r4, sl, sl
 8004338:	4699      	mov	r9, r3
 800433a:	46a2      	mov	sl, r4
 800433c:	eb19 090b 	adds.w	r9, r9, fp
 8004340:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004358:	4689      	mov	r9, r1
 800435a:	4692      	mov	sl, r2
 800435c:	eb1b 0509 	adds.w	r5, fp, r9
 8004360:	eb4c 060a 	adc.w	r6, ip, sl
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4619      	mov	r1, r3
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	0094      	lsls	r4, r2, #2
 8004378:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	461a      	mov	r2, r3
 8004380:	4623      	mov	r3, r4
 8004382:	4628      	mov	r0, r5
 8004384:	4631      	mov	r1, r6
 8004386:	f7fb ff93 	bl	80002b0 <__aeabi_uldivmod>
 800438a:	4603      	mov	r3, r0
 800438c:	460c      	mov	r4, r1
 800438e:	461a      	mov	r2, r3
 8004390:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <UART_SetConfig+0x6f4>)
 8004392:	fba3 1302 	umull	r1, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2164      	movs	r1, #100	; 0x64
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	3332      	adds	r3, #50	; 0x32
 80043a4:	4a95      	ldr	r2, [pc, #596]	; (80045fc <UART_SetConfig+0x6f4>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	4498      	add	r8, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	469b      	mov	fp, r3
 80043b6:	f04f 0c00 	mov.w	ip, #0
 80043ba:	46d9      	mov	r9, fp
 80043bc:	46e2      	mov	sl, ip
 80043be:	eb19 0309 	adds.w	r3, r9, r9
 80043c2:	eb4a 040a 	adc.w	r4, sl, sl
 80043c6:	4699      	mov	r9, r3
 80043c8:	46a2      	mov	sl, r4
 80043ca:	eb19 090b 	adds.w	r9, r9, fp
 80043ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e6:	4689      	mov	r9, r1
 80043e8:	4692      	mov	sl, r2
 80043ea:	eb1b 0509 	adds.w	r5, fp, r9
 80043ee:	eb4c 060a 	adc.w	r6, ip, sl
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	0094      	lsls	r4, r2, #2
 8004406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800440a:	008b      	lsls	r3, r1, #2
 800440c:	461a      	mov	r2, r3
 800440e:	4623      	mov	r3, r4
 8004410:	4628      	mov	r0, r5
 8004412:	4631      	mov	r1, r6
 8004414:	f7fb ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8004418:	4603      	mov	r3, r0
 800441a:	460c      	mov	r4, r1
 800441c:	461a      	mov	r2, r3
 800441e:	4b77      	ldr	r3, [pc, #476]	; (80045fc <UART_SetConfig+0x6f4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	; 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	3332      	adds	r3, #50	; 0x32
 8004432:	4a72      	ldr	r2, [pc, #456]	; (80045fc <UART_SetConfig+0x6f4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4442      	add	r2, r8
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	e0d0      	b.n	80045ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fb08 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 800444c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	469a      	mov	sl, r3
 8004452:	f04f 0b00 	mov.w	fp, #0
 8004456:	46d0      	mov	r8, sl
 8004458:	46d9      	mov	r9, fp
 800445a:	eb18 0308 	adds.w	r3, r8, r8
 800445e:	eb49 0409 	adc.w	r4, r9, r9
 8004462:	4698      	mov	r8, r3
 8004464:	46a1      	mov	r9, r4
 8004466:	eb18 080a 	adds.w	r8, r8, sl
 800446a:	eb49 090b 	adc.w	r9, r9, fp
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800447a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800447e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004482:	4688      	mov	r8, r1
 8004484:	4691      	mov	r9, r2
 8004486:	eb1a 0508 	adds.w	r5, sl, r8
 800448a:	eb4b 0609 	adc.w	r6, fp, r9
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4619      	mov	r1, r3
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	0094      	lsls	r4, r2, #2
 80044a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044a6:	008b      	lsls	r3, r1, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	4631      	mov	r1, r6
 80044b0:	f7fb fefe 	bl	80002b0 <__aeabi_uldivmod>
 80044b4:	4603      	mov	r3, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b50      	ldr	r3, [pc, #320]	; (80045fc <UART_SetConfig+0x6f4>)
 80044bc:	fba3 2302 	umull	r2, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	469b      	mov	fp, r3
 80044ca:	f04f 0c00 	mov.w	ip, #0
 80044ce:	46d9      	mov	r9, fp
 80044d0:	46e2      	mov	sl, ip
 80044d2:	eb19 0309 	adds.w	r3, r9, r9
 80044d6:	eb4a 040a 	adc.w	r4, sl, sl
 80044da:	4699      	mov	r9, r3
 80044dc:	46a2      	mov	sl, r4
 80044de:	eb19 090b 	adds.w	r9, r9, fp
 80044e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fa:	4689      	mov	r9, r1
 80044fc:	4692      	mov	sl, r2
 80044fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004502:	eb4c 060a 	adc.w	r6, ip, sl
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4619      	mov	r1, r3
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0094      	lsls	r4, r2, #2
 800451a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	461a      	mov	r2, r3
 8004522:	4623      	mov	r3, r4
 8004524:	4628      	mov	r0, r5
 8004526:	4631      	mov	r1, r6
 8004528:	f7fb fec2 	bl	80002b0 <__aeabi_uldivmod>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	461a      	mov	r2, r3
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <UART_SetConfig+0x6f4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a2d      	ldr	r2, [pc, #180]	; (80045fc <UART_SetConfig+0x6f4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004552:	4498      	add	r8, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	469b      	mov	fp, r3
 8004558:	f04f 0c00 	mov.w	ip, #0
 800455c:	46d9      	mov	r9, fp
 800455e:	46e2      	mov	sl, ip
 8004560:	eb19 0309 	adds.w	r3, r9, r9
 8004564:	eb4a 040a 	adc.w	r4, sl, sl
 8004568:	4699      	mov	r9, r3
 800456a:	46a2      	mov	sl, r4
 800456c:	eb19 090b 	adds.w	r9, r9, fp
 8004570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004588:	4689      	mov	r9, r1
 800458a:	4692      	mov	sl, r2
 800458c:	eb1b 0509 	adds.w	r5, fp, r9
 8004590:	eb4c 060a 	adc.w	r6, ip, sl
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	f04f 0400 	mov.w	r4, #0
 80045a6:	0094      	lsls	r4, r2, #2
 80045a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	4623      	mov	r3, r4
 80045b2:	4628      	mov	r0, r5
 80045b4:	4631      	mov	r1, r6
 80045b6:	f7fb fe7b 	bl	80002b0 <__aeabi_uldivmod>
 80045ba:	4603      	mov	r3, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	461a      	mov	r2, r3
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <UART_SetConfig+0x6f4>)
 80045c2:	fba3 1302 	umull	r1, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2164      	movs	r1, #100	; 0x64
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a09      	ldr	r2, [pc, #36]	; (80045fc <UART_SetConfig+0x6f4>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4442      	add	r2, r8
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	e7ff      	b.n	80045ea <UART_SetConfig+0x6e2>
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f4:	40011000 	.word	0x40011000
 80045f8:	40011400 	.word	0x40011400
 80045fc:	51eb851f 	.word	0x51eb851f

08004600 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f103 0208 	add.w	r2, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004618:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 0208 	add.w	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f103 0208 	add.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b8:	d103      	bne.n	80046c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e00c      	b.n	80046dc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3308      	adds	r3, #8
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <vListInsert+0x2e>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d2f6      	bcs.n	80046ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6892      	ldr	r2, [r2, #8]
 800472a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d103      	bne.n	8004748 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	1e5a      	subs	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <xQueueGenericReset+0x28>
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	e7fe      	b.n	800478e <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8004790:	f002 fafe 	bl	8006d90 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	3b01      	subs	r3, #1
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	22ff      	movs	r2, #255	; 0xff
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01a      	beq.n	8004824 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3310      	adds	r3, #16
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f904 	bl	8005a00 <xTaskRemoveFromEventList>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d012      	beq.n	8004824 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <xQueueGenericReset+0xcc>)
 8004800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	e009      	b.n	8004824 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3310      	adds	r3, #16
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fef3 	bl	8004600 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3324      	adds	r3, #36	; 0x24
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff feee 	bl	8004600 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004824:	f002 fae2 	bl	8006dec <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004828:	2301      	movs	r3, #1
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	; 0x30
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <xQueueGenericCreate+0x28>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	e7fe      	b.n	800485e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	fb02 f303 	mul.w	r3, r2, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <xQueueGenericCreate+0x46>
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	429a      	cmp	r2, r3
 800487c:	d101      	bne.n	8004882 <xQueueGenericCreate+0x4a>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericCreate+0x4c>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <xQueueGenericCreate+0x64>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e7fe      	b.n	800489a <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80048a2:	d909      	bls.n	80048b8 <xQueueGenericCreate+0x80>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e7fe      	b.n	80048b6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	3350      	adds	r3, #80	; 0x50
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 fb81 	bl	8006fc4 <pvPortMalloc>
 80048c2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3350      	adds	r3, #80	; 0x50
 80048d2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d4:	79fa      	ldrb	r2, [r7, #7]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f805 	bl	80048f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
    }
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e002      	b.n	8004912 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800491e:	2101      	movs	r1, #1
 8004920:	69b8      	ldr	r0, [r7, #24]
 8004922:	f7ff ff21 	bl	8004768 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	; 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <xQueueGenericSend+0x30>
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	e7fe      	b.n	8004966 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <xQueueGenericSend+0x3e>
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xQueueGenericSend+0x42>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueGenericSend+0x44>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <xQueueGenericSend+0x5c>
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	e7fe      	b.n	8004992 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d103      	bne.n	80049a2 <xQueueGenericSend+0x6a>
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <xQueueGenericSend+0x6e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueGenericSend+0x70>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <xQueueGenericSend+0x88>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	e7fe      	b.n	80049be <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c0:	f001 f9b6 	bl	8005d30 <xTaskGetSchedulerState>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <xQueueGenericSend+0x98>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <xQueueGenericSend+0x9c>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <xQueueGenericSend+0x9e>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <xQueueGenericSend+0xb6>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e7fe      	b.n	80049ec <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049ee:	f002 f9cf 	bl	8006d90 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <xQueueGenericSend+0xcc>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d129      	bne.n	8004a58 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0a:	f000 fab9 	bl	8004f80 <prvCopyDataToQueue>
 8004a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 ffef 	bl	8005a00 <xTaskRemoveFromEventList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004a28:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <xQueueGenericSend+0x1f0>)
 8004a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	e00a      	b.n	8004a50 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <xQueueGenericSend+0x1f0>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004a50:	f002 f9cc 	bl	8006dec <vPortExitCritical>
                return pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e063      	b.n	8004b20 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a5e:	f002 f9c5 	bl	8006dec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e05c      	b.n	8004b20 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 f827 	bl	8005ac4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a7a:	f002 f9b7 	bl	8006dec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a7e:	f000 fda5 	bl	80055cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a82:	f002 f985 	bl	8006d90 <vPortEnterCritical>
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a92:	d103      	bne.n	8004a9c <xQueueGenericSend+0x164>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa8:	d103      	bne.n	8004ab2 <xQueueGenericSend+0x17a>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab2:	f002 f99b 	bl	8006dec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab6:	1d3a      	adds	r2, r7, #4
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 f816 	bl	8005af0 <xTaskCheckForTimeOut>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d124      	bne.n	8004b14 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004acc:	f000 fb50 	bl	8005170 <prvIsQueueFull>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	3310      	adds	r3, #16
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ff40 	bl	8005964 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae6:	f000 fadb 	bl	80050a0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004aea:	f000 fd7d 	bl	80055e8 <xTaskResumeAll>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f af7c 	bne.w	80049ee <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xQueueGenericSend+0x1f0>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e772      	b.n	80049ee <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fac9 	bl	80050a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004b0e:	f000 fd6b 	bl	80055e8 <xTaskResumeAll>
 8004b12:	e76c      	b.n	80049ee <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fac3 	bl	80050a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004b1a:	f000 fd65 	bl	80055e8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004b1e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3738      	adds	r7, #56	; 0x38
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b090      	sub	sp, #64	; 0x40
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <xQueueGenericSendFromISR+0x2c>
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b56:	e7fe      	b.n	8004b56 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSendFromISR+0x3a>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <xQueueGenericSendFromISR+0x3e>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueGenericSendFromISR+0x40>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <xQueueGenericSendFromISR+0x58>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
 8004b82:	e7fe      	b.n	8004b82 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d103      	bne.n	8004b92 <xQueueGenericSendFromISR+0x66>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <xQueueGenericSendFromISR+0x6a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <xQueueGenericSendFromISR+0x6c>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <xQueueGenericSendFromISR+0x84>
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	e7fe      	b.n	8004bae <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb0:	f002 f9ca 	bl	8006f48 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <xQueueGenericSendFromISR+0xb6>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d13d      	bne.n	8004c5e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bf8:	f000 f9c2 	bl	8004f80 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004bfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c04:	d112      	bne.n	8004c2c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d024      	beq.n	8004c58 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	3324      	adds	r3, #36	; 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fef4 	bl	8005a00 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01c      	beq.n	8004c58 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d019      	beq.n	8004c58 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e015      	b.n	8004c58 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004c2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c30:	2b7f      	cmp	r3, #127	; 0x7f
 8004c32:	d109      	bne.n	8004c48 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	b25a      	sxtb	r2, r3
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004c5c:	e001      	b.n	8004c62 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3740      	adds	r7, #64	; 0x40
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <xQueueReceive+0x2e>
        __asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	623b      	str	r3, [r7, #32]
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <xQueueReceive+0x3c>
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <xQueueReceive+0x40>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <xQueueReceive+0x42>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <xQueueReceive+0x5a>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd2:	f001 f82d 	bl	8005d30 <xTaskGetSchedulerState>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <xQueueReceive+0x6a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <xQueueReceive+0x6e>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <xQueueReceive+0x70>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <xQueueReceive+0x88>
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e7fe      	b.n	8004cfe <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d00:	f002 f846 	bl	8006d90 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01f      	beq.n	8004d50 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d14:	f000 f99e 	bl	8005054 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	1e5a      	subs	r2, r3, #1
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	3310      	adds	r3, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fe67 	bl	8005a00 <xTaskRemoveFromEventList>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d38:	4b3c      	ldr	r3, [pc, #240]	; (8004e2c <xQueueReceive+0x1b4>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004d48:	f002 f850 	bl	8006dec <vPortExitCritical>
                return pdPASS;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e069      	b.n	8004e24 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d56:	f002 f849 	bl	8006dec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e062      	b.n	8004e24 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 feab 	bl	8005ac4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d72:	f002 f83b 	bl	8006dec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d76:	f000 fc29 	bl	80055cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d7a:	f002 f809 	bl	8006d90 <vPortEnterCritical>
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8a:	d103      	bne.n	8004d94 <xQueueReceive+0x11c>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da0:	d103      	bne.n	8004daa <xQueueReceive+0x132>
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004daa:	f002 f81f 	bl	8006dec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dae:	1d3a      	adds	r2, r7, #4
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fe9a 	bl	8005af0 <xTaskCheckForTimeOut>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d123      	bne.n	8004e0a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc4:	f000 f9be 	bl	8005144 <prvIsQueueEmpty>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	3324      	adds	r3, #36	; 0x24
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fdc4 	bl	8005964 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dde:	f000 f95f 	bl	80050a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004de2:	f000 fc01 	bl	80055e8 <xTaskResumeAll>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d189      	bne.n	8004d00 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <xQueueReceive+0x1b4>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	e780      	b.n	8004d00 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e00:	f000 f94e 	bl	80050a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e04:	f000 fbf0 	bl	80055e8 <xTaskResumeAll>
 8004e08:	e77a      	b.n	8004d00 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0c:	f000 f948 	bl	80050a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e10:	f000 fbea 	bl	80055e8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e16:	f000 f995 	bl	8005144 <prvIsQueueEmpty>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f43f af6f 	beq.w	8004d00 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004e22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3730      	adds	r7, #48	; 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b090      	sub	sp, #64	; 0x40
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <xQueueReceiveFromISR+0x2a>
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e58:	e7fe      	b.n	8004e58 <xQueueReceiveFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <xQueueReceiveFromISR+0x38>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <xQueueReceiveFromISR+0x3c>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <xQueueReceiveFromISR+0x3e>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <xQueueReceiveFromISR+0x56>
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	e7fe      	b.n	8004e84 <xQueueReceiveFromISR+0x54>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e86:	f002 f85f 	bl	8006f48 <vPortValidateInterruptPriority>
        __asm volatile
 8004e8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	623a      	str	r2, [r7, #32]
 8004ea0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004ea2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03d      	beq.n	8004f2e <xQueueReceiveFromISR+0xfe>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ec0:	f000 f8c8 	bl	8005054 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	1e5a      	subs	r2, r3, #1
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004ecc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ed4:	d112      	bne.n	8004efc <xQueueReceiveFromISR+0xcc>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d024      	beq.n	8004f28 <xQueueReceiveFromISR+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	3310      	adds	r3, #16
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fd8c 	bl	8005a00 <xTaskRemoveFromEventList>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01c      	beq.n	8004f28 <xQueueReceiveFromISR+0xf8>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <xQueueReceiveFromISR+0xf8>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e015      	b.n	8004f28 <xQueueReceiveFromISR+0xf8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	d109      	bne.n	8004f18 <xQueueReceiveFromISR+0xe8>
        __asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e7fe      	b.n	8004f16 <xQueueReceiveFromISR+0xe6>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2c:	e001      	b.n	8004f32 <xQueueReceiveFromISR+0x102>
        }
        else
        {
            xReturn = pdFAIL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f383 8811 	msr	BASEPRI, r3
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3740      	adds	r7, #64	; 0x40
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d109      	bne.n	8004f68 <uxQueueMessagesWaiting+0x22>
        __asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	e7fe      	b.n	8004f66 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 8004f68:	f001 ff12 	bl	8006d90 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004f72:	f001 ff3b 	bl	8006dec <vPortExitCritical>

    return uxReturn;
 8004f76:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d14d      	bne.n	8005042 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fede 	bl	8005d6c <xTaskPriorityDisinherit>
 8004fb0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	e043      	b.n	8005042 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d119      	bne.n	8004ff4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6858      	ldr	r0, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	f002 fa1c 	bl	8007408 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	441a      	add	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d32b      	bcc.n	8005042 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e026      	b.n	8005042 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68d8      	ldr	r0, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	f002 fa02 	bl	8007408 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	425b      	negs	r3, r3
 800500e:	441a      	add	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	425b      	negs	r3, r3
 800502a:	441a      	add	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d105      	bne.n	8005042 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	3b01      	subs	r3, #1
 8005040:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800504a:	697b      	ldr	r3, [r7, #20]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	441a      	add	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	429a      	cmp	r2, r3
 800507e:	d303      	bcc.n	8005088 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	6838      	ldr	r0, [r7, #0]
 8005094:	f002 f9b8 	bl	8007408 <memcpy>
    }
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80050a8:	f001 fe72 	bl	8006d90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050b4:	e011      	b.n	80050da <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fc9c 	bl	8005a00 <xTaskRemoveFromEventList>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80050ce:	f000 fd73 	bl	8005bb8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dce9      	bgt.n	80050b6 <prvUnlockQueue+0x16>
 80050e2:	e000      	b.n	80050e6 <prvUnlockQueue+0x46>
                        break;
 80050e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80050ee:	f001 fe7d 	bl	8006dec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80050f2:	f001 fe4d 	bl	8006d90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050fe:	e011      	b.n	8005124 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3310      	adds	r3, #16
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fc77 	bl	8005a00 <xTaskRemoveFromEventList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005118:	f000 fd4e 	bl	8005bb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	3b01      	subs	r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dce9      	bgt.n	8005100 <prvUnlockQueue+0x60>
 800512c:	e000      	b.n	8005130 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800512e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005138:	f001 fe58 	bl	8006dec <vPortExitCritical>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800514c:	f001 fe20 	bl	8006d90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e001      	b.n	8005162 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005162:	f001 fe43 	bl	8006dec <vPortExitCritical>

    return xReturn;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005178:	f001 fe0a 	bl	8006d90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	429a      	cmp	r2, r3
 8005186:	d102      	bne.n	800518e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e001      	b.n	8005192 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005192:	f001 fe2b 	bl	8006dec <vPortExitCritical>

    return xReturn;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <xQueueIsQueueFullFromISR+0x26>
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e7fe      	b.n	80051c4 <xQueueIsQueueFullFromISR+0x24>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d102      	bne.n	80051d8 <xQueueIsQueueFullFromISR+0x38>
    {
        xReturn = pdTRUE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e001      	b.n	80051dc <xQueueIsQueueFullFromISR+0x3c>
    }
    else
    {
        xReturn = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80051dc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80051de:	4618      	mov	r0, r3
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e014      	b.n	8005226 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051fc:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <vQueueAddToRegistry+0x4c>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005208:	490b      	ldr	r1, [pc, #44]	; (8005238 <vQueueAddToRegistry+0x4c>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <vQueueAddToRegistry+0x4c>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800521e:	e005      	b.n	800522c <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b07      	cmp	r3, #7
 800522a:	d9e7      	bls.n	80051fc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20019354 	.word	0x20019354

0800523c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800524c:	f001 fda0 	bl	8006d90 <vPortEnterCritical>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525c:	d103      	bne.n	8005266 <vQueueWaitForMessageRestricted+0x2a>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800526c:	b25b      	sxtb	r3, r3
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005272:	d103      	bne.n	800527c <vQueueWaitForMessageRestricted+0x40>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800527c:	f001 fdb6 	bl	8006dec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fb8b 	bl	80059ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7ff ff02 	bl	80050a0 <prvUnlockQueue>
    }
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fe83 	bl	8006fc4 <pvPortMalloc>
 80052be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052c6:	2058      	movs	r0, #88	; 0x58
 80052c8:	f001 fe7c 	bl	8006fc4 <pvPortMalloc>
 80052cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
 80052da:	e005      	b.n	80052e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f001 ff4d 	bl	800717c <vPortFree>
 80052e2:	e001      	b.n	80052e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d013      	beq.n	8005316 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	2300      	movs	r3, #0
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f80e 	bl	8005326 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800530a:	69f8      	ldr	r0, [r7, #28]
 800530c:	f000 f8a0 	bl	8005450 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005310:	2301      	movs	r3, #1
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	e002      	b.n	800531c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800531a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800531c:	69bb      	ldr	r3, [r7, #24]
    }
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	461a      	mov	r2, r3
 800533e:	21a5      	movs	r1, #165	; 0xa5
 8005340:	f002 f86d 	bl	800741e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800534e:	3b01      	subs	r3, #1
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <prvInitialiseNewTask+0x56>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e7fe      	b.n	800537a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01f      	beq.n	80053c2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e012      	b.n	80053ae <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	7819      	ldrb	r1, [r3, #0]
 8005390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	3334      	adds	r3, #52	; 0x34
 8005398:	460a      	mov	r2, r1
 800539a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	3301      	adds	r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d9e9      	bls.n	8005388 <prvInitialiseNewTask+0x62>
 80053b4:	e000      	b.n	80053b8 <prvInitialiseNewTask+0x92>
            {
                break;
 80053b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053c0:	e003      	b.n	80053ca <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d901      	bls.n	80053d4 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053d0:	2304      	movs	r3, #4
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053de:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	2200      	movs	r2, #0
 80053e4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	3304      	adds	r3, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f928 	bl	8004640 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	3318      	adds	r3, #24
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff f923 	bl	8004640 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f1c3 0205 	rsb	r2, r3, #5
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3350      	adds	r3, #80	; 0x50
 8005414:	2204      	movs	r2, #4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f002 f800 	bl	800741e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3354      	adds	r3, #84	; 0x54
 8005422:	2201      	movs	r2, #1
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fff9 	bl	800741e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	69b8      	ldr	r0, [r7, #24]
 8005432:	f001 fb83 	bl	8006b3c <pxPortInitialiseStack>
 8005436:	4602      	mov	r2, r0
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005448:	bf00      	nop
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005458:	f001 fc9a 	bl	8006d90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800545c:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <prvAddNewTaskToReadyList+0xc0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a2b      	ldr	r2, [pc, #172]	; (8005510 <prvAddNewTaskToReadyList+0xc0>)
 8005464:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005466:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <prvAddNewTaskToReadyList+0xc4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800546e:	4a29      	ldr	r2, [pc, #164]	; (8005514 <prvAddNewTaskToReadyList+0xc4>)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005474:	4b26      	ldr	r3, [pc, #152]	; (8005510 <prvAddNewTaskToReadyList+0xc0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d110      	bne.n	800549e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800547c:	f000 fbc0 	bl	8005c00 <prvInitialiseTaskLists>
 8005480:	e00d      	b.n	800549e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005482:	4b25      	ldr	r3, [pc, #148]	; (8005518 <prvAddNewTaskToReadyList+0xc8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <prvAddNewTaskToReadyList+0xc4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d802      	bhi.n	800549e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005498:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800549e:	4b1f      	ldr	r3, [pc, #124]	; (800551c <prvAddNewTaskToReadyList+0xcc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	4a1d      	ldr	r2, [pc, #116]	; (800551c <prvAddNewTaskToReadyList+0xcc>)
 80054a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054a8:	4b1c      	ldr	r3, [pc, #112]	; (800551c <prvAddNewTaskToReadyList+0xcc>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	4b19      	ldr	r3, [pc, #100]	; (8005520 <prvAddNewTaskToReadyList+0xd0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <prvAddNewTaskToReadyList+0xd0>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <prvAddNewTaskToReadyList+0xd4>)
 80054d0:	441a      	add	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7ff f8be 	bl	800465a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80054de:	f001 fc85 	bl	8006dec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <prvAddNewTaskToReadyList+0xc8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvAddNewTaskToReadyList+0xc4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d207      	bcs.n	8005508 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <prvAddNewTaskToReadyList+0xd8>)
 80054fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	200001e4 	.word	0x200001e4
 8005514:	2000010c 	.word	0x2000010c
 8005518:	200001f0 	.word	0x200001f0
 800551c:	20000200 	.word	0x20000200
 8005520:	200001ec 	.word	0x200001ec
 8005524:	20000110 	.word	0x20000110
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <vTaskStartScheduler+0x84>)
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	2300      	movs	r3, #0
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	2282      	movs	r2, #130	; 0x82
 800553e:	491d      	ldr	r1, [pc, #116]	; (80055b4 <vTaskStartScheduler+0x88>)
 8005540:	481d      	ldr	r0, [pc, #116]	; (80055b8 <vTaskStartScheduler+0x8c>)
 8005542:	f7ff feaf 	bl	80052a4 <xTaskCreate>
 8005546:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d102      	bne.n	8005554 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800554e:	f000 ff43 	bl	80063d8 <xTimerCreateTimerTask>
 8005552:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d115      	bne.n	8005586 <vTaskStartScheduler+0x5a>
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <vTaskStartScheduler+0x90>)
 800556e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005572:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <vTaskStartScheduler+0x94>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <vTaskStartScheduler+0x98>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005580:	f001 fb68 	bl	8006c54 <xPortStartScheduler>
 8005584:	e00d      	b.n	80055a2 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558c:	d109      	bne.n	80055a2 <vTaskStartScheduler+0x76>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	e7fe      	b.n	80055a0 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <vTaskStartScheduler+0x9c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000208 	.word	0x20000208
 80055b4:	08008970 	.word	0x08008970
 80055b8:	08005bd1 	.word	0x08005bd1
 80055bc:	20000204 	.word	0x20000204
 80055c0:	200001f0 	.word	0x200001f0
 80055c4:	200001e8 	.word	0x200001e8
 80055c8:	20000028 	.word	0x20000028

080055cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <vTaskSuspendAll+0x18>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <vTaskSuspendAll+0x18>)
 80055d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80055da:	bf00      	nop
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	2000020c 	.word	0x2000020c

080055e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <xTaskResumeAll+0x114>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <xTaskResumeAll+0x2a>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7fe      	b.n	8005610 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005612:	f001 fbbd 	bl	8006d90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <xTaskResumeAll+0x114>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a37      	ldr	r2, [pc, #220]	; (80056fc <xTaskResumeAll+0x114>)
 800561e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <xTaskResumeAll+0x114>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d161      	bne.n	80056ec <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005628:	4b35      	ldr	r3, [pc, #212]	; (8005700 <xTaskResumeAll+0x118>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d05d      	beq.n	80056ec <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005630:	e02e      	b.n	8005690 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005632:	4b34      	ldr	r3, [pc, #208]	; (8005704 <xTaskResumeAll+0x11c>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3318      	adds	r3, #24
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f868 	bl	8004714 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f863 	bl	8004714 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	2201      	movs	r2, #1
 8005654:	409a      	lsls	r2, r3
 8005656:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <xTaskResumeAll+0x120>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <xTaskResumeAll+0x120>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <xTaskResumeAll+0x124>)
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe ffef 	bl	800465a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	4b23      	ldr	r3, [pc, #140]	; (8005710 <xTaskResumeAll+0x128>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <xTaskResumeAll+0x12c>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005690:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <xTaskResumeAll+0x11c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1cc      	bne.n	8005632 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800569e:	f000 fb2b 	bl	8005cf8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a2:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <xTaskResumeAll+0x130>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80056ae:	f000 f847 	bl	8005740 <xTaskIncrementTick>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 80056b8:	4b16      	ldr	r3, [pc, #88]	; (8005714 <xTaskResumeAll+0x12c>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f1      	bne.n	80056ae <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <xTaskResumeAll+0x130>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80056d0:	4b10      	ldr	r3, [pc, #64]	; (8005714 <xTaskResumeAll+0x12c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <xTaskResumeAll+0x134>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80056ec:	f001 fb7e 	bl	8006dec <vPortExitCritical>

    return xAlreadyYielded;
 80056f0:	68bb      	ldr	r3, [r7, #8]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	2000020c 	.word	0x2000020c
 8005700:	200001e4 	.word	0x200001e4
 8005704:	200001a4 	.word	0x200001a4
 8005708:	200001ec 	.word	0x200001ec
 800570c:	20000110 	.word	0x20000110
 8005710:	2000010c 	.word	0x2000010c
 8005714:	200001f8 	.word	0x200001f8
 8005718:	200001f4 	.word	0x200001f4
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <xTaskGetTickCount+0x1c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800572c:	687b      	ldr	r3, [r7, #4]
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	200001e8 	.word	0x200001e8

08005740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <xTaskIncrementTick+0x144>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 808d 	bne.w	800586e <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005754:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <xTaskIncrementTick+0x148>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800575c:	4a4a      	ldr	r2, [pc, #296]	; (8005888 <xTaskIncrementTick+0x148>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11f      	bne.n	80057a8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <xTaskIncrementTick+0x14c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <xTaskIncrementTick+0x46>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	e7fe      	b.n	8005784 <xTaskIncrementTick+0x44>
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <xTaskIncrementTick+0x14c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	4b40      	ldr	r3, [pc, #256]	; (8005890 <xTaskIncrementTick+0x150>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3e      	ldr	r2, [pc, #248]	; (800588c <xTaskIncrementTick+0x14c>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4a3e      	ldr	r2, [pc, #248]	; (8005890 <xTaskIncrementTick+0x150>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <xTaskIncrementTick+0x154>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a3c      	ldr	r2, [pc, #240]	; (8005894 <xTaskIncrementTick+0x154>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	f000 faa8 	bl	8005cf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <xTaskIncrementTick+0x158>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d348      	bcc.n	8005844 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <xTaskIncrementTick+0x14c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <xTaskIncrementTick+0x158>)
 80057be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c2:	601a      	str	r2, [r3, #0]
                    break;
 80057c4:	e03e      	b.n	8005844 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <xTaskIncrementTick+0x14c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d203      	bcs.n	80057e6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80057de:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <xTaskIncrementTick+0x158>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057e4:	e02e      	b.n	8005844 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe ff92 	bl	8004714 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3318      	adds	r3, #24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe ff89 	bl	8004714 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2201      	movs	r2, #1
 8005808:	409a      	lsls	r2, r3
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <xTaskIncrementTick+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <xTaskIncrementTick+0x15c>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <xTaskIncrementTick+0x160>)
 8005822:	441a      	add	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe ff15 	bl	800465a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <xTaskIncrementTick+0x164>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b9      	bcc.n	80057b2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	e7b6      	b.n	80057b2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <xTaskIncrementTick+0x164>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4915      	ldr	r1, [pc, #84]	; (80058a0 <xTaskIncrementTick+0x160>)
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d901      	bls.n	8005860 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <xTaskIncrementTick+0x168>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e004      	b.n	8005878 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <xTaskIncrementTick+0x16c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <xTaskIncrementTick+0x16c>)
 8005876:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	2000020c 	.word	0x2000020c
 8005888:	200001e8 	.word	0x200001e8
 800588c:	2000019c 	.word	0x2000019c
 8005890:	200001a0 	.word	0x200001a0
 8005894:	200001fc 	.word	0x200001fc
 8005898:	20000204 	.word	0x20000204
 800589c:	200001ec 	.word	0x200001ec
 80058a0:	20000110 	.word	0x20000110
 80058a4:	2000010c 	.word	0x2000010c
 80058a8:	200001f8 	.word	0x200001f8
 80058ac:	200001f4 	.word	0x200001f4

080058b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b6:	4b26      	ldr	r3, [pc, #152]	; (8005950 <vTaskSwitchContext+0xa0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80058be:	4b25      	ldr	r3, [pc, #148]	; (8005954 <vTaskSwitchContext+0xa4>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80058c4:	e03e      	b.n	8005944 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80058c6:	4b23      	ldr	r3, [pc, #140]	; (8005954 <vTaskSwitchContext+0xa4>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <vTaskSwitchContext+0xa8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	fab3 f383 	clz	r3, r3
 80058d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	f1c3 031f 	rsb	r3, r3, #31
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	491e      	ldr	r1, [pc, #120]	; (800595c <vTaskSwitchContext+0xac>)
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <vTaskSwitchContext+0x5a>
        __asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e7fe      	b.n	8005908 <vTaskSwitchContext+0x58>
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4a11      	ldr	r2, [pc, #68]	; (800595c <vTaskSwitchContext+0xac>)
 8005916:	4413      	add	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	3308      	adds	r3, #8
 800592c:	429a      	cmp	r2, r3
 800592e:	d104      	bne.n	800593a <vTaskSwitchContext+0x8a>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4a07      	ldr	r2, [pc, #28]	; (8005960 <vTaskSwitchContext+0xb0>)
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	2000020c 	.word	0x2000020c
 8005954:	200001f8 	.word	0x200001f8
 8005958:	200001ec 	.word	0x200001ec
 800595c:	20000110 	.word	0x20000110
 8005960:	2000010c 	.word	0x2000010c

08005964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <vTaskPlaceOnEventList+0x24>
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e7fe      	b.n	8005986 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005988:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <vTaskPlaceOnEventList+0x44>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3318      	adds	r3, #24
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fe fe86 	bl	80046a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005996:	2101      	movs	r1, #1
 8005998:	6838      	ldr	r0, [r7, #0]
 800599a:	f000 fcb7 	bl	800630c <prvAddCurrentTaskToDelayedList>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000010c 	.word	0x2000010c

080059ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <vTaskPlaceOnEventListRestricted+0x26>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e7fe      	b.n	80059d0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <vTaskPlaceOnEventListRestricted+0x50>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3318      	adds	r3, #24
 80059d8:	4619      	mov	r1, r3
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7fe fe3d 	bl	800465a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f000 fc8c 	bl	800630c <prvAddCurrentTaskToDelayedList>
    }
 80059f4:	bf00      	nop
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	2000010c 	.word	0x2000010c

08005a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <xTaskRemoveFromEventList+0x2a>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e7fe      	b.n	8005a28 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3318      	adds	r3, #24
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fe70 	bl	8004714 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a34:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <xTaskRemoveFromEventList+0xac>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d11c      	bne.n	8005a76 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fe67 	bl	8004714 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <xTaskRemoveFromEventList+0xb0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <xTaskRemoveFromEventList+0xb0>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <xTaskRemoveFromEventList+0xb4>)
 8005a66:	441a      	add	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe fdf3 	bl	800465a <vListInsertEnd>
 8005a74:	e005      	b.n	8005a82 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3318      	adds	r3, #24
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <xTaskRemoveFromEventList+0xb8>)
 8005a7e:	f7fe fdec 	bl	800465a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <xTaskRemoveFromEventList+0xbc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d905      	bls.n	8005a9c <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <xTaskRemoveFromEventList+0xc0>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e001      	b.n	8005aa0 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005aa0:	697b      	ldr	r3, [r7, #20]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000020c 	.word	0x2000020c
 8005ab0:	200001ec 	.word	0x200001ec
 8005ab4:	20000110 	.word	0x20000110
 8005ab8:	200001a4 	.word	0x200001a4
 8005abc:	2000010c 	.word	0x2000010c
 8005ac0:	200001f8 	.word	0x200001f8

08005ac4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <vTaskInternalSetTimeOutState+0x24>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <vTaskInternalSetTimeOutState+0x28>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	200001fc 	.word	0x200001fc
 8005aec:	200001e8 	.word	0x200001e8

08005af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <xTaskCheckForTimeOut+0x24>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e7fe      	b.n	8005b12 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <xTaskCheckForTimeOut+0x3e>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e7fe      	b.n	8005b2c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8005b2e:	f001 f92f 	bl	8006d90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <xTaskCheckForTimeOut+0xc0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4a:	d102      	bne.n	8005b52 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e026      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <xTaskCheckForTimeOut+0xc4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d00a      	beq.n	8005b74 <xTaskCheckForTimeOut+0x84>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d305      	bcc.n	8005b74 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e015      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20b      	bcs.n	8005b96 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad2      	subs	r2, r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff9a 	bl	8005ac4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e004      	b.n	8005ba0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005ba0:	f001 f924 	bl	8006dec <vPortExitCritical>

    return xReturn;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200001e8 	.word	0x200001e8
 8005bb4:	200001fc 	.word	0x200001fc

08005bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <vTaskMissedYield+0x14>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	200001f8 	.word	0x200001f8

08005bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005bd8:	f000 f852 	bl	8005c80 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <prvIdleTask+0x28>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d9f9      	bls.n	8005bd8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <prvIdleTask+0x2c>)
 8005be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005bf4:	e7f0      	b.n	8005bd8 <prvIdleTask+0x8>
 8005bf6:	bf00      	nop
 8005bf8:	20000110 	.word	0x20000110
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	e00c      	b.n	8005c26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <prvInitialiseTaskLists+0x60>)
 8005c18:	4413      	add	r3, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fcf0 	bl	8004600 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3301      	adds	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d9ef      	bls.n	8005c0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005c2c:	480d      	ldr	r0, [pc, #52]	; (8005c64 <prvInitialiseTaskLists+0x64>)
 8005c2e:	f7fe fce7 	bl	8004600 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005c32:	480d      	ldr	r0, [pc, #52]	; (8005c68 <prvInitialiseTaskLists+0x68>)
 8005c34:	f7fe fce4 	bl	8004600 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005c38:	480c      	ldr	r0, [pc, #48]	; (8005c6c <prvInitialiseTaskLists+0x6c>)
 8005c3a:	f7fe fce1 	bl	8004600 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005c3e:	480c      	ldr	r0, [pc, #48]	; (8005c70 <prvInitialiseTaskLists+0x70>)
 8005c40:	f7fe fcde 	bl	8004600 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005c44:	480b      	ldr	r0, [pc, #44]	; (8005c74 <prvInitialiseTaskLists+0x74>)
 8005c46:	f7fe fcdb 	bl	8004600 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <prvInitialiseTaskLists+0x78>)
 8005c4c:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <prvInitialiseTaskLists+0x64>)
 8005c4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <prvInitialiseTaskLists+0x7c>)
 8005c52:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <prvInitialiseTaskLists+0x68>)
 8005c54:	601a      	str	r2, [r3, #0]
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000110 	.word	0x20000110
 8005c64:	20000174 	.word	0x20000174
 8005c68:	20000188 	.word	0x20000188
 8005c6c:	200001a4 	.word	0x200001a4
 8005c70:	200001b8 	.word	0x200001b8
 8005c74:	200001d0 	.word	0x200001d0
 8005c78:	2000019c 	.word	0x2000019c
 8005c7c:	200001a0 	.word	0x200001a0

08005c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c86:	e019      	b.n	8005cbc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005c88:	f001 f882 	bl	8006d90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <prvCheckTasksWaitingTermination+0x4c>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fd3b 	bl	8004714 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <prvCheckTasksWaitingTermination+0x50>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <prvCheckTasksWaitingTermination+0x50>)
 8005ca6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <prvCheckTasksWaitingTermination+0x54>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <prvCheckTasksWaitingTermination+0x54>)
 8005cb0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005cb2:	f001 f89b 	bl	8006dec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f80e 	bl	8005cd8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <prvCheckTasksWaitingTermination+0x54>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e1      	bne.n	8005c88 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	200001b8 	.word	0x200001b8
 8005cd0:	200001e4 	.word	0x200001e4
 8005cd4:	200001cc 	.word	0x200001cc

08005cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fa49 	bl	800717c <vPortFree>
                vPortFree( pxTCB );
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fa46 	bl	800717c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <prvResetNextTaskUnblockTime+0x30>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <prvResetNextTaskUnblockTime+0x34>)
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005d0e:	e005      	b.n	8005d1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <prvResetNextTaskUnblockTime+0x30>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <prvResetNextTaskUnblockTime+0x34>)
 8005d1a:	6013      	str	r3, [r2, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000019c 	.word	0x2000019c
 8005d2c:	20000204 	.word	0x20000204

08005d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <xTaskGetSchedulerState+0x34>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	e008      	b.n	8005d56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <xTaskGetSchedulerState+0x38>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	e001      	b.n	8005d56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005d56:	687b      	ldr	r3, [r7, #4]
    }
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	200001f0 	.word	0x200001f0
 8005d68:	2000020c 	.word	0x2000020c

08005d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d061      	beq.n	8005e46 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005d82:	4b33      	ldr	r3, [pc, #204]	; (8005e50 <xTaskPriorityDisinherit+0xe4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d009      	beq.n	8005da0 <xTaskPriorityDisinherit+0x34>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e7fe      	b.n	8005d9e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <xTaskPriorityDisinherit+0x50>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	e7fe      	b.n	8005dba <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc0:	1e5a      	subs	r2, r3, #1
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d039      	beq.n	8005e46 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d135      	bne.n	8005e46 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fc98 	bl	8004714 <uxListRemove>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	2201      	movs	r2, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43da      	mvns	r2, r3
 8005df6:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <xTaskPriorityDisinherit+0xe8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <xTaskPriorityDisinherit+0xe8>)
 8005dfe:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	f1c3 0205 	rsb	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <xTaskPriorityDisinherit+0xe8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <xTaskPriorityDisinherit+0xe8>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <xTaskPriorityDisinherit+0xec>)
 8005e34:	441a      	add	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7fe fc0c 	bl	800465a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005e42:	2301      	movs	r3, #1
 8005e44:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
    }
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	2000010c 	.word	0x2000010c
 8005e54:	200001ec 	.word	0x200001ec
 8005e58:	20000110 	.word	0x20000110

08005e5c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <xTaskGenericNotifyWait+0x28>
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e7fe      	b.n	8005e82 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8005e84:	f000 ff84 	bl	8006d90 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005e88:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3354      	adds	r3, #84	; 0x54
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d022      	beq.n	8005ee0 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	3214      	adds	r2, #20
 8005ea2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	43d2      	mvns	r2, r2
 8005eaa:	4011      	ands	r1, r2
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	3214      	adds	r2, #20
 8005eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	3354      	adds	r3, #84	; 0x54
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ec8:	2101      	movs	r1, #1
 8005eca:	6a38      	ldr	r0, [r7, #32]
 8005ecc:	f000 fa1e 	bl	800630c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005ed0:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <xTaskGenericNotifyWait+0xf8>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005ee0:	f000 ff84 	bl	8006dec <vPortExitCritical>

        taskENTER_CRITICAL();
 8005ee4:	f000 ff54 	bl	8006d90 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005eee:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	3214      	adds	r2, #20
 8005ef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	3354      	adds	r3, #84	; 0x54
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d002      	beq.n	8005f16 <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e00e      	b.n	8005f34 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	3214      	adds	r2, #20
 8005f1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	43d2      	mvns	r2, r2
 8005f26:	4011      	ands	r1, r2
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	3214      	adds	r2, #20
 8005f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <xTaskGenericNotifyWait+0xf4>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3354      	adds	r3, #84	; 0x54
 8005f3e:	2200      	movs	r2, #0
 8005f40:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005f42:	f000 ff53 	bl	8006dec <vPortExitCritical>

        return xReturn;
 8005f46:	697b      	ldr	r3, [r7, #20]
    }
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000010c 	.word	0x2000010c
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005f66:	2301      	movs	r3, #1
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <xTaskGenericNotify+0x2c>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	e7fe      	b.n	8005f82 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <xTaskGenericNotify+0x46>
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e7fe      	b.n	8005f9c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8005fa2:	f000 fef5 	bl	8006d90 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	3214      	adds	r2, #20
 8005fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3354      	adds	r3, #84	; 0x54
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	3354      	adds	r3, #84	; 0x54
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d83b      	bhi.n	8006052 <xTaskGenericNotify+0xfa>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <xTaskGenericNotify+0x88>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	0800606f 	.word	0x0800606f
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08006037 	.word	0x08006037
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	3214      	adds	r2, #20
 8005ffa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	ea42 0103 	orr.w	r1, r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	3214      	adds	r2, #20
 800600a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800600e:	e031      	b.n	8006074 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	3214      	adds	r2, #20
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	3214      	adds	r2, #20
 8006022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006026:	e025      	b.n	8006074 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	3214      	adds	r2, #20
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006034:	e01e      	b.n	8006074 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800603a:	2b02      	cmp	r3, #2
 800603c:	d006      	beq.n	800604c <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	3214      	adds	r2, #20
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800604a:	e013      	b.n	8006074 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 800604c:	2300      	movs	r3, #0
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006050:	e010      	b.n	8006074 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006052:	4b2a      	ldr	r3, [pc, #168]	; (80060fc <xTaskGenericNotify+0x1a4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <xTaskGenericNotify+0x11a>
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e7fe      	b.n	800606c <xTaskGenericNotify+0x114>
                    break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <xTaskGenericNotify+0x11c>

                    break;
 8006072:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006078:	2b01      	cmp	r3, #1
 800607a:	d138      	bne.n	80060ee <xTaskGenericNotify+0x196>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	3304      	adds	r3, #4
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fb47 	bl	8004714 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	2201      	movs	r2, #1
 800608c:	409a      	lsls	r2, r3
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <xTaskGenericNotify+0x1a8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	4a1a      	ldr	r2, [pc, #104]	; (8006100 <xTaskGenericNotify+0x1a8>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <xTaskGenericNotify+0x1ac>)
 80060a6:	441a      	add	r2, r3
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f7fe fad3 	bl	800465a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <xTaskGenericNotify+0x178>
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e7fe      	b.n	80060ce <xTaskGenericNotify+0x176>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <xTaskGenericNotify+0x1b0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d907      	bls.n	80060ee <xTaskGenericNotify+0x196>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <xTaskGenericNotify+0x1b4>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80060ee:	f000 fe7d 	bl	8006dec <vPortExitCritical>

        return xReturn;
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	; 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200001e8 	.word	0x200001e8
 8006100:	200001ec 	.word	0x200001ec
 8006104:	20000110 	.word	0x20000110
 8006108:	2000010c 	.word	0x2000010c
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006110:	b580      	push	{r7, lr}
 8006112:	b090      	sub	sp, #64	; 0x40
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800611e:	2301      	movs	r3, #1
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <xTaskGenericNotifyFromISR+0x2c>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800613a:	e7fe      	b.n	800613a <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <xTaskGenericNotifyFromISR+0x46>
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
 8006154:	e7fe      	b.n	8006154 <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006156:	f000 fef7 	bl	8006f48 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800615e:	f3ef 8211 	mrs	r2, BASEPRI
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	627a      	str	r2, [r7, #36]	; 0x24
 8006174:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	3214      	adds	r2, #20
 8006186:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800618a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800618e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4413      	add	r3, r2
 8006194:	3354      	adds	r3, #84	; 0x54
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800619c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	3354      	adds	r3, #84	; 0x54
 80061a4:	2202      	movs	r2, #2
 80061a6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d83b      	bhi.n	8006226 <xTaskGenericNotifyFromISR+0x116>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <xTaskGenericNotifyFromISR+0xa4>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006243 	.word	0x08006243
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061fd 	.word	0x080061fd
 80061c4:	0800620b 	.word	0x0800620b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	3214      	adds	r2, #20
 80061ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	ea42 0103 	orr.w	r1, r2, r3
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	3214      	adds	r2, #20
 80061de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061e2:	e031      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	3214      	adds	r2, #20
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	3214      	adds	r2, #20
 80061f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061fa:	e025      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	3214      	adds	r2, #20
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006208:	e01e      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800620a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800620e:	2b02      	cmp	r3, #2
 8006210:	d006      	beq.n	8006220 <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	3214      	adds	r2, #20
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800621e:	e013      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006224:	e010      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006226:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <xTaskGenericNotifyFromISR+0x1e0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e7fe      	b.n	8006240 <xTaskGenericNotifyFromISR+0x130>
                    break;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <xTaskGenericNotifyFromISR+0x138>
                    break;
 8006246:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006248:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800624c:	2b01      	cmp	r3, #1
 800624e:	d144      	bne.n	80062da <xTaskGenericNotifyFromISR+0x1ca>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <xTaskGenericNotifyFromISR+0x15c>
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e7fe      	b.n	800626a <xTaskGenericNotifyFromISR+0x15a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626c:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <xTaskGenericNotifyFromISR+0x1e4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d11c      	bne.n	80062ae <xTaskGenericNotifyFromISR+0x19e>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	3304      	adds	r3, #4
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fa4b 	bl	8004714 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	2201      	movs	r2, #1
 8006284:	409a      	lsls	r2, r3
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <xTaskGenericNotifyFromISR+0x1e8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4313      	orrs	r3, r2
 800628c:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <xTaskGenericNotifyFromISR+0x1e8>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4a17      	ldr	r2, [pc, #92]	; (80062fc <xTaskGenericNotifyFromISR+0x1ec>)
 800629e:	441a      	add	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe f9d7 	bl	800465a <vListInsertEnd>
 80062ac:	e005      	b.n	80062ba <xTaskGenericNotifyFromISR+0x1aa>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	3318      	adds	r3, #24
 80062b2:	4619      	mov	r1, r3
 80062b4:	4812      	ldr	r0, [pc, #72]	; (8006300 <xTaskGenericNotifyFromISR+0x1f0>)
 80062b6:	f7fe f9d0 	bl	800465a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <xTaskGenericNotifyFromISR+0x1f4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d908      	bls.n	80062da <xTaskGenericNotifyFromISR+0x1ca>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80062c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <xTaskGenericNotifyFromISR+0x1c4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <xTaskGenericNotifyFromISR+0x1f8>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	617b      	str	r3, [r7, #20]
        __asm volatile
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80062e6:	4618      	mov	r0, r3
 80062e8:	3740      	adds	r7, #64	; 0x40
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200001e8 	.word	0x200001e8
 80062f4:	2000020c 	.word	0x2000020c
 80062f8:	200001ec 	.word	0x200001ec
 80062fc:	20000110 	.word	0x20000110
 8006300:	200001a4 	.word	0x200001a4
 8006304:	2000010c 	.word	0x2000010c
 8006308:	200001f8 	.word	0x200001f8

0800630c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800631c:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe f9f6 	bl	8004714 <uxListRemove>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43da      	mvns	r2, r3
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4013      	ands	r3, r2
 8006342:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006344:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634c:	d10a      	bne.n	8006364 <prvAddCurrentTaskToDelayedList+0x58>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	481a      	ldr	r0, [pc, #104]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800635e:	f7fe f97c 	bl	800465a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006362:	e026      	b.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d209      	bcs.n	8006390 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7fe f98a 	bl	80046a2 <vListInsert>
}
 800638e:	e010      	b.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006390:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7fe f980 	bl	80046a2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80063a2:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d202      	bcs.n	80063b2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6013      	str	r3, [r2, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200001e8 	.word	0x200001e8
 80063c0:	2000010c 	.word	0x2000010c
 80063c4:	200001ec 	.word	0x200001ec
 80063c8:	200001d0 	.word	0x200001d0
 80063cc:	200001a0 	.word	0x200001a0
 80063d0:	2000019c 	.word	0x2000019c
 80063d4:	20000204 	.word	0x20000204

080063d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80063de:	2300      	movs	r3, #0
 80063e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80063e2:	f000 fb2d 	bl	8006a40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <xTimerCreateTimerTask+0x54>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xTimerCreateTimerTask+0x58>)
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	2302      	movs	r3, #2
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063fc:	490d      	ldr	r1, [pc, #52]	; (8006434 <xTimerCreateTimerTask+0x5c>)
 80063fe:	480e      	ldr	r0, [pc, #56]	; (8006438 <xTimerCreateTimerTask+0x60>)
 8006400:	f7fe ff50 	bl	80052a4 <xTaskCreate>
 8006404:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	e7fe      	b.n	800641e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8006420:	687b      	ldr	r3, [r7, #4]
    }
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000240 	.word	0x20000240
 8006430:	20000244 	.word	0x20000244
 8006434:	08008978 	.word	0x08008978
 8006438:	08006625 	.word	0x08006625

0800643c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800644a:	202c      	movs	r0, #44	; 0x2c
 800644c:	f000 fdba 	bl	8006fc4 <pvPortMalloc>
 8006450:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f805 	bl	800647e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006474:	697b      	ldr	r3, [r7, #20]
        }
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <prvInitialiseNewTimer+0x28>
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e7fe      	b.n	80064a4 <prvInitialiseNewTimer+0x26>

        if( pxNewTimer != NULL )
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01e      	beq.n	80064ea <prvInitialiseNewTimer+0x6c>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80064ac:	f000 fac8 	bl	8006a40 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f8b7 	bl	8004640 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <prvInitialiseNewTimer+0x6c>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064de:	f043 0304 	orr.w	r3, r3, #4
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <xTimerGenericCommand+0x2c>
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	e7fe      	b.n	800651e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <xTimerGenericCommand+0x94>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d02a      	beq.n	800657e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b05      	cmp	r3, #5
 8006538:	dc18      	bgt.n	800656c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800653a:	f7ff fbf9 	bl	8005d30 <xTaskGetSchedulerState>
 800653e:	4603      	mov	r3, r0
 8006540:	2b02      	cmp	r3, #2
 8006542:	d109      	bne.n	8006558 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006544:	4b10      	ldr	r3, [pc, #64]	; (8006588 <xTimerGenericCommand+0x94>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	f107 0114 	add.w	r1, r7, #20
 800654c:	2300      	movs	r3, #0
 800654e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006550:	f7fe f9f2 	bl	8004938 <xQueueGenericSend>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24
 8006556:	e012      	b.n	800657e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <xTimerGenericCommand+0x94>)
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	f107 0114 	add.w	r1, r7, #20
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	f7fe f9e8 	bl	8004938 <xQueueGenericSend>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24
 800656a:	e008      	b.n	800657e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <xTimerGenericCommand+0x94>)
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	f107 0114 	add.w	r1, r7, #20
 8006574:	2300      	movs	r3, #0
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	f7fe fad8 	bl	8004b2c <xQueueGenericSendFromISR>
 800657c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	; 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000240 	.word	0x20000240

0800658c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af02      	add	r7, sp, #8
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <prvProcessExpiredTimer+0x94>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f8b5 	bl	8004714 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d021      	beq.n	80065fc <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	18d1      	adds	r1, r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	6978      	ldr	r0, [r7, #20]
 80065c6:	f000 f8d1 	bl	800676c <prvInsertTimerInActiveList>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d0:	2300      	movs	r3, #0
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	2100      	movs	r1, #0
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f7ff ff8a 	bl	80064f4 <xTimerGenericCommand>
 80065e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d112      	bne.n	800660e <prvProcessExpiredTimer+0x82>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e7fe      	b.n	80065fa <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	4798      	blx	r3
    }
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000238 	.word	0x20000238

08006624 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f857 	bl	80066e4 <prvGetNextExpireTime>
 8006636:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4619      	mov	r1, r3
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f803 	bl	8006648 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006642:	f000 f8d5 	bl	80067f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006646:	e7f1      	b.n	800662c <prvTimerTask+0x8>

08006648 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006652:	f7fe ffbb 	bl	80055cc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f866 	bl	800672c <prvSampleTimeNow>
 8006660:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d130      	bne.n	80066ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <prvProcessTimerOrBlockTask+0x3c>
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	429a      	cmp	r2, r3
 8006674:	d806      	bhi.n	8006684 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006676:	f7fe ffb7 	bl	80055e8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff85 	bl	800658c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006682:	e024      	b.n	80066ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <prvProcessTimerOrBlockTask+0x90>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <prvProcessTimerOrBlockTask+0x50>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <prvProcessTimerOrBlockTask+0x52>
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <prvProcessTimerOrBlockTask+0x94>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7fe fdc7 	bl	800523c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80066ae:	f7fe ff9b 	bl	80055e8 <xTaskResumeAll>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <prvProcessTimerOrBlockTask+0x98>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
    }
 80066c8:	e001      	b.n	80066ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80066ca:	f7fe ff8d 	bl	80055e8 <xTaskResumeAll>
    }
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000023c 	.word	0x2000023c
 80066dc:	20000240 	.word	0x20000240
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <prvGetNextExpireTime+0x44>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <prvGetNextExpireTime+0x16>
 80066f6:	2201      	movs	r2, #1
 80066f8:	e000      	b.n	80066fc <prvGetNextExpireTime+0x18>
 80066fa:	2200      	movs	r2, #0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <prvGetNextExpireTime+0x44>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e001      	b.n	8006718 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006718:	68fb      	ldr	r3, [r7, #12]
    }
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000238 	.word	0x20000238

0800672c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006734:	f7fe fff4 	bl	8005720 <xTaskGetTickCount>
 8006738:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <prvSampleTimeNow+0x3c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	429a      	cmp	r2, r3
 8006742:	d205      	bcs.n	8006750 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006744:	f000 f918 	bl	8006978 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e002      	b.n	8006756 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <prvSampleTimeNow+0x3c>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800675c:	68fb      	ldr	r3, [r7, #12]
    }
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000248 	.word	0x20000248

0800676c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	429a      	cmp	r2, r3
 8006790:	d812      	bhi.n	80067b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e01b      	b.n	80067de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <prvInsertTimerInActiveList+0x7c>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fd ff76 	bl	80046a2 <vListInsert>
 80067b6:	e012      	b.n	80067de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d206      	bcs.n	80067ce <prvInsertTimerInActiveList+0x62>
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e007      	b.n	80067de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <prvInsertTimerInActiveList+0x80>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fd ff62 	bl	80046a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80067de:	697b      	ldr	r3, [r7, #20]
    }
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	2000023c 	.word	0x2000023c
 80067ec:	20000238 	.word	0x20000238

080067f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067f6:	e0ac      	b.n	8006952 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f2c0 80a8 	blt.w	8006950 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	3304      	adds	r3, #4
 8006810:	4618      	mov	r0, r3
 8006812:	f7fd ff7f 	bl	8004714 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff ff87 	bl	800672c <prvSampleTimeNow>
 800681e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b09      	cmp	r3, #9
 8006824:	f200 8095 	bhi.w	8006952 <prvProcessReceivedCommands+0x162>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <prvProcessReceivedCommands+0x40>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006859 	.word	0x08006859
 8006834:	08006859 	.word	0x08006859
 8006838:	08006859 	.word	0x08006859
 800683c:	080068cb 	.word	0x080068cb
 8006840:	080068df 	.word	0x080068df
 8006844:	08006927 	.word	0x08006927
 8006848:	08006859 	.word	0x08006859
 800684c:	08006859 	.word	0x08006859
 8006850:	080068cb 	.word	0x080068cb
 8006854:	080068df 	.word	0x080068df
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	18d1      	adds	r1, r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006878:	f7ff ff78 	bl	800676c <prvInsertTimerInActiveList>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d067      	beq.n	8006952 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006888:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d05c      	beq.n	8006952 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	441a      	add	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2300      	movs	r3, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068aa:	f7ff fe23 	bl	80064f4 <xTimerGenericCommand>
 80068ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d14d      	bne.n	8006952 <prvProcessReceivedCommands+0x162>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e7fe      	b.n	80068c8 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80068dc:	e039      	b.n	8006952 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e4:	f043 0301 	orr.w	r3, r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <prvProcessReceivedCommands+0x122>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e7fe      	b.n	8006910 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	18d1      	adds	r1, r2, r3
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006920:	f7ff ff24 	bl	800676c <prvInsertTimerInActiveList>
                        break;
 8006924:	e015      	b.n	8006952 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8006934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006936:	f000 fc21 	bl	800717c <vPortFree>
 800693a:	e00a      	b.n	8006952 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800694e:	e000      	b.n	8006952 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006950:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <prvProcessReceivedCommands+0x184>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f107 0108 	add.w	r1, r7, #8
 800695a:	2200      	movs	r2, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe f98b 	bl	8004c78 <xQueueReceive>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	f47f af47 	bne.w	80067f8 <prvProcessReceivedCommands+0x8>
        }
    }
 800696a:	bf00      	nop
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000240 	.word	0x20000240

08006978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800697e:	e047      	b.n	8006a10 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006980:	4b2d      	ldr	r3, [pc, #180]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698a:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3304      	adds	r3, #4
 8006998:	4618      	mov	r0, r3
 800699a:	f7fd febb 	bl	8004714 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02d      	beq.n	8006a10 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d90e      	bls.n	80069e4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d2:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3304      	adds	r3, #4
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f7fd fe60 	bl	80046a2 <vListInsert>
 80069e2:	e015      	b.n	8006a10 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	2100      	movs	r1, #0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fd80 	bl	80064f4 <xTimerGenericCommand>
 80069f4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <prvSwitchTimerLists+0x98>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	e7fe      	b.n	8006a0e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1b2      	bne.n	8006980 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <prvSwitchTimerLists+0xc4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <prvSwitchTimerLists+0xc0>)
 8006a26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006a28:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <prvSwitchTimerLists+0xc4>)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6013      	str	r3, [r2, #0]
    }
 8006a2e:	bf00      	nop
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000238 	.word	0x20000238
 8006a3c:	2000023c 	.word	0x2000023c

08006a40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006a44:	f000 f9a4 	bl	8006d90 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <prvCheckForValidListAndQueue+0x54>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11d      	bne.n	8006a8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006a50:	4811      	ldr	r0, [pc, #68]	; (8006a98 <prvCheckForValidListAndQueue+0x58>)
 8006a52:	f7fd fdd5 	bl	8004600 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006a56:	4811      	ldr	r0, [pc, #68]	; (8006a9c <prvCheckForValidListAndQueue+0x5c>)
 8006a58:	f7fd fdd2 	bl	8004600 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <prvCheckForValidListAndQueue+0x60>)
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <prvCheckForValidListAndQueue+0x58>)
 8006a60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006a62:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <prvCheckForValidListAndQueue+0x64>)
 8006a64:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <prvCheckForValidListAndQueue+0x5c>)
 8006a66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006a68:	2200      	movs	r2, #0
 8006a6a:	210c      	movs	r1, #12
 8006a6c:	200a      	movs	r0, #10
 8006a6e:	f7fd fee3 	bl	8004838 <xQueueGenericCreate>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <prvCheckForValidListAndQueue+0x54>)
 8006a76:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <prvCheckForValidListAndQueue+0x54>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <prvCheckForValidListAndQueue+0x54>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4908      	ldr	r1, [pc, #32]	; (8006aa8 <prvCheckForValidListAndQueue+0x68>)
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fbb0 	bl	80051ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006a8c:	f000 f9ae 	bl	8006dec <vPortExitCritical>
    }
 8006a90:	bf00      	nop
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000240 	.word	0x20000240
 8006a98:	20000210 	.word	0x20000210
 8006a9c:	20000224 	.word	0x20000224
 8006aa0:	20000238 	.word	0x20000238
 8006aa4:	2000023c 	.word	0x2000023c
 8006aa8:	08008980 	.word	0x08008980

08006aac <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <xTimerIsTimerActive+0x26>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e7fe      	b.n	8006ad0 <xTimerIsTimerActive+0x24>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8006ad2:	f000 f95d 	bl	8006d90 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <xTimerIsTimerActive+0x3e>
            {
                xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e001      	b.n	8006aee <xTimerIsTimerActive+0x42>
            }
            else
            {
                xReturn = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8006aee:	f000 f97d 	bl	8006dec <vPortExitCritical>

        return xReturn;
 8006af2:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <pvTimerGetTimerID+0x26>
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e7fe      	b.n	8006b20 <pvTimerGetTimerID+0x24>

        taskENTER_CRITICAL();
 8006b22:	f000 f935 	bl	8006d90 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006b2c:	f000 f95e 	bl	8006dec <vPortExitCritical>

        return pvReturn;
 8006b30:	693b      	ldr	r3, [r7, #16]
    }
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3b04      	subs	r3, #4
 8006b4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b04      	subs	r3, #4
 8006b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0201 	bic.w	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3b04      	subs	r3, #4
 8006b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006b6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <pxPortInitialiseStack+0x64>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3b14      	subs	r3, #20
 8006b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f06f 0202 	mvn.w	r2, #2
 8006b8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3b20      	subs	r3, #32
 8006b90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	08006ba5 	.word	0x08006ba5

08006ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <prvTaskExitError+0x50>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb6:	d009      	beq.n	8006bcc <prvTaskExitError+0x28>
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e7fe      	b.n	8006bca <prvTaskExitError+0x26>
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006bde:	bf00      	nop
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0fc      	beq.n	8006be0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000002c 	.word	0x2000002c
	...

08006c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <pxCurrentTCBConst2>)
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	6808      	ldr	r0, [r1, #0]
 8006c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	f380 8809 	msr	PSP, r0
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8811 	msr	BASEPRI, r0
 8006c1a:	4770      	bx	lr
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst2>:
 8006c20:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006c28:	4808      	ldr	r0, [pc, #32]	; (8006c4c <prvPortStartFirstTask+0x24>)
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f380 8808 	msr	MSP, r0
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8814 	msr	CONTROL, r0
 8006c3a:	b662      	cpsie	i
 8006c3c:	b661      	cpsie	f
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	df00      	svc	0
 8006c48:	bf00      	nop
 8006c4a:	0000      	.short	0x0000
 8006c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop

08006c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c5a:	4b44      	ldr	r3, [pc, #272]	; (8006d6c <xPortStartScheduler+0x118>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a44      	ldr	r2, [pc, #272]	; (8006d70 <xPortStartScheduler+0x11c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d109      	bne.n	8006c78 <xPortStartScheduler+0x24>
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	e7fe      	b.n	8006c76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c78:	4b3c      	ldr	r3, [pc, #240]	; (8006d6c <xPortStartScheduler+0x118>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a3d      	ldr	r2, [pc, #244]	; (8006d74 <xPortStartScheduler+0x120>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d109      	bne.n	8006c96 <xPortStartScheduler+0x42>
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e7fe      	b.n	8006c94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c96:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <xPortStartScheduler+0x124>)
 8006c98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	22ff      	movs	r2, #255	; 0xff
 8006ca6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <xPortStartScheduler+0x128>)
 8006cbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cbe:	4b30      	ldr	r3, [pc, #192]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006cc0:	2207      	movs	r2, #7
 8006cc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc4:	e009      	b.n	8006cda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006cce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d0ef      	beq.n	8006cc6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ce6:	4b26      	ldr	r3, [pc, #152]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f1c3 0307 	rsb	r3, r3, #7
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d009      	beq.n	8006d06 <xPortStartScheduler+0xb2>
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	e7fe      	b.n	8006d04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d06:	4b1e      	ldr	r3, [pc, #120]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006d0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <xPortStartScheduler+0x12c>)
 8006d1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <xPortStartScheduler+0x130>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <xPortStartScheduler+0x130>)
 8006d2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006d30:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <xPortStartScheduler+0x130>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <xPortStartScheduler+0x130>)
 8006d36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006d3c:	f000 f8d4 	bl	8006ee8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <xPortStartScheduler+0x134>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006d46:	f000 f8f3 	bl	8006f30 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <xPortStartScheduler+0x138>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0f      	ldr	r2, [pc, #60]	; (8006d8c <xPortStartScheduler+0x138>)
 8006d50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006d56:	f7ff ff67 	bl	8006c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006d5a:	f7fe fda9 	bl	80058b0 <vTaskSwitchContext>
    prvTaskExitError();
 8006d5e:	f7ff ff21 	bl	8006ba4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	e000ed00 	.word	0xe000ed00
 8006d70:	410fc271 	.word	0x410fc271
 8006d74:	410fc270 	.word	0x410fc270
 8006d78:	e000e400 	.word	0xe000e400
 8006d7c:	2000024c 	.word	0x2000024c
 8006d80:	20000250 	.word	0x20000250
 8006d84:	e000ed20 	.word	0xe000ed20
 8006d88:	2000002c 	.word	0x2000002c
 8006d8c:	e000ef34 	.word	0xe000ef34

08006d90 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <vPortEnterCritical+0x54>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <vPortEnterCritical+0x54>)
 8006db0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006db2:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <vPortEnterCritical+0x54>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d10e      	bne.n	8006dd8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dba:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <vPortEnterCritical+0x58>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <vPortEnterCritical+0x48>
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	e7fe      	b.n	8006dd6 <vPortEnterCritical+0x46>
    }
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	2000002c 	.word	0x2000002c
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <vPortExitCritical+0x4c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <vPortExitCritical+0x22>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e7fe      	b.n	8006e0c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <vPortExitCritical+0x4c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	4a08      	ldr	r2, [pc, #32]	; (8006e38 <vPortExitCritical+0x4c>)
 8006e16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <vPortExitCritical+0x4c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <vPortExitCritical+0x3e>
 8006e20:	2300      	movs	r3, #0
 8006e22:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	2000002c 	.word	0x2000002c
 8006e3c:	00000000 	.word	0x00000000

08006e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006e40:	f3ef 8009 	mrs	r0, PSP
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <pxCurrentTCBConst>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	f01e 0f10 	tst.w	lr, #16
 8006e50:	bf08      	it	eq
 8006e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	6010      	str	r0, [r2, #0]
 8006e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e64:	f380 8811 	msr	BASEPRI, r0
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f7fe fd1e 	bl	80058b0 <vTaskSwitchContext>
 8006e74:	f04f 0000 	mov.w	r0, #0
 8006e78:	f380 8811 	msr	BASEPRI, r0
 8006e7c:	bc09      	pop	{r0, r3}
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e86:	f01e 0f10 	tst.w	lr, #16
 8006e8a:	bf08      	it	eq
 8006e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e90:	f380 8809 	msr	PSP, r0
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	f3af 8000 	nop.w

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
        __asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006ec0:	f7fe fc3e 	bl	8005740 <xTaskIncrementTick>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <SysTick_Handler+0x3c>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <vPortSetupTimerInterrupt+0x34>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <vPortSetupTimerInterrupt+0x38>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vPortSetupTimerInterrupt+0x3c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <vPortSetupTimerInterrupt+0x40>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	099b      	lsrs	r3, r3, #6
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <vPortSetupTimerInterrupt+0x44>)
 8006f06:	3b01      	subs	r3, #1
 8006f08:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <vPortSetupTimerInterrupt+0x34>)
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	601a      	str	r2, [r3, #0]
}
 8006f10:	bf00      	nop
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	e000e010 	.word	0xe000e010
 8006f20:	e000e018 	.word	0xe000e018
 8006f24:	20000018 	.word	0x20000018
 8006f28:	10624dd3 	.word	0x10624dd3
 8006f2c:	e000e014 	.word	0xe000e014

08006f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f40 <vPortEnableVFP+0x10>
 8006f34:	6801      	ldr	r1, [r0, #0]
 8006f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f3a:	6001      	str	r1, [r0, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	0000      	.short	0x0000
 8006f40:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006f4e:	f3ef 8305 	mrs	r3, IPSR
 8006f52:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b0f      	cmp	r3, #15
 8006f58:	d913      	bls.n	8006f82 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f5a:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <vPortValidateInterruptPriority+0x6c>)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f64:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <vPortValidateInterruptPriority+0x70>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	7afa      	ldrb	r2, [r7, #11]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d209      	bcs.n	8006f82 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e7fe      	b.n	8006f80 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f82:	4b0e      	ldr	r3, [pc, #56]	; (8006fbc <vPortValidateInterruptPriority+0x74>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <vPortValidateInterruptPriority+0x78>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d909      	bls.n	8006fa6 <vPortValidateInterruptPriority+0x5e>
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	e7fe      	b.n	8006fa4 <vPortValidateInterruptPriority+0x5c>
    }
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	e000e3f0 	.word	0xe000e3f0
 8006fb8:	2000024c 	.word	0x2000024c
 8006fbc:	e000ed0c 	.word	0xe000ed0c
 8006fc0:	20000250 	.word	0x20000250

08006fc4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006fd0:	f7fe fafc 	bl	80055cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006fd4:	4b63      	ldr	r3, [pc, #396]	; (8007164 <pvPortMalloc+0x1a0>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006fdc:	f000 f92e 	bl	800723c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fe0:	4b61      	ldr	r3, [pc, #388]	; (8007168 <pvPortMalloc+0x1a4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f040 80a5 	bne.w	8007138 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02c      	beq.n	800704e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d226      	bcs.n	800704e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8007000:	2208      	movs	r2, #8
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d020      	beq.n	8007054 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f023 0307 	bic.w	r3, r3, #7
 8007018:	3308      	adds	r3, #8
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d213      	bcs.n	8007048 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	3308      	adds	r3, #8
 8007028:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <pvPortMalloc+0x90>
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	e7fe      	b.n	8007046 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800704c:	e002      	b.n	8007054 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
 8007052:	e000      	b.n	8007056 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007054:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d06d      	beq.n	8007138 <pvPortMalloc+0x174>
 800705c:	4b43      	ldr	r3, [pc, #268]	; (800716c <pvPortMalloc+0x1a8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	429a      	cmp	r2, r3
 8007064:	d868      	bhi.n	8007138 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007066:	4b42      	ldr	r3, [pc, #264]	; (8007170 <pvPortMalloc+0x1ac>)
 8007068:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800706a:	4b41      	ldr	r3, [pc, #260]	; (8007170 <pvPortMalloc+0x1ac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007070:	e004      	b.n	800707c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d903      	bls.n	800708e <pvPortMalloc+0xca>
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f1      	bne.n	8007072 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800708e:	4b35      	ldr	r3, [pc, #212]	; (8007164 <pvPortMalloc+0x1a0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	429a      	cmp	r2, r3
 8007096:	d04f      	beq.n	8007138 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2208      	movs	r2, #8
 800709e:	4413      	add	r3, r2
 80070a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	1ad2      	subs	r2, r2, r3
 80070b2:	2308      	movs	r3, #8
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d91e      	bls.n	80070f8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <pvPortMalloc+0x11c>
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	e7fe      	b.n	80070de <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f2:	69b8      	ldr	r0, [r7, #24]
 80070f4:	f000 f904 	bl	8007300 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	; (800716c <pvPortMalloc+0x1a8>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a1a      	ldr	r2, [pc, #104]	; (800716c <pvPortMalloc+0x1a8>)
 8007104:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007106:	4b19      	ldr	r3, [pc, #100]	; (800716c <pvPortMalloc+0x1a8>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <pvPortMalloc+0x1b0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <pvPortMalloc+0x1a8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <pvPortMalloc+0x1b0>)
 8007118:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <pvPortMalloc+0x1a4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	431a      	orrs	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <pvPortMalloc+0x1b4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a10      	ldr	r2, [pc, #64]	; (8007178 <pvPortMalloc+0x1b4>)
 8007136:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007138:	f7fe fa56 	bl	80055e8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <pvPortMalloc+0x196>
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	e7fe      	b.n	8007158 <pvPortMalloc+0x194>
    return pvReturn;
 800715a:	69fb      	ldr	r3, [r7, #28]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	2001925c 	.word	0x2001925c
 8007168:	20019270 	.word	0x20019270
 800716c:	20019260 	.word	0x20019260
 8007170:	20019254 	.word	0x20019254
 8007174:	20019264 	.word	0x20019264
 8007178:	20019268 	.word	0x20019268

0800717c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d04b      	beq.n	8007226 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800718e:	2308      	movs	r3, #8
 8007190:	425b      	negs	r3, r3
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4413      	add	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <vPortFree+0xb4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <vPortFree+0x42>
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e7fe      	b.n	80071bc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <vPortFree+0x5e>
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	e7fe      	b.n	80071d8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <vPortFree+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01e      	beq.n	8007226 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d11a      	bne.n	8007226 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <vPortFree+0xb4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	43db      	mvns	r3, r3
 80071fa:	401a      	ands	r2, r3
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007200:	f7fe f9e4 	bl	80055cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <vPortFree+0xb8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4413      	add	r3, r2
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <vPortFree+0xb8>)
 8007210:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f000 f874 	bl	8007300 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <vPortFree+0xbc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	4a06      	ldr	r2, [pc, #24]	; (8007238 <vPortFree+0xbc>)
 8007220:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007222:	f7fe f9e1 	bl	80055e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007226:	bf00      	nop
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20019270 	.word	0x20019270
 8007234:	20019260 	.word	0x20019260
 8007238:	2001926c 	.word	0x2001926c

0800723c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007242:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8007246:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <prvHeapInit+0xac>)
 800724a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3307      	adds	r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <prvHeapInit+0xac>)
 800726c:	4413      	add	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007274:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <prvHeapInit+0xb0>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <prvHeapInit+0xb0>)
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007288:	2208      	movs	r2, #8
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <prvHeapInit+0xb4>)
 800729c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <prvHeapInit+0xb4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <prvHeapInit+0xb4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <prvHeapInit+0xb4>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <prvHeapInit+0xb8>)
 80072ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <prvHeapInit+0xbc>)
 80072d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d4:	4b09      	ldr	r3, [pc, #36]	; (80072fc <prvHeapInit+0xc0>)
 80072d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072da:	601a      	str	r2, [r3, #0]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000254 	.word	0x20000254
 80072ec:	20019254 	.word	0x20019254
 80072f0:	2001925c 	.word	0x2001925c
 80072f4:	20019264 	.word	0x20019264
 80072f8:	20019260 	.word	0x20019260
 80072fc:	20019270 	.word	0x20019270

08007300 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007308:	4b28      	ldr	r3, [pc, #160]	; (80073ac <prvInsertBlockIntoFreeList+0xac>)
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <prvInsertBlockIntoFreeList+0x14>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d8f7      	bhi.n	800730e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4413      	add	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d108      	bne.n	8007342 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	441a      	add	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d118      	bne.n	8007388 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <prvInsertBlockIntoFreeList+0xb0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d00d      	beq.n	800737e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	441a      	add	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e008      	b.n	8007390 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <prvInsertBlockIntoFreeList+0xb0>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e003      	b.n	8007390 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d002      	beq.n	800739e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20019254 	.word	0x20019254
 80073b0:	2001925c 	.word	0x2001925c

080073b4 <__errno>:
 80073b4:	4b01      	ldr	r3, [pc, #4]	; (80073bc <__errno+0x8>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000030 	.word	0x20000030

080073c0 <__libc_init_array>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4e0d      	ldr	r6, [pc, #52]	; (80073f8 <__libc_init_array+0x38>)
 80073c4:	4c0d      	ldr	r4, [pc, #52]	; (80073fc <__libc_init_array+0x3c>)
 80073c6:	1ba4      	subs	r4, r4, r6
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	2500      	movs	r5, #0
 80073cc:	42a5      	cmp	r5, r4
 80073ce:	d109      	bne.n	80073e4 <__libc_init_array+0x24>
 80073d0:	4e0b      	ldr	r6, [pc, #44]	; (8007400 <__libc_init_array+0x40>)
 80073d2:	4c0c      	ldr	r4, [pc, #48]	; (8007404 <__libc_init_array+0x44>)
 80073d4:	f001 f8ca 	bl	800856c <_init>
 80073d8:	1ba4      	subs	r4, r4, r6
 80073da:	10a4      	asrs	r4, r4, #2
 80073dc:	2500      	movs	r5, #0
 80073de:	42a5      	cmp	r5, r4
 80073e0:	d105      	bne.n	80073ee <__libc_init_array+0x2e>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073e8:	4798      	blx	r3
 80073ea:	3501      	adds	r5, #1
 80073ec:	e7ee      	b.n	80073cc <__libc_init_array+0xc>
 80073ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f2:	4798      	blx	r3
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7f2      	b.n	80073de <__libc_init_array+0x1e>
 80073f8:	08008a40 	.word	0x08008a40
 80073fc:	08008a40 	.word	0x08008a40
 8007400:	08008a40 	.word	0x08008a40
 8007404:	08008a44 	.word	0x08008a44

08007408 <memcpy>:
 8007408:	b510      	push	{r4, lr}
 800740a:	1e43      	subs	r3, r0, #1
 800740c:	440a      	add	r2, r1
 800740e:	4291      	cmp	r1, r2
 8007410:	d100      	bne.n	8007414 <memcpy+0xc>
 8007412:	bd10      	pop	{r4, pc}
 8007414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741c:	e7f7      	b.n	800740e <memcpy+0x6>

0800741e <memset>:
 800741e:	4402      	add	r2, r0
 8007420:	4603      	mov	r3, r0
 8007422:	4293      	cmp	r3, r2
 8007424:	d100      	bne.n	8007428 <memset+0xa>
 8007426:	4770      	bx	lr
 8007428:	f803 1b01 	strb.w	r1, [r3], #1
 800742c:	e7f9      	b.n	8007422 <memset+0x4>
	...

08007430 <iprintf>:
 8007430:	b40f      	push	{r0, r1, r2, r3}
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <iprintf+0x2c>)
 8007434:	b513      	push	{r0, r1, r4, lr}
 8007436:	681c      	ldr	r4, [r3, #0]
 8007438:	b124      	cbz	r4, 8007444 <iprintf+0x14>
 800743a:	69a3      	ldr	r3, [r4, #24]
 800743c:	b913      	cbnz	r3, 8007444 <iprintf+0x14>
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f86e 	bl	8007520 <__sinit>
 8007444:	ab05      	add	r3, sp, #20
 8007446:	9a04      	ldr	r2, [sp, #16]
 8007448:	68a1      	ldr	r1, [r4, #8]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fac7 	bl	80079e0 <_vfiprintf_r>
 8007452:	b002      	add	sp, #8
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr
 800745c:	20000030 	.word	0x20000030

08007460 <siprintf>:
 8007460:	b40e      	push	{r1, r2, r3}
 8007462:	b500      	push	{lr}
 8007464:	b09c      	sub	sp, #112	; 0x70
 8007466:	ab1d      	add	r3, sp, #116	; 0x74
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9006      	str	r0, [sp, #24]
 800746c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007470:	4809      	ldr	r0, [pc, #36]	; (8007498 <siprintf+0x38>)
 8007472:	9107      	str	r1, [sp, #28]
 8007474:	9104      	str	r1, [sp, #16]
 8007476:	4909      	ldr	r1, [pc, #36]	; (800749c <siprintf+0x3c>)
 8007478:	f853 2b04 	ldr.w	r2, [r3], #4
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	a902      	add	r1, sp, #8
 8007484:	f000 f98a 	bl	800779c <_svfiprintf_r>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	b01c      	add	sp, #112	; 0x70
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	20000030 	.word	0x20000030
 800749c:	ffff0208 	.word	0xffff0208

080074a0 <std>:
 80074a0:	2300      	movs	r3, #0
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	e9c0 3300 	strd	r3, r3, [r0]
 80074aa:	6083      	str	r3, [r0, #8]
 80074ac:	8181      	strh	r1, [r0, #12]
 80074ae:	6643      	str	r3, [r0, #100]	; 0x64
 80074b0:	81c2      	strh	r2, [r0, #14]
 80074b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074b6:	6183      	str	r3, [r0, #24]
 80074b8:	4619      	mov	r1, r3
 80074ba:	2208      	movs	r2, #8
 80074bc:	305c      	adds	r0, #92	; 0x5c
 80074be:	f7ff ffae 	bl	800741e <memset>
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <std+0x38>)
 80074c4:	6263      	str	r3, [r4, #36]	; 0x24
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <std+0x3c>)
 80074c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <std+0x40>)
 80074cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <std+0x44>)
 80074d0:	6224      	str	r4, [r4, #32]
 80074d2:	6323      	str	r3, [r4, #48]	; 0x30
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop
 80074d8:	08007f3d 	.word	0x08007f3d
 80074dc:	08007f5f 	.word	0x08007f5f
 80074e0:	08007f97 	.word	0x08007f97
 80074e4:	08007fbb 	.word	0x08007fbb

080074e8 <_cleanup_r>:
 80074e8:	4901      	ldr	r1, [pc, #4]	; (80074f0 <_cleanup_r+0x8>)
 80074ea:	f000 b885 	b.w	80075f8 <_fwalk_reent>
 80074ee:	bf00      	nop
 80074f0:	08008295 	.word	0x08008295

080074f4 <__sfmoreglue>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	1e4a      	subs	r2, r1, #1
 80074f8:	2568      	movs	r5, #104	; 0x68
 80074fa:	4355      	muls	r5, r2
 80074fc:	460e      	mov	r6, r1
 80074fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007502:	f000 f897 	bl	8007634 <_malloc_r>
 8007506:	4604      	mov	r4, r0
 8007508:	b140      	cbz	r0, 800751c <__sfmoreglue+0x28>
 800750a:	2100      	movs	r1, #0
 800750c:	e9c0 1600 	strd	r1, r6, [r0]
 8007510:	300c      	adds	r0, #12
 8007512:	60a0      	str	r0, [r4, #8]
 8007514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007518:	f7ff ff81 	bl	800741e <memset>
 800751c:	4620      	mov	r0, r4
 800751e:	bd70      	pop	{r4, r5, r6, pc}

08007520 <__sinit>:
 8007520:	6983      	ldr	r3, [r0, #24]
 8007522:	b510      	push	{r4, lr}
 8007524:	4604      	mov	r4, r0
 8007526:	bb33      	cbnz	r3, 8007576 <__sinit+0x56>
 8007528:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800752c:	6503      	str	r3, [r0, #80]	; 0x50
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <__sinit+0x58>)
 8007530:	4a12      	ldr	r2, [pc, #72]	; (800757c <__sinit+0x5c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6282      	str	r2, [r0, #40]	; 0x28
 8007536:	4298      	cmp	r0, r3
 8007538:	bf04      	itt	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	6183      	streq	r3, [r0, #24]
 800753e:	f000 f81f 	bl	8007580 <__sfp>
 8007542:	6060      	str	r0, [r4, #4]
 8007544:	4620      	mov	r0, r4
 8007546:	f000 f81b 	bl	8007580 <__sfp>
 800754a:	60a0      	str	r0, [r4, #8]
 800754c:	4620      	mov	r0, r4
 800754e:	f000 f817 	bl	8007580 <__sfp>
 8007552:	2200      	movs	r2, #0
 8007554:	60e0      	str	r0, [r4, #12]
 8007556:	2104      	movs	r1, #4
 8007558:	6860      	ldr	r0, [r4, #4]
 800755a:	f7ff ffa1 	bl	80074a0 <std>
 800755e:	2201      	movs	r2, #1
 8007560:	2109      	movs	r1, #9
 8007562:	68a0      	ldr	r0, [r4, #8]
 8007564:	f7ff ff9c 	bl	80074a0 <std>
 8007568:	2202      	movs	r2, #2
 800756a:	2112      	movs	r1, #18
 800756c:	68e0      	ldr	r0, [r4, #12]
 800756e:	f7ff ff97 	bl	80074a0 <std>
 8007572:	2301      	movs	r3, #1
 8007574:	61a3      	str	r3, [r4, #24]
 8007576:	bd10      	pop	{r4, pc}
 8007578:	080089a0 	.word	0x080089a0
 800757c:	080074e9 	.word	0x080074e9

08007580 <__sfp>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	4b1b      	ldr	r3, [pc, #108]	; (80075f0 <__sfp+0x70>)
 8007584:	681e      	ldr	r6, [r3, #0]
 8007586:	69b3      	ldr	r3, [r6, #24]
 8007588:	4607      	mov	r7, r0
 800758a:	b913      	cbnz	r3, 8007592 <__sfp+0x12>
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ffc7 	bl	8007520 <__sinit>
 8007592:	3648      	adds	r6, #72	; 0x48
 8007594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007598:	3b01      	subs	r3, #1
 800759a:	d503      	bpl.n	80075a4 <__sfp+0x24>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	b133      	cbz	r3, 80075ae <__sfp+0x2e>
 80075a0:	6836      	ldr	r6, [r6, #0]
 80075a2:	e7f7      	b.n	8007594 <__sfp+0x14>
 80075a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075a8:	b16d      	cbz	r5, 80075c6 <__sfp+0x46>
 80075aa:	3468      	adds	r4, #104	; 0x68
 80075ac:	e7f4      	b.n	8007598 <__sfp+0x18>
 80075ae:	2104      	movs	r1, #4
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff ff9f 	bl	80074f4 <__sfmoreglue>
 80075b6:	6030      	str	r0, [r6, #0]
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1f1      	bne.n	80075a0 <__sfp+0x20>
 80075bc:	230c      	movs	r3, #12
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4604      	mov	r4, r0
 80075c2:	4620      	mov	r0, r4
 80075c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <__sfp+0x74>)
 80075c8:	6665      	str	r5, [r4, #100]	; 0x64
 80075ca:	e9c4 5500 	strd	r5, r5, [r4]
 80075ce:	60a5      	str	r5, [r4, #8]
 80075d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80075d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80075d8:	2208      	movs	r2, #8
 80075da:	4629      	mov	r1, r5
 80075dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075e0:	f7ff ff1d 	bl	800741e <memset>
 80075e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075ec:	e7e9      	b.n	80075c2 <__sfp+0x42>
 80075ee:	bf00      	nop
 80075f0:	080089a0 	.word	0x080089a0
 80075f4:	ffff0001 	.word	0xffff0001

080075f8 <_fwalk_reent>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	4680      	mov	r8, r0
 80075fe:	4689      	mov	r9, r1
 8007600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007604:	2600      	movs	r6, #0
 8007606:	b914      	cbnz	r4, 800760e <_fwalk_reent+0x16>
 8007608:	4630      	mov	r0, r6
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007612:	3f01      	subs	r7, #1
 8007614:	d501      	bpl.n	800761a <_fwalk_reent+0x22>
 8007616:	6824      	ldr	r4, [r4, #0]
 8007618:	e7f5      	b.n	8007606 <_fwalk_reent+0xe>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d907      	bls.n	8007630 <_fwalk_reent+0x38>
 8007620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007624:	3301      	adds	r3, #1
 8007626:	d003      	beq.n	8007630 <_fwalk_reent+0x38>
 8007628:	4629      	mov	r1, r5
 800762a:	4640      	mov	r0, r8
 800762c:	47c8      	blx	r9
 800762e:	4306      	orrs	r6, r0
 8007630:	3568      	adds	r5, #104	; 0x68
 8007632:	e7ee      	b.n	8007612 <_fwalk_reent+0x1a>

08007634 <_malloc_r>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	1ccd      	adds	r5, r1, #3
 8007638:	f025 0503 	bic.w	r5, r5, #3
 800763c:	3508      	adds	r5, #8
 800763e:	2d0c      	cmp	r5, #12
 8007640:	bf38      	it	cc
 8007642:	250c      	movcc	r5, #12
 8007644:	2d00      	cmp	r5, #0
 8007646:	4606      	mov	r6, r0
 8007648:	db01      	blt.n	800764e <_malloc_r+0x1a>
 800764a:	42a9      	cmp	r1, r5
 800764c:	d903      	bls.n	8007656 <_malloc_r+0x22>
 800764e:	230c      	movs	r3, #12
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	2000      	movs	r0, #0
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	f000 fed6 	bl	8008406 <__malloc_lock>
 800765a:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <_malloc_r+0xac>)
 800765c:	6814      	ldr	r4, [r2, #0]
 800765e:	4621      	mov	r1, r4
 8007660:	b991      	cbnz	r1, 8007688 <_malloc_r+0x54>
 8007662:	4c20      	ldr	r4, [pc, #128]	; (80076e4 <_malloc_r+0xb0>)
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	b91b      	cbnz	r3, 8007670 <_malloc_r+0x3c>
 8007668:	4630      	mov	r0, r6
 800766a:	f000 fc57 	bl	8007f1c <_sbrk_r>
 800766e:	6020      	str	r0, [r4, #0]
 8007670:	4629      	mov	r1, r5
 8007672:	4630      	mov	r0, r6
 8007674:	f000 fc52 	bl	8007f1c <_sbrk_r>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d124      	bne.n	80076c6 <_malloc_r+0x92>
 800767c:	230c      	movs	r3, #12
 800767e:	6033      	str	r3, [r6, #0]
 8007680:	4630      	mov	r0, r6
 8007682:	f000 fec1 	bl	8008408 <__malloc_unlock>
 8007686:	e7e4      	b.n	8007652 <_malloc_r+0x1e>
 8007688:	680b      	ldr	r3, [r1, #0]
 800768a:	1b5b      	subs	r3, r3, r5
 800768c:	d418      	bmi.n	80076c0 <_malloc_r+0x8c>
 800768e:	2b0b      	cmp	r3, #11
 8007690:	d90f      	bls.n	80076b2 <_malloc_r+0x7e>
 8007692:	600b      	str	r3, [r1, #0]
 8007694:	50cd      	str	r5, [r1, r3]
 8007696:	18cc      	adds	r4, r1, r3
 8007698:	4630      	mov	r0, r6
 800769a:	f000 feb5 	bl	8008408 <__malloc_unlock>
 800769e:	f104 000b 	add.w	r0, r4, #11
 80076a2:	1d23      	adds	r3, r4, #4
 80076a4:	f020 0007 	bic.w	r0, r0, #7
 80076a8:	1ac3      	subs	r3, r0, r3
 80076aa:	d0d3      	beq.n	8007654 <_malloc_r+0x20>
 80076ac:	425a      	negs	r2, r3
 80076ae:	50e2      	str	r2, [r4, r3]
 80076b0:	e7d0      	b.n	8007654 <_malloc_r+0x20>
 80076b2:	428c      	cmp	r4, r1
 80076b4:	684b      	ldr	r3, [r1, #4]
 80076b6:	bf16      	itet	ne
 80076b8:	6063      	strne	r3, [r4, #4]
 80076ba:	6013      	streq	r3, [r2, #0]
 80076bc:	460c      	movne	r4, r1
 80076be:	e7eb      	b.n	8007698 <_malloc_r+0x64>
 80076c0:	460c      	mov	r4, r1
 80076c2:	6849      	ldr	r1, [r1, #4]
 80076c4:	e7cc      	b.n	8007660 <_malloc_r+0x2c>
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d005      	beq.n	80076dc <_malloc_r+0xa8>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4630      	mov	r0, r6
 80076d4:	f000 fc22 	bl	8007f1c <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d0cf      	beq.n	800767c <_malloc_r+0x48>
 80076dc:	6025      	str	r5, [r4, #0]
 80076de:	e7db      	b.n	8007698 <_malloc_r+0x64>
 80076e0:	20019274 	.word	0x20019274
 80076e4:	20019278 	.word	0x20019278

080076e8 <__ssputs_r>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	688e      	ldr	r6, [r1, #8]
 80076ee:	429e      	cmp	r6, r3
 80076f0:	4682      	mov	sl, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	4690      	mov	r8, r2
 80076f6:	4699      	mov	r9, r3
 80076f8:	d837      	bhi.n	800776a <__ssputs_r+0x82>
 80076fa:	898a      	ldrh	r2, [r1, #12]
 80076fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007700:	d031      	beq.n	8007766 <__ssputs_r+0x7e>
 8007702:	6825      	ldr	r5, [r4, #0]
 8007704:	6909      	ldr	r1, [r1, #16]
 8007706:	1a6f      	subs	r7, r5, r1
 8007708:	6965      	ldr	r5, [r4, #20]
 800770a:	2302      	movs	r3, #2
 800770c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007710:	fb95 f5f3 	sdiv	r5, r5, r3
 8007714:	f109 0301 	add.w	r3, r9, #1
 8007718:	443b      	add	r3, r7
 800771a:	429d      	cmp	r5, r3
 800771c:	bf38      	it	cc
 800771e:	461d      	movcc	r5, r3
 8007720:	0553      	lsls	r3, r2, #21
 8007722:	d530      	bpl.n	8007786 <__ssputs_r+0x9e>
 8007724:	4629      	mov	r1, r5
 8007726:	f7ff ff85 	bl	8007634 <_malloc_r>
 800772a:	4606      	mov	r6, r0
 800772c:	b950      	cbnz	r0, 8007744 <__ssputs_r+0x5c>
 800772e:	230c      	movs	r3, #12
 8007730:	f8ca 3000 	str.w	r3, [sl]
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800773a:	81a3      	strh	r3, [r4, #12]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007744:	463a      	mov	r2, r7
 8007746:	6921      	ldr	r1, [r4, #16]
 8007748:	f7ff fe5e 	bl	8007408 <memcpy>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	81a3      	strh	r3, [r4, #12]
 8007758:	6126      	str	r6, [r4, #16]
 800775a:	6165      	str	r5, [r4, #20]
 800775c:	443e      	add	r6, r7
 800775e:	1bed      	subs	r5, r5, r7
 8007760:	6026      	str	r6, [r4, #0]
 8007762:	60a5      	str	r5, [r4, #8]
 8007764:	464e      	mov	r6, r9
 8007766:	454e      	cmp	r6, r9
 8007768:	d900      	bls.n	800776c <__ssputs_r+0x84>
 800776a:	464e      	mov	r6, r9
 800776c:	4632      	mov	r2, r6
 800776e:	4641      	mov	r1, r8
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	f000 fe2f 	bl	80083d4 <memmove>
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	1b9b      	subs	r3, r3, r6
 800777a:	60a3      	str	r3, [r4, #8]
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	441e      	add	r6, r3
 8007780:	6026      	str	r6, [r4, #0]
 8007782:	2000      	movs	r0, #0
 8007784:	e7dc      	b.n	8007740 <__ssputs_r+0x58>
 8007786:	462a      	mov	r2, r5
 8007788:	f000 fe8e 	bl	80084a8 <_realloc_r>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d1e2      	bne.n	8007758 <__ssputs_r+0x70>
 8007792:	6921      	ldr	r1, [r4, #16]
 8007794:	4650      	mov	r0, sl
 8007796:	f000 fe39 	bl	800840c <_free_r>
 800779a:	e7c8      	b.n	800772e <__ssputs_r+0x46>

0800779c <_svfiprintf_r>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	461d      	mov	r5, r3
 80077a2:	898b      	ldrh	r3, [r1, #12]
 80077a4:	061f      	lsls	r7, r3, #24
 80077a6:	b09d      	sub	sp, #116	; 0x74
 80077a8:	4680      	mov	r8, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	4616      	mov	r6, r2
 80077ae:	d50f      	bpl.n	80077d0 <_svfiprintf_r+0x34>
 80077b0:	690b      	ldr	r3, [r1, #16]
 80077b2:	b96b      	cbnz	r3, 80077d0 <_svfiprintf_r+0x34>
 80077b4:	2140      	movs	r1, #64	; 0x40
 80077b6:	f7ff ff3d 	bl	8007634 <_malloc_r>
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	6120      	str	r0, [r4, #16]
 80077be:	b928      	cbnz	r0, 80077cc <_svfiprintf_r+0x30>
 80077c0:	230c      	movs	r3, #12
 80077c2:	f8c8 3000 	str.w	r3, [r8]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ca:	e0c8      	b.n	800795e <_svfiprintf_r+0x1c2>
 80077cc:	2340      	movs	r3, #64	; 0x40
 80077ce:	6163      	str	r3, [r4, #20]
 80077d0:	2300      	movs	r3, #0
 80077d2:	9309      	str	r3, [sp, #36]	; 0x24
 80077d4:	2320      	movs	r3, #32
 80077d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e0:	9503      	str	r5, [sp, #12]
 80077e2:	f04f 0b01 	mov.w	fp, #1
 80077e6:	4637      	mov	r7, r6
 80077e8:	463d      	mov	r5, r7
 80077ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077ee:	b10b      	cbz	r3, 80077f4 <_svfiprintf_r+0x58>
 80077f0:	2b25      	cmp	r3, #37	; 0x25
 80077f2:	d13e      	bne.n	8007872 <_svfiprintf_r+0xd6>
 80077f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80077f8:	d00b      	beq.n	8007812 <_svfiprintf_r+0x76>
 80077fa:	4653      	mov	r3, sl
 80077fc:	4632      	mov	r2, r6
 80077fe:	4621      	mov	r1, r4
 8007800:	4640      	mov	r0, r8
 8007802:	f7ff ff71 	bl	80076e8 <__ssputs_r>
 8007806:	3001      	adds	r0, #1
 8007808:	f000 80a4 	beq.w	8007954 <_svfiprintf_r+0x1b8>
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	4453      	add	r3, sl
 8007810:	9309      	str	r3, [sp, #36]	; 0x24
 8007812:	783b      	ldrb	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 809d 	beq.w	8007954 <_svfiprintf_r+0x1b8>
 800781a:	2300      	movs	r3, #0
 800781c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782c:	931a      	str	r3, [sp, #104]	; 0x68
 800782e:	462f      	mov	r7, r5
 8007830:	2205      	movs	r2, #5
 8007832:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007836:	4850      	ldr	r0, [pc, #320]	; (8007978 <_svfiprintf_r+0x1dc>)
 8007838:	f7f8 fcea 	bl	8000210 <memchr>
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	b9d0      	cbnz	r0, 8007876 <_svfiprintf_r+0xda>
 8007840:	06d9      	lsls	r1, r3, #27
 8007842:	bf44      	itt	mi
 8007844:	2220      	movmi	r2, #32
 8007846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800784a:	071a      	lsls	r2, r3, #28
 800784c:	bf44      	itt	mi
 800784e:	222b      	movmi	r2, #43	; 0x2b
 8007850:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007854:	782a      	ldrb	r2, [r5, #0]
 8007856:	2a2a      	cmp	r2, #42	; 0x2a
 8007858:	d015      	beq.n	8007886 <_svfiprintf_r+0xea>
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	462f      	mov	r7, r5
 800785e:	2000      	movs	r0, #0
 8007860:	250a      	movs	r5, #10
 8007862:	4639      	mov	r1, r7
 8007864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007868:	3b30      	subs	r3, #48	; 0x30
 800786a:	2b09      	cmp	r3, #9
 800786c:	d94d      	bls.n	800790a <_svfiprintf_r+0x16e>
 800786e:	b1b8      	cbz	r0, 80078a0 <_svfiprintf_r+0x104>
 8007870:	e00f      	b.n	8007892 <_svfiprintf_r+0xf6>
 8007872:	462f      	mov	r7, r5
 8007874:	e7b8      	b.n	80077e8 <_svfiprintf_r+0x4c>
 8007876:	4a40      	ldr	r2, [pc, #256]	; (8007978 <_svfiprintf_r+0x1dc>)
 8007878:	1a80      	subs	r0, r0, r2
 800787a:	fa0b f000 	lsl.w	r0, fp, r0
 800787e:	4318      	orrs	r0, r3
 8007880:	9004      	str	r0, [sp, #16]
 8007882:	463d      	mov	r5, r7
 8007884:	e7d3      	b.n	800782e <_svfiprintf_r+0x92>
 8007886:	9a03      	ldr	r2, [sp, #12]
 8007888:	1d11      	adds	r1, r2, #4
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	9103      	str	r1, [sp, #12]
 800788e:	2a00      	cmp	r2, #0
 8007890:	db01      	blt.n	8007896 <_svfiprintf_r+0xfa>
 8007892:	9207      	str	r2, [sp, #28]
 8007894:	e004      	b.n	80078a0 <_svfiprintf_r+0x104>
 8007896:	4252      	negs	r2, r2
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	9207      	str	r2, [sp, #28]
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	783b      	ldrb	r3, [r7, #0]
 80078a2:	2b2e      	cmp	r3, #46	; 0x2e
 80078a4:	d10c      	bne.n	80078c0 <_svfiprintf_r+0x124>
 80078a6:	787b      	ldrb	r3, [r7, #1]
 80078a8:	2b2a      	cmp	r3, #42	; 0x2a
 80078aa:	d133      	bne.n	8007914 <_svfiprintf_r+0x178>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	9203      	str	r2, [sp, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfb8      	it	lt
 80078b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078bc:	3702      	adds	r7, #2
 80078be:	9305      	str	r3, [sp, #20]
 80078c0:	4d2e      	ldr	r5, [pc, #184]	; (800797c <_svfiprintf_r+0x1e0>)
 80078c2:	7839      	ldrb	r1, [r7, #0]
 80078c4:	2203      	movs	r2, #3
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7f8 fca2 	bl	8000210 <memchr>
 80078cc:	b138      	cbz	r0, 80078de <_svfiprintf_r+0x142>
 80078ce:	2340      	movs	r3, #64	; 0x40
 80078d0:	1b40      	subs	r0, r0, r5
 80078d2:	fa03 f000 	lsl.w	r0, r3, r0
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	4303      	orrs	r3, r0
 80078da:	3701      	adds	r7, #1
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	7839      	ldrb	r1, [r7, #0]
 80078e0:	4827      	ldr	r0, [pc, #156]	; (8007980 <_svfiprintf_r+0x1e4>)
 80078e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078e6:	2206      	movs	r2, #6
 80078e8:	1c7e      	adds	r6, r7, #1
 80078ea:	f7f8 fc91 	bl	8000210 <memchr>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d038      	beq.n	8007964 <_svfiprintf_r+0x1c8>
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <_svfiprintf_r+0x1e8>)
 80078f4:	bb13      	cbnz	r3, 800793c <_svfiprintf_r+0x1a0>
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	3307      	adds	r3, #7
 80078fa:	f023 0307 	bic.w	r3, r3, #7
 80078fe:	3308      	adds	r3, #8
 8007900:	9303      	str	r3, [sp, #12]
 8007902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007904:	444b      	add	r3, r9
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	e76d      	b.n	80077e6 <_svfiprintf_r+0x4a>
 800790a:	fb05 3202 	mla	r2, r5, r2, r3
 800790e:	2001      	movs	r0, #1
 8007910:	460f      	mov	r7, r1
 8007912:	e7a6      	b.n	8007862 <_svfiprintf_r+0xc6>
 8007914:	2300      	movs	r3, #0
 8007916:	3701      	adds	r7, #1
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	4619      	mov	r1, r3
 800791c:	250a      	movs	r5, #10
 800791e:	4638      	mov	r0, r7
 8007920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007924:	3a30      	subs	r2, #48	; 0x30
 8007926:	2a09      	cmp	r2, #9
 8007928:	d903      	bls.n	8007932 <_svfiprintf_r+0x196>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0c8      	beq.n	80078c0 <_svfiprintf_r+0x124>
 800792e:	9105      	str	r1, [sp, #20]
 8007930:	e7c6      	b.n	80078c0 <_svfiprintf_r+0x124>
 8007932:	fb05 2101 	mla	r1, r5, r1, r2
 8007936:	2301      	movs	r3, #1
 8007938:	4607      	mov	r7, r0
 800793a:	e7f0      	b.n	800791e <_svfiprintf_r+0x182>
 800793c:	ab03      	add	r3, sp, #12
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4622      	mov	r2, r4
 8007942:	4b11      	ldr	r3, [pc, #68]	; (8007988 <_svfiprintf_r+0x1ec>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	4640      	mov	r0, r8
 8007948:	f3af 8000 	nop.w
 800794c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007950:	4681      	mov	r9, r0
 8007952:	d1d6      	bne.n	8007902 <_svfiprintf_r+0x166>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	065b      	lsls	r3, r3, #25
 8007958:	f53f af35 	bmi.w	80077c6 <_svfiprintf_r+0x2a>
 800795c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800795e:	b01d      	add	sp, #116	; 0x74
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	ab03      	add	r3, sp, #12
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4622      	mov	r2, r4
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <_svfiprintf_r+0x1ec>)
 800796c:	a904      	add	r1, sp, #16
 800796e:	4640      	mov	r0, r8
 8007970:	f000 f9c2 	bl	8007cf8 <_printf_i>
 8007974:	e7ea      	b.n	800794c <_svfiprintf_r+0x1b0>
 8007976:	bf00      	nop
 8007978:	08008a04 	.word	0x08008a04
 800797c:	08008a0a 	.word	0x08008a0a
 8007980:	08008a0e 	.word	0x08008a0e
 8007984:	00000000 	.word	0x00000000
 8007988:	080076e9 	.word	0x080076e9

0800798c <__sfputc_r>:
 800798c:	6893      	ldr	r3, [r2, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	b410      	push	{r4}
 8007994:	6093      	str	r3, [r2, #8]
 8007996:	da08      	bge.n	80079aa <__sfputc_r+0x1e>
 8007998:	6994      	ldr	r4, [r2, #24]
 800799a:	42a3      	cmp	r3, r4
 800799c:	db01      	blt.n	80079a2 <__sfputc_r+0x16>
 800799e:	290a      	cmp	r1, #10
 80079a0:	d103      	bne.n	80079aa <__sfputc_r+0x1e>
 80079a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a6:	f000 bb0d 	b.w	8007fc4 <__swbuf_r>
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	1c58      	adds	r0, r3, #1
 80079ae:	6010      	str	r0, [r2, #0]
 80079b0:	7019      	strb	r1, [r3, #0]
 80079b2:	4608      	mov	r0, r1
 80079b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <__sfputs_r>:
 80079ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	18d5      	adds	r5, r2, r3
 80079c4:	42ac      	cmp	r4, r5
 80079c6:	d101      	bne.n	80079cc <__sfputs_r+0x12>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e007      	b.n	80079dc <__sfputs_r+0x22>
 80079cc:	463a      	mov	r2, r7
 80079ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7ff ffda 	bl	800798c <__sfputc_r>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d1f3      	bne.n	80079c4 <__sfputs_r+0xa>
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e0 <_vfiprintf_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	b09d      	sub	sp, #116	; 0x74
 80079e8:	4617      	mov	r7, r2
 80079ea:	461d      	mov	r5, r3
 80079ec:	4606      	mov	r6, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_vfiprintf_r+0x18>
 80079f0:	6983      	ldr	r3, [r0, #24]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_vfiprintf_r+0x18>
 80079f4:	f7ff fd94 	bl	8007520 <__sinit>
 80079f8:	4b7c      	ldr	r3, [pc, #496]	; (8007bec <_vfiprintf_r+0x20c>)
 80079fa:	429c      	cmp	r4, r3
 80079fc:	d158      	bne.n	8007ab0 <_vfiprintf_r+0xd0>
 80079fe:	6874      	ldr	r4, [r6, #4]
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	0718      	lsls	r0, r3, #28
 8007a04:	d55e      	bpl.n	8007ac4 <_vfiprintf_r+0xe4>
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d05b      	beq.n	8007ac4 <_vfiprintf_r+0xe4>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	2320      	movs	r3, #32
 8007a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a16:	2330      	movs	r3, #48	; 0x30
 8007a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a1c:	9503      	str	r5, [sp, #12]
 8007a1e:	f04f 0b01 	mov.w	fp, #1
 8007a22:	46b8      	mov	r8, r7
 8007a24:	4645      	mov	r5, r8
 8007a26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a2a:	b10b      	cbz	r3, 8007a30 <_vfiprintf_r+0x50>
 8007a2c:	2b25      	cmp	r3, #37	; 0x25
 8007a2e:	d154      	bne.n	8007ada <_vfiprintf_r+0xfa>
 8007a30:	ebb8 0a07 	subs.w	sl, r8, r7
 8007a34:	d00b      	beq.n	8007a4e <_vfiprintf_r+0x6e>
 8007a36:	4653      	mov	r3, sl
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff ffbc 	bl	80079ba <__sfputs_r>
 8007a42:	3001      	adds	r0, #1
 8007a44:	f000 80c2 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4a:	4453      	add	r3, sl
 8007a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4e:	f898 3000 	ldrb.w	r3, [r8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80ba 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	9307      	str	r3, [sp, #28]
 8007a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6c:	46a8      	mov	r8, r5
 8007a6e:	2205      	movs	r2, #5
 8007a70:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007a74:	485e      	ldr	r0, [pc, #376]	; (8007bf0 <_vfiprintf_r+0x210>)
 8007a76:	f7f8 fbcb 	bl	8000210 <memchr>
 8007a7a:	9b04      	ldr	r3, [sp, #16]
 8007a7c:	bb78      	cbnz	r0, 8007ade <_vfiprintf_r+0xfe>
 8007a7e:	06d9      	lsls	r1, r3, #27
 8007a80:	bf44      	itt	mi
 8007a82:	2220      	movmi	r2, #32
 8007a84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a88:	071a      	lsls	r2, r3, #28
 8007a8a:	bf44      	itt	mi
 8007a8c:	222b      	movmi	r2, #43	; 0x2b
 8007a8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a92:	782a      	ldrb	r2, [r5, #0]
 8007a94:	2a2a      	cmp	r2, #42	; 0x2a
 8007a96:	d02a      	beq.n	8007aee <_vfiprintf_r+0x10e>
 8007a98:	9a07      	ldr	r2, [sp, #28]
 8007a9a:	46a8      	mov	r8, r5
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	250a      	movs	r5, #10
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa6:	3b30      	subs	r3, #48	; 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d969      	bls.n	8007b80 <_vfiprintf_r+0x1a0>
 8007aac:	b360      	cbz	r0, 8007b08 <_vfiprintf_r+0x128>
 8007aae:	e024      	b.n	8007afa <_vfiprintf_r+0x11a>
 8007ab0:	4b50      	ldr	r3, [pc, #320]	; (8007bf4 <_vfiprintf_r+0x214>)
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	d101      	bne.n	8007aba <_vfiprintf_r+0xda>
 8007ab6:	68b4      	ldr	r4, [r6, #8]
 8007ab8:	e7a2      	b.n	8007a00 <_vfiprintf_r+0x20>
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <_vfiprintf_r+0x218>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	bf08      	it	eq
 8007ac0:	68f4      	ldreq	r4, [r6, #12]
 8007ac2:	e79d      	b.n	8007a00 <_vfiprintf_r+0x20>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f000 fae0 	bl	800808c <__swsetup_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d09d      	beq.n	8007a0c <_vfiprintf_r+0x2c>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad4:	b01d      	add	sp, #116	; 0x74
 8007ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ada:	46a8      	mov	r8, r5
 8007adc:	e7a2      	b.n	8007a24 <_vfiprintf_r+0x44>
 8007ade:	4a44      	ldr	r2, [pc, #272]	; (8007bf0 <_vfiprintf_r+0x210>)
 8007ae0:	1a80      	subs	r0, r0, r2
 8007ae2:	fa0b f000 	lsl.w	r0, fp, r0
 8007ae6:	4318      	orrs	r0, r3
 8007ae8:	9004      	str	r0, [sp, #16]
 8007aea:	4645      	mov	r5, r8
 8007aec:	e7be      	b.n	8007a6c <_vfiprintf_r+0x8c>
 8007aee:	9a03      	ldr	r2, [sp, #12]
 8007af0:	1d11      	adds	r1, r2, #4
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	9103      	str	r1, [sp, #12]
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	db01      	blt.n	8007afe <_vfiprintf_r+0x11e>
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	e004      	b.n	8007b08 <_vfiprintf_r+0x128>
 8007afe:	4252      	negs	r2, r2
 8007b00:	f043 0302 	orr.w	r3, r3, #2
 8007b04:	9207      	str	r2, [sp, #28]
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	f898 3000 	ldrb.w	r3, [r8]
 8007b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b0e:	d10e      	bne.n	8007b2e <_vfiprintf_r+0x14e>
 8007b10:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b14:	2b2a      	cmp	r3, #42	; 0x2a
 8007b16:	d138      	bne.n	8007b8a <_vfiprintf_r+0x1aa>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	1d1a      	adds	r2, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	9203      	str	r2, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfb8      	it	lt
 8007b24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b28:	f108 0802 	add.w	r8, r8, #2
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	4d33      	ldr	r5, [pc, #204]	; (8007bfc <_vfiprintf_r+0x21c>)
 8007b30:	f898 1000 	ldrb.w	r1, [r8]
 8007b34:	2203      	movs	r2, #3
 8007b36:	4628      	mov	r0, r5
 8007b38:	f7f8 fb6a 	bl	8000210 <memchr>
 8007b3c:	b140      	cbz	r0, 8007b50 <_vfiprintf_r+0x170>
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	1b40      	subs	r0, r0, r5
 8007b42:	fa03 f000 	lsl.w	r0, r3, r0
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	4303      	orrs	r3, r0
 8007b4a:	f108 0801 	add.w	r8, r8, #1
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	f898 1000 	ldrb.w	r1, [r8]
 8007b54:	482a      	ldr	r0, [pc, #168]	; (8007c00 <_vfiprintf_r+0x220>)
 8007b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	f108 0701 	add.w	r7, r8, #1
 8007b60:	f7f8 fb56 	bl	8000210 <memchr>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d037      	beq.n	8007bd8 <_vfiprintf_r+0x1f8>
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <_vfiprintf_r+0x224>)
 8007b6a:	bb1b      	cbnz	r3, 8007bb4 <_vfiprintf_r+0x1d4>
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	3307      	adds	r3, #7
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	444b      	add	r3, r9
 8007b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7e:	e750      	b.n	8007a22 <_vfiprintf_r+0x42>
 8007b80:	fb05 3202 	mla	r2, r5, r2, r3
 8007b84:	2001      	movs	r0, #1
 8007b86:	4688      	mov	r8, r1
 8007b88:	e78a      	b.n	8007aa0 <_vfiprintf_r+0xc0>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f108 0801 	add.w	r8, r8, #1
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	4619      	mov	r1, r3
 8007b94:	250a      	movs	r5, #10
 8007b96:	4640      	mov	r0, r8
 8007b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9c:	3a30      	subs	r2, #48	; 0x30
 8007b9e:	2a09      	cmp	r2, #9
 8007ba0:	d903      	bls.n	8007baa <_vfiprintf_r+0x1ca>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c3      	beq.n	8007b2e <_vfiprintf_r+0x14e>
 8007ba6:	9105      	str	r1, [sp, #20]
 8007ba8:	e7c1      	b.n	8007b2e <_vfiprintf_r+0x14e>
 8007baa:	fb05 2101 	mla	r1, r5, r1, r2
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	e7f0      	b.n	8007b96 <_vfiprintf_r+0x1b6>
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4622      	mov	r2, r4
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <_vfiprintf_r+0x228>)
 8007bbc:	a904      	add	r1, sp, #16
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f3af 8000 	nop.w
 8007bc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007bc8:	4681      	mov	r9, r0
 8007bca:	d1d5      	bne.n	8007b78 <_vfiprintf_r+0x198>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	065b      	lsls	r3, r3, #25
 8007bd0:	f53f af7e 	bmi.w	8007ad0 <_vfiprintf_r+0xf0>
 8007bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd6:	e77d      	b.n	8007ad4 <_vfiprintf_r+0xf4>
 8007bd8:	ab03      	add	r3, sp, #12
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <_vfiprintf_r+0x228>)
 8007be0:	a904      	add	r1, sp, #16
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f888 	bl	8007cf8 <_printf_i>
 8007be8:	e7ec      	b.n	8007bc4 <_vfiprintf_r+0x1e4>
 8007bea:	bf00      	nop
 8007bec:	080089c4 	.word	0x080089c4
 8007bf0:	08008a04 	.word	0x08008a04
 8007bf4:	080089e4 	.word	0x080089e4
 8007bf8:	080089a4 	.word	0x080089a4
 8007bfc:	08008a0a 	.word	0x08008a0a
 8007c00:	08008a0e 	.word	0x08008a0e
 8007c04:	00000000 	.word	0x00000000
 8007c08:	080079bb 	.word	0x080079bb

08007c0c <_printf_common>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	4691      	mov	r9, r2
 8007c12:	461f      	mov	r7, r3
 8007c14:	688a      	ldr	r2, [r1, #8]
 8007c16:	690b      	ldr	r3, [r1, #16]
 8007c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	bfb8      	it	lt
 8007c20:	4613      	movlt	r3, r2
 8007c22:	f8c9 3000 	str.w	r3, [r9]
 8007c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	b112      	cbz	r2, 8007c36 <_printf_common+0x2a>
 8007c30:	3301      	adds	r3, #1
 8007c32:	f8c9 3000 	str.w	r3, [r9]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c40:	3302      	addmi	r3, #2
 8007c42:	f8c9 3000 	strmi.w	r3, [r9]
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	f015 0506 	ands.w	r5, r5, #6
 8007c4c:	d107      	bne.n	8007c5e <_printf_common+0x52>
 8007c4e:	f104 0a19 	add.w	sl, r4, #25
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	f8d9 2000 	ldr.w	r2, [r9]
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	dc28      	bgt.n	8007cb0 <_printf_common+0xa4>
 8007c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	3300      	adds	r3, #0
 8007c66:	bf18      	it	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	0692      	lsls	r2, r2, #26
 8007c6c:	d42d      	bmi.n	8007cca <_printf_common+0xbe>
 8007c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c72:	4639      	mov	r1, r7
 8007c74:	4630      	mov	r0, r6
 8007c76:	47c0      	blx	r8
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d020      	beq.n	8007cbe <_printf_common+0xb2>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	68e5      	ldr	r5, [r4, #12]
 8007c80:	f8d9 2000 	ldr.w	r2, [r9]
 8007c84:	f003 0306 	and.w	r3, r3, #6
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	bf08      	it	eq
 8007c8c:	1aad      	subeq	r5, r5, r2
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	bf0c      	ite	eq
 8007c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c98:	2500      	movne	r5, #0
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bfc4      	itt	gt
 8007c9e:	1a9b      	subgt	r3, r3, r2
 8007ca0:	18ed      	addgt	r5, r5, r3
 8007ca2:	f04f 0900 	mov.w	r9, #0
 8007ca6:	341a      	adds	r4, #26
 8007ca8:	454d      	cmp	r5, r9
 8007caa:	d11a      	bne.n	8007ce2 <_printf_common+0xd6>
 8007cac:	2000      	movs	r0, #0
 8007cae:	e008      	b.n	8007cc2 <_printf_common+0xb6>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	47c0      	blx	r8
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d103      	bne.n	8007cc6 <_printf_common+0xba>
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc6:	3501      	adds	r5, #1
 8007cc8:	e7c3      	b.n	8007c52 <_printf_common+0x46>
 8007cca:	18e1      	adds	r1, r4, r3
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	2030      	movs	r0, #48	; 0x30
 8007cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd4:	4422      	add	r2, r4
 8007cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cde:	3302      	adds	r3, #2
 8007ce0:	e7c5      	b.n	8007c6e <_printf_common+0x62>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	47c0      	blx	r8
 8007cec:	3001      	adds	r0, #1
 8007cee:	d0e6      	beq.n	8007cbe <_printf_common+0xb2>
 8007cf0:	f109 0901 	add.w	r9, r9, #1
 8007cf4:	e7d8      	b.n	8007ca8 <_printf_common+0x9c>
	...

08007cf8 <_printf_i>:
 8007cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d00:	460c      	mov	r4, r1
 8007d02:	7e09      	ldrb	r1, [r1, #24]
 8007d04:	b085      	sub	sp, #20
 8007d06:	296e      	cmp	r1, #110	; 0x6e
 8007d08:	4617      	mov	r7, r2
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d10:	f000 80b3 	beq.w	8007e7a <_printf_i+0x182>
 8007d14:	d822      	bhi.n	8007d5c <_printf_i+0x64>
 8007d16:	2963      	cmp	r1, #99	; 0x63
 8007d18:	d036      	beq.n	8007d88 <_printf_i+0x90>
 8007d1a:	d80a      	bhi.n	8007d32 <_printf_i+0x3a>
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	f000 80b9 	beq.w	8007e94 <_printf_i+0x19c>
 8007d22:	2958      	cmp	r1, #88	; 0x58
 8007d24:	f000 8083 	beq.w	8007e2e <_printf_i+0x136>
 8007d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d30:	e032      	b.n	8007d98 <_printf_i+0xa0>
 8007d32:	2964      	cmp	r1, #100	; 0x64
 8007d34:	d001      	beq.n	8007d3a <_printf_i+0x42>
 8007d36:	2969      	cmp	r1, #105	; 0x69
 8007d38:	d1f6      	bne.n	8007d28 <_printf_i+0x30>
 8007d3a:	6820      	ldr	r0, [r4, #0]
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	0605      	lsls	r5, r0, #24
 8007d40:	f103 0104 	add.w	r1, r3, #4
 8007d44:	d52a      	bpl.n	8007d9c <_printf_i+0xa4>
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da03      	bge.n	8007d56 <_printf_i+0x5e>
 8007d4e:	222d      	movs	r2, #45	; 0x2d
 8007d50:	425b      	negs	r3, r3
 8007d52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d56:	486f      	ldr	r0, [pc, #444]	; (8007f14 <_printf_i+0x21c>)
 8007d58:	220a      	movs	r2, #10
 8007d5a:	e039      	b.n	8007dd0 <_printf_i+0xd8>
 8007d5c:	2973      	cmp	r1, #115	; 0x73
 8007d5e:	f000 809d 	beq.w	8007e9c <_printf_i+0x1a4>
 8007d62:	d808      	bhi.n	8007d76 <_printf_i+0x7e>
 8007d64:	296f      	cmp	r1, #111	; 0x6f
 8007d66:	d020      	beq.n	8007daa <_printf_i+0xb2>
 8007d68:	2970      	cmp	r1, #112	; 0x70
 8007d6a:	d1dd      	bne.n	8007d28 <_printf_i+0x30>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	e003      	b.n	8007d7e <_printf_i+0x86>
 8007d76:	2975      	cmp	r1, #117	; 0x75
 8007d78:	d017      	beq.n	8007daa <_printf_i+0xb2>
 8007d7a:	2978      	cmp	r1, #120	; 0x78
 8007d7c:	d1d4      	bne.n	8007d28 <_printf_i+0x30>
 8007d7e:	2378      	movs	r3, #120	; 0x78
 8007d80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d84:	4864      	ldr	r0, [pc, #400]	; (8007f18 <_printf_i+0x220>)
 8007d86:	e055      	b.n	8007e34 <_printf_i+0x13c>
 8007d88:	6813      	ldr	r3, [r2, #0]
 8007d8a:	1d19      	adds	r1, r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6011      	str	r1, [r2, #0]
 8007d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e08c      	b.n	8007eb6 <_printf_i+0x1be>
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6011      	str	r1, [r2, #0]
 8007da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007da4:	bf18      	it	ne
 8007da6:	b21b      	sxthne	r3, r3
 8007da8:	e7cf      	b.n	8007d4a <_printf_i+0x52>
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	6825      	ldr	r5, [r4, #0]
 8007dae:	1d18      	adds	r0, r3, #4
 8007db0:	6010      	str	r0, [r2, #0]
 8007db2:	0628      	lsls	r0, r5, #24
 8007db4:	d501      	bpl.n	8007dba <_printf_i+0xc2>
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	e002      	b.n	8007dc0 <_printf_i+0xc8>
 8007dba:	0668      	lsls	r0, r5, #25
 8007dbc:	d5fb      	bpl.n	8007db6 <_printf_i+0xbe>
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	4854      	ldr	r0, [pc, #336]	; (8007f14 <_printf_i+0x21c>)
 8007dc2:	296f      	cmp	r1, #111	; 0x6f
 8007dc4:	bf14      	ite	ne
 8007dc6:	220a      	movne	r2, #10
 8007dc8:	2208      	moveq	r2, #8
 8007dca:	2100      	movs	r1, #0
 8007dcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dd0:	6865      	ldr	r5, [r4, #4]
 8007dd2:	60a5      	str	r5, [r4, #8]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	f2c0 8095 	blt.w	8007f04 <_printf_i+0x20c>
 8007dda:	6821      	ldr	r1, [r4, #0]
 8007ddc:	f021 0104 	bic.w	r1, r1, #4
 8007de0:	6021      	str	r1, [r4, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d13d      	bne.n	8007e62 <_printf_i+0x16a>
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f040 808e 	bne.w	8007f08 <_printf_i+0x210>
 8007dec:	4665      	mov	r5, ip
 8007dee:	2a08      	cmp	r2, #8
 8007df0:	d10b      	bne.n	8007e0a <_printf_i+0x112>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	07db      	lsls	r3, r3, #31
 8007df6:	d508      	bpl.n	8007e0a <_printf_i+0x112>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	bfde      	ittt	le
 8007e00:	2330      	movle	r3, #48	; 0x30
 8007e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e0a:	ebac 0305 	sub.w	r3, ip, r5
 8007e0e:	6123      	str	r3, [r4, #16]
 8007e10:	f8cd 8000 	str.w	r8, [sp]
 8007e14:	463b      	mov	r3, r7
 8007e16:	aa03      	add	r2, sp, #12
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff fef6 	bl	8007c0c <_printf_common>
 8007e20:	3001      	adds	r0, #1
 8007e22:	d14d      	bne.n	8007ec0 <_printf_i+0x1c8>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e28:	b005      	add	sp, #20
 8007e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	4839      	ldr	r0, [pc, #228]	; (8007f14 <_printf_i+0x21c>)
 8007e30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e34:	6813      	ldr	r3, [r2, #0]
 8007e36:	6821      	ldr	r1, [r4, #0]
 8007e38:	1d1d      	adds	r5, r3, #4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6015      	str	r5, [r2, #0]
 8007e3e:	060a      	lsls	r2, r1, #24
 8007e40:	d50b      	bpl.n	8007e5a <_printf_i+0x162>
 8007e42:	07ca      	lsls	r2, r1, #31
 8007e44:	bf44      	itt	mi
 8007e46:	f041 0120 	orrmi.w	r1, r1, #32
 8007e4a:	6021      	strmi	r1, [r4, #0]
 8007e4c:	b91b      	cbnz	r3, 8007e56 <_printf_i+0x15e>
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	f022 0220 	bic.w	r2, r2, #32
 8007e54:	6022      	str	r2, [r4, #0]
 8007e56:	2210      	movs	r2, #16
 8007e58:	e7b7      	b.n	8007dca <_printf_i+0xd2>
 8007e5a:	064d      	lsls	r5, r1, #25
 8007e5c:	bf48      	it	mi
 8007e5e:	b29b      	uxthmi	r3, r3
 8007e60:	e7ef      	b.n	8007e42 <_printf_i+0x14a>
 8007e62:	4665      	mov	r5, ip
 8007e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e68:	fb02 3311 	mls	r3, r2, r1, r3
 8007e6c:	5cc3      	ldrb	r3, [r0, r3]
 8007e6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e72:	460b      	mov	r3, r1
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d1f5      	bne.n	8007e64 <_printf_i+0x16c>
 8007e78:	e7b9      	b.n	8007dee <_printf_i+0xf6>
 8007e7a:	6813      	ldr	r3, [r2, #0]
 8007e7c:	6825      	ldr	r5, [r4, #0]
 8007e7e:	6961      	ldr	r1, [r4, #20]
 8007e80:	1d18      	adds	r0, r3, #4
 8007e82:	6010      	str	r0, [r2, #0]
 8007e84:	0628      	lsls	r0, r5, #24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	d501      	bpl.n	8007e8e <_printf_i+0x196>
 8007e8a:	6019      	str	r1, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <_printf_i+0x19c>
 8007e8e:	066a      	lsls	r2, r5, #25
 8007e90:	d5fb      	bpl.n	8007e8a <_printf_i+0x192>
 8007e92:	8019      	strh	r1, [r3, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	4665      	mov	r5, ip
 8007e9a:	e7b9      	b.n	8007e10 <_printf_i+0x118>
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	1d19      	adds	r1, r3, #4
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	681d      	ldr	r5, [r3, #0]
 8007ea4:	6862      	ldr	r2, [r4, #4]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f7f8 f9b1 	bl	8000210 <memchr>
 8007eae:	b108      	cbz	r0, 8007eb4 <_printf_i+0x1bc>
 8007eb0:	1b40      	subs	r0, r0, r5
 8007eb2:	6060      	str	r0, [r4, #4]
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebe:	e7a7      	b.n	8007e10 <_printf_i+0x118>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d0aa      	beq.n	8007e24 <_printf_i+0x12c>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	079b      	lsls	r3, r3, #30
 8007ed2:	d413      	bmi.n	8007efc <_printf_i+0x204>
 8007ed4:	68e0      	ldr	r0, [r4, #12]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	4298      	cmp	r0, r3
 8007eda:	bfb8      	it	lt
 8007edc:	4618      	movlt	r0, r3
 8007ede:	e7a3      	b.n	8007e28 <_printf_i+0x130>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	464a      	mov	r2, r9
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	47c0      	blx	r8
 8007eea:	3001      	adds	r0, #1
 8007eec:	d09a      	beq.n	8007e24 <_printf_i+0x12c>
 8007eee:	3501      	adds	r5, #1
 8007ef0:	68e3      	ldr	r3, [r4, #12]
 8007ef2:	9a03      	ldr	r2, [sp, #12]
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	42ab      	cmp	r3, r5
 8007ef8:	dcf2      	bgt.n	8007ee0 <_printf_i+0x1e8>
 8007efa:	e7eb      	b.n	8007ed4 <_printf_i+0x1dc>
 8007efc:	2500      	movs	r5, #0
 8007efe:	f104 0919 	add.w	r9, r4, #25
 8007f02:	e7f5      	b.n	8007ef0 <_printf_i+0x1f8>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ac      	bne.n	8007e62 <_printf_i+0x16a>
 8007f08:	7803      	ldrb	r3, [r0, #0]
 8007f0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f12:	e76c      	b.n	8007dee <_printf_i+0xf6>
 8007f14:	08008a15 	.word	0x08008a15
 8007f18:	08008a26 	.word	0x08008a26

08007f1c <_sbrk_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4c06      	ldr	r4, [pc, #24]	; (8007f38 <_sbrk_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4605      	mov	r5, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	f7f9 f9f6 	bl	8001318 <_sbrk>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_sbrk_r+0x1a>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_sbrk_r+0x1a>
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20019394 	.word	0x20019394

08007f3c <__sread>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	460c      	mov	r4, r1
 8007f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f44:	f000 fad6 	bl	80084f4 <_read_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	bfab      	itete	ge
 8007f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f50:	181b      	addge	r3, r3, r0
 8007f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f56:	bfac      	ite	ge
 8007f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f5a:	81a3      	strhlt	r3, [r4, #12]
 8007f5c:	bd10      	pop	{r4, pc}

08007f5e <__swrite>:
 8007f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f62:	461f      	mov	r7, r3
 8007f64:	898b      	ldrh	r3, [r1, #12]
 8007f66:	05db      	lsls	r3, r3, #23
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	d505      	bpl.n	8007f7c <__swrite+0x1e>
 8007f70:	2302      	movs	r3, #2
 8007f72:	2200      	movs	r2, #0
 8007f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f78:	f000 f9b6 	bl	80082e8 <_lseek_r>
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	4632      	mov	r2, r6
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f92:	f000 b869 	b.w	8008068 <_write_r>

08007f96 <__sseek>:
 8007f96:	b510      	push	{r4, lr}
 8007f98:	460c      	mov	r4, r1
 8007f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9e:	f000 f9a3 	bl	80082e8 <_lseek_r>
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	bf15      	itete	ne
 8007fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fb2:	81a3      	strheq	r3, [r4, #12]
 8007fb4:	bf18      	it	ne
 8007fb6:	81a3      	strhne	r3, [r4, #12]
 8007fb8:	bd10      	pop	{r4, pc}

08007fba <__sclose>:
 8007fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbe:	f000 b8d3 	b.w	8008168 <_close_r>
	...

08007fc4 <__swbuf_r>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	460e      	mov	r6, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b118      	cbz	r0, 8007fd6 <__swbuf_r+0x12>
 8007fce:	6983      	ldr	r3, [r0, #24]
 8007fd0:	b90b      	cbnz	r3, 8007fd6 <__swbuf_r+0x12>
 8007fd2:	f7ff faa5 	bl	8007520 <__sinit>
 8007fd6:	4b21      	ldr	r3, [pc, #132]	; (800805c <__swbuf_r+0x98>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d12a      	bne.n	8008032 <__swbuf_r+0x6e>
 8007fdc:	686c      	ldr	r4, [r5, #4]
 8007fde:	69a3      	ldr	r3, [r4, #24]
 8007fe0:	60a3      	str	r3, [r4, #8]
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	071a      	lsls	r2, r3, #28
 8007fe6:	d52e      	bpl.n	8008046 <__swbuf_r+0x82>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	b363      	cbz	r3, 8008046 <__swbuf_r+0x82>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	6963      	ldr	r3, [r4, #20]
 8007ff4:	b2f6      	uxtb	r6, r6
 8007ff6:	4283      	cmp	r3, r0
 8007ff8:	4637      	mov	r7, r6
 8007ffa:	dc04      	bgt.n	8008006 <__swbuf_r+0x42>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 f948 	bl	8008294 <_fflush_r>
 8008004:	bb28      	cbnz	r0, 8008052 <__swbuf_r+0x8e>
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	3b01      	subs	r3, #1
 800800a:	60a3      	str	r3, [r4, #8]
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	6022      	str	r2, [r4, #0]
 8008012:	701e      	strb	r6, [r3, #0]
 8008014:	6963      	ldr	r3, [r4, #20]
 8008016:	3001      	adds	r0, #1
 8008018:	4283      	cmp	r3, r0
 800801a:	d004      	beq.n	8008026 <__swbuf_r+0x62>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	07db      	lsls	r3, r3, #31
 8008020:	d519      	bpl.n	8008056 <__swbuf_r+0x92>
 8008022:	2e0a      	cmp	r6, #10
 8008024:	d117      	bne.n	8008056 <__swbuf_r+0x92>
 8008026:	4621      	mov	r1, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f000 f933 	bl	8008294 <_fflush_r>
 800802e:	b190      	cbz	r0, 8008056 <__swbuf_r+0x92>
 8008030:	e00f      	b.n	8008052 <__swbuf_r+0x8e>
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <__swbuf_r+0x9c>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d101      	bne.n	800803c <__swbuf_r+0x78>
 8008038:	68ac      	ldr	r4, [r5, #8]
 800803a:	e7d0      	b.n	8007fde <__swbuf_r+0x1a>
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <__swbuf_r+0xa0>)
 800803e:	429c      	cmp	r4, r3
 8008040:	bf08      	it	eq
 8008042:	68ec      	ldreq	r4, [r5, #12]
 8008044:	e7cb      	b.n	8007fde <__swbuf_r+0x1a>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 f81f 	bl	800808c <__swsetup_r>
 800804e:	2800      	cmp	r0, #0
 8008050:	d0cc      	beq.n	8007fec <__swbuf_r+0x28>
 8008052:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008056:	4638      	mov	r0, r7
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805a:	bf00      	nop
 800805c:	080089c4 	.word	0x080089c4
 8008060:	080089e4 	.word	0x080089e4
 8008064:	080089a4 	.word	0x080089a4

08008068 <_write_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4c07      	ldr	r4, [pc, #28]	; (8008088 <_write_r+0x20>)
 800806c:	4605      	mov	r5, r0
 800806e:	4608      	mov	r0, r1
 8008070:	4611      	mov	r1, r2
 8008072:	2200      	movs	r2, #0
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	f7f9 f8fd 	bl	8001276 <_write>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_write_r+0x1e>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	b103      	cbz	r3, 8008086 <_write_r+0x1e>
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	20019394 	.word	0x20019394

0800808c <__swsetup_r>:
 800808c:	4b32      	ldr	r3, [pc, #200]	; (8008158 <__swsetup_r+0xcc>)
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	681d      	ldr	r5, [r3, #0]
 8008092:	4606      	mov	r6, r0
 8008094:	460c      	mov	r4, r1
 8008096:	b125      	cbz	r5, 80080a2 <__swsetup_r+0x16>
 8008098:	69ab      	ldr	r3, [r5, #24]
 800809a:	b913      	cbnz	r3, 80080a2 <__swsetup_r+0x16>
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff fa3f 	bl	8007520 <__sinit>
 80080a2:	4b2e      	ldr	r3, [pc, #184]	; (800815c <__swsetup_r+0xd0>)
 80080a4:	429c      	cmp	r4, r3
 80080a6:	d10f      	bne.n	80080c8 <__swsetup_r+0x3c>
 80080a8:	686c      	ldr	r4, [r5, #4]
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	0715      	lsls	r5, r2, #28
 80080b2:	d42c      	bmi.n	800810e <__swsetup_r+0x82>
 80080b4:	06d0      	lsls	r0, r2, #27
 80080b6:	d411      	bmi.n	80080dc <__swsetup_r+0x50>
 80080b8:	2209      	movs	r2, #9
 80080ba:	6032      	str	r2, [r6, #0]
 80080bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080c6:	e03e      	b.n	8008146 <__swsetup_r+0xba>
 80080c8:	4b25      	ldr	r3, [pc, #148]	; (8008160 <__swsetup_r+0xd4>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d101      	bne.n	80080d2 <__swsetup_r+0x46>
 80080ce:	68ac      	ldr	r4, [r5, #8]
 80080d0:	e7eb      	b.n	80080aa <__swsetup_r+0x1e>
 80080d2:	4b24      	ldr	r3, [pc, #144]	; (8008164 <__swsetup_r+0xd8>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	bf08      	it	eq
 80080d8:	68ec      	ldreq	r4, [r5, #12]
 80080da:	e7e6      	b.n	80080aa <__swsetup_r+0x1e>
 80080dc:	0751      	lsls	r1, r2, #29
 80080de:	d512      	bpl.n	8008106 <__swsetup_r+0x7a>
 80080e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e2:	b141      	cbz	r1, 80080f6 <__swsetup_r+0x6a>
 80080e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d002      	beq.n	80080f2 <__swsetup_r+0x66>
 80080ec:	4630      	mov	r0, r6
 80080ee:	f000 f98d 	bl	800840c <_free_r>
 80080f2:	2300      	movs	r3, #0
 80080f4:	6363      	str	r3, [r4, #52]	; 0x34
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	2300      	movs	r3, #0
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	f043 0308 	orr.w	r3, r3, #8
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	b94b      	cbnz	r3, 8008126 <__swsetup_r+0x9a>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800811c:	d003      	beq.n	8008126 <__swsetup_r+0x9a>
 800811e:	4621      	mov	r1, r4
 8008120:	4630      	mov	r0, r6
 8008122:	f000 f917 	bl	8008354 <__smakebuf_r>
 8008126:	89a2      	ldrh	r2, [r4, #12]
 8008128:	f012 0301 	ands.w	r3, r2, #1
 800812c:	d00c      	beq.n	8008148 <__swsetup_r+0xbc>
 800812e:	2300      	movs	r3, #0
 8008130:	60a3      	str	r3, [r4, #8]
 8008132:	6963      	ldr	r3, [r4, #20]
 8008134:	425b      	negs	r3, r3
 8008136:	61a3      	str	r3, [r4, #24]
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	b953      	cbnz	r3, 8008152 <__swsetup_r+0xc6>
 800813c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008140:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008144:	d1ba      	bne.n	80080bc <__swsetup_r+0x30>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	0792      	lsls	r2, r2, #30
 800814a:	bf58      	it	pl
 800814c:	6963      	ldrpl	r3, [r4, #20]
 800814e:	60a3      	str	r3, [r4, #8]
 8008150:	e7f2      	b.n	8008138 <__swsetup_r+0xac>
 8008152:	2000      	movs	r0, #0
 8008154:	e7f7      	b.n	8008146 <__swsetup_r+0xba>
 8008156:	bf00      	nop
 8008158:	20000030 	.word	0x20000030
 800815c:	080089c4 	.word	0x080089c4
 8008160:	080089e4 	.word	0x080089e4
 8008164:	080089a4 	.word	0x080089a4

08008168 <_close_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4c06      	ldr	r4, [pc, #24]	; (8008184 <_close_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4605      	mov	r5, r0
 8008170:	4608      	mov	r0, r1
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	f7f9 f89b 	bl	80012ae <_close>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_close_r+0x1a>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	b103      	cbz	r3, 8008182 <_close_r+0x1a>
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20019394 	.word	0x20019394

08008188 <__sflush_r>:
 8008188:	898a      	ldrh	r2, [r1, #12]
 800818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	4605      	mov	r5, r0
 8008190:	0710      	lsls	r0, r2, #28
 8008192:	460c      	mov	r4, r1
 8008194:	d458      	bmi.n	8008248 <__sflush_r+0xc0>
 8008196:	684b      	ldr	r3, [r1, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc05      	bgt.n	80081a8 <__sflush_r+0x20>
 800819c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dc02      	bgt.n	80081a8 <__sflush_r+0x20>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d0f9      	beq.n	80081a2 <__sflush_r+0x1a>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b4:	682f      	ldr	r7, [r5, #0]
 80081b6:	6a21      	ldr	r1, [r4, #32]
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	d032      	beq.n	8008222 <__sflush_r+0x9a>
 80081bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	075a      	lsls	r2, r3, #29
 80081c2:	d505      	bpl.n	80081d0 <__sflush_r+0x48>
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ca:	b10b      	cbz	r3, 80081d0 <__sflush_r+0x48>
 80081cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	4602      	mov	r2, r0
 80081d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d6:	6a21      	ldr	r1, [r4, #32]
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	d106      	bne.n	80081f0 <__sflush_r+0x68>
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	291d      	cmp	r1, #29
 80081e6:	d848      	bhi.n	800827a <__sflush_r+0xf2>
 80081e8:	4a29      	ldr	r2, [pc, #164]	; (8008290 <__sflush_r+0x108>)
 80081ea:	40ca      	lsrs	r2, r1
 80081ec:	07d6      	lsls	r6, r2, #31
 80081ee:	d544      	bpl.n	800827a <__sflush_r+0xf2>
 80081f0:	2200      	movs	r2, #0
 80081f2:	6062      	str	r2, [r4, #4]
 80081f4:	04d9      	lsls	r1, r3, #19
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	d504      	bpl.n	8008206 <__sflush_r+0x7e>
 80081fc:	1c42      	adds	r2, r0, #1
 80081fe:	d101      	bne.n	8008204 <__sflush_r+0x7c>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b903      	cbnz	r3, 8008206 <__sflush_r+0x7e>
 8008204:	6560      	str	r0, [r4, #84]	; 0x54
 8008206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008208:	602f      	str	r7, [r5, #0]
 800820a:	2900      	cmp	r1, #0
 800820c:	d0c9      	beq.n	80081a2 <__sflush_r+0x1a>
 800820e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008212:	4299      	cmp	r1, r3
 8008214:	d002      	beq.n	800821c <__sflush_r+0x94>
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f8f8 	bl	800840c <_free_r>
 800821c:	2000      	movs	r0, #0
 800821e:	6360      	str	r0, [r4, #52]	; 0x34
 8008220:	e7c0      	b.n	80081a4 <__sflush_r+0x1c>
 8008222:	2301      	movs	r3, #1
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	1c41      	adds	r1, r0, #1
 800822a:	d1c8      	bne.n	80081be <__sflush_r+0x36>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c5      	beq.n	80081be <__sflush_r+0x36>
 8008232:	2b1d      	cmp	r3, #29
 8008234:	d001      	beq.n	800823a <__sflush_r+0xb2>
 8008236:	2b16      	cmp	r3, #22
 8008238:	d101      	bne.n	800823e <__sflush_r+0xb6>
 800823a:	602f      	str	r7, [r5, #0]
 800823c:	e7b1      	b.n	80081a2 <__sflush_r+0x1a>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	e7ad      	b.n	80081a4 <__sflush_r+0x1c>
 8008248:	690f      	ldr	r7, [r1, #16]
 800824a:	2f00      	cmp	r7, #0
 800824c:	d0a9      	beq.n	80081a2 <__sflush_r+0x1a>
 800824e:	0793      	lsls	r3, r2, #30
 8008250:	680e      	ldr	r6, [r1, #0]
 8008252:	bf08      	it	eq
 8008254:	694b      	ldreq	r3, [r1, #20]
 8008256:	600f      	str	r7, [r1, #0]
 8008258:	bf18      	it	ne
 800825a:	2300      	movne	r3, #0
 800825c:	eba6 0807 	sub.w	r8, r6, r7
 8008260:	608b      	str	r3, [r1, #8]
 8008262:	f1b8 0f00 	cmp.w	r8, #0
 8008266:	dd9c      	ble.n	80081a2 <__sflush_r+0x1a>
 8008268:	4643      	mov	r3, r8
 800826a:	463a      	mov	r2, r7
 800826c:	6a21      	ldr	r1, [r4, #32]
 800826e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008270:	4628      	mov	r0, r5
 8008272:	47b0      	blx	r6
 8008274:	2800      	cmp	r0, #0
 8008276:	dc06      	bgt.n	8008286 <__sflush_r+0xfe>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008284:	e78e      	b.n	80081a4 <__sflush_r+0x1c>
 8008286:	4407      	add	r7, r0
 8008288:	eba8 0800 	sub.w	r8, r8, r0
 800828c:	e7e9      	b.n	8008262 <__sflush_r+0xda>
 800828e:	bf00      	nop
 8008290:	20400001 	.word	0x20400001

08008294 <_fflush_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	690b      	ldr	r3, [r1, #16]
 8008298:	4605      	mov	r5, r0
 800829a:	460c      	mov	r4, r1
 800829c:	b1db      	cbz	r3, 80082d6 <_fflush_r+0x42>
 800829e:	b118      	cbz	r0, 80082a8 <_fflush_r+0x14>
 80082a0:	6983      	ldr	r3, [r0, #24]
 80082a2:	b90b      	cbnz	r3, 80082a8 <_fflush_r+0x14>
 80082a4:	f7ff f93c 	bl	8007520 <__sinit>
 80082a8:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <_fflush_r+0x48>)
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d109      	bne.n	80082c2 <_fflush_r+0x2e>
 80082ae:	686c      	ldr	r4, [r5, #4]
 80082b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b4:	b17b      	cbz	r3, 80082d6 <_fflush_r+0x42>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082be:	f7ff bf63 	b.w	8008188 <__sflush_r>
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <_fflush_r+0x4c>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d101      	bne.n	80082cc <_fflush_r+0x38>
 80082c8:	68ac      	ldr	r4, [r5, #8]
 80082ca:	e7f1      	b.n	80082b0 <_fflush_r+0x1c>
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <_fflush_r+0x50>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	bf08      	it	eq
 80082d2:	68ec      	ldreq	r4, [r5, #12]
 80082d4:	e7ec      	b.n	80082b0 <_fflush_r+0x1c>
 80082d6:	2000      	movs	r0, #0
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	080089c4 	.word	0x080089c4
 80082e0:	080089e4 	.word	0x080089e4
 80082e4:	080089a4 	.word	0x080089a4

080082e8 <_lseek_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4c07      	ldr	r4, [pc, #28]	; (8008308 <_lseek_r+0x20>)
 80082ec:	4605      	mov	r5, r0
 80082ee:	4608      	mov	r0, r1
 80082f0:	4611      	mov	r1, r2
 80082f2:	2200      	movs	r2, #0
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	f7f9 f800 	bl	80012fc <_lseek>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_lseek_r+0x1e>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	b103      	cbz	r3, 8008306 <_lseek_r+0x1e>
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20019394 	.word	0x20019394

0800830c <__swhatbuf_r>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	460e      	mov	r6, r1
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	2900      	cmp	r1, #0
 8008316:	b096      	sub	sp, #88	; 0x58
 8008318:	4614      	mov	r4, r2
 800831a:	461d      	mov	r5, r3
 800831c:	da07      	bge.n	800832e <__swhatbuf_r+0x22>
 800831e:	2300      	movs	r3, #0
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	89b3      	ldrh	r3, [r6, #12]
 8008324:	061a      	lsls	r2, r3, #24
 8008326:	d410      	bmi.n	800834a <__swhatbuf_r+0x3e>
 8008328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832c:	e00e      	b.n	800834c <__swhatbuf_r+0x40>
 800832e:	466a      	mov	r2, sp
 8008330:	f000 f8f2 	bl	8008518 <_fstat_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	dbf2      	blt.n	800831e <__swhatbuf_r+0x12>
 8008338:	9a01      	ldr	r2, [sp, #4]
 800833a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800833e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008342:	425a      	negs	r2, r3
 8008344:	415a      	adcs	r2, r3
 8008346:	602a      	str	r2, [r5, #0]
 8008348:	e7ee      	b.n	8008328 <__swhatbuf_r+0x1c>
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	2000      	movs	r0, #0
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	b016      	add	sp, #88	; 0x58
 8008352:	bd70      	pop	{r4, r5, r6, pc}

08008354 <__smakebuf_r>:
 8008354:	898b      	ldrh	r3, [r1, #12]
 8008356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008358:	079d      	lsls	r5, r3, #30
 800835a:	4606      	mov	r6, r0
 800835c:	460c      	mov	r4, r1
 800835e:	d507      	bpl.n	8008370 <__smakebuf_r+0x1c>
 8008360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	2301      	movs	r3, #1
 800836a:	6163      	str	r3, [r4, #20]
 800836c:	b002      	add	sp, #8
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	ab01      	add	r3, sp, #4
 8008372:	466a      	mov	r2, sp
 8008374:	f7ff ffca 	bl	800830c <__swhatbuf_r>
 8008378:	9900      	ldr	r1, [sp, #0]
 800837a:	4605      	mov	r5, r0
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff f959 	bl	8007634 <_malloc_r>
 8008382:	b948      	cbnz	r0, 8008398 <__smakebuf_r+0x44>
 8008384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008388:	059a      	lsls	r2, r3, #22
 800838a:	d4ef      	bmi.n	800836c <__smakebuf_r+0x18>
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	e7e3      	b.n	8008360 <__smakebuf_r+0xc>
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <__smakebuf_r+0x7c>)
 800839a:	62b3      	str	r3, [r6, #40]	; 0x28
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	6020      	str	r0, [r4, #0]
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	6163      	str	r3, [r4, #20]
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	6120      	str	r0, [r4, #16]
 80083ae:	b15b      	cbz	r3, 80083c8 <__smakebuf_r+0x74>
 80083b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 f8c1 	bl	800853c <_isatty_r>
 80083ba:	b128      	cbz	r0, 80083c8 <__smakebuf_r+0x74>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	431d      	orrs	r5, r3
 80083cc:	81a5      	strh	r5, [r4, #12]
 80083ce:	e7cd      	b.n	800836c <__smakebuf_r+0x18>
 80083d0:	080074e9 	.word	0x080074e9

080083d4 <memmove>:
 80083d4:	4288      	cmp	r0, r1
 80083d6:	b510      	push	{r4, lr}
 80083d8:	eb01 0302 	add.w	r3, r1, r2
 80083dc:	d807      	bhi.n	80083ee <memmove+0x1a>
 80083de:	1e42      	subs	r2, r0, #1
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d00a      	beq.n	80083fa <memmove+0x26>
 80083e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083ec:	e7f8      	b.n	80083e0 <memmove+0xc>
 80083ee:	4283      	cmp	r3, r0
 80083f0:	d9f5      	bls.n	80083de <memmove+0xa>
 80083f2:	1881      	adds	r1, r0, r2
 80083f4:	1ad2      	subs	r2, r2, r3
 80083f6:	42d3      	cmn	r3, r2
 80083f8:	d100      	bne.n	80083fc <memmove+0x28>
 80083fa:	bd10      	pop	{r4, pc}
 80083fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008400:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008404:	e7f7      	b.n	80083f6 <memmove+0x22>

08008406 <__malloc_lock>:
 8008406:	4770      	bx	lr

08008408 <__malloc_unlock>:
 8008408:	4770      	bx	lr
	...

0800840c <_free_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	2900      	cmp	r1, #0
 8008412:	d045      	beq.n	80084a0 <_free_r+0x94>
 8008414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008418:	1f0c      	subs	r4, r1, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfb8      	it	lt
 800841e:	18e4      	addlt	r4, r4, r3
 8008420:	f7ff fff1 	bl	8008406 <__malloc_lock>
 8008424:	4a1f      	ldr	r2, [pc, #124]	; (80084a4 <_free_r+0x98>)
 8008426:	6813      	ldr	r3, [r2, #0]
 8008428:	4610      	mov	r0, r2
 800842a:	b933      	cbnz	r3, 800843a <_free_r+0x2e>
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	6014      	str	r4, [r2, #0]
 8008430:	4628      	mov	r0, r5
 8008432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008436:	f7ff bfe7 	b.w	8008408 <__malloc_unlock>
 800843a:	42a3      	cmp	r3, r4
 800843c:	d90c      	bls.n	8008458 <_free_r+0x4c>
 800843e:	6821      	ldr	r1, [r4, #0]
 8008440:	1862      	adds	r2, r4, r1
 8008442:	4293      	cmp	r3, r2
 8008444:	bf04      	itt	eq
 8008446:	681a      	ldreq	r2, [r3, #0]
 8008448:	685b      	ldreq	r3, [r3, #4]
 800844a:	6063      	str	r3, [r4, #4]
 800844c:	bf04      	itt	eq
 800844e:	1852      	addeq	r2, r2, r1
 8008450:	6022      	streq	r2, [r4, #0]
 8008452:	6004      	str	r4, [r0, #0]
 8008454:	e7ec      	b.n	8008430 <_free_r+0x24>
 8008456:	4613      	mov	r3, r2
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	b10a      	cbz	r2, 8008460 <_free_r+0x54>
 800845c:	42a2      	cmp	r2, r4
 800845e:	d9fa      	bls.n	8008456 <_free_r+0x4a>
 8008460:	6819      	ldr	r1, [r3, #0]
 8008462:	1858      	adds	r0, r3, r1
 8008464:	42a0      	cmp	r0, r4
 8008466:	d10b      	bne.n	8008480 <_free_r+0x74>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	4401      	add	r1, r0
 800846c:	1858      	adds	r0, r3, r1
 800846e:	4282      	cmp	r2, r0
 8008470:	6019      	str	r1, [r3, #0]
 8008472:	d1dd      	bne.n	8008430 <_free_r+0x24>
 8008474:	6810      	ldr	r0, [r2, #0]
 8008476:	6852      	ldr	r2, [r2, #4]
 8008478:	605a      	str	r2, [r3, #4]
 800847a:	4401      	add	r1, r0
 800847c:	6019      	str	r1, [r3, #0]
 800847e:	e7d7      	b.n	8008430 <_free_r+0x24>
 8008480:	d902      	bls.n	8008488 <_free_r+0x7c>
 8008482:	230c      	movs	r3, #12
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	e7d3      	b.n	8008430 <_free_r+0x24>
 8008488:	6820      	ldr	r0, [r4, #0]
 800848a:	1821      	adds	r1, r4, r0
 800848c:	428a      	cmp	r2, r1
 800848e:	bf04      	itt	eq
 8008490:	6811      	ldreq	r1, [r2, #0]
 8008492:	6852      	ldreq	r2, [r2, #4]
 8008494:	6062      	str	r2, [r4, #4]
 8008496:	bf04      	itt	eq
 8008498:	1809      	addeq	r1, r1, r0
 800849a:	6021      	streq	r1, [r4, #0]
 800849c:	605c      	str	r4, [r3, #4]
 800849e:	e7c7      	b.n	8008430 <_free_r+0x24>
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	20019274 	.word	0x20019274

080084a8 <_realloc_r>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	4607      	mov	r7, r0
 80084ac:	4614      	mov	r4, r2
 80084ae:	460e      	mov	r6, r1
 80084b0:	b921      	cbnz	r1, 80084bc <_realloc_r+0x14>
 80084b2:	4611      	mov	r1, r2
 80084b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084b8:	f7ff b8bc 	b.w	8007634 <_malloc_r>
 80084bc:	b922      	cbnz	r2, 80084c8 <_realloc_r+0x20>
 80084be:	f7ff ffa5 	bl	800840c <_free_r>
 80084c2:	4625      	mov	r5, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c8:	f000 f848 	bl	800855c <_malloc_usable_size_r>
 80084cc:	42a0      	cmp	r0, r4
 80084ce:	d20f      	bcs.n	80084f0 <_realloc_r+0x48>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4638      	mov	r0, r7
 80084d4:	f7ff f8ae 	bl	8007634 <_malloc_r>
 80084d8:	4605      	mov	r5, r0
 80084da:	2800      	cmp	r0, #0
 80084dc:	d0f2      	beq.n	80084c4 <_realloc_r+0x1c>
 80084de:	4631      	mov	r1, r6
 80084e0:	4622      	mov	r2, r4
 80084e2:	f7fe ff91 	bl	8007408 <memcpy>
 80084e6:	4631      	mov	r1, r6
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7ff ff8f 	bl	800840c <_free_r>
 80084ee:	e7e9      	b.n	80084c4 <_realloc_r+0x1c>
 80084f0:	4635      	mov	r5, r6
 80084f2:	e7e7      	b.n	80084c4 <_realloc_r+0x1c>

080084f4 <_read_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4c07      	ldr	r4, [pc, #28]	; (8008514 <_read_r+0x20>)
 80084f8:	4605      	mov	r5, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7f8 fe9a 	bl	800123c <_read>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_read_r+0x1e>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	b103      	cbz	r3, 8008512 <_read_r+0x1e>
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20019394 	.word	0x20019394

08008518 <_fstat_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4c07      	ldr	r4, [pc, #28]	; (8008538 <_fstat_r+0x20>)
 800851c:	2300      	movs	r3, #0
 800851e:	4605      	mov	r5, r0
 8008520:	4608      	mov	r0, r1
 8008522:	4611      	mov	r1, r2
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	f7f8 fece 	bl	80012c6 <_fstat>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	d102      	bne.n	8008534 <_fstat_r+0x1c>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	b103      	cbz	r3, 8008534 <_fstat_r+0x1c>
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	bd38      	pop	{r3, r4, r5, pc}
 8008536:	bf00      	nop
 8008538:	20019394 	.word	0x20019394

0800853c <_isatty_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4c06      	ldr	r4, [pc, #24]	; (8008558 <_isatty_r+0x1c>)
 8008540:	2300      	movs	r3, #0
 8008542:	4605      	mov	r5, r0
 8008544:	4608      	mov	r0, r1
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	f7f8 fecd 	bl	80012e6 <_isatty>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_isatty_r+0x1a>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	b103      	cbz	r3, 8008556 <_isatty_r+0x1a>
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	20019394 	.word	0x20019394

0800855c <_malloc_usable_size_r>:
 800855c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008560:	1f18      	subs	r0, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfbc      	itt	lt
 8008566:	580b      	ldrlt	r3, [r1, r0]
 8008568:	18c0      	addlt	r0, r0, r3
 800856a:	4770      	bx	lr

0800856c <_init>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr

08008578 <_fini>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr
