
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf4  08005bf4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bfc  08005bfc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a80c  2000001c  08005c20  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a828  08005c20  0002a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144f8  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a13  00000000  00000000  00034544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00036f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e8e  00000000  00000000  00038fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db6c  00000000  00000000  00050e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097591  00000000  00000000  0005e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5f5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  000f5fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a78 	.word	0x08005a78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08005a78 	.word	0x08005a78

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a780 	.word	0x2001a780

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fac1 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86d 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d3 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000586:	482d      	ldr	r0, [pc, #180]	; (800063c <main+0xc8>)
 8000588:	f003 f8d0 	bl	800372c <SEGGER_UART_init>

  //Cycle count enable
    DWT_CTRL |= (1 << 0);
 800058c:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <main+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a2b      	ldr	r2, [pc, #172]	; (8000640 <main+0xcc>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000598:	f002 fefa 	bl	8003390 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800059c:	f004 fc28 	bl	8004df0 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led1_handler, "LED_1_task", 200, NULL, 2, &task1_handle);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	22c8      	movs	r2, #200	; 0xc8
 80005ae:	4925      	ldr	r1, [pc, #148]	; (8000644 <main+0xd0>)
 80005b0:	4825      	ldr	r0, [pc, #148]	; (8000648 <main+0xd4>)
 80005b2:	f001 fcd1 	bl	8001f58 <xTaskCreate>
 80005b6:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d009      	beq.n	80005d2 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	e7fe      	b.n	80005d0 <main+0x5c>

	status = xTaskCreate(led2_handler, "LED_2_task", 200, NULL, 2, &task2_handle);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	22c8      	movs	r2, #200	; 0xc8
 80005e0:	491a      	ldr	r1, [pc, #104]	; (800064c <main+0xd8>)
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xdc>)
 80005e4:	f001 fcb8 	bl	8001f58 <xTaskCreate>
 80005e8:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d009      	beq.n	8000604 <main+0x90>
 80005f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	f3bf 8f6f 	isb	sy
 80005fc:	f3bf 8f4f 	dsb	sy
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e7fe      	b.n	8000602 <main+0x8e>

	status = xTaskCreate(led3_handler, "LED_3_task", 200, NULL, 2, &task3_handle);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	22c8      	movs	r2, #200	; 0xc8
 8000610:	4910      	ldr	r1, [pc, #64]	; (8000654 <main+0xe0>)
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <main+0xe4>)
 8000614:	f001 fca0 	bl	8001f58 <xTaskCreate>
 8000618:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d009      	beq.n	8000634 <main+0xc0>
 8000620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	e7fe      	b.n	8000632 <main+0xbe>

	//start the freeRTOS scheduler
	 vTaskStartScheduler();
 8000634:	f001 fe70 	bl	8002318 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0xc4>
 800063a:	bf00      	nop
 800063c:	0007a120 	.word	0x0007a120
 8000640:	e0001000 	.word	0xe0001000
 8000644:	08005a90 	.word	0x08005a90
 8000648:	08000859 	.word	0x08000859
 800064c:	08005a9c 	.word	0x08005a9c
 8000650:	08000891 	.word	0x08000891
 8000654:	08005aa8 	.word	0x08005aa8
 8000658:	080008c9 	.word	0x080008c9

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 f9fc 	bl	8005a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fce7 	bl	80010b4 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f91a 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2103      	movs	r1, #3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ff41 	bl	8001594 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 f904 	bl	8000924 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <MX_GPIO_Init+0x118>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a3e      	ldr	r2, [pc, #248]	; (8000844 <MX_GPIO_Init+0x118>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <MX_GPIO_Init+0x118>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x118>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0x118>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x118>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_GPIO_Init+0x118>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <MX_GPIO_Init+0x118>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <MX_GPIO_Init+0x118>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0x118>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_GPIO_Init+0x118>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0x118>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_GPIO_Init+0x11c>)
 80007b8:	f000 fc48 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80007c2:	4822      	ldr	r0, [pc, #136]	; (800084c <MX_GPIO_Init+0x120>)
 80007c4:	f000 fc42 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_GPIO_Init+0x124>)
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <MX_GPIO_Init+0x128>)
 80007de:	f000 fab3 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e2:	230c      	movs	r3, #12
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f2:	2307      	movs	r3, #7
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0x11c>)
 80007fe:	f000 faa3 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000802:	2320      	movs	r3, #32
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0x11c>)
 800081a:	f000 fa95 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800081e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x120>)
 8000838:	f000 fa86 	bl	8000d48 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020400 	.word	0x40020400
 8000850:	10210000 	.word	0x10210000
 8000854:	40020800 	.word	0x40020800

08000858 <led1_handler>:

/* USER CODE BEGIN 4 */

static void led1_handler(void* parameters)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000860:	f001 fe62 	bl	8002528 <xTaskGetTickCount>
 8000864:	4603      	mov	r3, r0
 8000866:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <led1_handler+0x30>)
 800086a:	f005 f821 	bl	80058b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800086e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <led1_handler+0x34>)
 8000874:	f000 fc03 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fccb 	bl	800221c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 8000886:	e7ef      	b.n	8000868 <led1_handler+0x10>
 8000888:	08005ab4 	.word	0x08005ab4
 800088c:	40020400 	.word	0x40020400

08000890 <led2_handler>:
	}
}


static void led2_handler(void* parameters)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000898:	f001 fe46 	bl	8002528 <xTaskGetTickCount>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <led2_handler+0x30>)
 80008a2:	f005 f805 	bl	80058b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <led2_handler+0x34>)
 80008ac:	f000 fbe7 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(800));
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fcaf 	bl	800221c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 80008be:	e7ef      	b.n	80008a0 <led2_handler+0x10>
 80008c0:	08005ac4 	.word	0x08005ac4
 80008c4:	40020400 	.word	0x40020400

080008c8 <led3_handler>:
	}

}

static void led3_handler(void* parameters)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008d0:	f001 fe2a 	bl	8002528 <xTaskGetTickCount>
 80008d4:	4603      	mov	r3, r0
 80008d6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <led3_handler+0x30>)
 80008da:	f004 ffe9 	bl	80058b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <led3_handler+0x34>)
 80008e4:	f000 fbcb 	bl	800107e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(400));
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fc93 	bl	800221c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80008f6:	e7ef      	b.n	80008d8 <led3_handler+0x10>
 80008f8:	08005ad4 	.word	0x08005ad4
 80008fc:	40020400 	.word	0x40020400

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f917 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40000c00 	.word	0x40000c00

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000972:	f002 f96d 	bl	8002c50 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2032      	movs	r0, #50	; 0x32
 800099a:	f000 f9ab 	bl	8000cf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800099e:	2032      	movs	r0, #50	; 0x32
 80009a0:	f000 f9c4 	bl	8000d2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xa4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_InitTick+0xa4>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 0210 	add.w	r2, r7, #16
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 ffc0 	bl	8001950 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009d0:	f000 ffaa 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 80009d4:	4603      	mov	r3, r0
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_InitTick+0xa8>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_InitTick+0xac>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <HAL_InitTick+0xb0>)
 80009ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_InitTick+0xac>)
 80009f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_InitTick+0xac>)
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_InitTick+0xac>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_InitTick+0xac>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_InitTick+0xac>)
 8000a0a:	f000 ffd3 	bl	80019b4 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_InitTick+0xac>)
 8000a16:	f001 f802 	bl	8001a1e <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	2001a73c 	.word	0x2001a73c
 8000a34:	40000c00 	.word	0x40000c00

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM5_IRQHandler+0x10>)
 8000a72:	f000 fff8 	bl	8001a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2001a73c 	.word	0x2001a73c

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x28>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x28>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x28>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd3 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f004 ff87 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd49 	bl	8000574 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ae8:	08005c04 	.word	0x08005c04
  ldr  r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000af0:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000af4:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000af8:	2001a828 	.word	0x2001a828

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d8 	bl	8000cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff28 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fefe 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2001a77c 	.word	0x2001a77c

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2001a77c 	.word	0x2001a77c

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff4c 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d06:	f7ff ff61 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f7ff ffb1 	bl	8000c78 <NVIC_EncodePriority>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff80 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e159      	b.n	8001018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8148 	bne.w	8001012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d00b      	beq.n	8000da2 <HAL_GPIO_Init+0x5a>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d96:	2b11      	cmp	r3, #17
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0xfc>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b12      	cmp	r3, #18
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a2 	beq.w	8001012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b56      	ldr	r3, [pc, #344]	; (800102c <HAL_GPIO_Init+0x2e4>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_GPIO_Init+0x2e4>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_GPIO_Init+0x2e4>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a51      	ldr	r2, [pc, #324]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a48      	ldr	r2, [pc, #288]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a47      	ldr	r2, [pc, #284]	; (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1fe>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a46      	ldr	r2, [pc, #280]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a45      	ldr	r2, [pc, #276]	; (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a44      	ldr	r2, [pc, #272]	; (8001044 <HAL_GPIO_Init+0x2fc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4934      	ldr	r1, [pc, #208]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8e:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb8:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_GPIO_Init+0x300>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f aea2 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	401a      	ands	r2, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	429a      	cmp	r2, r3
 8001096:	d104      	bne.n	80010a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e25b      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d00c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05b      	beq.n	80011bc <HAL_RCC_OscConfig+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e236      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x74>
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a87      	ldr	r2, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a80      	ldr	r2, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fcfe 	bl	8000b6c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fcfa 	bl	8000b6c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1fb      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xc0>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcea 	bl	8000b6c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fce6 	bl	8000b6c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1e7      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0xe8>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d063      	beq.n	8001292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d116      	bne.n	800121c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e1bb      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4b56      	ldr	r3, [pc, #344]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4952      	ldr	r1, [pc, #328]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	e03a      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001224:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <HAL_RCC_OscConfig+0x2b0>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fc9f 	bl	8000b6c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc9b 	bl	8000b6c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e19c      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4940      	ldr	r1, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCC_OscConfig+0x2b0>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fc7e 	bl	8000b6c <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fc7a 	bl	8000b6c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e17b      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d030      	beq.n	8001300 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d016      	beq.n	80012d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_RCC_OscConfig+0x2b4>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fc5e 	bl	8000b6c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc5a 	bl	8000b6c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e15b      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x200>
 80012d2:	e015      	b.n	8001300 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x2b4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fc47 	bl	8000b6c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc43 	bl	8000b6c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e144      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a0 	beq.w	800144e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d121      	bne.n	800138e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_RCC_OscConfig+0x2b8>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc09 	bl	8000b6c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e011      	b.n	8001382 <HAL_RCC_OscConfig+0x2ce>
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
 8001368:	42470e80 	.word	0x42470e80
 800136c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001370:	f7ff fbfc 	bl	8000b6c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0fd      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x4d4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2f0>
 8001396:	4b7d      	ldr	r3, [pc, #500]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a7c      	ldr	r2, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	e01c      	b.n	80013de <HAL_RCC_OscConfig+0x32a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x312>
 80013ac:	4b77      	ldr	r3, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a76      	ldr	r2, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
 80013b8:	4b74      	ldr	r3, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a73      	ldr	r2, [pc, #460]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0x32a>
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	4a70      	ldr	r2, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6713      	str	r3, [r2, #112]	; 0x70
 80013d2:	4b6e      	ldr	r3, [pc, #440]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a6d      	ldr	r2, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d015      	beq.n	8001412 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fbc1 	bl	8000b6c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fbbd 	bl	8000b6c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0bc      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ee      	beq.n	80013ee <HAL_RCC_OscConfig+0x33a>
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbab 	bl	8000b6c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fba7 	bl	8000b6c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0a6      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001442:	4b52      	ldr	r3, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8092 	beq.w	800157c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d05c      	beq.n	800151e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d141      	bne.n	80014f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b48      	ldr	r3, [pc, #288]	; (8001590 <HAL_RCC_OscConfig+0x4dc>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb7b 	bl	8000b6c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb77 	bl	8000b6c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e078      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	019b      	lsls	r3, r3, #6
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	061b      	lsls	r3, r3, #24
 80014bc:	4933      	ldr	r1, [pc, #204]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_RCC_OscConfig+0x4dc>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb50 	bl	8000b6c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fb4c 	bl	8000b6c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04d      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x41c>
 80014ee:	e045      	b.n	800157c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x4dc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb39 	bl	8000b6c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb35 	bl	8000b6c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e036      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x44a>
 800151c:	e02e      	b.n	800157c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e029      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_RCC_OscConfig+0x4d8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	429a      	cmp	r2, r3
 800153c:	d11c      	bne.n	8001578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d115      	bne.n	8001578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001552:	4013      	ands	r3, r2
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001558:	4293      	cmp	r3, r2
 800155a:	d10d      	bne.n	8001578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40007000 	.word	0x40007000
 800158c:	40023800 	.word	0x40023800
 8001590:	42470060 	.word	0x42470060

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fa72 	bl	8000b6c <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fa6e 	bl	8000b6c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4601      	mov	r1, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	fa21 f303 	lsr.w	r3, r1, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f922 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08005ba0 	.word	0x08005ba0
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d007      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x32>
 8001782:	2b08      	cmp	r3, #8
 8001784:	d008      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x38>
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80b4 	bne.w	80018f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800178e:	60bb      	str	r3, [r7, #8]
       break;
 8001790:	e0b3      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001792:	4b5e      	ldr	r3, [pc, #376]	; (800190c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001794:	60bb      	str	r3, [r7, #8]
      break;
 8001796:	e0b0      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b58      	ldr	r3, [pc, #352]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04a      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	ea03 0501 	and.w	r5, r3, r1
 80017c4:	ea04 0602 	and.w	r6, r4, r2
 80017c8:	4629      	mov	r1, r5
 80017ca:	4632      	mov	r2, r6
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	0154      	lsls	r4, r2, #5
 80017d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017da:	014b      	lsls	r3, r1, #5
 80017dc:	4619      	mov	r1, r3
 80017de:	4622      	mov	r2, r4
 80017e0:	1b49      	subs	r1, r1, r5
 80017e2:	eb62 0206 	sbc.w	r2, r2, r6
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	0194      	lsls	r4, r2, #6
 80017f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017f4:	018b      	lsls	r3, r1, #6
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	eb64 0402 	sbc.w	r4, r4, r2
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	00e2      	lsls	r2, r4, #3
 8001806:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800180a:	00d9      	lsls	r1, r3, #3
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	195b      	adds	r3, r3, r5
 8001812:	eb44 0406 	adc.w	r4, r4, r6
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	0262      	lsls	r2, r4, #9
 8001820:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001824:	0259      	lsls	r1, r3, #9
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	4618      	mov	r0, r3
 800182c:	4621      	mov	r1, r4
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	f7fe fd1c 	bl	8000274 <__aeabi_uldivmod>
 800183c:	4603      	mov	r3, r0
 800183e:	460c      	mov	r4, r1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e049      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	ea03 0501 	and.w	r5, r3, r1
 800185a:	ea04 0602 	and.w	r6, r4, r2
 800185e:	4629      	mov	r1, r5
 8001860:	4632      	mov	r2, r6
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	0154      	lsls	r4, r2, #5
 800186c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001870:	014b      	lsls	r3, r1, #5
 8001872:	4619      	mov	r1, r3
 8001874:	4622      	mov	r2, r4
 8001876:	1b49      	subs	r1, r1, r5
 8001878:	eb62 0206 	sbc.w	r2, r2, r6
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	0194      	lsls	r4, r2, #6
 8001886:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800188a:	018b      	lsls	r3, r1, #6
 800188c:	1a5b      	subs	r3, r3, r1
 800188e:	eb64 0402 	sbc.w	r4, r4, r2
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	00e2      	lsls	r2, r4, #3
 800189c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018a0:	00d9      	lsls	r1, r3, #3
 80018a2:	460b      	mov	r3, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	195b      	adds	r3, r3, r5
 80018a8:	eb44 0406 	adc.w	r4, r4, r6
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	02a2      	lsls	r2, r4, #10
 80018b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018ba:	0299      	lsls	r1, r3, #10
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f04f 0400 	mov.w	r4, #0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4623      	mov	r3, r4
 80018ce:	f7fe fcd1 	bl	8000274 <__aeabi_uldivmod>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	3301      	adds	r3, #1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e002      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018f6:	60bb      	str	r3, [r7, #8]
      break;
 80018f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fa:	68bb      	ldr	r3, [r7, #8]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	007a1200 	.word	0x007a1200

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_GetHCLKFreq+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000000 	.word	0x20000000

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff0 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001930:	4601      	mov	r1, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	08005bb0 	.word	0x08005bb0

08001950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	220f      	movs	r2, #15
 800195e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_RCC_GetClockConfig+0x60>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 020f 	and.w	r2, r3, #15
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01d      	b.n	8001a02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f815 	bl	8001a0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f000 f968 	bl	8001cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d007      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d122      	bne.n	8001ac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d11b      	bne.n	8001ac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 0202 	mvn.w	r2, #2
 8001a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f8ee 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001aae:	e005      	b.n	8001abc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8e0 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8f1 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d122      	bne.n	8001b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d11b      	bne.n	8001b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0204 	mvn.w	r2, #4
 8001ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8c4 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001b02:	e005      	b.n	8001b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8b6 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8c7 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d122      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11b      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0208 	mvn.w	r2, #8
 8001b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f89a 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001b56:	e005      	b.n	8001b64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f88c 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f89d 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d122      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d11b      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f06f 0210 	mvn.w	r2, #16
 8001b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2208      	movs	r2, #8
 8001b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f870 	bl	8001c8a <HAL_TIM_IC_CaptureCallback>
 8001baa:	e005      	b.n	8001bb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f862 	bl	8001c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f873 	bl	8001c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10e      	bne.n	8001bea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0201 	mvn.w	r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fe8b 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d10e      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	2b80      	cmp	r3, #128	; 0x80
 8001c04:	d107      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8e3 	bl	8001ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d10e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d107      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f838 	bl	8001cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d10e      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d107      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0220 	mvn.w	r2, #32
 8001c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8ad 	bl	8001dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <TIM_Base_SetConfig+0xe4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00f      	beq.n	8001d00 <TIM_Base_SetConfig+0x38>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d00b      	beq.n	8001d00 <TIM_Base_SetConfig+0x38>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a31      	ldr	r2, [pc, #196]	; (8001db0 <TIM_Base_SetConfig+0xe8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <TIM_Base_SetConfig+0x38>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <TIM_Base_SetConfig+0xec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <TIM_Base_SetConfig+0x38>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <TIM_Base_SetConfig+0xf0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d108      	bne.n	8001d12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a25      	ldr	r2, [pc, #148]	; (8001dac <TIM_Base_SetConfig+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01b      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d20:	d017      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <TIM_Base_SetConfig+0xe8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <TIM_Base_SetConfig+0xec>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00f      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <TIM_Base_SetConfig+0xf0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00b      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <TIM_Base_SetConfig+0xf4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <TIM_Base_SetConfig+0xf8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d003      	beq.n	8001d52 <TIM_Base_SetConfig+0x8a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <TIM_Base_SetConfig+0xfc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <TIM_Base_SetConfig+0xe4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d103      	bne.n	8001d98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	615a      	str	r2, [r3, #20]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40000800 	.word	0x40000800
 8001db8:	40000c00 	.word	0x40000c00
 8001dbc:	40014000 	.word	0x40014000
 8001dc0:	40014400 	.word	0x40014400
 8001dc4:	40014800 	.word	0x40014800

08001dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 0208 	add.w	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f103 0208 	add.w	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0208 	add.w	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea8:	d103      	bne.n	8001eb2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e00c      	b.n	8001ecc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e002      	b.n	8001ec0 <vListInsert+0x2e>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d2f6      	bcs.n	8001eba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6892      	ldr	r2, [r2, #8]
 8001f1a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6852      	ldr	r2, [r2, #4]
 8001f24:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d103      	bne.n	8001f38 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1e5a      	subs	r2, r3, #1
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f809 	bl	8002f84 <pvPortMalloc>
 8001f72:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00e      	beq.n	8001f98 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f7a:	2058      	movs	r0, #88	; 0x58
 8001f7c:	f001 f802 	bl	8002f84 <pvPortMalloc>
 8001f80:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8e:	e005      	b.n	8001f9c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f90:	6978      	ldr	r0, [r7, #20]
 8001f92:	f001 f8d3 	bl	800313c <vPortFree>
 8001f96:	e001      	b.n	8001f9c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d013      	beq.n	8001fca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fa2:	88fa      	ldrh	r2, [r7, #6]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9303      	str	r3, [sp, #12]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f80e 	bl	8001fda <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001fbe:	69f8      	ldr	r0, [r7, #28]
 8001fc0:	f000 f8a0 	bl	8002104 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e002      	b.n	8001fd0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
    }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	21a5      	movs	r1, #165	; 0xa5
 8001ff4:	f003 fd38 	bl	8005a68 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002002:	3b01      	subs	r3, #1
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f023 0307 	bic.w	r3, r3, #7
 8002010:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <prvInitialiseNewTask+0x56>
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e7fe      	b.n	800202e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01f      	beq.n	8002076 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e012      	b.n	8002062 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	7819      	ldrb	r1, [r3, #0]
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	3334      	adds	r3, #52	; 0x34
 800204c:	460a      	mov	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d9e9      	bls.n	800203c <prvInitialiseNewTask+0x62>
 8002068:	e000      	b.n	800206c <prvInitialiseNewTask+0x92>
            {
                break;
 800206a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002074:	e003      	b.n	800207e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	2b04      	cmp	r3, #4
 8002082:	d901      	bls.n	8002088 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002084:	2304      	movs	r3, #4
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002092:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2200      	movs	r2, #0
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	3304      	adds	r3, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fec6 	bl	8001e30 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	3318      	adds	r3, #24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fec1 	bl	8001e30 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	f1c3 0205 	rsb	r2, r3, #5
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	3350      	adds	r3, #80	; 0x50
 80020c8:	2204      	movs	r2, #4
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fccb 	bl	8005a68 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	3354      	adds	r3, #84	; 0x54
 80020d6:	2201      	movs	r2, #1
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fcc4 	bl	8005a68 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	69b8      	ldr	r0, [r7, #24]
 80020e6:	f000 fc8d 	bl	8002a04 <pxPortInitialiseStack>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800210c:	f000 fe1a 	bl	8002d44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <prvAddNewTaskToReadyList+0xfc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <prvAddNewTaskToReadyList+0xfc>)
 8002118:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <prvAddNewTaskToReadyList+0x100>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002122:	4a38      	ldr	r2, [pc, #224]	; (8002204 <prvAddNewTaskToReadyList+0x100>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <prvAddNewTaskToReadyList+0xfc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d110      	bne.n	8002152 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002130:	f000 fb58 	bl	80027e4 <prvInitialiseTaskLists>
 8002134:	e00d      	b.n	8002152 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <prvAddNewTaskToReadyList+0x104>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <prvAddNewTaskToReadyList+0x100>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	429a      	cmp	r2, r3
 800214a:	d802      	bhi.n	8002152 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800214c:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <prvAddNewTaskToReadyList+0x100>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <prvAddNewTaskToReadyList+0x108>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <prvAddNewTaskToReadyList+0x108>)
 800215a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <prvAddNewTaskToReadyList+0x108>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <prvAddNewTaskToReadyList+0x94>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f99d 	bl	80054ac <SEGGER_SYSVIEW_OnTaskCreate>
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	461d      	mov	r5, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461c      	mov	r4, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	1ae3      	subs	r3, r4, r3
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	462b      	mov	r3, r5
 8002194:	f001 f996 	bl	80034c4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fa0a 	bl	80055b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <prvAddNewTaskToReadyList+0x10c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <prvAddNewTaskToReadyList+0x10c>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <prvAddNewTaskToReadyList+0x110>)
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7ff fe3e 	bl	8001e4a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80021ce:	f000 fde7 	bl	8002da0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <prvAddNewTaskToReadyList+0x104>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00e      	beq.n	80021f8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <prvAddNewTaskToReadyList+0x100>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <prvAddNewTaskToReadyList+0x114>)
 80021ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	20000110 	.word	0x20000110
 8002204:	20000038 	.word	0x20000038
 8002208:	2000011c 	.word	0x2000011c
 800220c:	2000012c 	.word	0x2000012c
 8002210:	20000118 	.word	0x20000118
 8002214:	2000003c 	.word	0x2000003c
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <xTaskDelayUntil+0x28>
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e7fe      	b.n	8002242 <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <xTaskDelayUntil+0x42>
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e7fe      	b.n	800225c <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <xTaskDelayUntil+0xf0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <xTaskDelayUntil+0x5e>
 8002266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226a:	f383 8811 	msr	BASEPRI, r3
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e7fe      	b.n	8002278 <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 800227a:	f000 f8a7 	bl	80023cc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <xTaskDelayUntil+0xf4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4413      	add	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d20b      	bcs.n	80022b0 <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d211      	bcs.n	80022c6 <xTaskDelayUntil+0xaa>
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d90d      	bls.n	80022c6 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e00a      	b.n	80022c6 <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d303      	bcc.n	80022c2 <xTaskDelayUntil+0xa6>
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d901      	bls.n	80022c6 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80022d2:	2024      	movs	r0, #36	; 0x24
 80022d4:	f002 fcd8 	bl	8004c88 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb17 	bl	8002914 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80022e6:	f000 f87f 	bl	80023e8 <xTaskResumeAll>
 80022ea:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <xTaskDelayUntil+0xf8>)
 80022f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002304:	4618      	mov	r0, r3
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000138 	.word	0x20000138
 8002310:	20000114 	.word	0x20000114
 8002314:	e000ed04 	.word	0xe000ed04

08002318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800231e:	4b23      	ldr	r3, [pc, #140]	; (80023ac <vTaskStartScheduler+0x94>)
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	2282      	movs	r2, #130	; 0x82
 800232a:	4921      	ldr	r1, [pc, #132]	; (80023b0 <vTaskStartScheduler+0x98>)
 800232c:	4821      	ldr	r0, [pc, #132]	; (80023b4 <vTaskStartScheduler+0x9c>)
 800232e:	f7ff fe13 	bl	8001f58 <xTaskCreate>
 8002332:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d123      	bne.n	8002382 <vTaskStartScheduler+0x6a>
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <vTaskStartScheduler+0xa0>)
 800234e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002352:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <vTaskStartScheduler+0xa4>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <vTaskStartScheduler+0xa8>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <vTaskStartScheduler+0xac>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <vTaskStartScheduler+0x94>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d102      	bne.n	8002372 <vTaskStartScheduler+0x5a>
 800236c:	f003 f882 	bl	8005474 <SEGGER_SYSVIEW_OnIdle>
 8002370:	e004      	b.n	800237c <vTaskStartScheduler+0x64>
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <vTaskStartScheduler+0xac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 f8da 	bl	8005530 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800237c:	f000 fbca 	bl	8002b14 <xPortStartScheduler>
 8002380:	e00d      	b.n	800239e <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002388:	d109      	bne.n	800239e <vTaskStartScheduler+0x86>
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e7fe      	b.n	800239c <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <vTaskStartScheduler+0xb0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000134 	.word	0x20000134
 80023b0:	08005ae4 	.word	0x08005ae4
 80023b4:	080027b5 	.word	0x080027b5
 80023b8:	20000130 	.word	0x20000130
 80023bc:	2000011c 	.word	0x2000011c
 80023c0:	20000114 	.word	0x20000114
 80023c4:	20000038 	.word	0x20000038
 80023c8:	2000000c 	.word	0x2000000c

080023cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <vTaskSuspendAll+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <vTaskSuspendAll+0x18>)
 80023d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20000138 	.word	0x20000138

080023e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <xTaskResumeAll+0x11c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <xTaskResumeAll+0x2a>
 80023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	e7fe      	b.n	8002410 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002412:	f000 fc97 	bl	8002d44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <xTaskResumeAll+0x11c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3b01      	subs	r3, #1
 800241c:	4a39      	ldr	r2, [pc, #228]	; (8002504 <xTaskResumeAll+0x11c>)
 800241e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <xTaskResumeAll+0x11c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d165      	bne.n	80024f4 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002428:	4b37      	ldr	r3, [pc, #220]	; (8002508 <xTaskResumeAll+0x120>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d061      	beq.n	80024f4 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002430:	e032      	b.n	8002498 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <xTaskResumeAll+0x124>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3318      	adds	r3, #24
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fd60 	bl	8001f04 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3304      	adds	r3, #4
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fd5b 	bl	8001f04 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 f8af 	bl	80055b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	2201      	movs	r2, #1
 800245c:	409a      	lsls	r2, r3
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <xTaskResumeAll+0x128>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <xTaskResumeAll+0x128>)
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <xTaskResumeAll+0x12c>)
 8002476:	441a      	add	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f7ff fce3 	bl	8001e4a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <xTaskResumeAll+0x130>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <xTaskResumeAll+0x134>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <xTaskResumeAll+0x124>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1c8      	bne.n	8002432 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80024a6:	f000 fa19 	bl	80028dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <xTaskResumeAll+0x138>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80024b6:	f000 f859 	bl	800256c <xTaskIncrementTick>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <xTaskResumeAll+0x134>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f1      	bne.n	80024b6 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <xTaskResumeAll+0x138>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <xTaskResumeAll+0x134>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <xTaskResumeAll+0x13c>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80024f4:	f000 fc54 	bl	8002da0 <vPortExitCritical>

    return xAlreadyYielded;
 80024f8:	68bb      	ldr	r3, [r7, #8]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000138 	.word	0x20000138
 8002508:	20000110 	.word	0x20000110
 800250c:	200000d0 	.word	0x200000d0
 8002510:	20000118 	.word	0x20000118
 8002514:	2000003c 	.word	0x2000003c
 8002518:	20000038 	.word	0x20000038
 800251c:	20000124 	.word	0x20000124
 8002520:	20000120 	.word	0x20000120
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <xTaskGetTickCount+0x1c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000114 	.word	0x20000114

08002548 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800254e:	f000 fcdb 	bl	8002f08 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <xTaskGetTickCountFromISR+0x20>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800255c:	683b      	ldr	r3, [r7, #0]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000114 	.word	0x20000114

0800256c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <xTaskIncrementTick+0x14c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 8091 	bne.w	80026a2 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002580:	4b4e      	ldr	r3, [pc, #312]	; (80026bc <xTaskIncrementTick+0x150>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002588:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <xTaskIncrementTick+0x150>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11f      	bne.n	80025d4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002594:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <xTaskIncrementTick+0x154>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <xTaskIncrementTick+0x46>
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	e7fe      	b.n	80025b0 <xTaskIncrementTick+0x44>
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <xTaskIncrementTick+0x154>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <xTaskIncrementTick+0x158>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <xTaskIncrementTick+0x154>)
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <xTaskIncrementTick+0x158>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <xTaskIncrementTick+0x15c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <xTaskIncrementTick+0x15c>)
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	f000 f984 	bl	80028dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <xTaskIncrementTick+0x160>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d34c      	bcc.n	8002678 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <xTaskIncrementTick+0x154>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d104      	bne.n	80025f2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e8:	4b38      	ldr	r3, [pc, #224]	; (80026cc <xTaskIncrementTick+0x160>)
 80025ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ee:	601a      	str	r2, [r3, #0]
                    break;
 80025f0:	e042      	b.n	8002678 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <xTaskIncrementTick+0x154>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d203      	bcs.n	8002612 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800260a:	4a30      	ldr	r2, [pc, #192]	; (80026cc <xTaskIncrementTick+0x160>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002610:	e032      	b.n	8002678 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc74 	bl	8001f04 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3318      	adds	r3, #24
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fc6b 	bl	8001f04 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 ffbf 	bl	80055b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2201      	movs	r2, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <xTaskIncrementTick+0x164>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <xTaskIncrementTick+0x164>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <xTaskIncrementTick+0x168>)
 8002656:	441a      	add	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7ff fbf3 	bl	8001e4a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <xTaskIncrementTick+0x16c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	429a      	cmp	r2, r3
 8002670:	d3b5      	bcc.n	80025de <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002676:	e7b2      	b.n	80025de <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <xTaskIncrementTick+0x16c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267e:	4915      	ldr	r1, [pc, #84]	; (80026d4 <xTaskIncrementTick+0x168>)
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d901      	bls.n	8002694 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <xTaskIncrementTick+0x170>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 800269c:	2301      	movs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e004      	b.n	80026ac <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <xTaskIncrementTick+0x174>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <xTaskIncrementTick+0x174>)
 80026aa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80026ac:	697b      	ldr	r3, [r7, #20]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000138 	.word	0x20000138
 80026bc:	20000114 	.word	0x20000114
 80026c0:	200000c8 	.word	0x200000c8
 80026c4:	200000cc 	.word	0x200000cc
 80026c8:	20000128 	.word	0x20000128
 80026cc:	20000130 	.word	0x20000130
 80026d0:	20000118 	.word	0x20000118
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	20000038 	.word	0x20000038
 80026dc:	20000124 	.word	0x20000124
 80026e0:	20000120 	.word	0x20000120

080026e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <vTaskSwitchContext+0xb8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <vTaskSwitchContext+0xbc>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80026f8:	e04c      	b.n	8002794 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <vTaskSwitchContext+0xbc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <vTaskSwitchContext+0xc0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	f1c3 031f 	rsb	r3, r3, #31
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	4924      	ldr	r1, [pc, #144]	; (80027a8 <vTaskSwitchContext+0xc4>)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <vTaskSwitchContext+0x5a>
        __asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	e7fe      	b.n	800273c <vTaskSwitchContext+0x58>
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <vTaskSwitchContext+0xc4>)
 800274a:	4413      	add	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	3308      	adds	r3, #8
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <vTaskSwitchContext+0x8a>
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <vTaskSwitchContext+0xc8>)
 8002776:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <vTaskSwitchContext+0xc8>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <vTaskSwitchContext+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d102      	bne.n	800278a <vTaskSwitchContext+0xa6>
 8002784:	f002 fe76 	bl	8005474 <SEGGER_SYSVIEW_OnIdle>
}
 8002788:	e004      	b.n	8002794 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <vTaskSwitchContext+0xc8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fece 	bl	8005530 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000138 	.word	0x20000138
 80027a0:	20000124 	.word	0x20000124
 80027a4:	20000118 	.word	0x20000118
 80027a8:	2000003c 	.word	0x2000003c
 80027ac:	20000038 	.word	0x20000038
 80027b0:	20000134 	.word	0x20000134

080027b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80027bc:	f000 f852 	bl	8002864 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <prvIdleTask+0x28>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d9f9      	bls.n	80027bc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <prvIdleTask+0x2c>)
 80027ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80027d8:	e7f0      	b.n	80027bc <prvIdleTask+0x8>
 80027da:	bf00      	nop
 80027dc:	2000003c 	.word	0x2000003c
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	e00c      	b.n	800280a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <prvInitialiseTaskLists+0x60>)
 80027fc:	4413      	add	r3, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff faf6 	bl	8001df0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3301      	adds	r3, #1
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d9ef      	bls.n	80027f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <prvInitialiseTaskLists+0x64>)
 8002812:	f7ff faed 	bl	8001df0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <prvInitialiseTaskLists+0x68>)
 8002818:	f7ff faea 	bl	8001df0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800281c:	480c      	ldr	r0, [pc, #48]	; (8002850 <prvInitialiseTaskLists+0x6c>)
 800281e:	f7ff fae7 	bl	8001df0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002822:	480c      	ldr	r0, [pc, #48]	; (8002854 <prvInitialiseTaskLists+0x70>)
 8002824:	f7ff fae4 	bl	8001df0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <prvInitialiseTaskLists+0x74>)
 800282a:	f7ff fae1 	bl	8001df0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <prvInitialiseTaskLists+0x78>)
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <prvInitialiseTaskLists+0x64>)
 8002832:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <prvInitialiseTaskLists+0x7c>)
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <prvInitialiseTaskLists+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000003c 	.word	0x2000003c
 8002848:	200000a0 	.word	0x200000a0
 800284c:	200000b4 	.word	0x200000b4
 8002850:	200000d0 	.word	0x200000d0
 8002854:	200000e4 	.word	0x200000e4
 8002858:	200000fc 	.word	0x200000fc
 800285c:	200000c8 	.word	0x200000c8
 8002860:	200000cc 	.word	0x200000cc

08002864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800286a:	e019      	b.n	80028a0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800286c:	f000 fa6a 	bl	8002d44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <prvCheckTasksWaitingTermination+0x4c>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fb41 	bl	8001f04 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <prvCheckTasksWaitingTermination+0x50>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <prvCheckTasksWaitingTermination+0x50>)
 800288a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <prvCheckTasksWaitingTermination+0x54>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	4a09      	ldr	r2, [pc, #36]	; (80028b8 <prvCheckTasksWaitingTermination+0x54>)
 8002894:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002896:	f000 fa83 	bl	8002da0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f80e 	bl	80028bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <prvCheckTasksWaitingTermination+0x54>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e1      	bne.n	800286c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200000e4 	.word	0x200000e4
 80028b4:	20000110 	.word	0x20000110
 80028b8:	200000f8 	.word	0x200000f8

080028bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fc37 	bl	800313c <vPortFree>
                vPortFree( pxTCB );
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fc34 	bl	800313c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <prvResetNextTaskUnblockTime+0x30>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <prvResetNextTaskUnblockTime+0x34>)
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80028f2:	e005      	b.n	8002900 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <prvResetNextTaskUnblockTime+0x30>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <prvResetNextTaskUnblockTime+0x34>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200000c8 	.word	0x200000c8
 8002910:	20000130 	.word	0x20000130

08002914 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002924:	4b31      	ldr	r3, [pc, #196]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3304      	adds	r3, #4
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff faea 	bl	8001f04 <uxListRemove>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2201      	movs	r2, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4013      	ands	r3, r2
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800294c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002954:	d110      	bne.n	8002978 <prvAddCurrentTaskToDelayedList+0x64>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	211b      	movs	r1, #27
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fe68 	bl	8005638 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3304      	adds	r3, #4
 800296e:	4619      	mov	r1, r3
 8002970:	4820      	ldr	r0, [pc, #128]	; (80029f4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002972:	f7ff fa6a 	bl	8001e4a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002976:	e032      	b.n	80029de <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d20f      	bcs.n	80029b0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2104      	movs	r1, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fe4e 	bl	8005638 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7ff fa72 	bl	8001e92 <vListInsert>
}
 80029ae:	e016      	b.n	80029de <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2104      	movs	r1, #4
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fe3e 	bl	8005638 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <prvAddCurrentTaskToDelayedList+0xe8>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <prvAddCurrentTaskToDelayedList+0xd8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7ff fa62 	bl	8001e92 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <prvAddCurrentTaskToDelayedList+0xec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d202      	bcs.n	80029de <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <prvAddCurrentTaskToDelayedList+0xec>)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000114 	.word	0x20000114
 80029ec:	20000038 	.word	0x20000038
 80029f0:	20000118 	.word	0x20000118
 80029f4:	200000fc 	.word	0x200000fc
 80029f8:	200000cc 	.word	0x200000cc
 80029fc:	200000c8 	.word	0x200000c8
 8002a00:	20000130 	.word	0x20000130

08002a04 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3b04      	subs	r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3b04      	subs	r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f023 0201 	bic.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3b04      	subs	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <pxPortInitialiseStack+0x64>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b14      	subs	r3, #20
 8002a3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b04      	subs	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f06f 0202 	mvn.w	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b20      	subs	r3, #32
 8002a58:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	08002a6d 	.word	0x08002a6d

08002a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <prvTaskExitError+0x50>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7e:	d009      	beq.n	8002a94 <prvTaskExitError+0x28>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e7fe      	b.n	8002a92 <prvTaskExitError+0x26>
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002aa6:	bf00      	nop
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0fc      	beq.n	8002aa8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000010 	.word	0x20000010

08002ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <pxCurrentTCBConst2>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	f380 8809 	msr	PSP, r0
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8811 	msr	BASEPRI, r0
 8002ada:	4770      	bx	lr
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst2>:
 8002ae0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop

08002ae8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <prvPortStartFirstTask+0x24>)
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	6800      	ldr	r0, [r0, #0]
 8002aee:	f380 8808 	msr	MSP, r0
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8814 	msr	CONTROL, r0
 8002afa:	b662      	cpsie	i
 8002afc:	b661      	cpsie	f
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	df00      	svc	0
 8002b08:	bf00      	nop
 8002b0a:	0000      	.short	0x0000
 8002b0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop

08002b14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <xPortStartScheduler+0x118>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a44      	ldr	r2, [pc, #272]	; (8002c30 <xPortStartScheduler+0x11c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d109      	bne.n	8002b38 <xPortStartScheduler+0x24>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e7fe      	b.n	8002b36 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b38:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <xPortStartScheduler+0x118>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3d      	ldr	r2, [pc, #244]	; (8002c34 <xPortStartScheduler+0x120>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d109      	bne.n	8002b56 <xPortStartScheduler+0x42>
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e7fe      	b.n	8002b54 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <xPortStartScheduler+0x124>)
 8002b58:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <xPortStartScheduler+0x128>)
 8002b7c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b84:	e009      	b.n	8002b9a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002b86:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4a2c      	ldr	r2, [pc, #176]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002b8e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d0ef      	beq.n	8002b86 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d009      	beq.n	8002bc6 <xPortStartScheduler+0xb2>
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e7fe      	b.n	8002bc4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002bce:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <xPortStartScheduler+0x12c>)
 8002bda:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <xPortStartScheduler+0x130>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <xPortStartScheduler+0x130>)
 8002bea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <xPortStartScheduler+0x130>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <xPortStartScheduler+0x130>)
 8002bf6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bfc:	f000 f954 	bl	8002ea8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <xPortStartScheduler+0x134>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c06:	f000 f973 	bl	8002ef0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <xPortStartScheduler+0x138>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <xPortStartScheduler+0x138>)
 8002c10:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c14:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c16:	f7ff ff67 	bl	8002ae8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c1a:	f7ff fd63 	bl	80026e4 <vTaskSwitchContext>
    prvTaskExitError();
 8002c1e:	f7ff ff25 	bl	8002a6c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	e000ed00 	.word	0xe000ed00
 8002c30:	410fc271 	.word	0x410fc271
 8002c34:	410fc270 	.word	0x410fc270
 8002c38:	e000e400 	.word	0xe000e400
 8002c3c:	2000013c 	.word	0x2000013c
 8002c40:	20000140 	.word	0x20000140
 8002c44:	e000ed20 	.word	0xe000ed20
 8002c48:	20000010 	.word	0x20000010
 8002c4c:	e000ef34 	.word	0xe000ef34

08002c50 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <vInitPrioGroupValue+0xdc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a35      	ldr	r2, [pc, #212]	; (8002d30 <vInitPrioGroupValue+0xe0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <vInitPrioGroupValue+0x24>
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e7fe      	b.n	8002c72 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <vInitPrioGroupValue+0xdc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <vInitPrioGroupValue+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d109      	bne.n	8002c92 <vInitPrioGroupValue+0x42>
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e7fe      	b.n	8002c90 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <vInitPrioGroupValue+0xe8>)
 8002c94:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <vInitPrioGroupValue+0xec>)
 8002cb8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cc0:	e009      	b.n	8002cd6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002cca:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d0ef      	beq.n	8002cc2 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d009      	beq.n	8002d02 <vInitPrioGroupValue+0xb2>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	e7fe      	b.n	8002d00 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002d0a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <vInitPrioGroupValue+0xf0>)
 8002d16:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	410fc271 	.word	0x410fc271
 8002d34:	410fc270 	.word	0x410fc270
 8002d38:	e000e400 	.word	0xe000e400
 8002d3c:	2000013c 	.word	0x2000013c
 8002d40:	20000140 	.word	0x20000140

08002d44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <vPortEnterCritical+0x54>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <vPortEnterCritical+0x54>)
 8002d64:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <vPortEnterCritical+0x54>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10e      	bne.n	8002d8c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <vPortEnterCritical+0x58>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <vPortEnterCritical+0x48>
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	e7fe      	b.n	8002d8a <vPortEnterCritical+0x46>
    }
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <vPortExitCritical+0x4c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <vPortExitCritical+0x22>
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	e7fe      	b.n	8002dc0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <vPortExitCritical+0x4c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <vPortExitCritical+0x4c>)
 8002dca:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <vPortExitCritical+0x4c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <vPortExitCritical+0x3e>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000010 	.word	0x20000010

08002df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002df0:	f3ef 8009 	mrs	r0, PSP
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <pxCurrentTCBConst>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f01e 0f10 	tst.w	lr, #16
 8002e00:	bf08      	it	eq
 8002e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0a:	6010      	str	r0, [r2, #0]
 8002e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e14:	f380 8811 	msr	BASEPRI, r0
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f7ff fc60 	bl	80026e4 <vTaskSwitchContext>
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f380 8811 	msr	BASEPRI, r0
 8002e2c:	bc09      	pop	{r0, r3}
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	6808      	ldr	r0, [r1, #0]
 8002e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e36:	f01e 0f10 	tst.w	lr, #16
 8002e3a:	bf08      	it	eq
 8002e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e40:	f380 8809 	msr	PSP, r0
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	f3af 8000 	nop.w

08002e50 <pxCurrentTCBConst>:
 8002e50:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop

08002e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e70:	f002 fa86 	bl	8005380 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e74:	f7ff fb7a 	bl	800256c <xTaskIncrementTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e7e:	f002 fadd 	bl	800543c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <SysTick_Handler+0x4c>)
 8002e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e001      	b.n	8002e90 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8002e8c:	f002 faba 	bl	8005404 <SEGGER_SYSVIEW_RecordExitISR>
 8002e90:	2300      	movs	r3, #0
 8002e92:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <vPortSetupTimerInterrupt+0x34>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <vPortSetupTimerInterrupt+0x38>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <vPortSetupTimerInterrupt+0x3c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <vPortSetupTimerInterrupt+0x40>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <vPortSetupTimerInterrupt+0x44>)
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <vPortSetupTimerInterrupt+0x34>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010
 8002ee0:	e000e018 	.word	0xe000e018
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	10624dd3 	.word	0x10624dd3
 8002eec:	e000e014 	.word	0xe000e014

08002ef0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ef0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f00 <vPortEnableVFP+0x10>
 8002ef4:	6801      	ldr	r1, [r0, #0]
 8002ef6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002efa:	6001      	str	r1, [r0, #0]
 8002efc:	4770      	bx	lr
 8002efe:	0000      	.short	0x0000
 8002f00:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop

08002f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f0e:	f3ef 8305 	mrs	r3, IPSR
 8002f12:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d913      	bls.n	8002f42 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <vPortValidateInterruptPriority+0x6c>)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <vPortValidateInterruptPriority+0x70>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	7afa      	ldrb	r2, [r7, #11]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d209      	bcs.n	8002f42 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	e7fe      	b.n	8002f40 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <vPortValidateInterruptPriority+0x74>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <vPortValidateInterruptPriority+0x78>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d909      	bls.n	8002f66 <vPortValidateInterruptPriority+0x5e>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	e7fe      	b.n	8002f64 <vPortValidateInterruptPriority+0x5c>
    }
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e3f0 	.word	0xe000e3f0
 8002f78:	2000013c 	.word	0x2000013c
 8002f7c:	e000ed0c 	.word	0xe000ed0c
 8002f80:	20000140 	.word	0x20000140

08002f84 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f90:	f7ff fa1c 	bl	80023cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f94:	4b63      	ldr	r3, [pc, #396]	; (8003124 <pvPortMalloc+0x1a0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f9c:	f000 f92e 	bl	80031fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <pvPortMalloc+0x1a4>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 80a5 	bne.w	80030f8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02c      	beq.n	800300e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d226      	bcs.n	800300e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d020      	beq.n	8003014 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f023 0307 	bic.w	r3, r3, #7
 8002fd8:	3308      	adds	r3, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d213      	bcs.n	8003008 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f023 0307 	bic.w	r3, r3, #7
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <pvPortMalloc+0x90>
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e7fe      	b.n	8003006 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800300c:	e002      	b.n	8003014 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e000      	b.n	8003016 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003014:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d06d      	beq.n	80030f8 <pvPortMalloc+0x174>
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <pvPortMalloc+0x1a8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d868      	bhi.n	80030f8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003026:	4b42      	ldr	r3, [pc, #264]	; (8003130 <pvPortMalloc+0x1ac>)
 8003028:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <pvPortMalloc+0x1ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003030:	e004      	b.n	800303c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d903      	bls.n	800304e <pvPortMalloc+0xca>
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f1      	bne.n	8003032 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <pvPortMalloc+0x1a0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	429a      	cmp	r2, r3
 8003056:	d04f      	beq.n	80030f8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2208      	movs	r2, #8
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	2308      	movs	r3, #8
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	429a      	cmp	r2, r3
 8003078:	d91e      	bls.n	80030b8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <pvPortMalloc+0x11c>
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e7fe      	b.n	800309e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030b2:	69b8      	ldr	r0, [r7, #24]
 80030b4:	f000 f904 	bl	80032c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <pvPortMalloc+0x1a8>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	4a1a      	ldr	r2, [pc, #104]	; (800312c <pvPortMalloc+0x1a8>)
 80030c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <pvPortMalloc+0x1a8>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <pvPortMalloc+0x1b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d203      	bcs.n	80030da <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <pvPortMalloc+0x1a8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <pvPortMalloc+0x1b0>)
 80030d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <pvPortMalloc+0x1a4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <pvPortMalloc+0x1b4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3301      	adds	r3, #1
 80030f4:	4a10      	ldr	r2, [pc, #64]	; (8003138 <pvPortMalloc+0x1b4>)
 80030f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030f8:	f7ff f976 	bl	80023e8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <pvPortMalloc+0x196>
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e7fe      	b.n	8003118 <pvPortMalloc+0x194>
    return pvReturn;
 800311a:	69fb      	ldr	r3, [r7, #28]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	2001914c 	.word	0x2001914c
 8003128:	20019160 	.word	0x20019160
 800312c:	20019150 	.word	0x20019150
 8003130:	20019144 	.word	0x20019144
 8003134:	20019154 	.word	0x20019154
 8003138:	20019158 	.word	0x20019158

0800313c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04b      	beq.n	80031e6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800314e:	2308      	movs	r3, #8
 8003150:	425b      	negs	r3, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <vPortFree+0xb4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <vPortFree+0x42>
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e7fe      	b.n	800317c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <vPortFree+0x5e>
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	e7fe      	b.n	8003198 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <vPortFree+0xb4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01e      	beq.n	80031e6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <vPortFree+0xb4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	401a      	ands	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031c0:	f7ff f904 	bl	80023cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <vPortFree+0xb8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <vPortFree+0xb8>)
 80031d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031d2:	6938      	ldr	r0, [r7, #16]
 80031d4:	f000 f874 	bl	80032c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <vPortFree+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <vPortFree+0xbc>)
 80031e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031e2:	f7ff f901 	bl	80023e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20019160 	.word	0x20019160
 80031f4:	20019150 	.word	0x20019150
 80031f8:	2001915c 	.word	0x2001915c

080031fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003202:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003206:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <prvHeapInit+0xac>)
 800320a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3307      	adds	r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <prvHeapInit+0xac>)
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <prvHeapInit+0xb0>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <prvHeapInit+0xb0>)
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003248:	2208      	movs	r2, #8
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <prvHeapInit+0xb4>)
 800325c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800325e:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <prvHeapInit+0xb4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <prvHeapInit+0xb4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	1ad2      	subs	r2, r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <prvHeapInit+0xb4>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <prvHeapInit+0xb8>)
 800328a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <prvHeapInit+0xbc>)
 8003292:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <prvHeapInit+0xc0>)
 8003296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000144 	.word	0x20000144
 80032ac:	20019144 	.word	0x20019144
 80032b0:	2001914c 	.word	0x2001914c
 80032b4:	20019154 	.word	0x20019154
 80032b8:	20019150 	.word	0x20019150
 80032bc:	20019160 	.word	0x20019160

080032c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <prvInsertBlockIntoFreeList+0xac>)
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <prvInsertBlockIntoFreeList+0x14>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d8f7      	bhi.n	80032ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4413      	add	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d108      	bne.n	8003302 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	441a      	add	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	441a      	add	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d118      	bne.n	8003348 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <prvInsertBlockIntoFreeList+0xb0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d00d      	beq.n	800333e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e008      	b.n	8003350 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <prvInsertBlockIntoFreeList+0xb0>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e003      	b.n	8003350 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d002      	beq.n	800335e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20019144 	.word	0x20019144
 8003370:	2001914c 	.word	0x2001914c

08003374 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003378:	4803      	ldr	r0, [pc, #12]	; (8003388 <_cbSendSystemDesc+0x14>)
 800337a:	f001 ffad 	bl	80052d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <_cbSendSystemDesc+0x18>)
 8003380:	f001 ffaa 	bl	80052d8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	08005aec 	.word	0x08005aec
 800338c:	08005b24 	.word	0x08005b24

08003390 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800339e:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80033a0:	f001 fc1e 	bl	8004be0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80033a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033a8:	f001 fc5e 	bl	8004c68 <SEGGER_SYSVIEW_SetRAMBase>
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000000 	.word	0x20000000
 80033b4:	08003375 	.word	0x08003375
 80033b8:	08005bb8 	.word	0x08005bb8

080033bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b085      	sub	sp, #20
 80033c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e034      	b.n	8003432 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033c8:	491e      	ldr	r1, [pc, #120]	; (8003444 <_cbSendTaskList+0x88>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	491a      	ldr	r1, [pc, #104]	; (8003444 <_cbSendTaskList+0x88>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	681c      	ldr	r4, [r3, #0]
 80033ea:	4916      	ldr	r1, [pc, #88]	; (8003444 <_cbSendTaskList+0x88>)
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3308      	adds	r3, #8
 80033fa:	681d      	ldr	r5, [r3, #0]
 80033fc:	4911      	ldr	r1, [pc, #68]	; (8003444 <_cbSendTaskList+0x88>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	330c      	adds	r3, #12
 800340c:	681e      	ldr	r6, [r3, #0]
 800340e:	490d      	ldr	r1, [pc, #52]	; (8003444 <_cbSendTaskList+0x88>)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3310      	adds	r3, #16
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4633      	mov	r3, r6
 8003424:	462a      	mov	r2, r5
 8003426:	4621      	mov	r1, r4
 8003428:	f000 f8b4 	bl	8003594 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <_cbSendTaskList+0x8c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3c5      	bcc.n	80033c8 <_cbSendTaskList+0xc>
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	20019164 	.word	0x20019164
 8003448:	20019204 	.word	0x20019204

0800344c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003452:	f7ff f879 	bl	8002548 <xTaskGetTickCountFromISR>
 8003456:	4603      	mov	r3, r0
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003460:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003464:	462b      	mov	r3, r5
 8003466:	4634      	mov	r4, r6
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	0162      	lsls	r2, r4, #5
 8003472:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	1b5b      	subs	r3, r3, r5
 800347e:	eb64 0406 	sbc.w	r4, r4, r6
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	00a2      	lsls	r2, r4, #2
 800348c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003490:	0099      	lsls	r1, r3, #2
 8003492:	460b      	mov	r3, r1
 8003494:	4614      	mov	r4, r2
 8003496:	195b      	adds	r3, r3, r5
 8003498:	eb44 0406 	adc.w	r4, r4, r6
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	00e2      	lsls	r2, r4, #3
 80034a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034aa:	00d9      	lsls	r1, r3, #3
 80034ac:	460b      	mov	r3, r1
 80034ae:	4614      	mov	r4, r2
 80034b0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80034b4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	4621      	mov	r1, r4
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034d2:	2205      	movs	r2, #5
 80034d4:	492b      	ldr	r1, [pc, #172]	; (8003584 <SYSVIEW_AddTask+0xc0>)
 80034d6:	68b8      	ldr	r0, [r7, #8]
 80034d8:	f002 faac 	bl	8005a34 <memcmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d04b      	beq.n	800357a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b07      	cmp	r3, #7
 80034e8:	d903      	bls.n	80034f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034ea:	4828      	ldr	r0, [pc, #160]	; (800358c <SYSVIEW_AddTask+0xc8>)
 80034ec:	f002 f9f4 	bl	80058d8 <SEGGER_SYSVIEW_Warn>
    return;
 80034f0:	e044      	b.n	800357c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4926      	ldr	r1, [pc, #152]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	491b      	ldr	r1, [pc, #108]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3308      	adds	r3, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	330c      	adds	r3, #12
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4910      	ldr	r1, [pc, #64]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3310      	adds	r3, #16
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003566:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f80e 	bl	8003594 <SYSVIEW_SendTaskInfo>
 8003578:	e000      	b.n	800357c <SYSVIEW_AddTask+0xb8>
    return;
 800357a:	bf00      	nop

}
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	08005b34 	.word	0x08005b34
 8003588:	20019204 	.word	0x20019204
 800358c:	08005b3c 	.word	0x08005b3c
 8003590:	20019164 	.word	0x20019164

08003594 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	2214      	movs	r2, #20
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fa5c 	bl	8005a68 <memset>
  TaskInfo.TaskID     = TaskID;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fd8d 	bl	80050e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <__NVIC_EnableIRQ>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800366e:	f002 f98f 	bl	8005990 <SEGGER_SYSVIEW_IsStarted>
 8003672:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800367a:	f001 fbb9 	bl	8004df0 <SEGGER_SYSVIEW_Start>
  }
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <_cbOnUARTRx+0x3c>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d806      	bhi.n	80036a8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <_cbOnUARTRx+0x3c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <_cbOnUARTRx+0x3c>)
 80036a4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80036a6:	e009      	b.n	80036bc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80036a8:	f7ff ffde 	bl	8003668 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <_cbOnUARTRx+0x3c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	f000 fb9a 	bl	8003df0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80036bc:	bf00      	nop
}
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000014 	.word	0x20000014

080036c8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d80f      	bhi.n	80036f8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036da:	785b      	ldrb	r3, [r3, #1]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <_cbOnUARTTx+0x60>)
 80036e0:	5c9a      	ldrb	r2, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036f0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80036f6:	e00f      	b.n	8003718 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa1b 	bl	8003b3c <SEGGER_RTT_ReadUpBufferNoLock>
 8003706:	4603      	mov	r3, r0
 8003708:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da02      	bge.n	8003716 <_cbOnUARTTx+0x4e>
    r = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e000      	b.n	8003718 <_cbOnUARTTx+0x50>
  }
Done:
 8003716:	bf00      	nop
  return r;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000014 	.word	0x20000014
 8003728:	08005bc0 	.word	0x08005bc0

0800372c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <SEGGER_UART_init+0x1c>)
 8003736:	4905      	ldr	r1, [pc, #20]	; (800374c <SEGGER_UART_init+0x20>)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f863 	bl	8003804 <HIF_UART_Init>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08003689 	.word	0x08003689
 800374c:	080036c9 	.word	0x080036c9

08003750 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <USART2_IRQHandler+0x80>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <USART2_IRQHandler+0x84>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 030b 	and.w	r3, r3, #11
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <USART2_IRQHandler+0x88>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <USART2_IRQHandler+0x88>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	79fa      	ldrb	r2, [r7, #7]
 8003786:	4610      	mov	r0, r2
 8003788:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01a      	beq.n	80037ca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <USART2_IRQHandler+0x8c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <USART2_IRQHandler+0x8c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1dfa      	adds	r2, r7, #7
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
 80037a6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <USART2_IRQHandler+0x90>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <USART2_IRQHandler+0x90>)
 80037b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e006      	b.n	80037ca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <USART2_IRQHandler+0x80>)
 80037be:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <USART2_IRQHandler+0x84>)
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e000      	b.n	80037ca <USART2_IRQHandler+0x7a>
      return;
 80037c8:	bf00      	nop
    }
  }
}
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40004400 	.word	0x40004400
 80037d4:	40004404 	.word	0x40004404
 80037d8:	20019208 	.word	0x20019208
 80037dc:	2001920c 	.word	0x2001920c
 80037e0:	4000440c 	.word	0x4000440c

080037e4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	4000440c 	.word	0x4000440c

08003804 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HIF_UART_Init+0xc8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <HIF_UART_Init+0xc8>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800381c:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HIF_UART_Init+0xcc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HIF_UART_Init+0xcc>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HIF_UART_Init+0xd0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003834:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800383c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HIF_UART_Init+0xd0>)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HIF_UART_Init+0xd4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003850:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003858:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800385a:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HIF_UART_Init+0xd4>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HIF_UART_Init+0xd8>)
 8003862:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003866:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HIF_UART_Init+0xdc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HIF_UART_Init+0xe0>)
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HIF_UART_Init+0xe4>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	3301      	adds	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d302      	bcc.n	800389a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003894:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003898:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HIF_UART_Init+0xe8>)
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80038aa:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HIF_UART_Init+0xec>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80038b0:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HIF_UART_Init+0xf0>)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80038b6:	2106      	movs	r1, #6
 80038b8:	2026      	movs	r0, #38	; 0x26
 80038ba:	f7ff feab 	bl	8003614 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80038be:	2026      	movs	r0, #38	; 0x26
 80038c0:	f7ff fe8a 	bl	80035d8 <__NVIC_EnableIRQ>
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023840 	.word	0x40023840
 80038d0:	40023830 	.word	0x40023830
 80038d4:	40020020 	.word	0x40020020
 80038d8:	40020000 	.word	0x40020000
 80038dc:	4000440c 	.word	0x4000440c
 80038e0:	40004410 	.word	0x40004410
 80038e4:	40004414 	.word	0x40004414
 80038e8:	0501bd00 	.word	0x0501bd00
 80038ec:	40004408 	.word	0x40004408
 80038f0:	20019208 	.word	0x20019208
 80038f4:	2001920c 	.word	0x2001920c

080038f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <_DoInit+0xa0>)
 8003900:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003902:	22a8      	movs	r2, #168	; 0xa8
 8003904:	2100      	movs	r1, #0
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f002 f8ae 	bl	8005a68 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2203      	movs	r2, #3
 8003910:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2203      	movs	r2, #3
 8003916:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <_DoInit+0xa4>)
 800391c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <_DoInit+0xa8>)
 8003922:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2200      	movs	r2, #0
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2200      	movs	r2, #0
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <_DoInit+0xa4>)
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <_DoInit+0xac>)
 8003948:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003962:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	e00c      	b.n	8003986 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1c3 030f 	rsb	r3, r3, #15
 8003972:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <_DoInit+0xb0>)
 8003974:	5cd1      	ldrb	r1, [r2, r3]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	460a      	mov	r2, r1
 800397e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3301      	adds	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d9ef      	bls.n	800396c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800398c:	f3bf 8f5f 	dmb	sy
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	2001a780 	.word	0x2001a780
 800399c:	08005b8c 	.word	0x08005b8c
 80039a0:	20019210 	.word	0x20019210
 80039a4:	20019610 	.word	0x20019610
 80039a8:	08005bc4 	.word	0x08005bc4

080039ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d905      	bls.n	80039dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e007      	b.n	80039ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	69b9      	ldr	r1, [r7, #24]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	1acb      	subs	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3b01      	subs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4293      	cmp	r3, r2
 80039f8:	bf28      	it	cs
 80039fa:	4613      	movcs	r3, r2
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4293      	cmp	r3, r2
 8003a04:	bf28      	it	cs
 8003a06:	4613      	movcs	r3, r2
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f002 f81a 	bl	8005a52 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	4413      	add	r3, r2
 8003a24:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d101      	bne.n	8003a4c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a4c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1b2      	bne.n	80039c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d911      	bls.n	8003aae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	6938      	ldr	r0, [r7, #16]
 8003a9a:	f001 ffda 	bl	8005a52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a9e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003aac:	e01f      	b.n	8003aee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	6938      	ldr	r0, [r7, #16]
 8003ac2:	f001 ffc6 	bl	8005a52 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4413      	add	r3, r2
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4619      	mov	r1, r3
 8003ade:	6938      	ldr	r0, [r7, #16]
 8003ae0:	f001 ffb7 	bl	8005a52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ae4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	60da      	str	r2, [r3, #12]
}
 8003aee:	bf00      	nop
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d808      	bhi.n	8003b24 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e004      	b.n	8003b2e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b2e:	697b      	ldr	r3, [r7, #20]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003b56:	f7ff fecf 	bl	80038f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d92b      	bls.n	8003be0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf28      	it	cs
 8003b9a:	4613      	movcs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6939      	ldr	r1, [r7, #16]
 8003bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bae:	f001 ff50 	bl	8005a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d101      	bne.n	8003be0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf28      	it	cs
 8003bf0:	4613      	movcs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6939      	ldr	r1, [r7, #16]
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f001 ff22 	bl	8005a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	2001a780 	.word	0x2001a780

08003c48 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <SEGGER_RTT_ReadNoLock+0x1e>
 8003c62:	f7ff fe49 	bl	80038f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3360      	adds	r3, #96	; 0x60
 8003c72:	4a37      	ldr	r2, [pc, #220]	; (8003d50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c74:	4413      	add	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d92b      	bls.n	8003cec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf28      	it	cs
 8003ca6:	4613      	movcs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	4413      	add	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6939      	ldr	r1, [r7, #16]
 8003cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cba:	f001 feca 	bl	8005a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d101      	bne.n	8003cec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf28      	it	cs
 8003cfc:	4613      	movcs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d019      	beq.n	8003d3a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	4413      	add	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d16:	f001 fe9c 	bl	8005a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d44:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2001a780 	.word	0x2001a780

08003d54 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 8003d72:	4413      	add	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d017      	beq.n	8003dae <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d302      	bcc.n	8003d88 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d023      	beq.n	8003dce <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8003d86:	e029      	b.n	8003ddc <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d88:	6978      	ldr	r0, [r7, #20]
 8003d8a:	f7ff feb4 	bl	8003af6 <_GetAvailWriteSpace>
 8003d8e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d202      	bcs.n	8003d9e <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d9c:	e021      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff fe5d 	bl	8003a66 <_WriteNoCheck>
    break;
 8003dac:	e019      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff fea1 	bl	8003af6 <_GetAvailWriteSpace>
 8003db4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bf28      	it	cs
 8003dbe:	4613      	movcs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7ff fe4d 	bl	8003a66 <_WriteNoCheck>
    break;
 8003dcc:	e009      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff fdea 	bl	80039ac <_WriteBlocking>
 8003dd8:	61f8      	str	r0, [r7, #28]
    break;
 8003dda:	e002      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
    break;
 8003de0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003de2:	69fb      	ldr	r3, [r7, #28]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	2001a780 	.word	0x2001a780

08003df0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003e0a:	f7ff fd75 	bl	80038f8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e12:	f04f 0120 	mov.w	r1, #32
 8003e16:	f381 8811 	msr	BASEPRI, r1
 8003e1a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ff97 	bl	8003d54 <SEGGER_RTT_WriteDownBufferNoLock>
 8003e26:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003e2e:	697b      	ldr	r3, [r7, #20]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2001a780 	.word	0x2001a780

08003e3c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e4a:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e58:	f7ff fd4e 	bl	80038f8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e60:	f04f 0120 	mov.w	r1, #32
 8003e64:	f381 8811 	msr	BASEPRI, r1
 8003e68:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e6c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	3304      	adds	r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	dbeb      	blt.n	8003e72 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e9a:	e000      	b.n	8003e9e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e9c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	da3f      	bge.n	8003f28 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ebc:	6939      	ldr	r1, [r7, #16]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3304      	adds	r3, #4
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3320      	adds	r3, #32
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3328      	adds	r3, #40	; 0x28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003efa:	6939      	ldr	r1, [r7, #16]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	332c      	adds	r3, #44	; 0x2c
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f22:	f3bf 8f5f 	dmb	sy
 8003f26:	e002      	b.n	8003f2e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f2c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f34:	69fb      	ldr	r3, [r7, #28]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2001a780 	.word	0x2001a780

08003f44 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f60:	f7ff fcca 	bl	80038f8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f66:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d82c      	bhi.n	8003fc8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f72:	f04f 0120 	mov.w	r1, #32
 8003f76:	f381 8811 	msr	BASEPRI, r1
 8003f7a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	3360      	adds	r3, #96	; 0x60
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fb8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	e002      	b.n	8003fce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	2001a780 	.word	0x2001a780

08003fdc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00f      	beq.n	8004012 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003ff2:	e002      	b.n	8003ffa <_EncodeStr+0x1e>
      Len++;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f6      	bne.n	8003ff4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d901      	bls.n	8004012 <_EncodeStr+0x36>
      Len = Limit;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2bfe      	cmp	r3, #254	; 0xfe
 8004016:	d806      	bhi.n	8004026 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	60fa      	str	r2, [r7, #12]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e011      	b.n	800404a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	60fa      	str	r2, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	0a19      	lsrs	r1, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	60fa      	str	r2, [r7, #12]
 8004046:	b2ca      	uxtb	r2, r1
 8004048:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800404e:	e00a      	b.n	8004066 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	1c53      	adds	r3, r2, #1
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	60f9      	str	r1, [r7, #12]
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	701a      	strb	r2, [r3, #0]
    n++;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3301      	adds	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	d3f0      	bcc.n	8004050 <_EncodeStr+0x74>
  }
  return pPayload;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3307      	adds	r3, #7
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <_HandleIncomingPacket+0xd0>)
 800409c:	7e1b      	ldrb	r3, [r3, #24]
 800409e:	4618      	mov	r0, r3
 80040a0:	1cfb      	adds	r3, r7, #3
 80040a2:	2201      	movs	r2, #1
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7ff fdcf 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
 80040aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d04c      	beq.n	800414c <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d022      	beq.n	80040fe <_HandleIncomingPacket+0x6a>
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	dc0b      	bgt.n	80040d4 <_HandleIncomingPacket+0x40>
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d015      	beq.n	80040ec <_HandleIncomingPacket+0x58>
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	dc02      	bgt.n	80040ca <_HandleIncomingPacket+0x36>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d00e      	beq.n	80040e6 <_HandleIncomingPacket+0x52>
 80040c8:	e033      	b.n	8004132 <_HandleIncomingPacket+0x9e>
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d011      	beq.n	80040f2 <_HandleIncomingPacket+0x5e>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d012      	beq.n	80040f8 <_HandleIncomingPacket+0x64>
 80040d2:	e02e      	b.n	8004132 <_HandleIncomingPacket+0x9e>
 80040d4:	2b07      	cmp	r3, #7
 80040d6:	d018      	beq.n	800410a <_HandleIncomingPacket+0x76>
 80040d8:	2b07      	cmp	r3, #7
 80040da:	db13      	blt.n	8004104 <_HandleIncomingPacket+0x70>
 80040dc:	2b7f      	cmp	r3, #127	; 0x7f
 80040de:	d037      	beq.n	8004150 <_HandleIncomingPacket+0xbc>
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d015      	beq.n	8004110 <_HandleIncomingPacket+0x7c>
 80040e4:	e025      	b.n	8004132 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040e6:	f000 fe83 	bl	8004df0 <SEGGER_SYSVIEW_Start>
      break;
 80040ea:	e036      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040ec:	f000 ff3c 	bl	8004f68 <SEGGER_SYSVIEW_Stop>
      break;
 80040f0:	e033      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040f2:	f001 f915 	bl	8005320 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040f6:	e030      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040f8:	f001 f8da 	bl	80052b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040fc:	e02d      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040fe:	f000 ff59 	bl	8004fb4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004102:	e02a      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004104:	f001 fb96 	bl	8005834 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004108:	e027      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800410a:	f001 fb75 	bl	80057f8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800410e:	e024      	b.n	800415a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <_HandleIncomingPacket+0xd0>)
 8004112:	7e1b      	ldrb	r3, [r3, #24]
 8004114:	4618      	mov	r0, r3
 8004116:	1cfb      	adds	r3, r7, #3
 8004118:	2201      	movs	r2, #1
 800411a:	4619      	mov	r1, r3
 800411c:	f7ff fd94 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
 8004120:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fae4 	bl	80056f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004130:	e010      	b.n	8004154 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	b25b      	sxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0e      	bge.n	8004158 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <_HandleIncomingPacket+0xd0>)
 800413c:	7e1b      	ldrb	r3, [r3, #24]
 800413e:	4618      	mov	r0, r3
 8004140:	1cfb      	adds	r3, r7, #3
 8004142:	2201      	movs	r2, #1
 8004144:	4619      	mov	r1, r3
 8004146:	f7ff fd7f 	bl	8003c48 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800414a:	e005      	b.n	8004158 <_HandleIncomingPacket+0xc4>
    }
  }
 800414c:	bf00      	nop
 800414e:	e004      	b.n	800415a <_HandleIncomingPacket+0xc6>
      break;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <_HandleIncomingPacket+0xc6>
      break;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <_HandleIncomingPacket+0xc6>
      break;
 8004158:	bf00      	nop
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	2001a628 	.word	0x2001a628

08004168 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800416e:	2301      	movs	r3, #1
 8004170:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417c:	4b32      	ldr	r3, [pc, #200]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
 8004182:	e00b      	b.n	800419c <_TrySendOverflowPacket+0x34>
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	b2da      	uxtb	r2, r3
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	1c59      	adds	r1, r3, #1
 800418c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800418e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	09db      	lsrs	r3, r3, #7
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	2b7f      	cmp	r3, #127	; 0x7f
 80041a0:	d8f0      	bhi.n	8004184 <_TrySendOverflowPacket+0x1c>
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <_TrySendOverflowPacket+0xe4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	e00b      	b.n	80041e4 <_TrySendOverflowPacket+0x7c>
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	6279      	str	r1, [r7, #36]	; 0x24
 80041d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2b7f      	cmp	r3, #127	; 0x7f
 80041e8:	d8f0      	bhi.n	80041cc <_TrySendOverflowPacket+0x64>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	627a      	str	r2, [r7, #36]	; 0x24
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	4618      	mov	r0, r3
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	461a      	mov	r2, r3
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	4619      	mov	r1, r3
 800420c:	f7fb ffe8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004210:	4603      	mov	r3, r0
 8004212:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004214:	f7ff fae6 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	3b01      	subs	r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e004      	b.n	800423c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	4a03      	ldr	r2, [pc, #12]	; (8004248 <_TrySendOverflowPacket+0xe0>)
 800423a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800423c:	693b      	ldr	r3, [r7, #16]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3730      	adds	r7, #48	; 0x30
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2001a628 	.word	0x2001a628
 800424c:	e0001004 	.word	0xe0001004

08004250 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800425c:	4b9b      	ldr	r3, [pc, #620]	; (80044cc <_SendPacket+0x27c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d010      	beq.n	8004286 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004264:	4b99      	ldr	r3, [pc, #612]	; (80044cc <_SendPacket+0x27c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 812b 	beq.w	80044c4 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800426e:	4b97      	ldr	r3, [pc, #604]	; (80044cc <_SendPacket+0x27c>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d109      	bne.n	800428a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004276:	f7ff ff77 	bl	8004168 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800427a:	4b94      	ldr	r3, [pc, #592]	; (80044cc <_SendPacket+0x27c>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 8122 	bne.w	80044c8 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004284:	e001      	b.n	800428a <_SendPacket+0x3a>
    goto Send;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <_SendPacket+0x3c>
Send:
 800428a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b1f      	cmp	r3, #31
 8004290:	d809      	bhi.n	80042a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004292:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <_SendPacket+0x27c>)
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 8117 	bne.w	80044d4 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b17      	cmp	r3, #23
 80042aa:	d807      	bhi.n	80042bc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e0c4      	b.n	8004446 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b7f      	cmp	r3, #127	; 0x7f
 80042c8:	d912      	bls.n	80042f0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	09da      	lsrs	r2, r3, #7
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e006      	b.n	80042fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b7e      	cmp	r3, #126	; 0x7e
 8004302:	d807      	bhi.n	8004314 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e098      	b.n	8004446 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431a:	d212      	bcs.n	8004342 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	09da      	lsrs	r2, r3, #7
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b01      	subs	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	3a01      	subs	r2, #1
 8004334:	60fa      	str	r2, [r7, #12]
 8004336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e081      	b.n	8004446 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004348:	d21d      	bcs.n	8004386 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0b9a      	lsrs	r2, r3, #14
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	09db      	lsrs	r3, r3, #7
 800435e:	b2db      	uxtb	r3, r3
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	3a01      	subs	r2, #1
 8004364:	60fa      	str	r2, [r7, #12]
 8004366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	3a01      	subs	r2, #1
 8004378:	60fa      	str	r2, [r7, #12]
 800437a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e05f      	b.n	8004446 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438c:	d228      	bcs.n	80043e0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0d5a      	lsrs	r2, r3, #21
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0b9b      	lsrs	r3, r3, #14
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	3a01      	subs	r2, #1
 80043a8:	60fa      	str	r2, [r7, #12]
 80043aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	3a01      	subs	r2, #1
 80043be:	60fa      	str	r2, [r7, #12]
 80043c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	3a01      	subs	r2, #1
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e032      	b.n	8004446 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0f1a      	lsrs	r2, r3, #28
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0d5b      	lsrs	r3, r3, #21
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	3a01      	subs	r2, #1
 80043fa:	60fa      	str	r2, [r7, #12]
 80043fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0b9b      	lsrs	r3, r3, #14
 800440a:	b2db      	uxtb	r3, r3
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	3a01      	subs	r2, #1
 8004410:	60fa      	str	r2, [r7, #12]
 8004412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	09db      	lsrs	r3, r3, #7
 8004420:	b2db      	uxtb	r3, r3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	3a01      	subs	r2, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	3a01      	subs	r2, #1
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <_SendPacket+0x280>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <_SendPacket+0x27c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	e00b      	b.n	8004478 <_SendPacket+0x228>
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1c59      	adds	r1, r3, #1
 8004468:	6279      	str	r1, [r7, #36]	; 0x24
 800446a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b7f      	cmp	r3, #127	; 0x7f
 800447c:	d8f0      	bhi.n	8004460 <_SendPacket+0x210>
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	627a      	str	r2, [r7, #36]	; 0x24
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <_SendPacket+0x27c>)
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	4618      	mov	r0, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	461a      	mov	r2, r3
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	f7fb fe9f 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80044a2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80044a4:	f7ff f99e 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <_SendPacket+0x27c>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	60d3      	str	r3, [r2, #12]
 80044b4:	e00f      	b.n	80044d6 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <_SendPacket+0x27c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <_SendPacket+0x27c>)
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e008      	b.n	80044d6 <_SendPacket+0x286>
    goto SendDone;
 80044c4:	bf00      	nop
 80044c6:	e006      	b.n	80044d6 <_SendPacket+0x286>
      goto SendDone;
 80044c8:	bf00      	nop
 80044ca:	e004      	b.n	80044d6 <_SendPacket+0x286>
 80044cc:	2001a628 	.word	0x2001a628
 80044d0:	e0001004 	.word	0xe0001004
      goto SendDone;
 80044d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <_SendPacket+0x2d8>)
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	4619      	mov	r1, r3
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <_SendPacket+0x2dc>)
 80044de:	460b      	mov	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	336c      	adds	r3, #108	; 0x6c
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <_SendPacket+0x2d8>)
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	4618      	mov	r0, r3
 80044f2:	490e      	ldr	r1, [pc, #56]	; (800452c <_SendPacket+0x2dc>)
 80044f4:	4603      	mov	r3, r0
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4403      	add	r3, r0
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	3370      	adds	r3, #112	; 0x70
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d00b      	beq.n	800451e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <_SendPacket+0x2d8>)
 8004508:	789b      	ldrb	r3, [r3, #2]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d107      	bne.n	800451e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <_SendPacket+0x2d8>)
 8004510:	2201      	movs	r2, #1
 8004512:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004514:	f7ff fdbe 	bl	8004094 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <_SendPacket+0x2d8>)
 800451a:	2200      	movs	r2, #0
 800451c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800451e:	bf00      	nop
 8004520:	3728      	adds	r7, #40	; 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2001a628 	.word	0x2001a628
 800452c:	2001a780 	.word	0x2001a780

08004530 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	3301      	adds	r3, #1
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d80a      	bhi.n	8004560 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6051      	str	r1, [r2, #4]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b80      	cmp	r3, #128	; 0x80
 8004566:	d15a      	bne.n	800461e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	e00b      	b.n	80045a2 <_StoreChar+0x72>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	6279      	str	r1, [r7, #36]	; 0x24
 8004594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b7f      	cmp	r3, #127	; 0x7f
 80045a6:	d8f0      	bhi.n	800458a <_StoreChar+0x5a>
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	627a      	str	r2, [r7, #36]	; 0x24
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e00b      	b.n	80045da <_StoreChar+0xaa>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	61f9      	str	r1, [r7, #28]
 80045cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	09db      	lsrs	r3, r3, #7
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b7f      	cmp	r3, #127	; 0x7f
 80045de:	d8f0      	bhi.n	80045c2 <_StoreChar+0x92>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	61fa      	str	r2, [r7, #28]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	221a      	movs	r2, #26
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe29 	bl	8004250 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fd3a 	bl	800407c <_PreparePacket>
 8004608:	4602      	mov	r2, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]
  }
}
 800461e:	bf00      	nop
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800463a:	2301      	movs	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004642:	e007      	b.n	8004654 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	623b      	str	r3, [r7, #32]
    Width++;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	429a      	cmp	r2, r3
 800465a:	d2f3      	bcs.n	8004644 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	429a      	cmp	r2, r3
 8004662:	d901      	bls.n	8004668 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11f      	bne.n	80046b2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01c      	beq.n	80046b2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <_PrintUnsigned+0x66>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <_PrintUnsigned+0x66>
        c = '0';
 8004688:	2330      	movs	r3, #48	; 0x30
 800468a:	76fb      	strb	r3, [r7, #27]
 800468c:	e001      	b.n	8004692 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800468e:	2320      	movs	r3, #32
 8004690:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004692:	e007      	b.n	80046a4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	3b01      	subs	r3, #1
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800469a:	7efb      	ldrb	r3, [r7, #27]
 800469c:	4619      	mov	r1, r3
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff46 	bl	8004530 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <_PrintUnsigned+0x8a>
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3f0      	bcc.n	8004694 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d903      	bls.n	80046c0 <_PrintUnsigned+0x98>
      NumDigits--;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	e009      	b.n	80046d4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d200      	bcs.n	80046d4 <_PrintUnsigned+0xac>
        break;
 80046d2:	e005      	b.n	80046e0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80046de:	e7e8      	b.n	80046b2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <_PrintUnsigned+0x128>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4413      	add	r3, r2
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff ff14 	bl	8004530 <_StoreChar>
    Digit /= Base;
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e3      	bne.n	80046e0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d011      	beq.n	8004746 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004728:	e006      	b.n	8004738 <_PrintUnsigned+0x110>
        FieldWidth--;
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	3b01      	subs	r3, #1
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004730:	2120      	movs	r1, #32
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fefc 	bl	8004530 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <_PrintUnsigned+0x11e>
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	429a      	cmp	r2, r3
 8004744:	d3f1      	bcc.n	800472a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	08005be4 	.word	0x08005be4

08004754 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfb8      	it	lt
 8004768:	425b      	neglt	r3, r3
 800476a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800476c:	2301      	movs	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004770:	e007      	b.n	8004782 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	fb92 f3f3 	sdiv	r3, r2, r3
 800477a:	613b      	str	r3, [r7, #16]
    Width++;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	daf3      	bge.n	8004772 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d901      	bls.n	8004796 <_PrintInt+0x42>
    Width = NumDigits;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <_PrintInt+0x5e>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db04      	blt.n	80047ac <_PrintInt+0x58>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <_PrintInt+0x5e>
    FieldWidth--;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <_PrintInt+0x6e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <_PrintInt+0x9c>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047d2:	e006      	b.n	80047e2 <_PrintInt+0x8e>
        FieldWidth--;
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80047da:	2120      	movs	r1, #32
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fea7 	bl	8004530 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <_PrintInt+0x9c>
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3f1      	bcc.n	80047d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da07      	bge.n	8004806 <_PrintInt+0xb2>
    v = -v;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	425b      	negs	r3, r3
 80047fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80047fc:	212d      	movs	r1, #45	; 0x2d
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fe96 	bl	8004530 <_StoreChar>
 8004804:	e008      	b.n	8004818 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004810:	212b      	movs	r1, #43	; 0x2b
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fe8c 	bl	8004530 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <_PrintInt+0x102>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d114      	bne.n	8004856 <_PrintInt+0x102>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d111      	bne.n	8004856 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004838:	e006      	b.n	8004848 <_PrintInt+0xf4>
        FieldWidth--;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	3b01      	subs	r3, #1
 800483e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004840:	2130      	movs	r1, #48	; 0x30
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fe74 	bl	8004530 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <_PrintInt+0x102>
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3f1      	bcc.n	800483a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fedf 	bl	8004628 <_PrintUnsigned>
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b098      	sub	sp, #96	; 0x60
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004880:	f3ef 8311 	mrs	r3, BASEPRI
 8004884:	f04f 0120 	mov.w	r1, #32
 8004888:	f381 8811 	msr	BASEPRI, r1
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	48ac      	ldr	r0, [pc, #688]	; (8004b40 <_VPrintTarget+0x2cc>)
 8004890:	f7ff fbf4 	bl	800407c <_PreparePacket>
 8004894:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004896:	4baa      	ldr	r3, [pc, #680]	; (8004b40 <_VPrintTarget+0x2cc>)
 8004898:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80048ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8140 	beq.w	8004b44 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 80048c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c8:	2b25      	cmp	r3, #37	; 0x25
 80048ca:	f040 812a 	bne.w	8004b22 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80048ce:	2300      	movs	r3, #0
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80048de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048e2:	3b23      	subs	r3, #35	; 0x23
 80048e4:	2b0d      	cmp	r3, #13
 80048e6:	d83f      	bhi.n	8004968 <_VPrintTarget+0xf4>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <_VPrintTarget+0x7c>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004959 	.word	0x08004959
 80048f4:	08004969 	.word	0x08004969
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004969 	.word	0x08004969
 8004900:	08004969 	.word	0x08004969
 8004904:	08004969 	.word	0x08004969
 8004908:	08004969 	.word	0x08004969
 800490c:	08004969 	.word	0x08004969
 8004910:	08004949 	.word	0x08004949
 8004914:	08004969 	.word	0x08004969
 8004918:	08004929 	.word	0x08004929
 800491c:	08004969 	.word	0x08004969
 8004920:	08004969 	.word	0x08004969
 8004924:	08004939 	.word	0x08004939
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e01a      	b.n	800496e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e012      	b.n	800496e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e00a      	b.n	800496e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e002      	b.n	800496e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004968:	2300      	movs	r3, #0
 800496a:	653b      	str	r3, [r7, #80]	; 0x50
 800496c:	bf00      	nop
        }
      } while (v);
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1b0      	bne.n	80048d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004974:	2300      	movs	r3, #0
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004984:	2b2f      	cmp	r3, #47	; 0x2f
 8004986:	d912      	bls.n	80049ae <_VPrintTarget+0x13a>
 8004988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800498c:	2b39      	cmp	r3, #57	; 0x39
 800498e:	d80e      	bhi.n	80049ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	461a      	mov	r2, r3
 80049a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a6:	4413      	add	r3, r2
 80049a8:	3b30      	subs	r3, #48	; 0x30
 80049aa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80049ac:	e7e4      	b.n	8004978 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80049ae:	2300      	movs	r3, #0
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80049ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049be:	2b2e      	cmp	r3, #46	; 0x2e
 80049c0:	d11d      	bne.n	80049fe <_VPrintTarget+0x18a>
        sFormat++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80049d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049d4:	2b2f      	cmp	r3, #47	; 0x2f
 80049d6:	d912      	bls.n	80049fe <_VPrintTarget+0x18a>
 80049d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049dc:	2b39      	cmp	r3, #57	; 0x39
 80049de:	d80e      	bhi.n	80049fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80049e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	461a      	mov	r2, r3
 80049f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f6:	4413      	add	r3, r2
 80049f8:	3b30      	subs	r3, #48	; 0x30
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80049fc:	e7e4      	b.n	80049c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a0a:	2b6c      	cmp	r3, #108	; 0x6c
 8004a0c:	d003      	beq.n	8004a16 <_VPrintTarget+0x1a2>
 8004a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a12:	2b68      	cmp	r3, #104	; 0x68
 8004a14:	d107      	bne.n	8004a26 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004a24:	e7ef      	b.n	8004a06 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d022      	beq.n	8004a74 <_VPrintTarget+0x200>
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	dc06      	bgt.n	8004a40 <_VPrintTarget+0x1cc>
 8004a32:	2b58      	cmp	r3, #88	; 0x58
 8004a34:	d044      	beq.n	8004ac0 <_VPrintTarget+0x24c>
 8004a36:	2b63      	cmp	r3, #99	; 0x63
 8004a38:	d009      	beq.n	8004a4e <_VPrintTarget+0x1da>
 8004a3a:	2b25      	cmp	r3, #37	; 0x25
 8004a3c:	d066      	beq.n	8004b0c <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004a3e:	e06c      	b.n	8004b1a <_VPrintTarget+0x2a6>
      switch (c) {
 8004a40:	2b75      	cmp	r3, #117	; 0x75
 8004a42:	d02a      	beq.n	8004a9a <_VPrintTarget+0x226>
 8004a44:	2b78      	cmp	r3, #120	; 0x78
 8004a46:	d03b      	beq.n	8004ac0 <_VPrintTarget+0x24c>
 8004a48:	2b70      	cmp	r3, #112	; 0x70
 8004a4a:	d04c      	beq.n	8004ae6 <_VPrintTarget+0x272>
        break;
 8004a4c:	e065      	b.n	8004b1a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	1d19      	adds	r1, r3, #4
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6011      	str	r1, [r2, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004a62:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004a66:	f107 0314 	add.w	r3, r7, #20
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fd5f 	bl	8004530 <_StoreChar>
        break;
 8004a72:	e052      	b.n	8004b1a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a82:	f107 0014 	add.w	r0, r7, #20
 8004a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a90:	220a      	movs	r2, #10
 8004a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a94:	f7ff fe5e 	bl	8004754 <_PrintInt>
        break;
 8004a98:	e03f      	b.n	8004b1a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1d19      	adds	r1, r3, #4
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6011      	str	r1, [r2, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004aa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aaa:	f107 0014 	add.w	r0, r7, #20
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab8:	220a      	movs	r2, #10
 8004aba:	f7ff fdb5 	bl	8004628 <_PrintUnsigned>
        break;
 8004abe:	e02c      	b.n	8004b1a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ad0:	f107 0014 	add.w	r0, r7, #20
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ade:	2210      	movs	r2, #16
 8004ae0:	f7ff fda2 	bl	8004628 <_PrintUnsigned>
        break;
 8004ae4:	e019      	b.n	8004b1a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004af4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004af6:	f107 0014 	add.w	r0, r7, #20
 8004afa:	2300      	movs	r3, #0
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	2308      	movs	r3, #8
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2308      	movs	r3, #8
 8004b04:	2210      	movs	r2, #16
 8004b06:	f7ff fd8f 	bl	8004628 <_PrintUnsigned>
        break;
 8004b0a:	e006      	b.n	8004b1a <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 8004b0c:	f107 0314 	add.w	r3, r7, #20
 8004b10:	2125      	movs	r1, #37	; 0x25
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fd0c 	bl	8004530 <_StoreChar>
        break;
 8004b18:	bf00      	nop
      }
      sFormat++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e007      	b.n	8004b32 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fcff 	bl	8004530 <_StoreChar>
    }
  } while (*sFormat);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f47f aeb8 	bne.w	80048ac <_VPrintTarget+0x38>
 8004b3c:	e003      	b.n	8004b46 <_VPrintTarget+0x2d2>
 8004b3e:	bf00      	nop
 8004b40:	2001a658 	.word	0x2001a658
      break;
 8004b44:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d041      	beq.n	8004bd0 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	e00b      	b.n	8004b76 <_VPrintTarget+0x302>
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	6439      	str	r1, [r7, #64]	; 0x40
 8004b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7a:	d8f0      	bhi.n	8004b5e <_VPrintTarget+0x2ea>
 8004b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	643a      	str	r2, [r7, #64]	; 0x40
 8004b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b90:	2300      	movs	r3, #0
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
 8004b94:	e00b      	b.n	8004bae <_VPrintTarget+0x33a>
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <_VPrintTarget+0x322>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	69b9      	ldr	r1, [r7, #24]
 8004bc8:	221a      	movs	r2, #26
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fb40 	bl	8004250 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004bd6:	bf00      	nop
 8004bd8:	3758      	adds	r7, #88	; 0x58
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop

08004be0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bf4:	4917      	ldr	r1, [pc, #92]	; (8004c54 <SEGGER_SYSVIEW_Init+0x74>)
 8004bf6:	4818      	ldr	r0, [pc, #96]	; (8004c58 <SEGGER_SYSVIEW_Init+0x78>)
 8004bf8:	f7ff f920 	bl	8003e3c <SEGGER_RTT_AllocUpBuffer>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c02:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c06:	785a      	ldrb	r2, [r3, #1]
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c0a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c0e:	7e1b      	ldrb	r3, [r3, #24]
 8004c10:	4618      	mov	r0, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2308      	movs	r3, #8
 8004c18:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <SEGGER_SYSVIEW_Init+0x80>)
 8004c1a:	490f      	ldr	r1, [pc, #60]	; (8004c58 <SEGGER_SYSVIEW_Init+0x78>)
 8004c1c:	f7ff f992 	bl	8003f44 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <SEGGER_SYSVIEW_Init+0x84>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c2c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c2e:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c3a:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c40:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <SEGGER_SYSVIEW_Init+0x7c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20019620 	.word	0x20019620
 8004c58:	08005b98 	.word	0x08005b98
 8004c5c:	2001a628 	.word	0x2001a628
 8004c60:	2001a620 	.word	0x2001a620
 8004c64:	e0001004 	.word	0xe0001004

08004c68 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6113      	str	r3, [r2, #16]
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	2001a628 	.word	0x2001a628

08004c88 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c90:	f3ef 8311 	mrs	r3, BASEPRI
 8004c94:	f04f 0120 	mov.w	r1, #32
 8004c98:	f381 8811 	msr	BASEPRI, r1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ca0:	f7ff f9ec 	bl	800407c <_PreparePacket>
 8004ca4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68b8      	ldr	r0, [r7, #8]
 8004cac:	f7ff fad0 	bl	8004250 <_SendPacket>
  RECORD_END();
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f383 8811 	msr	BASEPRI, r3
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2001a658 	.word	0x2001a658

08004cc4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cce:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd2:	f04f 0120 	mov.w	r1, #32
 8004cd6:	f381 8811 	msr	BASEPRI, r1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	4816      	ldr	r0, [pc, #88]	; (8004d38 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cde:	f7ff f9cd 	bl	800407c <_PreparePacket>
 8004ce2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e00b      	b.n	8004d0a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	61f9      	str	r1, [r7, #28]
 8004cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	09db      	lsrs	r3, r3, #7
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0e:	d8f0      	bhi.n	8004cf2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	61fa      	str	r2, [r7, #28]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	6938      	ldr	r0, [r7, #16]
 8004d26:	f7ff fa93 	bl	8004250 <_SendPacket>
  RECORD_END();
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f383 8811 	msr	BASEPRI, r3
}
 8004d30:	bf00      	nop
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2001a658 	.word	0x2001a658

08004d3c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d48:	f3ef 8311 	mrs	r3, BASEPRI
 8004d4c:	f04f 0120 	mov.w	r1, #32
 8004d50:	f381 8811 	msr	BASEPRI, r1
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	4825      	ldr	r0, [pc, #148]	; (8004dec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d58:	f7ff f990 	bl	800407c <_PreparePacket>
 8004d5c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	e00b      	b.n	8004d84 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	09db      	lsrs	r3, r3, #7
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b7f      	cmp	r3, #127	; 0x7f
 8004d88:	d8f0      	bhi.n	8004d6c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	e00b      	b.n	8004dbc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	6279      	str	r1, [r7, #36]	; 0x24
 8004dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	09db      	lsrs	r3, r3, #7
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc0:	d8f0      	bhi.n	8004da4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	69b8      	ldr	r0, [r7, #24]
 8004dd8:	f7ff fa3a 	bl	8004250 <_SendPacket>
  RECORD_END();
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f383 8811 	msr	BASEPRI, r3
}
 8004de2:	bf00      	nop
 8004de4:	3730      	adds	r7, #48	; 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	2001a658 	.word	0x2001a658

08004df0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004e00:	f04f 0120 	mov.w	r1, #32
 8004e04:	f381 8811 	msr	BASEPRI, r1
 8004e08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	220a      	movs	r2, #10
 8004e10:	4953      	ldr	r1, [pc, #332]	; (8004f60 <SEGGER_SYSVIEW_Start+0x170>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb f9e4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e1e:	f7fe fce1 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e22:	200a      	movs	r0, #10
 8004e24:	f7ff ff30 	bl	8004c88 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e28:	f3ef 8311 	mrs	r3, BASEPRI
 8004e2c:	f04f 0120 	mov.w	r1, #32
 8004e30:	f381 8811 	msr	BASEPRI, r1
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	484b      	ldr	r0, [pc, #300]	; (8004f64 <SEGGER_SYSVIEW_Start+0x174>)
 8004e38:	f7ff f920 	bl	800407c <_PreparePacket>
 8004e3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e46:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4c:	e00b      	b.n	8004e66 <SEGGER_SYSVIEW_Start+0x76>
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6a:	d8f0      	bhi.n	8004e4e <SEGGER_SYSVIEW_Start+0x5e>
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	e00b      	b.n	8004ea0 <SEGGER_SYSVIEW_Start+0xb0>
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	6279      	str	r1, [r7, #36]	; 0x24
 8004e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea4:	d8f0      	bhi.n	8004e88 <SEGGER_SYSVIEW_Start+0x98>
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	4b28      	ldr	r3, [pc, #160]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e00b      	b.n	8004eda <SEGGER_SYSVIEW_Start+0xea>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	61f9      	str	r1, [r7, #28]
 8004ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ede:	d8f0      	bhi.n	8004ec2 <SEGGER_SYSVIEW_Start+0xd2>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	61fa      	str	r2, [r7, #28]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e00b      	b.n	8004f12 <SEGGER_SYSVIEW_Start+0x122>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	6179      	str	r1, [r7, #20]
 8004f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b7f      	cmp	r3, #127	; 0x7f
 8004f16:	d8f0      	bhi.n	8004efa <SEGGER_SYSVIEW_Start+0x10a>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	617a      	str	r2, [r7, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f28:	2218      	movs	r2, #24
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff f98f 	bl	8004250 <_SendPacket>
      RECORD_END();
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <SEGGER_SYSVIEW_Start+0x16c>)
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f46:	f000 f9eb 	bl	8005320 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f4a:	f000 f9b1 	bl	80052b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f4e:	f000 fc71 	bl	8005834 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f52:	bf00      	nop
 8004f54:	3730      	adds	r7, #48	; 0x30
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	2001a628 	.word	0x2001a628
 8004f60:	08005bd8 	.word	0x08005bd8
 8004f64:	2001a658 	.word	0x2001a658

08004f68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	f04f 0120 	mov.w	r1, #32
 8004f76:	f381 8811 	msr	BASEPRI, r1
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	480b      	ldr	r0, [pc, #44]	; (8004fac <SEGGER_SYSVIEW_Stop+0x44>)
 8004f7e:	f7ff f87d 	bl	800407c <_PreparePacket>
 8004f82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f8c:	220b      	movs	r2, #11
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	6838      	ldr	r0, [r7, #0]
 8004f92:	f7ff f95d 	bl	8004250 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f383 8811 	msr	BASEPRI, r3
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2001a658 	.word	0x2001a658
 8004fb0:	2001a628 	.word	0x2001a628

08004fb4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	; 0x30
 8004fb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fba:	f3ef 8311 	mrs	r3, BASEPRI
 8004fbe:	f04f 0120 	mov.w	r1, #32
 8004fc2:	f381 8811 	msr	BASEPRI, r1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	4845      	ldr	r0, [pc, #276]	; (80050e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004fca:	f7ff f857 	bl	800407c <_PreparePacket>
 8004fce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	e00b      	b.n	8004ff8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffc:	d8f0      	bhi.n	8004fe0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	6279      	str	r1, [r7, #36]	; 0x24
 8005024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	2b7f      	cmp	r3, #127	; 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	627a      	str	r2, [r7, #36]	; 0x24
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	e00b      	b.n	800506c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	61f9      	str	r1, [r7, #28]
 800505e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	09db      	lsrs	r3, r3, #7
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b7f      	cmp	r3, #127	; 0x7f
 8005070:	d8f0      	bhi.n	8005054 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	61fa      	str	r2, [r7, #28]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e00b      	b.n	80050a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1c59      	adds	r1, r3, #1
 8005094:	6179      	str	r1, [r7, #20]
 8005096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	09db      	lsrs	r3, r3, #7
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b7f      	cmp	r3, #127	; 0x7f
 80050a8:	d8f0      	bhi.n	800508c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	617a      	str	r2, [r7, #20]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050ba:	2218      	movs	r2, #24
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	68b8      	ldr	r0, [r7, #8]
 80050c0:	f7ff f8c6 	bl	8004250 <_SendPacket>
  RECORD_END();
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050d2:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	4798      	blx	r3
  }
}
 80050d8:	bf00      	nop
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2001a658 	.word	0x2001a658
 80050e4:	2001a628 	.word	0x2001a628

080050e8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b092      	sub	sp, #72	; 0x48
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80050f0:	f3ef 8311 	mrs	r3, BASEPRI
 80050f4:	f04f 0120 	mov.w	r1, #32
 80050f8:	f381 8811 	msr	BASEPRI, r1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	486a      	ldr	r0, [pc, #424]	; (80052a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005100:	f7fe ffbc 	bl	800407c <_PreparePacket>
 8005104:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b66      	ldr	r3, [pc, #408]	; (80052ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	643b      	str	r3, [r7, #64]	; 0x40
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	6479      	str	r1, [r7, #68]	; 0x44
 8005126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	643b      	str	r3, [r7, #64]	; 0x40
 8005134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800513a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	647a      	str	r2, [r7, #68]	; 0x44
 8005140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	63bb      	str	r3, [r7, #56]	; 0x38
 8005154:	e00b      	b.n	800516e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	b2da      	uxtb	r2, r3
 800515a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b7f      	cmp	r3, #127	; 0x7f
 8005172:	d8f0      	bhi.n	8005156 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800517a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7fe ff25 	bl	8003fdc <_EncodeStr>
 8005192:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005194:	2209      	movs	r2, #9
 8005196:	68f9      	ldr	r1, [r7, #12]
 8005198:	6938      	ldr	r0, [r7, #16]
 800519a:	f7ff f859 	bl	8004250 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b40      	ldr	r3, [pc, #256]	; (80052ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	e00b      	b.n	80051cc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6379      	str	r1, [r7, #52]	; 0x34
 80051be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2b7f      	cmp	r3, #127	; 0x7f
 80051d0:	d8f0      	bhi.n	80051b4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	637a      	str	r2, [r7, #52]	; 0x34
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	e00b      	b.n	8005206 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	1c59      	adds	r1, r3, #1
 80051f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	09db      	lsrs	r3, r3, #7
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	2b7f      	cmp	r3, #127	; 0x7f
 800520a:	d8f0      	bhi.n	80051ee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	e00b      	b.n	8005240 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	6279      	str	r1, [r7, #36]	; 0x24
 8005232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	09db      	lsrs	r3, r3, #7
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	2b7f      	cmp	r3, #127	; 0x7f
 8005244:	d8f0      	bhi.n	8005228 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	627a      	str	r2, [r7, #36]	; 0x24
 800524c:	6a3a      	ldr	r2, [r7, #32]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e00b      	b.n	8005278 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	1c59      	adds	r1, r3, #1
 8005268:	61f9      	str	r1, [r7, #28]
 800526a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	09db      	lsrs	r3, r3, #7
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b7f      	cmp	r3, #127	; 0x7f
 800527c:	d8f0      	bhi.n	8005260 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	61fa      	str	r2, [r7, #28]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800528e:	2215      	movs	r2, #21
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	6938      	ldr	r0, [r7, #16]
 8005294:	f7fe ffdc 	bl	8004250 <_SendPacket>
  RECORD_END();
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
 80052a0:	3748      	adds	r7, #72	; 0x48
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2001a658 	.word	0x2001a658
 80052ac:	2001a628 	.word	0x2001a628

080052b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052c6:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4798      	blx	r3
  }
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2001a628 	.word	0x2001a628

080052d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052e0:	f3ef 8311 	mrs	r3, BASEPRI
 80052e4:	f04f 0120 	mov.w	r1, #32
 80052e8:	f381 8811 	msr	BASEPRI, r1
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	480b      	ldr	r0, [pc, #44]	; (800531c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80052f0:	f7fe fec4 	bl	800407c <_PreparePacket>
 80052f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052f6:	2280      	movs	r2, #128	; 0x80
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f7fe fe6e 	bl	8003fdc <_EncodeStr>
 8005300:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005302:	220e      	movs	r2, #14
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f7fe ffa2 	bl	8004250 <_SendPacket>
  RECORD_END();
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f383 8811 	msr	BASEPRI, r3
}
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	2001a658 	.word	0x2001a658

08005320 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d019      	beq.n	8005362 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d014      	beq.n	8005362 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4798      	blx	r3
 8005340:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005344:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005346:	e9d7 1200 	ldrd	r1, r2, [r7]
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	f04f 0400 	mov.w	r4, #0
 8005352:	0013      	movs	r3, r2
 8005354:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005356:	461a      	mov	r2, r3
 8005358:	4601      	mov	r1, r0
 800535a:	200d      	movs	r0, #13
 800535c:	f7ff fcee 	bl	8004d3c <SEGGER_SYSVIEW_RecordU32x2>
 8005360:	e005      	b.n	800536e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	200c      	movs	r0, #12
 800536a:	f7ff fcab 	bl	8004cc4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}
 8005376:	bf00      	nop
 8005378:	2001a628 	.word	0x2001a628
 800537c:	e0001004 	.word	0xe0001004

08005380 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005386:	f3ef 8311 	mrs	r3, BASEPRI
 800538a:	f04f 0120 	mov.w	r1, #32
 800538e:	f381 8811 	msr	BASEPRI, r1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	4819      	ldr	r0, [pc, #100]	; (80053fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005396:	f7fe fe71 	bl	800407c <_PreparePacket>
 800539a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e00b      	b.n	80053cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	6179      	str	r1, [r7, #20]
 80053be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	09db      	lsrs	r3, r3, #7
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d8f0      	bhi.n	80053b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	617a      	str	r2, [r7, #20]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80053e2:	2202      	movs	r2, #2
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	68b8      	ldr	r0, [r7, #8]
 80053e8:	f7fe ff32 	bl	8004250 <_SendPacket>
  RECORD_END();
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f383 8811 	msr	BASEPRI, r3
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	2001a658 	.word	0x2001a658
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800540a:	f3ef 8311 	mrs	r3, BASEPRI
 800540e:	f04f 0120 	mov.w	r1, #32
 8005412:	f381 8811 	msr	BASEPRI, r1
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	4807      	ldr	r0, [pc, #28]	; (8005438 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800541a:	f7fe fe2f 	bl	800407c <_PreparePacket>
 800541e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005420:	2203      	movs	r2, #3
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6838      	ldr	r0, [r7, #0]
 8005426:	f7fe ff13 	bl	8004250 <_SendPacket>
  RECORD_END();
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f383 8811 	msr	BASEPRI, r3
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	2001a658 	.word	0x2001a658

0800543c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005442:	f3ef 8311 	mrs	r3, BASEPRI
 8005446:	f04f 0120 	mov.w	r1, #32
 800544a:	f381 8811 	msr	BASEPRI, r1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	4807      	ldr	r0, [pc, #28]	; (8005470 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005452:	f7fe fe13 	bl	800407c <_PreparePacket>
 8005456:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005458:	2212      	movs	r2, #18
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6838      	ldr	r0, [r7, #0]
 800545e:	f7fe fef7 	bl	8004250 <_SendPacket>
  RECORD_END();
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f383 8811 	msr	BASEPRI, r3
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	2001a658 	.word	0x2001a658

08005474 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	4807      	ldr	r0, [pc, #28]	; (80054a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800548a:	f7fe fdf7 	bl	800407c <_PreparePacket>
 800548e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005490:	2211      	movs	r2, #17
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7fe fedb 	bl	8004250 <_SendPacket>
  RECORD_END();
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f383 8811 	msr	BASEPRI, r3
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	2001a658 	.word	0x2001a658

080054ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054b4:	f3ef 8311 	mrs	r3, BASEPRI
 80054b8:	f04f 0120 	mov.w	r1, #32
 80054bc:	f381 8811 	msr	BASEPRI, r1
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	4819      	ldr	r0, [pc, #100]	; (8005528 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054c4:	f7fe fdda 	bl	800407c <_PreparePacket>
 80054c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054ce:	4b17      	ldr	r3, [pc, #92]	; (800552c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	61f9      	str	r1, [r7, #28]
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	61fa      	str	r2, [r7, #28]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005510:	2208      	movs	r2, #8
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	6938      	ldr	r0, [r7, #16]
 8005516:	f7fe fe9b 	bl	8004250 <_SendPacket>
  RECORD_END();
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f383 8811 	msr	BASEPRI, r3
}
 8005520:	bf00      	nop
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	2001a658 	.word	0x2001a658
 800552c:	2001a628 	.word	0x2001a628

08005530 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005538:	f3ef 8311 	mrs	r3, BASEPRI
 800553c:	f04f 0120 	mov.w	r1, #32
 8005540:	f381 8811 	msr	BASEPRI, r1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	4819      	ldr	r0, [pc, #100]	; (80055ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005548:	f7fe fd98 	bl	800407c <_PreparePacket>
 800554c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e00b      	b.n	800557e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	1c59      	adds	r1, r3, #1
 800556e:	61f9      	str	r1, [r7, #28]
 8005570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	09db      	lsrs	r3, r3, #7
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b7f      	cmp	r3, #127	; 0x7f
 8005582:	d8f0      	bhi.n	8005566 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005594:	2204      	movs	r2, #4
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	6938      	ldr	r0, [r7, #16]
 800559a:	f7fe fe59 	bl	8004250 <_SendPacket>
  RECORD_END();
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f383 8811 	msr	BASEPRI, r3
}
 80055a4:	bf00      	nop
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	2001a658 	.word	0x2001a658
 80055b0:	2001a628 	.word	0x2001a628

080055b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055bc:	f3ef 8311 	mrs	r3, BASEPRI
 80055c0:	f04f 0120 	mov.w	r1, #32
 80055c4:	f381 8811 	msr	BASEPRI, r1
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	4819      	ldr	r0, [pc, #100]	; (8005630 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80055cc:	f7fe fd56 	bl	800407c <_PreparePacket>
 80055d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055d6:	4b17      	ldr	r3, [pc, #92]	; (8005634 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	e00b      	b.n	8005602 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	1c59      	adds	r1, r3, #1
 80055f2:	61f9      	str	r1, [r7, #28]
 80055f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	09db      	lsrs	r3, r3, #7
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b7f      	cmp	r3, #127	; 0x7f
 8005606:	d8f0      	bhi.n	80055ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	61fa      	str	r2, [r7, #28]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005618:	2206      	movs	r2, #6
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	6938      	ldr	r0, [r7, #16]
 800561e:	f7fe fe17 	bl	8004250 <_SendPacket>
  RECORD_END();
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f383 8811 	msr	BASEPRI, r3
}
 8005628:	bf00      	nop
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	2001a658 	.word	0x2001a658
 8005634:	2001a628 	.word	0x2001a628

08005638 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005642:	f3ef 8311 	mrs	r3, BASEPRI
 8005646:	f04f 0120 	mov.w	r1, #32
 800564a:	f381 8811 	msr	BASEPRI, r1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	4827      	ldr	r0, [pc, #156]	; (80056f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005652:	f7fe fd13 	bl	800407c <_PreparePacket>
 8005656:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	623b      	str	r3, [r7, #32]
 800566e:	e00b      	b.n	8005688 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	b2da      	uxtb	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	6279      	str	r1, [r7, #36]	; 0x24
 800567a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	09db      	lsrs	r3, r3, #7
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	2b7f      	cmp	r3, #127	; 0x7f
 800568c:	d8f0      	bhi.n	8005670 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	627a      	str	r2, [r7, #36]	; 0x24
 8005694:	6a3a      	ldr	r2, [r7, #32]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e00b      	b.n	80056c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	1c59      	adds	r1, r3, #1
 80056b0:	61f9      	str	r1, [r7, #28]
 80056b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	09db      	lsrs	r3, r3, #7
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b7f      	cmp	r3, #127	; 0x7f
 80056c4:	d8f0      	bhi.n	80056a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	61fa      	str	r2, [r7, #28]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80056d6:	2207      	movs	r2, #7
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f7fe fdb8 	bl	8004250 <_SendPacket>
  RECORD_END();
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f383 8811 	msr	BASEPRI, r3
}
 80056e6:	bf00      	nop
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2001a658 	.word	0x2001a658
 80056f4:	2001a628 	.word	0x2001a628

080056f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	; 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005702:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06d      	beq.n	80057e6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800570a:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
 8005714:	e008      	b.n	8005728 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	3301      	adds	r3, #1
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572c:	429a      	cmp	r2, r3
 800572e:	d3f2      	bcc.n	8005716 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005730:	e000      	b.n	8005734 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005732:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d055      	beq.n	80057e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800573a:	f3ef 8311 	mrs	r3, BASEPRI
 800573e:	f04f 0120 	mov.w	r1, #32
 8005742:	f381 8811 	msr	BASEPRI, r1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	482a      	ldr	r0, [pc, #168]	; (80057f4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800574a:	f7fe fc97 	bl	800407c <_PreparePacket>
 800574e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	e00b      	b.n	8005776 <SEGGER_SYSVIEW_SendModule+0x7e>
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1c59      	adds	r1, r3, #1
 8005766:	6279      	str	r1, [r7, #36]	; 0x24
 8005768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	09db      	lsrs	r3, r3, #7
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	2b7f      	cmp	r3, #127	; 0x7f
 800577a:	d8f0      	bhi.n	800575e <SEGGER_SYSVIEW_SendModule+0x66>
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	627a      	str	r2, [r7, #36]	; 0x24
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e00b      	b.n	80057b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	61f9      	str	r1, [r7, #28]
 80057a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	09db      	lsrs	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d8f0      	bhi.n	8005798 <SEGGER_SYSVIEW_SendModule+0xa0>
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	4619      	mov	r1, r3
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7fe fc04 	bl	8003fdc <_EncodeStr>
 80057d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80057d6:	2216      	movs	r2, #22
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7fe fd38 	bl	8004250 <_SendPacket>
      RECORD_END();
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80057e6:	bf00      	nop
 80057e8:	3730      	adds	r7, #48	; 0x30
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	2001a650 	.word	0x2001a650
 80057f4:	2001a658 	.word	0x2001a658

080057f8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00f      	beq.n	8005826 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f2      	bne.n	800580c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2001a650 	.word	0x2001a650

08005834 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800583a:	f3ef 8311 	mrs	r3, BASEPRI
 800583e:	f04f 0120 	mov.w	r1, #32
 8005842:	f381 8811 	msr	BASEPRI, r1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	4817      	ldr	r0, [pc, #92]	; (80058a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800584a:	f7fe fc17 	bl	800407c <_PreparePacket>
 800584e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	e00b      	b.n	8005878 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	6179      	str	r1, [r7, #20]
 800586a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	09db      	lsrs	r3, r3, #7
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b7f      	cmp	r3, #127	; 0x7f
 800587c:	d8f0      	bhi.n	8005860 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	617a      	str	r2, [r7, #20]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800588e:	221b      	movs	r2, #27
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	68b8      	ldr	r0, [r7, #8]
 8005894:	f7fe fcdc 	bl	8004250 <_SendPacket>
  RECORD_END();
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f383 8811 	msr	BASEPRI, r3
}
 800589e:	bf00      	nop
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2001a658 	.word	0x2001a658
 80058ac:	2001a654 	.word	0x2001a654

080058b0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80058b0:	b40f      	push	{r0, r1, r2, r3}
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80058b8:	f107 0314 	add.w	r3, r7, #20
 80058bc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	461a      	mov	r2, r3
 80058c2:	2100      	movs	r1, #0
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f7fe ffd5 	bl	8004874 <_VPrintTarget>
  va_end(ParamList);
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d4:	b004      	add	sp, #16
 80058d6:	4770      	bx	lr

080058d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058e0:	f3ef 8311 	mrs	r3, BASEPRI
 80058e4:	f04f 0120 	mov.w	r1, #32
 80058e8:	f381 8811 	msr	BASEPRI, r1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	4827      	ldr	r0, [pc, #156]	; (800598c <SEGGER_SYSVIEW_Warn+0xb4>)
 80058f0:	f7fe fbc4 	bl	800407c <_PreparePacket>
 80058f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f7fe fb6e 	bl	8003fdc <_EncodeStr>
 8005900:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
 8005906:	2301      	movs	r3, #1
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	e00b      	b.n	8005924 <SEGGER_SYSVIEW_Warn+0x4c>
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	6279      	str	r1, [r7, #36]	; 0x24
 8005916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	09db      	lsrs	r3, r3, #7
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b7f      	cmp	r3, #127	; 0x7f
 8005928:	d8f0      	bhi.n	800590c <SEGGER_SYSVIEW_Warn+0x34>
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	627a      	str	r2, [r7, #36]	; 0x24
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	2300      	movs	r3, #0
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e00b      	b.n	800595c <SEGGER_SYSVIEW_Warn+0x84>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	61f9      	str	r1, [r7, #28]
 800594e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	09db      	lsrs	r3, r3, #7
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b7f      	cmp	r3, #127	; 0x7f
 8005960:	d8f0      	bhi.n	8005944 <SEGGER_SYSVIEW_Warn+0x6c>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	61fa      	str	r2, [r7, #28]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005972:	221a      	movs	r2, #26
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	6938      	ldr	r0, [r7, #16]
 8005978:	f7fe fc6a 	bl	8004250 <_SendPacket>
  RECORD_END();
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f383 8811 	msr	BASEPRI, r3
}
 8005982:	bf00      	nop
 8005984:	3728      	adds	r7, #40	; 0x28
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	2001a658 	.word	0x2001a658

08005990 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005994:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005996:	7e1b      	ldrb	r3, [r3, #24]
 8005998:	4619      	mov	r1, r3
 800599a:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800599c:	460b      	mov	r3, r1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	440b      	add	r3, r1
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	336c      	adds	r3, #108	; 0x6c
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059ac:	7e1b      	ldrb	r3, [r3, #24]
 80059ae:	4618      	mov	r0, r3
 80059b0:	490d      	ldr	r1, [pc, #52]	; (80059e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80059b2:	4603      	mov	r3, r0
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4403      	add	r3, r0
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	440b      	add	r3, r1
 80059bc:	3370      	adds	r3, #112	; 0x70
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d00b      	beq.n	80059dc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059c6:	789b      	ldrb	r3, [r3, #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059d2:	f7fe fb5f 	bl	8004094 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059d8:	2200      	movs	r2, #0
 80059da:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80059de:	781b      	ldrb	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	2001a628 	.word	0x2001a628
 80059e8:	2001a780 	.word	0x2001a780

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4e0d      	ldr	r6, [pc, #52]	; (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1ba4      	subs	r4, r4, r6
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2500      	movs	r5, #0
 80059f8:	42a5      	cmp	r5, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4e0b      	ldr	r6, [pc, #44]	; (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	; (8005a30 <__libc_init_array+0x44>)
 8005a00:	f000 f83a 	bl	8005a78 <_init>
 8005a04:	1ba4      	subs	r4, r4, r6
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2500      	movs	r5, #0
 8005a0a:	42a5      	cmp	r5, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a14:	4798      	blx	r3
 8005a16:	3501      	adds	r5, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a1e:	4798      	blx	r3
 8005a20:	3501      	adds	r5, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08005bfc 	.word	0x08005bfc
 8005a28:	08005bfc 	.word	0x08005bfc
 8005a2c:	08005bfc 	.word	0x08005bfc
 8005a30:	08005c00 	.word	0x08005c00

08005a34 <memcmp>:
 8005a34:	b530      	push	{r4, r5, lr}
 8005a36:	2400      	movs	r4, #0
 8005a38:	42a2      	cmp	r2, r4
 8005a3a:	d101      	bne.n	8005a40 <memcmp+0xc>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e007      	b.n	8005a50 <memcmp+0x1c>
 8005a40:	5d03      	ldrb	r3, [r0, r4]
 8005a42:	3401      	adds	r4, #1
 8005a44:	190d      	adds	r5, r1, r4
 8005a46:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005a4a:	42ab      	cmp	r3, r5
 8005a4c:	d0f4      	beq.n	8005a38 <memcmp+0x4>
 8005a4e:	1b58      	subs	r0, r3, r5
 8005a50:	bd30      	pop	{r4, r5, pc}

08005a52 <memcpy>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	1e43      	subs	r3, r0, #1
 8005a56:	440a      	add	r2, r1
 8005a58:	4291      	cmp	r1, r2
 8005a5a:	d100      	bne.n	8005a5e <memcpy+0xc>
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a66:	e7f7      	b.n	8005a58 <memcpy+0x6>

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
