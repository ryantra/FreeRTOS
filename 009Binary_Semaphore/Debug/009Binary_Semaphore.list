
009Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800747c  0800747c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007484  08007484  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800748c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a86c  20000078  08007504  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a8e4  08007504  0002a8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019021  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f3  00000000  00000000  000390c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  0003c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195fc  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010182  00000000  00000000  00057f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c454  00000000  00000000  000680e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010453a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b4  00000000  00000000  001045b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007260 	.word	0x08007260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007260 	.word	0x08007260

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a838 	.word	0x2001a838

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b0c4      	sub	sp, #272	; 0x110
 8000634:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fbc3 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f89f 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f931 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f905 	bl	8000850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

    //Cycle count enable
      DWT_CTRL |= (1 << 0);
 8000646:	4b42      	ldr	r3, [pc, #264]	; (8000750 <main+0x120>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a41      	ldr	r2, [pc, #260]	; (8000750 <main+0x120>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6013      	str	r3, [r2, #0]

  	SEGGER_SYSVIEW_Conf();
 8000652:	f004 fbcd 	bl	8004df0 <SEGGER_SYSVIEW_Conf>
  	SEGGER_SYSVIEW_Start();
 8000656:	f005 fbb3 	bl	8005dc0 <SEGGER_SYSVIEW_Start>

  	sprintf(usr_msg,"Demo of Binary semaphore usage between 2 Tasks \r\n");
 800065a:	463b      	mov	r3, r7
 800065c:	4a3d      	ldr	r2, [pc, #244]	; (8000754 <main+0x124>)
 800065e:	461c      	mov	r4, r3
 8000660:	4615      	mov	r5, r2
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	8023      	strh	r3, [r4, #0]
	printmsg(usr_msg);
 8000672:	463b      	mov	r3, r7
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fa0f 	bl	8000a98 <printmsg>

	/* Before a semaphore is used it must be explicitly created.
	     * In this example a binary semaphore is created . */
	    vSemaphoreCreateBinary( xWork );
 800067a:	2203      	movs	r2, #3
 800067c:	2100      	movs	r1, #0
 800067e:	2001      	movs	r0, #1
 8000680:	f002 fad8 	bl	8002c34 <xQueueGenericCreate>
 8000684:	4602      	mov	r2, r0
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <main+0x128>)
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <main+0x128>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <main+0x70>
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <main+0x128>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	f002 fb50 	bl	8002d40 <xQueueGenericSend>

		/* The queue is created to hold a maximum of 1 Element. */
	    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	2001      	movs	r0, #1
 80006a6:	f002 fac5 	bl	8002c34 <xQueueGenericCreate>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <main+0x12c>)
 80006ae:	601a      	str	r2, [r3, #0]

	    /* Check the semaphore and queue was created successfully. */
	    if( (xWork != NULL) && (xWorkQueue != NULL) )
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <main+0x128>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d03b      	beq.n	8000730 <main+0x100>
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <main+0x12c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d037      	beq.n	8000730 <main+0x100>
	    {

			/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
	        status = xTaskCreate(vManagerTask, "Manager", 200, NULL, 3, &manager_task_handle);
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <main+0x130>)
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2303      	movs	r3, #3
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	22c8      	movs	r2, #200	; 0xc8
 80006cc:	4925      	ldr	r1, [pc, #148]	; (8000764 <main+0x134>)
 80006ce:	4826      	ldr	r0, [pc, #152]	; (8000768 <main+0x138>)
 80006d0:	f002 ff8a 	bl	80035e8 <xTaskCreate>
 80006d4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	        configASSERT(status == pdPASS);
 80006d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d00a      	beq.n	80006f6 <main+0xc6>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e4:	f383 8811 	msr	BASEPRI, r3
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80006f4:	e7fe      	b.n	80006f4 <main+0xc4>

	        /* Create a employee task with less priority than manager */
	        status = xTaskCreate(vEmployeeTask, "Employee", 200, NULL, 1,&employee_task_handle );
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <main+0x13c>)
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	22c8      	movs	r2, #200	; 0xc8
 8000702:	491b      	ldr	r1, [pc, #108]	; (8000770 <main+0x140>)
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <main+0x144>)
 8000706:	f002 ff6f 	bl	80035e8 <xTaskCreate>
 800070a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	        configASSERT(status == pdPASS);
 800070e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000712:	2b01      	cmp	r3, #1
 8000714:	d00a      	beq.n	800072c <main+0xfc>
 8000716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071a:	f383 8811 	msr	BASEPRI, r3
 800071e:	f3bf 8f6f 	isb	sy
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800072a:	e7fe      	b.n	800072a <main+0xfa>

	        /* Start the scheduler so the created tasks start executing. */
	        vTaskStartScheduler();
 800072c:	f003 f8f6 	bl	800391c <vTaskStartScheduler>
	    }

	    sprintf(usr_msg,"Queue/Sema create failed.. \r\n");
 8000730:	463b      	mov	r3, r7
 8000732:	4a11      	ldr	r2, [pc, #68]	; (8000778 <main+0x148>)
 8000734:	461c      	mov	r4, r3
 8000736:	4615      	mov	r5, r2
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000740:	c407      	stmia	r4!, {r0, r1, r2}
 8000742:	8023      	strh	r3, [r4, #0]
	    printmsg(usr_msg);
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f9a6 	bl	8000a98 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	e7fe      	b.n	800074c <main+0x11c>
 800074e:	bf00      	nop
 8000750:	e0001000 	.word	0xe0001000
 8000754:	08007278 	.word	0x08007278
 8000758:	2001a7ac 	.word	0x2001a7ac
 800075c:	2001a7a8 	.word	0x2001a7a8
 8000760:	2001a7f0 	.word	0x2001a7f0
 8000764:	080072ac 	.word	0x080072ac
 8000768:	08000985 	.word	0x08000985
 800076c:	2001a7a4 	.word	0x2001a7a4
 8000770:	080072b4 	.word	0x080072b4
 8000774:	08000a09 	.word	0x08000a09
 8000778:	080072c0 	.word	0x080072c0

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 f928 	bl	80069e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fd9c 	bl	8001340 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 f96b 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fff6 	bl	8001820 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f955 	bl	8000ae8 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f001 fc0c 	bl	80020a4 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f929 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2001a7b0 	.word	0x2001a7b0
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a25      	ldr	r2, [pc, #148]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	4812      	ldr	r0, [pc, #72]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000930:	f000 fcec 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_GPIO_Init+0xd8>)
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_GPIO_Init+0xdc>)
 800094a:	f000 fb5d 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	2320      	movs	r3, #32
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000966:	f000 fb4f 	bl	8001008 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	10210000 	.word	0x10210000
 8000980:	40020800 	.word	0x40020800

08000984 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask(void *param)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b0c2      	sub	sp, #264	; 0x108
 8000988:	af00      	add	r7, sp, #0
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	6018      	str	r0, [r3, #0]
	char usr_msg[250];
	uint32_t ticket_ID;
	while(1)
	{
		ticket_ID = (rand()&0x1ff);
 800098e:	f006 f82f 	bl	80069f0 <rand>
 8000992:	4603      	mov	r3, r0
 8000994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	601a      	str	r2, [r3, #0]
		if(xQueueSend(xWorkQueue,&ticket_ID,portMAX_DELAY)== pdTRUE)
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <vManagerTask+0x74>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	2300      	movs	r3, #0
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ac:	f002 f9c8 	bl	8002d40 <xQueueGenericSend>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d10f      	bne.n	80009d6 <vManagerTask+0x52>
		{
			xSemaphoreGive(xWork);
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <vManagerTask+0x78>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 f9be 	bl	8002d40 <xQueueGenericSend>
			taskYIELD();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <vManagerTask+0x7c>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	f3bf 8f4f 	dsb	sy
 80009d0:	f3bf 8f6f 	isb	sy
 80009d4:	e7db      	b.n	800098e <vManagerTask+0xa>
		}else
			{
				sprintf(usr_msg,"Could not send data to Queue \r\n");
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <vManagerTask+0x80>)
 80009dc:	461c      	mov	r4, r3
 80009de:	4615      	mov	r5, r2
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				printmsg(usr_msg);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f851 	bl	8000a98 <printmsg>
		ticket_ID = (rand()&0x1ff);
 80009f6:	e7ca      	b.n	800098e <vManagerTask+0xa>
 80009f8:	2001a7a8 	.word	0x2001a7a8
 80009fc:	2001a7ac 	.word	0x2001a7ac
 8000a00:	e000ed04 	.word	0xe000ed04
 8000a04:	080072e0 	.word	0x080072e0

08000a08 <vEmployeeTask>:
			}
	}
}

void vEmployeeTask(void *param)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b0c2      	sub	sp, #264	; 0x108
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	6018      	str	r0, [r3, #0]
	char usr_msg[250];
	uint32_t ticket_ID;
	while(1)
	{
		xSemaphoreTake(xWork,portMAX_DELAY);
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <vEmployeeTask+0x80>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fb96 	bl	800314c <xQueueSemaphoreTake>
		if(xQueueReceive(xWorkQueue,&ticket_ID,0)==pdTRUE )
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <vEmployeeTask+0x84>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f107 0108 	add.w	r1, r7, #8
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fa92 	bl	8002f54 <xQueueReceive>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d114      	bne.n	8000a60 <vEmployeeTask+0x58>
		{
			sprintf(usr_msg,"Working on ticket ID: %lu\r\n",ticket_ID);
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4913      	ldr	r1, [pc, #76]	; (8000a90 <vEmployeeTask+0x88>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f006 f808 	bl	8006a58 <siprintf>
			printmsg(usr_msg);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f823 	bl	8000a98 <printmsg>
			vTaskDelay(ticket_ID);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 ff27 	bl	80038ac <vTaskDelay>
 8000a5e:	e7d8      	b.n	8000a12 <vEmployeeTask+0xa>
		}else
			{
				sprintf(usr_msg,"Employee Task: Queue is empty, noting to do\r\n");
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <vEmployeeTask+0x8c>)
 8000a66:	461c      	mov	r4, r3
 8000a68:	4615      	mov	r5, r2
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a76:	c407      	stmia	r4!, {r0, r1, r2}
 8000a78:	8023      	strh	r3, [r4, #0]
				printmsg(usr_msg);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f80a 	bl	8000a98 <printmsg>
		xSemaphoreTake(xWork,portMAX_DELAY);
 8000a84:	e7c5      	b.n	8000a12 <vEmployeeTask+0xa>
 8000a86:	bf00      	nop
 8000a88:	2001a7ac 	.word	0x2001a7ac
 8000a8c:	2001a7a8 	.word	0x2001a7a8
 8000a90:	08007300 	.word	0x08007300
 8000a94:	0800731c 	.word	0x0800731c

08000a98 <printmsg>:
			}
	}
}

void printmsg(char *msg)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fbe7 	bl	8000274 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <printmsg+0x28>)
 8000ab2:	f001 fb44 	bl	800213e <HAL_UART_Transmit>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2001a7b0 	.word	0x2001a7b0

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f995 	bl	8000e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40000c00 	.word	0x40000c00

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bbe:	f000 fa23 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f000 f9e1 	bl	8000fb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bf2:	2032      	movs	r0, #50	; 0x32
 8000bf4:	f000 f9fa 	bl	8000fec <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_InitTick+0xa4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_InitTick+0xa4>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_InitTick+0xa4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fff0 	bl	8001c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c24:	f000 ffc6 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_InitTick+0xa8>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9b      	lsrs	r3, r3, #18
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_InitTick+0xac>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_InitTick+0xb0>)
 8000c40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_InitTick+0xac>)
 8000c44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c48:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_InitTick+0xac>)
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_InitTick+0xac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_InitTick+0xac>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <HAL_InitTick+0xac>)
 8000c5e:	f001 f803 	bl	8001c68 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <HAL_InitTick+0xac>)
 8000c6a:	f001 f832 	bl	8001cd2 <HAL_TIM_Base_Start_IT>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	2001a7f4 	.word	0x2001a7f4
 8000c88:	40000c00 	.word	0x40000c00

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM5_IRQHandler+0x10>)
 8000cc6:	f001 f828 	bl	8001d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2001a7f4 	.word	0x2001a7f4

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f005 fe28 	bl	8006958 <__errno>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	2001a8e8 	.word	0x2001a8e8

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd3 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f005 fde3 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc47 	bl	8000630 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da8:	0800748c 	.word	0x0800748c
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000db4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000db8:	2001a8e4 	.word	0x2001a8e4

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8d8 	bl	8000f9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fef2 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe80 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	2001a834 	.word	0x2001a834

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2001a834 	.word	0x2001a834

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff4c 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc6:	f7ff ff61 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f7ff ffb1 	bl	8000f38 <NVIC_EncodePriority>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff80 	bl	8000ee4 <__NVIC_SetPriority>
}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff54 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e159      	b.n	80012d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8148 	bne.w	80012d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d00b      	beq.n	8001062 <HAL_GPIO_Init+0x5a>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001056:	2b11      	cmp	r3, #17
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0xfc>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a2 	beq.w	80012d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_GPIO_Init+0x2ec>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x202>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x1fe>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_GPIO_Init+0x2f4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a45      	ldr	r2, [pc, #276]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x1f6>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a44      	ldr	r2, [pc, #272]	; (8001304 <HAL_GPIO_Init+0x2fc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x1f2>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x204>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x204>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x204>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x204>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x204>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121c:	4934      	ldr	r1, [pc, #208]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <HAL_GPIO_Init+0x300>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124e:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001278:	4a23      	ldr	r2, [pc, #140]	; (8001308 <HAL_GPIO_Init+0x300>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_GPIO_Init+0x300>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_GPIO_Init+0x300>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_GPIO_Init+0x300>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f aea2 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	3724      	adds	r7, #36	; 0x24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e25b      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d075      	beq.n	800144a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	4ba3      	ldr	r3, [pc, #652]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d00c      	beq.n	8001384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b9d      	ldr	r3, [pc, #628]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001382:	d10b      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4b99      	ldr	r3, [pc, #612]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d05b      	beq.n	8001448 <HAL_RCC_OscConfig+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e236      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x74>
 80013a6:	4b91      	ldr	r3, [pc, #580]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a90      	ldr	r2, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e01d      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a8a      	ldr	r2, [pc, #552]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a87      	ldr	r2, [pc, #540]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a83      	ldr	r2, [pc, #524]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b81      	ldr	r3, [pc, #516]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fd18 	bl	8000e2c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fd14 	bl	8000e2c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1fb      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0xc0>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fd04 	bl	8000e2c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fd00 	bl	8000e2c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1e7      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0xe8>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1bb      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4952      	ldr	r1, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	e03a      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_RCC_OscConfig+0x2b0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fcb9 	bl	8000e2c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fcb5 	bl	8000e2c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e19c      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4940      	ldr	r1, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x2b0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc98 	bl	8000e2c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fc94 	bl	8000e2c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e17b      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d030      	beq.n	800158c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d016      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x2b4>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fc78 	bl	8000e2c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fc74 	bl	8000e2c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e15b      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
 800155e:	e015      	b.n	800158c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x2b4>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc61 	bl	8000e2c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fc5d 	bl	8000e2c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e144      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a0 	beq.w	80016da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d121      	bne.n	800161a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fc23 	bl	8000e2c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e011      	b.n	800160e <HAL_RCC_OscConfig+0x2ce>
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
 80015f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fc:	f7ff fc16 	bl	8000e2c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0fd      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x4d4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x2f0>
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x32a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x312>
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a76      	ldr	r2, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	4b74      	ldr	r3, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x32a>
 8001652:	4b71      	ldr	r3, [pc, #452]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a70      	ldr	r2, [pc, #448]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fbdb 	bl	8000e2c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fbd7 	bl	8000e2c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0bc      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x33a>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fbc5 	bl	8000e2c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fbc1 	bl	8000e2c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0a6      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b56      	ldr	r3, [pc, #344]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8092 	beq.w	8001808 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d05c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d141      	bne.n	800177c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_RCC_OscConfig+0x4dc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb95 	bl	8000e2c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fb91 	bl	8000e2c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e078      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	019b      	lsls	r3, r3, #6
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	4933      	ldr	r1, [pc, #204]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x4dc>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb6a 	bl	8000e2c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb66 	bl	8000e2c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04d      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x41c>
 800177a:	e045      	b.n	8001808 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x4dc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb53 	bl	8000e2c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb4f 	bl	8000e2c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e036      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x44a>
 80017a8:	e02e      	b.n	8001808 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e029      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_RCC_OscConfig+0x4d8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d11c      	bne.n	8001804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d115      	bne.n	8001804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10d      	bne.n	8001804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000
 8001818:	40023800 	.word	0x40023800
 800181c:	42470060 	.word	0x42470060

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cc      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d90c      	bls.n	800185c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0b8      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	494d      	ldr	r1, [pc, #308]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d044      	beq.n	8001940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e07f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e067      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4934      	ldr	r1, [pc, #208]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff fa8c 	bl	8000e2c <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff fa88 	bl	8000e2c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04f      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d20c      	bcs.n	8001968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e032      	b.n	80019ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4916      	ldr	r1, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a6:	f000 f821 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019aa:	4601      	mov	r1, r0
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	fa21 f303 	lsr.w	r3, r1, r3
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f906 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08007408 	.word	0x08007408
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d007      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x32>
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d008      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x38>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 80b4 	bne.w	8001b80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a1a:	60bb      	str	r3, [r7, #8]
       break;
 8001a1c:	e0b3      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e0b0      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04a      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	ea03 0501 	and.w	r5, r3, r1
 8001a50:	ea04 0602 	and.w	r6, r4, r2
 8001a54:	4629      	mov	r1, r5
 8001a56:	4632      	mov	r2, r6
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	0154      	lsls	r4, r2, #5
 8001a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a66:	014b      	lsls	r3, r1, #5
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	1b49      	subs	r1, r1, r5
 8001a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f04f 0400 	mov.w	r4, #0
 8001a7a:	0194      	lsls	r4, r2, #6
 8001a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a80:	018b      	lsls	r3, r1, #6
 8001a82:	1a5b      	subs	r3, r3, r1
 8001a84:	eb64 0402 	sbc.w	r4, r4, r2
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	00e2      	lsls	r2, r4, #3
 8001a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a96:	00d9      	lsls	r1, r3, #3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	195b      	adds	r3, r3, r5
 8001a9e:	eb44 0406 	adc.w	r4, r4, r6
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	0262      	lsls	r2, r4, #9
 8001aac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ab0:	0259      	lsls	r1, r3, #9
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4621      	mov	r1, r4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f04f 0400 	mov.w	r4, #0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	f7fe fc34 	bl	8000330 <__aeabi_uldivmod>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e049      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	ea03 0501 	and.w	r5, r3, r1
 8001ae6:	ea04 0602 	and.w	r6, r4, r2
 8001aea:	4629      	mov	r1, r5
 8001aec:	4632      	mov	r2, r6
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	f04f 0400 	mov.w	r4, #0
 8001af6:	0154      	lsls	r4, r2, #5
 8001af8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001afc:	014b      	lsls	r3, r1, #5
 8001afe:	4619      	mov	r1, r3
 8001b00:	4622      	mov	r2, r4
 8001b02:	1b49      	subs	r1, r1, r5
 8001b04:	eb62 0206 	sbc.w	r2, r2, r6
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	f04f 0400 	mov.w	r4, #0
 8001b10:	0194      	lsls	r4, r2, #6
 8001b12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	1a5b      	subs	r3, r3, r1
 8001b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	00e2      	lsls	r2, r4, #3
 8001b28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b2c:	00d9      	lsls	r1, r3, #3
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	195b      	adds	r3, r3, r5
 8001b34:	eb44 0406 	adc.w	r4, r4, r6
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	02a2      	lsls	r2, r4, #10
 8001b42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b46:	0299      	lsls	r1, r3, #10
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4621      	mov	r1, r4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f04f 0400 	mov.w	r4, #0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4623      	mov	r3, r4
 8001b5a:	f7fe fbe9 	bl	8000330 <__aeabi_uldivmod>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	60bb      	str	r3, [r7, #8]
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b82:	60bb      	str	r3, [r7, #8]
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	68bb      	ldr	r3, [r7, #8]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08007418 	.word	0x08007418

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffdc 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001be4:	4601      	mov	r1, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0b5b      	lsrs	r3, r3, #13
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08007418 	.word	0x08007418

08001c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220f      	movs	r2, #15
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCC_GetClockConfig+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01d      	b.n	8001cb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f815 	bl	8001cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 f968 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d007      	beq.n	8001d0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d122      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d11b      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0202 	mvn.w	r2, #2
 8001d46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8ee 	bl	8001f3e <HAL_TIM_IC_CaptureCallback>
 8001d62:	e005      	b.n	8001d70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8e0 	bl	8001f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8f1 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d122      	bne.n	8001dca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d11b      	bne.n	8001dca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0204 	mvn.w	r2, #4
 8001d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8c4 	bl	8001f3e <HAL_TIM_IC_CaptureCallback>
 8001db6:	e005      	b.n	8001dc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8b6 	bl	8001f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8c7 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d122      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d11b      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0208 	mvn.w	r2, #8
 8001dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2204      	movs	r2, #4
 8001df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f89a 	bl	8001f3e <HAL_TIM_IC_CaptureCallback>
 8001e0a:	e005      	b.n	8001e18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f88c 	bl	8001f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f89d 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d122      	bne.n	8001e72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d11b      	bne.n	8001e72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f06f 0210 	mvn.w	r2, #16
 8001e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2208      	movs	r2, #8
 8001e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f870 	bl	8001f3e <HAL_TIM_IC_CaptureCallback>
 8001e5e:	e005      	b.n	8001e6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f862 	bl	8001f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f873 	bl	8001f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10e      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f06f 0201 	mvn.w	r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe fe13 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b80      	cmp	r3, #128	; 0x80
 8001eaa:	d10e      	bne.n	8001eca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d107      	bne.n	8001eca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8e3 	bl	8002090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d10e      	bne.n	8001ef6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d107      	bne.n	8001ef6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f838 	bl	8001f66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d10e      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f06f 0220 	mvn.w	r2, #32
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8ad 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00f      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00b      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a31      	ldr	r2, [pc, #196]	; (8002064 <TIM_Base_SetConfig+0xe8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a30      	ldr	r2, [pc, #192]	; (8002068 <TIM_Base_SetConfig+0xec>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0x38>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <TIM_Base_SetConfig+0xf0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01b      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd4:	d017      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <TIM_Base_SetConfig+0xe8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a21      	ldr	r2, [pc, #132]	; (8002068 <TIM_Base_SetConfig+0xec>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <TIM_Base_SetConfig+0xf0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <TIM_Base_SetConfig+0xf4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <TIM_Base_SetConfig+0xf8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <TIM_Base_SetConfig+0xfc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <TIM_Base_SetConfig+0xe4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d103      	bne.n	800204c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	615a      	str	r2, [r3, #20]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e03f      	b.n	8002136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fd3c 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f90b 	bl	8002304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b088      	sub	sp, #32
 8002142:	af02      	add	r7, sp, #8
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 8083 	bne.w	8002266 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_UART_Transmit+0x2e>
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e07b      	b.n	8002268 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_UART_Transmit+0x40>
 800217a:	2302      	movs	r3, #2
 800217c:	e074      	b.n	8002268 <HAL_UART_Transmit+0x12a>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2221      	movs	r2, #33	; 0x21
 8002190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002194:	f7fe fe4a 	bl	8000e2c <HAL_GetTick>
 8002198:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80021ae:	e042      	b.n	8002236 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d122      	bne.n	800220e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f84c 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e042      	b.n	8002268 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3302      	adds	r3, #2
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	e017      	b.n	8002236 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	e013      	b.n	8002236 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f829 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e01f      	b.n	8002268 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1b7      	bne.n	80021b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2200      	movs	r2, #0
 8002248:	2140      	movs	r1, #64	; 0x40
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f810 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e006      	b.n	8002268 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
  }
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002280:	e02c      	b.n	80022dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002288:	d028      	beq.n	80022dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002290:	f7fe fdcc 	bl	8000e2c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	429a      	cmp	r2, r3
 800229e:	d21d      	bcs.n	80022dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e00f      	b.n	80022fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d0c3      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002346:	f023 030c 	bic.w	r3, r3, #12
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002372:	f040 818b 	bne.w	800268c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4ac1      	ldr	r2, [pc, #772]	; (8002680 <UART_SetConfig+0x37c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d005      	beq.n	800238c <UART_SetConfig+0x88>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4abf      	ldr	r2, [pc, #764]	; (8002684 <UART_SetConfig+0x380>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 80bd 	bne.w	8002506 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800238c:	f7ff fc26 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002390:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	461d      	mov	r5, r3
 8002396:	f04f 0600 	mov.w	r6, #0
 800239a:	46a8      	mov	r8, r5
 800239c:	46b1      	mov	r9, r6
 800239e:	eb18 0308 	adds.w	r3, r8, r8
 80023a2:	eb49 0409 	adc.w	r4, r9, r9
 80023a6:	4698      	mov	r8, r3
 80023a8:	46a1      	mov	r9, r4
 80023aa:	eb18 0805 	adds.w	r8, r8, r5
 80023ae:	eb49 0906 	adc.w	r9, r9, r6
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023c6:	4688      	mov	r8, r1
 80023c8:	4691      	mov	r9, r2
 80023ca:	eb18 0005 	adds.w	r0, r8, r5
 80023ce:	eb49 0106 	adc.w	r1, r9, r6
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	461d      	mov	r5, r3
 80023d8:	f04f 0600 	mov.w	r6, #0
 80023dc:	196b      	adds	r3, r5, r5
 80023de:	eb46 0406 	adc.w	r4, r6, r6
 80023e2:	461a      	mov	r2, r3
 80023e4:	4623      	mov	r3, r4
 80023e6:	f7fd ffa3 	bl	8000330 <__aeabi_uldivmod>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	461a      	mov	r2, r3
 80023f0:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <UART_SetConfig+0x384>)
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	461d      	mov	r5, r3
 8002400:	f04f 0600 	mov.w	r6, #0
 8002404:	46a9      	mov	r9, r5
 8002406:	46b2      	mov	sl, r6
 8002408:	eb19 0309 	adds.w	r3, r9, r9
 800240c:	eb4a 040a 	adc.w	r4, sl, sl
 8002410:	4699      	mov	r9, r3
 8002412:	46a2      	mov	sl, r4
 8002414:	eb19 0905 	adds.w	r9, r9, r5
 8002418:	eb4a 0a06 	adc.w	sl, sl, r6
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800242c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002430:	4689      	mov	r9, r1
 8002432:	4692      	mov	sl, r2
 8002434:	eb19 0005 	adds.w	r0, r9, r5
 8002438:	eb4a 0106 	adc.w	r1, sl, r6
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	461d      	mov	r5, r3
 8002442:	f04f 0600 	mov.w	r6, #0
 8002446:	196b      	adds	r3, r5, r5
 8002448:	eb46 0406 	adc.w	r4, r6, r6
 800244c:	461a      	mov	r2, r3
 800244e:	4623      	mov	r3, r4
 8002450:	f7fd ff6e 	bl	8000330 <__aeabi_uldivmod>
 8002454:	4603      	mov	r3, r0
 8002456:	460c      	mov	r4, r1
 8002458:	461a      	mov	r2, r3
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <UART_SetConfig+0x384>)
 800245c:	fba3 1302 	umull	r1, r3, r3, r2
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	2164      	movs	r1, #100	; 0x64
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	3332      	adds	r3, #50	; 0x32
 800246e:	4a86      	ldr	r2, [pc, #536]	; (8002688 <UART_SetConfig+0x384>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800247c:	4498      	add	r8, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	461d      	mov	r5, r3
 8002482:	f04f 0600 	mov.w	r6, #0
 8002486:	46a9      	mov	r9, r5
 8002488:	46b2      	mov	sl, r6
 800248a:	eb19 0309 	adds.w	r3, r9, r9
 800248e:	eb4a 040a 	adc.w	r4, sl, sl
 8002492:	4699      	mov	r9, r3
 8002494:	46a2      	mov	sl, r4
 8002496:	eb19 0905 	adds.w	r9, r9, r5
 800249a:	eb4a 0a06 	adc.w	sl, sl, r6
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b2:	4689      	mov	r9, r1
 80024b4:	4692      	mov	sl, r2
 80024b6:	eb19 0005 	adds.w	r0, r9, r5
 80024ba:	eb4a 0106 	adc.w	r1, sl, r6
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	461d      	mov	r5, r3
 80024c4:	f04f 0600 	mov.w	r6, #0
 80024c8:	196b      	adds	r3, r5, r5
 80024ca:	eb46 0406 	adc.w	r4, r6, r6
 80024ce:	461a      	mov	r2, r3
 80024d0:	4623      	mov	r3, r4
 80024d2:	f7fd ff2d 	bl	8000330 <__aeabi_uldivmod>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	461a      	mov	r2, r3
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <UART_SetConfig+0x384>)
 80024de:	fba3 1302 	umull	r1, r3, r3, r2
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2164      	movs	r1, #100	; 0x64
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	3332      	adds	r3, #50	; 0x32
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <UART_SetConfig+0x384>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	f003 0207 	and.w	r2, r3, #7
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4442      	add	r2, r8
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	e26f      	b.n	80029e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002506:	f7ff fb55 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 800250a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	461d      	mov	r5, r3
 8002510:	f04f 0600 	mov.w	r6, #0
 8002514:	46a8      	mov	r8, r5
 8002516:	46b1      	mov	r9, r6
 8002518:	eb18 0308 	adds.w	r3, r8, r8
 800251c:	eb49 0409 	adc.w	r4, r9, r9
 8002520:	4698      	mov	r8, r3
 8002522:	46a1      	mov	r9, r4
 8002524:	eb18 0805 	adds.w	r8, r8, r5
 8002528:	eb49 0906 	adc.w	r9, r9, r6
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002538:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800253c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002540:	4688      	mov	r8, r1
 8002542:	4691      	mov	r9, r2
 8002544:	eb18 0005 	adds.w	r0, r8, r5
 8002548:	eb49 0106 	adc.w	r1, r9, r6
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461d      	mov	r5, r3
 8002552:	f04f 0600 	mov.w	r6, #0
 8002556:	196b      	adds	r3, r5, r5
 8002558:	eb46 0406 	adc.w	r4, r6, r6
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	f7fd fee6 	bl	8000330 <__aeabi_uldivmod>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	461a      	mov	r2, r3
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <UART_SetConfig+0x384>)
 800256c:	fba3 2302 	umull	r2, r3, r3, r2
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	461d      	mov	r5, r3
 800257a:	f04f 0600 	mov.w	r6, #0
 800257e:	46a9      	mov	r9, r5
 8002580:	46b2      	mov	sl, r6
 8002582:	eb19 0309 	adds.w	r3, r9, r9
 8002586:	eb4a 040a 	adc.w	r4, sl, sl
 800258a:	4699      	mov	r9, r3
 800258c:	46a2      	mov	sl, r4
 800258e:	eb19 0905 	adds.w	r9, r9, r5
 8002592:	eb4a 0a06 	adc.w	sl, sl, r6
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025aa:	4689      	mov	r9, r1
 80025ac:	4692      	mov	sl, r2
 80025ae:	eb19 0005 	adds.w	r0, r9, r5
 80025b2:	eb4a 0106 	adc.w	r1, sl, r6
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	461d      	mov	r5, r3
 80025bc:	f04f 0600 	mov.w	r6, #0
 80025c0:	196b      	adds	r3, r5, r5
 80025c2:	eb46 0406 	adc.w	r4, r6, r6
 80025c6:	461a      	mov	r2, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	f7fd feb1 	bl	8000330 <__aeabi_uldivmod>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <UART_SetConfig+0x384>)
 80025d6:	fba3 1302 	umull	r1, r3, r3, r2
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2164      	movs	r1, #100	; 0x64
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	3332      	adds	r3, #50	; 0x32
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <UART_SetConfig+0x384>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f6:	4498      	add	r8, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	461d      	mov	r5, r3
 80025fc:	f04f 0600 	mov.w	r6, #0
 8002600:	46a9      	mov	r9, r5
 8002602:	46b2      	mov	sl, r6
 8002604:	eb19 0309 	adds.w	r3, r9, r9
 8002608:	eb4a 040a 	adc.w	r4, sl, sl
 800260c:	4699      	mov	r9, r3
 800260e:	46a2      	mov	sl, r4
 8002610:	eb19 0905 	adds.w	r9, r9, r5
 8002614:	eb4a 0a06 	adc.w	sl, sl, r6
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800262c:	4689      	mov	r9, r1
 800262e:	4692      	mov	sl, r2
 8002630:	eb19 0005 	adds.w	r0, r9, r5
 8002634:	eb4a 0106 	adc.w	r1, sl, r6
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	461d      	mov	r5, r3
 800263e:	f04f 0600 	mov.w	r6, #0
 8002642:	196b      	adds	r3, r5, r5
 8002644:	eb46 0406 	adc.w	r4, r6, r6
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	f7fd fe70 	bl	8000330 <__aeabi_uldivmod>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	461a      	mov	r2, r3
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <UART_SetConfig+0x384>)
 8002658:	fba3 1302 	umull	r1, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <UART_SetConfig+0x384>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 0207 	and.w	r2, r3, #7
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4442      	add	r2, r8
 800267c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800267e:	e1b2      	b.n	80029e6 <UART_SetConfig+0x6e2>
 8002680:	40011000 	.word	0x40011000
 8002684:	40011400 	.word	0x40011400
 8002688:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4ad7      	ldr	r2, [pc, #860]	; (80029f0 <UART_SetConfig+0x6ec>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d005      	beq.n	80026a2 <UART_SetConfig+0x39e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4ad6      	ldr	r2, [pc, #856]	; (80029f4 <UART_SetConfig+0x6f0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	f040 80d1 	bne.w	8002844 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80026a2:	f7ff fa9b 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 80026a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	469a      	mov	sl, r3
 80026ac:	f04f 0b00 	mov.w	fp, #0
 80026b0:	46d0      	mov	r8, sl
 80026b2:	46d9      	mov	r9, fp
 80026b4:	eb18 0308 	adds.w	r3, r8, r8
 80026b8:	eb49 0409 	adc.w	r4, r9, r9
 80026bc:	4698      	mov	r8, r3
 80026be:	46a1      	mov	r9, r4
 80026c0:	eb18 080a 	adds.w	r8, r8, sl
 80026c4:	eb49 090b 	adc.w	r9, r9, fp
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026dc:	4688      	mov	r8, r1
 80026de:	4691      	mov	r9, r2
 80026e0:	eb1a 0508 	adds.w	r5, sl, r8
 80026e4:	eb4b 0609 	adc.w	r6, fp, r9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	0094      	lsls	r4, r2, #2
 80026fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002700:	008b      	lsls	r3, r1, #2
 8002702:	461a      	mov	r2, r3
 8002704:	4623      	mov	r3, r4
 8002706:	4628      	mov	r0, r5
 8002708:	4631      	mov	r1, r6
 800270a:	f7fd fe11 	bl	8000330 <__aeabi_uldivmod>
 800270e:	4603      	mov	r3, r0
 8002710:	460c      	mov	r4, r1
 8002712:	461a      	mov	r2, r3
 8002714:	4bb8      	ldr	r3, [pc, #736]	; (80029f8 <UART_SetConfig+0x6f4>)
 8002716:	fba3 2302 	umull	r2, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	469b      	mov	fp, r3
 8002724:	f04f 0c00 	mov.w	ip, #0
 8002728:	46d9      	mov	r9, fp
 800272a:	46e2      	mov	sl, ip
 800272c:	eb19 0309 	adds.w	r3, r9, r9
 8002730:	eb4a 040a 	adc.w	r4, sl, sl
 8002734:	4699      	mov	r9, r3
 8002736:	46a2      	mov	sl, r4
 8002738:	eb19 090b 	adds.w	r9, r9, fp
 800273c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800274c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002754:	4689      	mov	r9, r1
 8002756:	4692      	mov	sl, r2
 8002758:	eb1b 0509 	adds.w	r5, fp, r9
 800275c:	eb4c 060a 	adc.w	r6, ip, sl
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4619      	mov	r1, r3
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0094      	lsls	r4, r2, #2
 8002774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002778:	008b      	lsls	r3, r1, #2
 800277a:	461a      	mov	r2, r3
 800277c:	4623      	mov	r3, r4
 800277e:	4628      	mov	r0, r5
 8002780:	4631      	mov	r1, r6
 8002782:	f7fd fdd5 	bl	8000330 <__aeabi_uldivmod>
 8002786:	4603      	mov	r3, r0
 8002788:	460c      	mov	r4, r1
 800278a:	461a      	mov	r2, r3
 800278c:	4b9a      	ldr	r3, [pc, #616]	; (80029f8 <UART_SetConfig+0x6f4>)
 800278e:	fba3 1302 	umull	r1, r3, r3, r2
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2164      	movs	r1, #100	; 0x64
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	3332      	adds	r3, #50	; 0x32
 80027a0:	4a95      	ldr	r2, [pc, #596]	; (80029f8 <UART_SetConfig+0x6f4>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4498      	add	r8, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	469b      	mov	fp, r3
 80027b2:	f04f 0c00 	mov.w	ip, #0
 80027b6:	46d9      	mov	r9, fp
 80027b8:	46e2      	mov	sl, ip
 80027ba:	eb19 0309 	adds.w	r3, r9, r9
 80027be:	eb4a 040a 	adc.w	r4, sl, sl
 80027c2:	4699      	mov	r9, r3
 80027c4:	46a2      	mov	sl, r4
 80027c6:	eb19 090b 	adds.w	r9, r9, fp
 80027ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027e2:	4689      	mov	r9, r1
 80027e4:	4692      	mov	sl, r2
 80027e6:	eb1b 0509 	adds.w	r5, fp, r9
 80027ea:	eb4c 060a 	adc.w	r6, ip, sl
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	f04f 0400 	mov.w	r4, #0
 8002800:	0094      	lsls	r4, r2, #2
 8002802:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002806:	008b      	lsls	r3, r1, #2
 8002808:	461a      	mov	r2, r3
 800280a:	4623      	mov	r3, r4
 800280c:	4628      	mov	r0, r5
 800280e:	4631      	mov	r1, r6
 8002810:	f7fd fd8e 	bl	8000330 <__aeabi_uldivmod>
 8002814:	4603      	mov	r3, r0
 8002816:	460c      	mov	r4, r1
 8002818:	461a      	mov	r2, r3
 800281a:	4b77      	ldr	r3, [pc, #476]	; (80029f8 <UART_SetConfig+0x6f4>)
 800281c:	fba3 1302 	umull	r1, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	2164      	movs	r1, #100	; 0x64
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	3332      	adds	r3, #50	; 0x32
 800282e:	4a72      	ldr	r2, [pc, #456]	; (80029f8 <UART_SetConfig+0x6f4>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4442      	add	r2, r8
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	e0d0      	b.n	80029e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002844:	f7ff f9b6 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002848:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	469a      	mov	sl, r3
 800284e:	f04f 0b00 	mov.w	fp, #0
 8002852:	46d0      	mov	r8, sl
 8002854:	46d9      	mov	r9, fp
 8002856:	eb18 0308 	adds.w	r3, r8, r8
 800285a:	eb49 0409 	adc.w	r4, r9, r9
 800285e:	4698      	mov	r8, r3
 8002860:	46a1      	mov	r9, r4
 8002862:	eb18 080a 	adds.w	r8, r8, sl
 8002866:	eb49 090b 	adc.w	r9, r9, fp
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002876:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800287a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800287e:	4688      	mov	r8, r1
 8002880:	4691      	mov	r9, r2
 8002882:	eb1a 0508 	adds.w	r5, sl, r8
 8002886:	eb4b 0609 	adc.w	r6, fp, r9
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	0094      	lsls	r4, r2, #2
 800289e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028a2:	008b      	lsls	r3, r1, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	4628      	mov	r0, r5
 80028aa:	4631      	mov	r1, r6
 80028ac:	f7fd fd40 	bl	8000330 <__aeabi_uldivmod>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <UART_SetConfig+0x6f4>)
 80028b8:	fba3 2302 	umull	r2, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	469b      	mov	fp, r3
 80028c6:	f04f 0c00 	mov.w	ip, #0
 80028ca:	46d9      	mov	r9, fp
 80028cc:	46e2      	mov	sl, ip
 80028ce:	eb19 0309 	adds.w	r3, r9, r9
 80028d2:	eb4a 040a 	adc.w	r4, sl, sl
 80028d6:	4699      	mov	r9, r3
 80028d8:	46a2      	mov	sl, r4
 80028da:	eb19 090b 	adds.w	r9, r9, fp
 80028de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f6:	4689      	mov	r9, r1
 80028f8:	4692      	mov	sl, r2
 80028fa:	eb1b 0509 	adds.w	r5, fp, r9
 80028fe:	eb4c 060a 	adc.w	r6, ip, sl
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f04f 0400 	mov.w	r4, #0
 8002914:	0094      	lsls	r4, r2, #2
 8002916:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	461a      	mov	r2, r3
 800291e:	4623      	mov	r3, r4
 8002920:	4628      	mov	r0, r5
 8002922:	4631      	mov	r1, r6
 8002924:	f7fd fd04 	bl	8000330 <__aeabi_uldivmod>
 8002928:	4603      	mov	r3, r0
 800292a:	460c      	mov	r4, r1
 800292c:	461a      	mov	r2, r3
 800292e:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <UART_SetConfig+0x6f4>)
 8002930:	fba3 1302 	umull	r1, r3, r3, r2
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	2164      	movs	r1, #100	; 0x64
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <UART_SetConfig+0x6f4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294e:	4498      	add	r8, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	469b      	mov	fp, r3
 8002954:	f04f 0c00 	mov.w	ip, #0
 8002958:	46d9      	mov	r9, fp
 800295a:	46e2      	mov	sl, ip
 800295c:	eb19 0309 	adds.w	r3, r9, r9
 8002960:	eb4a 040a 	adc.w	r4, sl, sl
 8002964:	4699      	mov	r9, r3
 8002966:	46a2      	mov	sl, r4
 8002968:	eb19 090b 	adds.w	r9, r9, fp
 800296c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800297c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002984:	4689      	mov	r9, r1
 8002986:	4692      	mov	sl, r2
 8002988:	eb1b 0509 	adds.w	r5, fp, r9
 800298c:	eb4c 060a 	adc.w	r6, ip, sl
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	0094      	lsls	r4, r2, #2
 80029a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029a8:	008b      	lsls	r3, r1, #2
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	4631      	mov	r1, r6
 80029b2:	f7fd fcbd 	bl	8000330 <__aeabi_uldivmod>
 80029b6:	4603      	mov	r3, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <UART_SetConfig+0x6f4>)
 80029be:	fba3 1302 	umull	r1, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2164      	movs	r1, #100	; 0x64
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	3332      	adds	r3, #50	; 0x32
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <UART_SetConfig+0x6f4>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4442      	add	r2, r8
 80029e2:	609a      	str	r2, [r3, #8]
}
 80029e4:	e7ff      	b.n	80029e6 <UART_SetConfig+0x6e2>
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	51eb851f 	.word	0x51eb851f

080029fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f103 0208 	add.w	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 0208 	add.w	r2, r3, #8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d103      	bne.n	8002abe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e00c      	b.n	8002ad8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e002      	b.n	8002acc <vListInsert+0x2e>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d2f6      	bcs.n	8002ac6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d103      	bne.n	8002b44 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <xQueueGenericReset+0x28>
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	e7fe      	b.n	8002b8a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002b8c:	f001 fe08 	bl	80047a0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d114      	bne.n	8002c0c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01a      	beq.n	8002c20 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3310      	adds	r3, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8f6 	bl	8003de0 <xTaskRemoveFromEventList>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <xQueueGenericReset+0xcc>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	e009      	b.n	8002c20 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fef3 	bl	80029fc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff feee 	bl	80029fc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002c20:	f001 fdec 	bl	80047fc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <xQueueGenericCreate+0x28>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e7fe      	b.n	8002c5a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <xQueueGenericCreate+0x46>
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericCreate+0x4a>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericCreate+0x4c>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <xQueueGenericCreate+0x64>
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e7fe      	b.n	8002c96 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c9e:	d909      	bls.n	8002cb4 <xQueueGenericCreate+0x80>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fe93 	bl	80049e4 <pvPortMalloc>
 8002cbe:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3350      	adds	r3, #80	; 0x50
 8002cce:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f805 	bl	8002cec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
    }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	69b8      	ldr	r0, [r7, #24]
 8002d1e:	f7ff ff21 	bl	8002b64 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	2073      	movs	r0, #115	; 0x73
 8002d32:	f002 ff3d 	bl	8005bb0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	; 0x38
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <xQueueGenericSend+0x30>
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	e7fe      	b.n	8002d6e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x3e>
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSend+0x42>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSend+0x44>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <xQueueGenericSend+0x5c>
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e7fe      	b.n	8002d9a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x6a>
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x6e>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x70>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <xQueueGenericSend+0x88>
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueGenericSend+0x86>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dc8:	f001 fcea 	bl	80047a0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <xQueueGenericSend+0x9e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d136      	bne.n	8002e4c <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fc71 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	460b      	mov	r3, r1
 8002df0:	4601      	mov	r1, r0
 8002df2:	205a      	movs	r0, #90	; 0x5a
 8002df4:	f002 ff52 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 fae3 	bl	80033c8 <prvCopyDataToQueue>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	3324      	adds	r3, #36	; 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 ffe5 	bl	8003de0 <xTaskRemoveFromEventList>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <xQueueGenericSend+0x210>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	e00a      	b.n	8002e44 <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <xQueueGenericSend+0x210>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e44:	f001 fcda 	bl	80047fc <vPortExitCritical>
                return pdPASS;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e07d      	b.n	8002f48 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d110      	bne.n	8002e74 <xQueueGenericSend+0x134>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e52:	f001 fcd3 	bl	80047fc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fc35 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	4601      	mov	r1, r0
 8002e6a:	205a      	movs	r0, #90	; 0x5a
 8002e6c:	f002 ff16 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e069      	b.n	8002f48 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <xQueueGenericSend+0x148>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f814 	bl	8003eac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e88:	f001 fcb8 	bl	80047fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e8c:	f000 fda0 	bl	80039d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e90:	f001 fc86 	bl	80047a0 <vPortEnterCritical>
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSend+0x16a>
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb6:	d103      	bne.n	8002ec0 <xQueueGenericSend+0x180>
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec0:	f001 fc9c 	bl	80047fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec4:	1d3a      	adds	r2, r7, #4
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f803 	bl	8003ed8 <xTaskCheckForTimeOut>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d124      	bne.n	8002f22 <xQueueGenericSend+0x1e2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 fb6d 	bl	80035b8 <prvIsQueueFull>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d018      	beq.n	8002f16 <xQueueGenericSend+0x1d6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 ff53 	bl	8003d98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef4:	f000 faf8 	bl	80034e8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002ef8:	f000 fd78 	bl	80039ec <xTaskResumeAll>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f47f af62 	bne.w	8002dc8 <xQueueGenericSend+0x88>
                {
                    portYIELD_WITHIN_API();
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <xQueueGenericSend+0x210>)
 8002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	e758      	b.n	8002dc8 <xQueueGenericSend+0x88>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f18:	f000 fae6 	bl	80034e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f1c:	f000 fd66 	bl	80039ec <xTaskResumeAll>
 8002f20:	e752      	b.n	8002dc8 <xQueueGenericSend+0x88>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f24:	f000 fae0 	bl	80034e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f28:	f000 fd60 	bl	80039ec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fbca 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4601      	mov	r1, r0
 8002f40:	205a      	movs	r0, #90	; 0x5a
 8002f42:	f002 feab 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002f46:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3730      	adds	r7, #48	; 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08f      	sub	sp, #60	; 0x3c
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <xQueueReceive+0x2e>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	e7fe      	b.n	8002f80 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <xQueueReceive+0x3c>
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <xQueueReceive+0x40>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <xQueueReceive+0x42>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <xQueueReceive+0x5a>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e7fe      	b.n	8002fac <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fae:	f001 fbf7 	bl	80047a0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d031      	beq.n	8003022 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc2:	f000 fa6b 	bl	800349c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fb7d 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8002fce:	4604      	mov	r4, r0
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f003 fb79 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	205c      	movs	r0, #92	; 0x5c
 8002fe6:	f002 fe59 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 feee 	bl	8003de0 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800300a:	4b4f      	ldr	r3, [pc, #316]	; (8003148 <xQueueReceive+0x1f4>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800301a:	f001 fbef 	bl	80047fc <vPortExitCritical>
                return pdPASS;
 800301e:	2301      	movs	r3, #1
 8003020:	e08e      	b.n	8003140 <xQueueReceive+0x1ec>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d115      	bne.n	8003054 <xQueueReceive+0x100>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003028:	f001 fbe8 	bl	80047fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fb4a 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8003034:	4604      	mov	r4, r0
 8003036:	2000      	movs	r0, #0
 8003038:	f003 fb46 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 800303c:	4601      	mov	r1, r0
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	2301      	movs	r3, #1
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	460a      	mov	r2, r1
 8003048:	4621      	mov	r1, r4
 800304a:	205c      	movs	r0, #92	; 0x5c
 800304c:	f002 fe26 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003050:	2300      	movs	r3, #0
 8003052:	e075      	b.n	8003140 <xQueueReceive+0x1ec>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <xQueueReceive+0x114>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff24 	bl	8003eac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003068:	f001 fbc8 	bl	80047fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800306c:	f000 fcb0 	bl	80039d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003070:	f001 fb96 	bl	80047a0 <vPortEnterCritical>
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800307a:	b25b      	sxtb	r3, r3
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x136>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003090:	b25b      	sxtb	r3, r3
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003096:	d103      	bne.n	80030a0 <xQueueReceive+0x14c>
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a0:	f001 fbac 	bl	80047fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030a4:	1d3a      	adds	r2, r7, #4
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ff13 	bl	8003ed8 <xTaskCheckForTimeOut>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d124      	bne.n	8003102 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 fa67 	bl	800358c <prvIsQueueEmpty>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d018      	beq.n	80030f6 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	3324      	adds	r3, #36	; 0x24
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fe63 	bl	8003d98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d4:	f000 fa08 	bl	80034e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030d8:	f000 fc88 	bl	80039ec <xTaskResumeAll>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f af65 	bne.w	8002fae <xQueueReceive+0x5a>
                {
                    portYIELD_WITHIN_API();
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <xQueueReceive+0x1f4>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	e75b      	b.n	8002fae <xQueueReceive+0x5a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f8:	f000 f9f6 	bl	80034e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030fc:	f000 fc76 	bl	80039ec <xTaskResumeAll>
 8003100:	e755      	b.n	8002fae <xQueueReceive+0x5a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003104:	f000 f9f0 	bl	80034e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003108:	f000 fc70 	bl	80039ec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800310c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310e:	f000 fa3d 	bl	800358c <prvIsQueueEmpty>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	f43f af4a 	beq.w	8002fae <xQueueReceive+0x5a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fad3 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8003122:	4604      	mov	r4, r0
 8003124:	2000      	movs	r0, #0
 8003126:	f003 facf 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 800312a:	4601      	mov	r1, r0
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	2301      	movs	r3, #1
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	460a      	mov	r2, r1
 8003136:	4621      	mov	r1, r4
 8003138:	205c      	movs	r0, #92	; 0x5c
 800313a:	f002 fdaf 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800313e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003140:	4618      	mov	r0, r3
 8003142:	3734      	adds	r7, #52	; 0x34
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08f      	sub	sp, #60	; 0x3c
 8003150:	af02      	add	r7, sp, #8
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <xQueueSemaphoreTake+0x30>
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e7fe      	b.n	800317a <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <xQueueSemaphoreTake+0x4c>
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e7fe      	b.n	8003196 <xQueueSemaphoreTake+0x4a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003198:	f001 fb02 	bl	80047a0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d036      	beq.n	8003216 <xQueueSemaphoreTake+0xca>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fa8c 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 80031b0:	4604      	mov	r4, r0
 80031b2:	2000      	movs	r0, #0
 80031b4:	f003 fa88 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 80031b8:	4601      	mov	r1, r0
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	460a      	mov	r2, r1
 80031c4:	4621      	mov	r1, r4
 80031c6:	205c      	movs	r0, #92	; 0x5c
 80031c8:	f002 fd68 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <xQueueSemaphoreTake+0x9a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031dc:	f001 f92a 	bl	8004434 <pvTaskIncrementMutexHeldCount>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00f      	beq.n	800320e <xQueueSemaphoreTake+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	3310      	adds	r3, #16
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fdf4 	bl	8003de0 <xTaskRemoveFromEventList>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <xQueueSemaphoreTake+0xc2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <xQueueSemaphoreTake+0x248>)
 8003200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800320e:	f001 faf5 	bl	80047fc <vPortExitCritical>
                return pdPASS;
 8003212:	2301      	movs	r3, #1
 8003214:	e0ba      	b.n	800338c <xQueueSemaphoreTake+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d122      	bne.n	8003262 <xQueueSemaphoreTake+0x116>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <xQueueSemaphoreTake+0xea>
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e7fe      	b.n	8003234 <xQueueSemaphoreTake+0xe8>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003236:	f001 fae1 	bl	80047fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	4618      	mov	r0, r3
 800323e:	f003 fa43 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8003242:	4604      	mov	r4, r0
 8003244:	2000      	movs	r0, #0
 8003246:	f003 fa3f 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 800324a:	4601      	mov	r1, r0
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	2301      	movs	r3, #1
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	460a      	mov	r2, r1
 8003256:	4621      	mov	r1, r4
 8003258:	205c      	movs	r0, #92	; 0x5c
 800325a:	f002 fd1f 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800325e:	2300      	movs	r3, #0
 8003260:	e094      	b.n	800338c <xQueueSemaphoreTake+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <xQueueSemaphoreTake+0x12a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe1d 	bl	8003eac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003276:	f001 fac1 	bl	80047fc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800327a:	f000 fba9 	bl	80039d0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800327e:	f001 fa8f 	bl	80047a0 <vPortEnterCritical>
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d103      	bne.n	8003298 <xQueueSemaphoreTake+0x14c>
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d103      	bne.n	80032ae <xQueueSemaphoreTake+0x162>
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ae:	f001 faa5 	bl	80047fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b2:	463a      	mov	r2, r7
 80032b4:	f107 0308 	add.w	r3, r7, #8
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fe0c 	bl	8003ed8 <xTaskCheckForTimeOut>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d132      	bne.n	800332c <xQueueSemaphoreTake+0x1e0>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c8:	f000 f960 	bl	800358c <prvIsQueueEmpty>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d026      	beq.n	8003320 <xQueueSemaphoreTake+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <xQueueSemaphoreTake+0x1a2>
                        {
                            taskENTER_CRITICAL();
 80032da:	f001 fa61 	bl	80047a0 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff18 	bl	8004118 <xTaskPriorityInherit>
 80032e8:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 80032ea:	f001 fa87 	bl	80047fc <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	3324      	adds	r3, #36	; 0x24
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd4e 	bl	8003d98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032fe:	f000 f8f3 	bl	80034e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003302:	f000 fb73 	bl	80039ec <xTaskResumeAll>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af45 	bne.w	8003198 <xQueueSemaphoreTake+0x4c>
                {
                    portYIELD_WITHIN_API();
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <xQueueSemaphoreTake+0x248>)
 8003310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	e73b      	b.n	8003198 <xQueueSemaphoreTake+0x4c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003322:	f000 f8e1 	bl	80034e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003326:	f000 fb61 	bl	80039ec <xTaskResumeAll>
 800332a:	e735      	b.n	8003198 <xQueueSemaphoreTake+0x4c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800332c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800332e:	f000 f8db 	bl	80034e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003332:	f000 fb5b 	bl	80039ec <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003338:	f000 f928 	bl	800358c <prvIsQueueEmpty>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	f43f af2a 	beq.w	8003198 <xQueueSemaphoreTake+0x4c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <xQueueSemaphoreTake+0x21a>
                        {
                            taskENTER_CRITICAL();
 800334a:	f001 fa29 	bl	80047a0 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800334e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003350:	f000 f822 	bl	8003398 <prvGetDisinheritPriorityAfterTimeout>
 8003354:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	69f9      	ldr	r1, [r7, #28]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 ffd3 	bl	8004308 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003362:	f001 fa4b 	bl	80047fc <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	4618      	mov	r0, r3
 800336a:	f003 f9ad 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 800336e:	4604      	mov	r4, r0
 8003370:	2000      	movs	r0, #0
 8003372:	f003 f9a9 	bl	80066c8 <SEGGER_SYSVIEW_ShrinkId>
 8003376:	4601      	mov	r1, r0
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	2301      	movs	r3, #1
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	460a      	mov	r2, r1
 8003382:	4621      	mov	r1, r4
 8003384:	205c      	movs	r0, #92	; 0x5c
 8003386:	f002 fc89 	bl	8005c9c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800338a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800338c:	4618      	mov	r0, r3
 800338e:	3734      	adds	r7, #52	; 0x34
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1c3 0305 	rsb	r3, r3, #5
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e001      	b.n	80033ba <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80033ba:	68fb      	ldr	r3, [r7, #12]
    }
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d14d      	bne.n	800348a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ff0a 	bl	800420c <xTaskPriorityDisinherit>
 80033f8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e043      	b.n	800348a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d119      	bne.n	800343c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6858      	ldr	r0, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	461a      	mov	r2, r3
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	f003 fad9 	bl	80069ca <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d32b      	bcc.n	800348a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e026      	b.n	800348a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68d8      	ldr	r0, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	461a      	mov	r2, r3
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	f003 fabf 	bl	80069ca <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	425b      	negs	r3, r3
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	425b      	negs	r3, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d105      	bne.n	800348a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003492:	697b      	ldr	r3, [r7, #20]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	441a      	add	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d303      	bcc.n	80034d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68d9      	ldr	r1, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	461a      	mov	r2, r3
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f003 fa75 	bl	80069ca <memcpy>
    }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80034f0:	f001 f956 	bl	80047a0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034fc:	e011      	b.n	8003522 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d012      	beq.n	800352c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fc68 	bl	8003de0 <xTaskRemoveFromEventList>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003516:	f000 fd43 	bl	8003fa0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3b01      	subs	r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	dce9      	bgt.n	80034fe <prvUnlockQueue+0x16>
 800352a:	e000      	b.n	800352e <prvUnlockQueue+0x46>
                        break;
 800352c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003536:	f001 f961 	bl	80047fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800353a:	f001 f931 	bl	80047a0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003544:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003546:	e011      	b.n	800356c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3310      	adds	r3, #16
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fc43 	bl	8003de0 <xTaskRemoveFromEventList>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003560:	f000 fd1e 	bl	8003fa0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	3b01      	subs	r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800356c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003570:	2b00      	cmp	r3, #0
 8003572:	dce9      	bgt.n	8003548 <prvUnlockQueue+0x60>
 8003574:	e000      	b.n	8003578 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003576:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003580:	f001 f93c 	bl	80047fc <vPortExitCritical>
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003594:	f001 f904 	bl	80047a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e001      	b.n	80035aa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035aa:	f001 f927 	bl	80047fc <vPortExitCritical>

    return xReturn;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035c0:	f001 f8ee 	bl	80047a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d102      	bne.n	80035d6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e001      	b.n	80035da <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035da:	f001 f90f 	bl	80047fc <vPortExitCritical>

    return xReturn;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 f9f1 	bl	80049e4 <pvPortMalloc>
 8003602:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800360a:	2058      	movs	r0, #88	; 0x58
 800360c:	f001 f9ea 	bl	80049e4 <pvPortMalloc>
 8003610:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	e005      	b.n	800362c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f001 fabb 	bl	8004b9c <vPortFree>
 8003626:	e001      	b.n	800362c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d013      	beq.n	800365a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	2300      	movs	r3, #0
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	9302      	str	r3, [sp, #8]
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f80e 	bl	800366a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800364e:	69f8      	ldr	r0, [r7, #28]
 8003650:	f000 f8a0 	bl	8003794 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003654:	2301      	movs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e002      	b.n	8003660 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800365e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003660:	69bb      	ldr	r3, [r7, #24]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b088      	sub	sp, #32
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	21a5      	movs	r1, #165	; 0xa5
 8003684:	f003 f9ac 	bl	80069e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003692:	3b01      	subs	r3, #1
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f023 0307 	bic.w	r3, r3, #7
 80036a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <prvInitialiseNewTask+0x56>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e7fe      	b.n	80036be <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01f      	beq.n	8003706 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e012      	b.n	80036f2 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	7819      	ldrb	r1, [r3, #0]
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	3334      	adds	r3, #52	; 0x34
 80036dc:	460a      	mov	r2, r1
 80036de:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d9e9      	bls.n	80036cc <prvInitialiseNewTask+0x62>
 80036f8:	e000      	b.n	80036fc <prvInitialiseNewTask+0x92>
            {
                break;
 80036fa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003704:	e003      	b.n	800370e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	2b04      	cmp	r3, #4
 8003712:	d901      	bls.n	8003718 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003714:	2304      	movs	r3, #4
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	3304      	adds	r3, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f984 	bl	8002a3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	3318      	adds	r3, #24
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff f97f 	bl	8002a3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003742:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	f1c3 0205 	rsb	r2, r3, #5
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	3350      	adds	r3, #80	; 0x50
 8003758:	2204      	movs	r2, #4
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f003 f93f 	bl	80069e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	3354      	adds	r3, #84	; 0x54
 8003766:	2201      	movs	r2, #1
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f003 f938 	bl	80069e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	69b8      	ldr	r0, [r7, #24]
 8003776:	f000 fee9 	bl	800454c <pxPortInitialiseStack>
 800377a:	4602      	mov	r2, r0
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003794:	b5b0      	push	{r4, r5, r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800379c:	f001 f800 	bl	80047a0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <prvAddNewTaskToReadyList+0xfc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <prvAddNewTaskToReadyList+0xfc>)
 80037a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <prvAddNewTaskToReadyList+0x100>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <prvAddNewTaskToReadyList+0x100>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b8:	4b35      	ldr	r3, [pc, #212]	; (8003890 <prvAddNewTaskToReadyList+0xfc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d110      	bne.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80037c0:	f000 fc12 	bl	8003fe8 <prvInitialiseTaskLists>
 80037c4:	e00d      	b.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80037c6:	4b34      	ldr	r3, [pc, #208]	; (8003898 <prvAddNewTaskToReadyList+0x104>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <prvAddNewTaskToReadyList+0x100>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	429a      	cmp	r2, r3
 80037da:	d802      	bhi.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <prvAddNewTaskToReadyList+0x100>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <prvAddNewTaskToReadyList+0x108>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a2c      	ldr	r2, [pc, #176]	; (800389c <prvAddNewTaskToReadyList+0x108>)
 80037ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <prvAddNewTaskToReadyList+0x108>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <prvAddNewTaskToReadyList+0x94>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fe3d 	bl	800647c <SEGGER_SYSVIEW_OnTaskCreate>
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	461d      	mov	r5, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461c      	mov	r4, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	1ae3      	subs	r3, r4, r3
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	462b      	mov	r3, r5
 8003824:	f001 fb7e 	bl	8004f24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	f002 feaa 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <prvAddNewTaskToReadyList+0x10c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <prvAddNewTaskToReadyList+0x10c>)
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <prvAddNewTaskToReadyList+0x110>)
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7ff f8fc 	bl	8002a56 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800385e:	f000 ffcd 	bl	80047fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvAddNewTaskToReadyList+0x104>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <prvAddNewTaskToReadyList+0x100>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	429a      	cmp	r2, r3
 8003876:	d207      	bcs.n	8003888 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <prvAddNewTaskToReadyList+0x114>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bdb0      	pop	{r4, r5, r7, pc}
 8003890:	20000170 	.word	0x20000170
 8003894:	20000098 	.word	0x20000098
 8003898:	2000017c 	.word	0x2000017c
 800389c:	2000018c 	.word	0x2000018c
 80038a0:	20000178 	.word	0x20000178
 80038a4:	2000009c 	.word	0x2000009c
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <vTaskDelay+0x68>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <vTaskDelay+0x2e>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	e7fe      	b.n	80038d8 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80038da:	f000 f879 	bl	80039d0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	2023      	movs	r0, #35	; 0x23
 80038e2:	f002 f8cf 	bl	8005a84 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038e6:	2100      	movs	r1, #0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fdb7 	bl	800445c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80038ee:	f000 f87d 	bl	80039ec <xTaskResumeAll>
 80038f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <vTaskDelay+0x6c>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000198 	.word	0x20000198
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <vTaskStartScheduler+0x94>)
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	2282      	movs	r2, #130	; 0x82
 800392e:	4921      	ldr	r1, [pc, #132]	; (80039b4 <vTaskStartScheduler+0x98>)
 8003930:	4821      	ldr	r0, [pc, #132]	; (80039b8 <vTaskStartScheduler+0x9c>)
 8003932:	f7ff fe59 	bl	80035e8 <xTaskCreate>
 8003936:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d123      	bne.n	8003986 <vTaskStartScheduler+0x6a>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <vTaskStartScheduler+0xa0>)
 8003952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003956:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <vTaskStartScheduler+0xa4>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <vTaskStartScheduler+0xa8>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <vTaskStartScheduler+0xac>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <vTaskStartScheduler+0x94>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d102      	bne.n	8003976 <vTaskStartScheduler+0x5a>
 8003970:	f002 fd68 	bl	8006444 <SEGGER_SYSVIEW_OnIdle>
 8003974:	e004      	b.n	8003980 <vTaskStartScheduler+0x64>
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <vTaskStartScheduler+0xac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fdc0 	bl	8006500 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003980:	f000 fe70 	bl	8004664 <xPortStartScheduler>
 8003984:	e00d      	b.n	80039a2 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d109      	bne.n	80039a2 <vTaskStartScheduler+0x86>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	e7fe      	b.n	80039a0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <vTaskStartScheduler+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000194 	.word	0x20000194
 80039b4:	0800734c 	.word	0x0800734c
 80039b8:	08003fb9 	.word	0x08003fb9
 80039bc:	20000190 	.word	0x20000190
 80039c0:	2000017c 	.word	0x2000017c
 80039c4:	20000174 	.word	0x20000174
 80039c8:	20000098 	.word	0x20000098
 80039cc:	2000000c 	.word	0x2000000c

080039d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <vTaskSuspendAll+0x18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <vTaskSuspendAll+0x18>)
 80039dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000198 	.word	0x20000198

080039ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80039fa:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <xTaskResumeAll+0x11c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <xTaskResumeAll+0x2a>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	e7fe      	b.n	8003a14 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003a16:	f000 fec3 	bl	80047a0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <xTaskResumeAll+0x11c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a39      	ldr	r2, [pc, #228]	; (8003b08 <xTaskResumeAll+0x11c>)
 8003a22:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a24:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <xTaskResumeAll+0x11c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d165      	bne.n	8003af8 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <xTaskResumeAll+0x120>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d061      	beq.n	8003af8 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a34:	e032      	b.n	8003a9c <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <xTaskResumeAll+0x124>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3318      	adds	r3, #24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f864 	bl	8002b10 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f85f 	bl	8002b10 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fd95 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	2201      	movs	r2, #1
 8003a60:	409a      	lsls	r2, r3
 8003a62:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <xTaskResumeAll+0x128>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <xTaskResumeAll+0x128>)
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <xTaskResumeAll+0x12c>)
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f7fe ffe7 	bl	8002a56 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <xTaskResumeAll+0x130>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <xTaskResumeAll+0x134>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <xTaskResumeAll+0x124>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1c8      	bne.n	8003a36 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003aaa:	f000 fb19 	bl	80040e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <xTaskResumeAll+0x138>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003aba:	f000 f849 	bl	8003b50 <xTaskIncrementTick>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8003ac4:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <xTaskResumeAll+0x134>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f1      	bne.n	8003aba <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <xTaskResumeAll+0x138>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <xTaskResumeAll+0x134>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <xTaskResumeAll+0x13c>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003af8:	f000 fe80 	bl	80047fc <vPortExitCritical>

    return xAlreadyYielded;
 8003afc:	68bb      	ldr	r3, [r7, #8]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000198 	.word	0x20000198
 8003b0c:	20000170 	.word	0x20000170
 8003b10:	20000130 	.word	0x20000130
 8003b14:	20000178 	.word	0x20000178
 8003b18:	2000009c 	.word	0x2000009c
 8003b1c:	20000098 	.word	0x20000098
 8003b20:	20000184 	.word	0x20000184
 8003b24:	20000180 	.word	0x20000180
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b32:	f000 ff19 	bl	8004968 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <xTaskGetTickCountFromISR+0x20>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003b40:	683b      	ldr	r3, [r7, #0]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000174 	.word	0x20000174

08003b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5a:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <xTaskIncrementTick+0x14c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 8091 	bne.w	8003c86 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b64:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003b6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <xTaskIncrementTick+0x150>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11f      	bne.n	8003bb8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003b78:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <xTaskIncrementTick+0x46>
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	e7fe      	b.n	8003b94 <xTaskIncrementTick+0x44>
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	4b42      	ldr	r3, [pc, #264]	; (8003ca8 <xTaskIncrementTick+0x158>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <xTaskIncrementTick+0x158>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b40      	ldr	r3, [pc, #256]	; (8003cac <xTaskIncrementTick+0x15c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	4a3e      	ldr	r2, [pc, #248]	; (8003cac <xTaskIncrementTick+0x15c>)
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	f000 fa94 	bl	80040e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <xTaskIncrementTick+0x160>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d34c      	bcc.n	8003c5c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bcc:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <xTaskIncrementTick+0x160>)
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd2:	601a      	str	r2, [r3, #0]
                    break;
 8003bd4:	e042      	b.n	8003c5c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <xTaskIncrementTick+0x154>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d203      	bcs.n	8003bf6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003bee:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <xTaskIncrementTick+0x160>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bf4:	e032      	b.n	8003c5c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe ff88 	bl	8002b10 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d004      	beq.n	8003c12 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe ff7f 	bl	8002b10 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fcb5 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <xTaskIncrementTick+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <xTaskIncrementTick+0x164>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <xTaskIncrementTick+0x168>)
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fe ff07 	bl	8002a56 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <xTaskIncrementTick+0x16c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3b5      	bcc.n	8003bc2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5a:	e7b2      	b.n	8003bc2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <xTaskIncrementTick+0x16c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4915      	ldr	r1, [pc, #84]	; (8003cb8 <xTaskIncrementTick+0x168>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d901      	bls.n	8003c78 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <xTaskIncrementTick+0x170>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e004      	b.n	8003c90 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <xTaskIncrementTick+0x174>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <xTaskIncrementTick+0x174>)
 8003c8e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003c90:	697b      	ldr	r3, [r7, #20]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000198 	.word	0x20000198
 8003ca0:	20000174 	.word	0x20000174
 8003ca4:	20000128 	.word	0x20000128
 8003ca8:	2000012c 	.word	0x2000012c
 8003cac:	20000188 	.word	0x20000188
 8003cb0:	20000190 	.word	0x20000190
 8003cb4:	20000178 	.word	0x20000178
 8003cb8:	2000009c 	.word	0x2000009c
 8003cbc:	20000098 	.word	0x20000098
 8003cc0:	20000184 	.word	0x20000184
 8003cc4:	20000180 	.word	0x20000180

08003cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <vTaskSwitchContext+0xb8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <vTaskSwitchContext+0xbc>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003cdc:	e04c      	b.n	8003d78 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <vTaskSwitchContext+0xbc>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <vTaskSwitchContext+0xc0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	f1c3 031f 	rsb	r3, r3, #31
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	4924      	ldr	r1, [pc, #144]	; (8003d8c <vTaskSwitchContext+0xc4>)
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <vTaskSwitchContext+0x5a>
        __asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	e7fe      	b.n	8003d20 <vTaskSwitchContext+0x58>
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <vTaskSwitchContext+0xc4>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3308      	adds	r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d104      	bne.n	8003d52 <vTaskSwitchContext+0x8a>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <vTaskSwitchContext+0xc8>)
 8003d5a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <vTaskSwitchContext+0xc8>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <vTaskSwitchContext+0xcc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d102      	bne.n	8003d6e <vTaskSwitchContext+0xa6>
 8003d68:	f002 fb6c 	bl	8006444 <SEGGER_SYSVIEW_OnIdle>
}
 8003d6c:	e004      	b.n	8003d78 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <vTaskSwitchContext+0xc8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 fbc4 	bl	8006500 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000198 	.word	0x20000198
 8003d84:	20000184 	.word	0x20000184
 8003d88:	20000178 	.word	0x20000178
 8003d8c:	2000009c 	.word	0x2000009c
 8003d90:	20000098 	.word	0x20000098
 8003d94:	20000194 	.word	0x20000194

08003d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <vTaskPlaceOnEventList+0x24>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e7fe      	b.n	8003dba <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dbc:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <vTaskPlaceOnEventList+0x44>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fe fe6a 	bl	8002a9e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dca:	2101      	movs	r1, #1
 8003dcc:	6838      	ldr	r0, [r7, #0]
 8003dce:	f000 fb45 	bl	800445c <prvAddCurrentTaskToDelayedList>
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000098 	.word	0x20000098

08003de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <xTaskRemoveFromEventList+0x2a>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e7fe      	b.n	8003e08 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fe7e 	bl	8002b10 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <xTaskRemoveFromEventList+0xb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d120      	bne.n	8003e5e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fe75 	bl	8002b10 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 fbab 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	2201      	movs	r2, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <xTaskRemoveFromEventList+0xb8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <xTaskRemoveFromEventList+0xb8>)
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <xTaskRemoveFromEventList+0xbc>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fe fdfd 	bl	8002a56 <vListInsertEnd>
 8003e5c:	e005      	b.n	8003e6a <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3318      	adds	r3, #24
 8003e62:	4619      	mov	r1, r3
 8003e64:	480e      	ldr	r0, [pc, #56]	; (8003ea0 <xTaskRemoveFromEventList+0xc0>)
 8003e66:	f7fe fdf6 	bl	8002a56 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <xTaskRemoveFromEventList+0xc4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d905      	bls.n	8003e84 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <xTaskRemoveFromEventList+0xc8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e001      	b.n	8003e88 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003e88:	697b      	ldr	r3, [r7, #20]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000198 	.word	0x20000198
 8003e98:	20000178 	.word	0x20000178
 8003e9c:	2000009c 	.word	0x2000009c
 8003ea0:	20000130 	.word	0x20000130
 8003ea4:	20000098 	.word	0x20000098
 8003ea8:	20000184 	.word	0x20000184

08003eac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <vTaskInternalSetTimeOutState+0x24>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <vTaskInternalSetTimeOutState+0x28>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000188 	.word	0x20000188
 8003ed4:	20000174 	.word	0x20000174

08003ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xTaskCheckForTimeOut+0x24>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e7fe      	b.n	8003efa <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <xTaskCheckForTimeOut+0x3e>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e7fe      	b.n	8003f14 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003f16:	f000 fc43 	bl	80047a0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <xTaskCheckForTimeOut+0xc0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f32:	d102      	bne.n	8003f3a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	e026      	b.n	8003f88 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <xTaskCheckForTimeOut+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d00a      	beq.n	8003f5c <xTaskCheckForTimeOut+0x84>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d305      	bcc.n	8003f5c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e015      	b.n	8003f88 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d20b      	bcs.n	8003f7e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	1ad2      	subs	r2, r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff9a 	bl	8003eac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e004      	b.n	8003f88 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003f88:	f000 fc38 	bl	80047fc <vPortExitCritical>

    return xReturn;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000174 	.word	0x20000174
 8003f9c:	20000188 	.word	0x20000188

08003fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <vTaskMissedYield+0x14>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000184 	.word	0x20000184

08003fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003fc0:	f000 f852 	bl	8004068 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <prvIdleTask+0x28>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d9f9      	bls.n	8003fc0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <prvIdleTask+0x2c>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003fdc:	e7f0      	b.n	8003fc0 <prvIdleTask+0x8>
 8003fde:	bf00      	nop
 8003fe0:	2000009c 	.word	0x2000009c
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	e00c      	b.n	800400e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <prvInitialiseTaskLists+0x60>)
 8004000:	4413      	add	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fcfa 	bl	80029fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d9ef      	bls.n	8003ff4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004014:	480d      	ldr	r0, [pc, #52]	; (800404c <prvInitialiseTaskLists+0x64>)
 8004016:	f7fe fcf1 	bl	80029fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <prvInitialiseTaskLists+0x68>)
 800401c:	f7fe fcee 	bl	80029fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <prvInitialiseTaskLists+0x6c>)
 8004022:	f7fe fceb 	bl	80029fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004026:	480c      	ldr	r0, [pc, #48]	; (8004058 <prvInitialiseTaskLists+0x70>)
 8004028:	f7fe fce8 	bl	80029fc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800402c:	480b      	ldr	r0, [pc, #44]	; (800405c <prvInitialiseTaskLists+0x74>)
 800402e:	f7fe fce5 	bl	80029fc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <prvInitialiseTaskLists+0x78>)
 8004034:	4a05      	ldr	r2, [pc, #20]	; (800404c <prvInitialiseTaskLists+0x64>)
 8004036:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <prvInitialiseTaskLists+0x7c>)
 800403a:	4a05      	ldr	r2, [pc, #20]	; (8004050 <prvInitialiseTaskLists+0x68>)
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000009c 	.word	0x2000009c
 800404c:	20000100 	.word	0x20000100
 8004050:	20000114 	.word	0x20000114
 8004054:	20000130 	.word	0x20000130
 8004058:	20000144 	.word	0x20000144
 800405c:	2000015c 	.word	0x2000015c
 8004060:	20000128 	.word	0x20000128
 8004064:	2000012c 	.word	0x2000012c

08004068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800406e:	e019      	b.n	80040a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004070:	f000 fb96 	bl	80047a0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <prvCheckTasksWaitingTermination+0x4c>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fd45 	bl	8002b10 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <prvCheckTasksWaitingTermination+0x50>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <prvCheckTasksWaitingTermination+0x50>)
 800408e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <prvCheckTasksWaitingTermination+0x54>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3b01      	subs	r3, #1
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <prvCheckTasksWaitingTermination+0x54>)
 8004098:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800409a:	f000 fbaf 	bl	80047fc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f80e 	bl	80040c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <prvCheckTasksWaitingTermination+0x54>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e1      	bne.n	8004070 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000144 	.word	0x20000144
 80040b8:	20000170 	.word	0x20000170
 80040bc:	20000158 	.word	0x20000158

080040c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fd65 	bl	8004b9c <vPortFree>
                vPortFree( pxTCB );
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fd62 	bl	8004b9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <prvResetNextTaskUnblockTime+0x30>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvResetNextTaskUnblockTime+0x34>)
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80040f6:	e005      	b.n	8004104 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <prvResetNextTaskUnblockTime+0x30>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvResetNextTaskUnblockTime+0x34>)
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000128 	.word	0x20000128
 8004114:	20000190 	.word	0x20000190

08004118 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d063      	beq.n	80041f6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4b33      	ldr	r3, [pc, #204]	; (8004200 <xTaskPriorityInherit+0xe8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d253      	bcs.n	80041e4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db06      	blt.n	8004152 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <xTaskPriorityInherit+0xe8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	f1c3 0205 	rsb	r2, r3, #5
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a28      	ldr	r2, [pc, #160]	; (8004204 <xTaskPriorityInherit+0xec>)
 8004164:	4413      	add	r3, r2
 8004166:	4299      	cmp	r1, r3
 8004168:	d12f      	bne.n	80041ca <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fcce 	bl	8002b10 <uxListRemove>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	2201      	movs	r2, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43da      	mvns	r2, r3
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <xTaskPriorityInherit+0xf0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4013      	ands	r3, r2
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <xTaskPriorityInherit+0xf0>)
 800418e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004190:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <xTaskPriorityInherit+0xe8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <xTaskPriorityInherit+0xf0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <xTaskPriorityInherit+0xf0>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a12      	ldr	r2, [pc, #72]	; (8004204 <xTaskPriorityInherit+0xec>)
 80041ba:	441a      	add	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe fc47 	bl	8002a56 <vListInsertEnd>
 80041c8:	e004      	b.n	80041d4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <xTaskPriorityInherit+0xe8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4619      	mov	r1, r3
 80041d8:	2049      	movs	r0, #73	; 0x49
 80041da:	f001 fc53 	bl	8005a84 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80041de:	2301      	movs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e008      	b.n	80041f6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <xTaskPriorityInherit+0xe8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d201      	bcs.n	80041f6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80041f6:	68fb      	ldr	r3, [r7, #12]
    }
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000098 	.word	0x20000098
 8004204:	2000009c 	.word	0x2000009c
 8004208:	20000178 	.word	0x20000178

0800420c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d066      	beq.n	80042f0 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <xTaskPriorityDisinherit+0xf0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d009      	beq.n	8004240 <xTaskPriorityDisinherit+0x34>
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e7fe      	b.n	800423e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <xTaskPriorityDisinherit+0x50>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	e7fe      	b.n	800425a <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	429a      	cmp	r2, r3
 8004270:	d03e      	beq.n	80042f0 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d13a      	bne.n	80042f0 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3304      	adds	r3, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fc46 	bl	8002b10 <uxListRemove>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43da      	mvns	r2, r3
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <xTaskPriorityDisinherit+0xf4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4013      	ands	r3, r2
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <xTaskPriorityDisinherit+0xf4>)
 800429e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4619      	mov	r1, r3
 80042a4:	204a      	movs	r0, #74	; 0x4a
 80042a6:	f001 fbed 	bl	8005a84 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f1c3 0205 	rsb	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <xTaskPriorityDisinherit+0xf4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <xTaskPriorityDisinherit+0xf4>)
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <xTaskPriorityDisinherit+0xf8>)
 80042de:	441a      	add	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe fbb5 	bl	8002a56 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80042f0:	697b      	ldr	r3, [r7, #20]
    }
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000098 	.word	0x20000098
 8004300:	20000178 	.word	0x20000178
 8004304:	2000009c 	.word	0x2000009c

08004308 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07e      	beq.n	800441e <vTaskPriorityDisinheritAfterTimeout+0x116>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e7fe      	b.n	800433a <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d902      	bls.n	800434c <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e002      	b.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004350:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	429a      	cmp	r2, r3
 800435a:	d060      	beq.n	800441e <vTaskPriorityDisinheritAfterTimeout+0x116>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d15b      	bne.n	800441e <vTaskPriorityDisinheritAfterTimeout+0x116>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <vTaskPriorityDisinheritAfterTimeout+0x120>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d109      	bne.n	8004384 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	e7fe      	b.n	8004382 <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4619      	mov	r1, r3
 8004388:	204a      	movs	r0, #74	; 0x4a
 800438a:	f001 fb7b 	bl	8005a84 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	db04      	blt.n	80043ac <vTaskPriorityDisinheritAfterTimeout+0xa4>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f1c3 0205 	rsb	r2, r3, #5
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6959      	ldr	r1, [r3, #20]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4a1c      	ldr	r2, [pc, #112]	; (800442c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80043bc:	4413      	add	r3, r2
 80043be:	4299      	cmp	r1, r3
 80043c0:	d12d      	bne.n	800441e <vTaskPriorityDisinheritAfterTimeout+0x116>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fba2 	bl	8002b10 <uxListRemove>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	2201      	movs	r2, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43da      	mvns	r2, r3
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4013      	ands	r3, r2
 80043e4:	4a12      	ldr	r2, [pc, #72]	; (8004430 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80043e6:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 f8ca 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartReady>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	4a0c      	ldr	r2, [pc, #48]	; (8004430 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a07      	ldr	r2, [pc, #28]	; (800442c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004410:	441a      	add	r2, r3
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f7fe fb1c 	bl	8002a56 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800441e:	bf00      	nop
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000098 	.word	0x20000098
 800442c:	2000009c 	.word	0x2000009c
 8004430:	20000178 	.word	0x20000178

08004434 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <pvTaskIncrementMutexHeldCount+0x24>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <pvTaskIncrementMutexHeldCount+0x24>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004446:	3201      	adds	r2, #1
 8004448:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800444a:	4b03      	ldr	r3, [pc, #12]	; (8004458 <pvTaskIncrementMutexHeldCount+0x24>)
 800444c:	681b      	ldr	r3, [r3, #0]
    }
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	20000098 	.word	0x20000098

0800445c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fb4c 	bl	8002b10 <uxListRemove>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	2201      	movs	r2, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <prvAddCurrentTaskToDelayedList+0xdc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4013      	ands	r3, r2
 8004492:	4a29      	ldr	r2, [pc, #164]	; (8004538 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004494:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449c:	d110      	bne.n	80044c0 <prvAddCurrentTaskToDelayedList+0x64>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	211b      	movs	r1, #27
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 f8ac 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4820      	ldr	r0, [pc, #128]	; (800453c <prvAddCurrentTaskToDelayedList+0xe0>)
 80044ba:	f7fe facc 	bl	8002a56 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80044be:	e032      	b.n	8004526 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d20f      	bcs.n	80044f8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80044d8:	4b16      	ldr	r3, [pc, #88]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2104      	movs	r1, #4
 80044de:	4618      	mov	r0, r3
 80044e0:	f002 f892 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe4>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7fe fad4 	bl	8002a9e <vListInsert>
}
 80044f6:	e016      	b.n	8004526 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2104      	movs	r1, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f002 f882 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvAddCurrentTaskToDelayedList+0xd8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe fac4 	bl	8002a9e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvAddCurrentTaskToDelayedList+0xec>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	d202      	bcs.n	8004526 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004520:	4a09      	ldr	r2, [pc, #36]	; (8004548 <prvAddCurrentTaskToDelayedList+0xec>)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6013      	str	r3, [r2, #0]
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000174 	.word	0x20000174
 8004534:	20000098 	.word	0x20000098
 8004538:	20000178 	.word	0x20000178
 800453c:	2000015c 	.word	0x2000015c
 8004540:	2000012c 	.word	0x2000012c
 8004544:	20000128 	.word	0x20000128
 8004548:	20000190 	.word	0x20000190

0800454c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b04      	subs	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b04      	subs	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3b04      	subs	r3, #4
 800457a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800457c:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <pxPortInitialiseStack+0x64>)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b14      	subs	r3, #20
 8004586:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b04      	subs	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f06f 0202 	mvn.w	r2, #2
 800459a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b20      	subs	r3, #32
 80045a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	080045b5 	.word	0x080045b5

080045b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <prvTaskExitError+0x50>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c6:	d009      	beq.n	80045dc <prvTaskExitError+0x28>
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e7fe      	b.n	80045da <prvTaskExitError+0x26>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045ee:	bf00      	nop
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0fc      	beq.n	80045f0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000010 	.word	0x20000010
	...

08004610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004638:	4808      	ldr	r0, [pc, #32]	; (800465c <prvPortStartFirstTask+0x24>)
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f380 8808 	msr	MSP, r0
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8814 	msr	CONTROL, r0
 800464a:	b662      	cpsie	i
 800464c:	b661      	cpsie	f
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	df00      	svc	0
 8004658:	bf00      	nop
 800465a:	0000      	.short	0x0000
 800465c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop

08004664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <xPortStartScheduler+0x118>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a44      	ldr	r2, [pc, #272]	; (8004780 <xPortStartScheduler+0x11c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <xPortStartScheduler+0x24>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e7fe      	b.n	8004686 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004688:	4b3c      	ldr	r3, [pc, #240]	; (800477c <xPortStartScheduler+0x118>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a3d      	ldr	r2, [pc, #244]	; (8004784 <xPortStartScheduler+0x120>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d109      	bne.n	80046a6 <xPortStartScheduler+0x42>
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e7fe      	b.n	80046a4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046a6:	4b38      	ldr	r3, [pc, #224]	; (8004788 <xPortStartScheduler+0x124>)
 80046a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	22ff      	movs	r2, #255	; 0xff
 80046b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b30      	ldr	r3, [pc, #192]	; (800478c <xPortStartScheduler+0x128>)
 80046cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ce:	4b30      	ldr	r3, [pc, #192]	; (8004790 <xPortStartScheduler+0x12c>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d4:	e009      	b.n	80046ea <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <xPortStartScheduler+0x12c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <xPortStartScheduler+0x12c>)
 80046de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d0ef      	beq.n	80046d6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046f6:	4b26      	ldr	r3, [pc, #152]	; (8004790 <xPortStartScheduler+0x12c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d009      	beq.n	8004716 <xPortStartScheduler+0xb2>
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004716:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <xPortStartScheduler+0x12c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <xPortStartScheduler+0x12c>)
 800471e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <xPortStartScheduler+0x12c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <xPortStartScheduler+0x12c>)
 800472a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <xPortStartScheduler+0x130>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a16      	ldr	r2, [pc, #88]	; (8004794 <xPortStartScheduler+0x130>)
 800473a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800473e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <xPortStartScheduler+0x130>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <xPortStartScheduler+0x130>)
 8004746:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800474a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800474c:	f000 f8dc 	bl	8004908 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <xPortStartScheduler+0x134>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004756:	f000 f8fb 	bl	8004950 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <xPortStartScheduler+0x138>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a0f      	ldr	r2, [pc, #60]	; (800479c <xPortStartScheduler+0x138>)
 8004760:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004764:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004766:	f7ff ff67 	bl	8004638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800476a:	f7ff faad 	bl	8003cc8 <vTaskSwitchContext>
    prvTaskExitError();
 800476e:	f7ff ff21 	bl	80045b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	e000ed00 	.word	0xe000ed00
 8004780:	410fc271 	.word	0x410fc271
 8004784:	410fc270 	.word	0x410fc270
 8004788:	e000e400 	.word	0xe000e400
 800478c:	2000019c 	.word	0x2000019c
 8004790:	200001a0 	.word	0x200001a0
 8004794:	e000ed20 	.word	0xe000ed20
 8004798:	20000010 	.word	0x20000010
 800479c:	e000ef34 	.word	0xe000ef34

080047a0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <vPortEnterCritical+0x54>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <vPortEnterCritical+0x54>)
 80047c0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <vPortEnterCritical+0x54>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10e      	bne.n	80047e8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <vPortEnterCritical+0x58>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <vPortEnterCritical+0x48>
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	e7fe      	b.n	80047e6 <vPortEnterCritical+0x46>
    }
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	20000010 	.word	0x20000010
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <vPortExitCritical+0x4c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <vPortExitCritical+0x22>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e7fe      	b.n	800481c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <vPortExitCritical+0x4c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <vPortExitCritical+0x4c>)
 8004826:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <vPortExitCritical+0x4c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <vPortExitCritical+0x3e>
 8004830:	2300      	movs	r3, #0
 8004832:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000010 	.word	0x20000010
 800484c:	00000000 	.word	0x00000000

08004850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004850:	f3ef 8009 	mrs	r0, PSP
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <pxCurrentTCBConst>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f01e 0f10 	tst.w	lr, #16
 8004860:	bf08      	it	eq
 8004862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004874:	f380 8811 	msr	BASEPRI, r0
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f7ff fa22 	bl	8003cc8 <vTaskSwitchContext>
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f380 8811 	msr	BASEPRI, r0
 800488c:	bc09      	pop	{r0, r3}
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	f01e 0f10 	tst.w	lr, #16
 800489a:	bf08      	it	eq
 800489c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048a0:	f380 8809 	msr	PSP, r0
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst>:
 80048b0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
        __asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048d0:	f001 fd3e 	bl	8006350 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048d4:	f7ff f93c 	bl	8003b50 <xTaskIncrementTick>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d006      	beq.n	80048ec <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048de:	f001 fd95 	bl	800640c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <SysTick_Handler+0x4c>)
 80048e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e001      	b.n	80048f0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80048ec:	f001 fd72 	bl	80063d4 <SEGGER_SYSVIEW_RecordExitISR>
 80048f0:	2300      	movs	r3, #0
 80048f2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortSetupTimerInterrupt+0x38>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <vPortSetupTimerInterrupt+0x3c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <vPortSetupTimerInterrupt+0x40>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <vPortSetupTimerInterrupt+0x44>)
 8004926:	3b01      	subs	r3, #1
 8004928:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800492a:	4b04      	ldr	r3, [pc, #16]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e010 	.word	0xe000e010
 8004940:	e000e018 	.word	0xe000e018
 8004944:	20000000 	.word	0x20000000
 8004948:	10624dd3 	.word	0x10624dd3
 800494c:	e000e014 	.word	0xe000e014

08004950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004960 <vPortEnableVFP+0x10>
 8004954:	6801      	ldr	r1, [r0, #0]
 8004956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495a:	6001      	str	r1, [r0, #0]
 800495c:	4770      	bx	lr
 800495e:	0000      	.short	0x0000
 8004960:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800496e:	f3ef 8305 	mrs	r3, IPSR
 8004972:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d913      	bls.n	80049a2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <vPortValidateInterruptPriority+0x6c>)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <vPortValidateInterruptPriority+0x70>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	7afa      	ldrb	r2, [r7, #11]
 800498a:	429a      	cmp	r2, r3
 800498c:	d209      	bcs.n	80049a2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e7fe      	b.n	80049a0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <vPortValidateInterruptPriority+0x74>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <vPortValidateInterruptPriority+0x78>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d909      	bls.n	80049c6 <vPortValidateInterruptPriority+0x5e>
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	e7fe      	b.n	80049c4 <vPortValidateInterruptPriority+0x5c>
    }
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000e3f0 	.word	0xe000e3f0
 80049d8:	2000019c 	.word	0x2000019c
 80049dc:	e000ed0c 	.word	0xe000ed0c
 80049e0:	200001a0 	.word	0x200001a0

080049e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80049f0:	f7fe ffee 	bl	80039d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049f4:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <pvPortMalloc+0x1a0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049fc:	f000 f92e 	bl	8004c5c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a00:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <pvPortMalloc+0x1a4>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80a5 	bne.w	8004b58 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02c      	beq.n	8004a6e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a14:	2208      	movs	r2, #8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d226      	bcs.n	8004a6e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004a20:	2208      	movs	r2, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f023 0307 	bic.w	r3, r3, #7
 8004a38:	3308      	adds	r3, #8
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d213      	bcs.n	8004a68 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	3308      	adds	r3, #8
 8004a48:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <pvPortMalloc+0x90>
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e7fe      	b.n	8004a66 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a6c:	e002      	b.n	8004a74 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	e000      	b.n	8004a76 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a74:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d06d      	beq.n	8004b58 <pvPortMalloc+0x174>
 8004a7c:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <pvPortMalloc+0x1a8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d868      	bhi.n	8004b58 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a86:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <pvPortMalloc+0x1ac>)
 8004a88:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <pvPortMalloc+0x1ac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a90:	e004      	b.n	8004a9c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d903      	bls.n	8004aae <pvPortMalloc+0xca>
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f1      	bne.n	8004a92 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004aae:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <pvPortMalloc+0x1a0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d04f      	beq.n	8004b58 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2208      	movs	r2, #8
 8004abe:	4413      	add	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1ad2      	subs	r2, r2, r3
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d91e      	bls.n	8004b18 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <pvPortMalloc+0x11c>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e7fe      	b.n	8004afe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 f904 	bl	8004d20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <pvPortMalloc+0x1a8>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <pvPortMalloc+0x1a8>)
 8004b24:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <pvPortMalloc+0x1a8>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <pvPortMalloc+0x1b0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <pvPortMalloc+0x1a8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <pvPortMalloc+0x1b0>)
 8004b38:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <pvPortMalloc+0x1a4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <pvPortMalloc+0x1b4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <pvPortMalloc+0x1b4>)
 8004b56:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b58:	f7fe ff48 	bl	80039ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <pvPortMalloc+0x196>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e7fe      	b.n	8004b78 <pvPortMalloc+0x194>
    return pvReturn;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3728      	adds	r7, #40	; 0x28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200191ac 	.word	0x200191ac
 8004b88:	200191c0 	.word	0x200191c0
 8004b8c:	200191b0 	.word	0x200191b0
 8004b90:	200191a4 	.word	0x200191a4
 8004b94:	200191b4 	.word	0x200191b4
 8004b98:	200191b8 	.word	0x200191b8

08004b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04b      	beq.n	8004c46 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b23      	ldr	r3, [pc, #140]	; (8004c50 <vPortFree+0xb4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <vPortFree+0x42>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e7fe      	b.n	8004bdc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <vPortFree+0x5e>
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	e7fe      	b.n	8004bf8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <vPortFree+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01e      	beq.n	8004c46 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d11a      	bne.n	8004c46 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <vPortFree+0xb4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c20:	f7fe fed6 	bl	80039d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <vPortFree+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <vPortFree+0xb8>)
 8004c30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c32:	6938      	ldr	r0, [r7, #16]
 8004c34:	f000 f874 	bl	8004d20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <vPortFree+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	4a06      	ldr	r2, [pc, #24]	; (8004c58 <vPortFree+0xbc>)
 8004c40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c42:	f7fe fed3 	bl	80039ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200191c0 	.word	0x200191c0
 8004c54:	200191b0 	.word	0x200191b0
 8004c58:	200191bc 	.word	0x200191bc

08004c5c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c62:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <prvHeapInit+0xac>)
 8004c6a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3307      	adds	r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <prvHeapInit+0xac>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <prvHeapInit+0xb0>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <prvHeapInit+0xb0>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ca8:	2208      	movs	r2, #8
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <prvHeapInit+0xb4>)
 8004cbc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <prvHeapInit+0xb4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <prvHeapInit+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <prvHeapInit+0xb4>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <prvHeapInit+0xb8>)
 8004cea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <prvHeapInit+0xbc>)
 8004cf2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cf4:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <prvHeapInit+0xc0>)
 8004cf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	200001a4 	.word	0x200001a4
 8004d0c:	200191a4 	.word	0x200191a4
 8004d10:	200191ac 	.word	0x200191ac
 8004d14:	200191b4 	.word	0x200191b4
 8004d18:	200191b0 	.word	0x200191b0
 8004d1c:	200191c0 	.word	0x200191c0

08004d20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <prvInsertBlockIntoFreeList+0xac>)
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e002      	b.n	8004d34 <prvInsertBlockIntoFreeList+0x14>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d8f7      	bhi.n	8004d2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4413      	add	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d108      	bne.n	8004d62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d118      	bne.n	8004da8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d00d      	beq.n	8004d9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e008      	b.n	8004db0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e003      	b.n	8004db0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d002      	beq.n	8004dbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	200191a4 	.word	0x200191a4
 8004dd0:	200191ac 	.word	0x200191ac

08004dd4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <_cbSendSystemDesc+0x14>)
 8004dda:	f001 fa65 	bl	80062a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dde:	4803      	ldr	r0, [pc, #12]	; (8004dec <_cbSendSystemDesc+0x18>)
 8004de0:	f001 fa62 	bl	80062a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004de4:	bf00      	nop
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08007354 	.word	0x08007354
 8004dec:	0800738c 	.word	0x0800738c

08004df0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dfe:	4a06      	ldr	r2, [pc, #24]	; (8004e18 <SEGGER_SYSVIEW_Conf+0x28>)
 8004e00:	f000 fdce 	bl	80059a0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004e08:	f000 fe0e 	bl	8005a28 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e0c:	bf00      	nop
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000000 	.word	0x20000000
 8004e14:	08004dd5 	.word	0x08004dd5
 8004e18:	08007420 	.word	0x08007420

08004e1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	e034      	b.n	8004e92 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e28:	491e      	ldr	r1, [pc, #120]	; (8004ea4 <_cbSendTaskList+0x88>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	491a      	ldr	r1, [pc, #104]	; (8004ea4 <_cbSendTaskList+0x88>)
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3304      	adds	r3, #4
 8004e48:	681c      	ldr	r4, [r3, #0]
 8004e4a:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <_cbSendTaskList+0x88>)
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	3308      	adds	r3, #8
 8004e5a:	681d      	ldr	r5, [r3, #0]
 8004e5c:	4911      	ldr	r1, [pc, #68]	; (8004ea4 <_cbSendTaskList+0x88>)
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	681e      	ldr	r6, [r3, #0]
 8004e6e:	490d      	ldr	r1, [pc, #52]	; (8004ea4 <_cbSendTaskList+0x88>)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3310      	adds	r3, #16
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4633      	mov	r3, r6
 8004e84:	462a      	mov	r2, r5
 8004e86:	4621      	mov	r1, r4
 8004e88:	f000 f8b4 	bl	8004ff4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <_cbSendTaskList+0x8c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3c5      	bcc.n	8004e28 <_cbSendTaskList+0xc>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	200191c4 	.word	0x200191c4
 8004ea8:	20019264 	.word	0x20019264

08004eac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004eb2:	f7fe fe3b 	bl	8003b2c <xTaskGetTickCountFromISR>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f04f 0400 	mov.w	r4, #0
 8004ebc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ec0:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	4634      	mov	r4, r6
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	0162      	lsls	r2, r4, #5
 8004ed2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4614      	mov	r4, r2
 8004edc:	1b5b      	subs	r3, r3, r5
 8004ede:	eb64 0406 	sbc.w	r4, r4, r6
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	00a2      	lsls	r2, r4, #2
 8004eec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004ef0:	0099      	lsls	r1, r3, #2
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	195b      	adds	r3, r3, r5
 8004ef8:	eb44 0406 	adc.w	r4, r4, r6
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	00e2      	lsls	r2, r4, #3
 8004f06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f0a:	00d9      	lsls	r1, r3, #3
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4614      	mov	r4, r2
 8004f10:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004f14:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004f24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f32:	2205      	movs	r2, #5
 8004f34:	492b      	ldr	r1, [pc, #172]	; (8004fe4 <SYSVIEW_AddTask+0xc0>)
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f001 fd38 	bl	80069ac <memcmp>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04b      	beq.n	8004fda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d903      	bls.n	8004f52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f4a:	4828      	ldr	r0, [pc, #160]	; (8004fec <SYSVIEW_AddTask+0xc8>)
 8004f4c:	f001 fca8 	bl	80068a0 <SEGGER_SYSVIEW_Warn>
    return;
 8004f50:	e044      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4921      	ldr	r1, [pc, #132]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3304      	adds	r3, #4
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3310      	adds	r3, #16
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f80e 	bl	8004ff4 <SYSVIEW_SendTaskInfo>
 8004fd8:	e000      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
    return;
 8004fda:	bf00      	nop

}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800739c 	.word	0x0800739c
 8004fe8:	20019264 	.word	0x20019264
 8004fec:	080073a4 	.word	0x080073a4
 8004ff0:	200191c4 	.word	0x200191c4

08004ff4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005002:	f107 0314 	add.w	r3, r7, #20
 8005006:	2214      	movs	r2, #20
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fce8 	bl	80069e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f845 	bl	80060b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800502e:	bf00      	nop
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <USART2_IRQHandler+0x80>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d011      	beq.n	8005072 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <USART2_IRQHandler+0x84>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 030b 	and.w	r3, r3, #11
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <USART2_IRQHandler+0x88>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <USART2_IRQHandler+0x88>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	79fa      	ldrb	r2, [r7, #7]
 800506e:	4610      	mov	r0, r2
 8005070:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01a      	beq.n	80050b2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <USART2_IRQHandler+0x8c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d015      	beq.n	80050b0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <USART2_IRQHandler+0x8c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1dfa      	adds	r2, r7, #7
 800508a:	4610      	mov	r0, r2
 800508c:	4798      	blx	r3
 800508e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <USART2_IRQHandler+0x90>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <USART2_IRQHandler+0x90>)
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e006      	b.n	80050b2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <USART2_IRQHandler+0x80>)
 80050a6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80050a8:	79fa      	ldrb	r2, [r7, #7]
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <USART2_IRQHandler+0x84>)
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e000      	b.n	80050b2 <USART2_IRQHandler+0x7a>
      return;
 80050b0:	bf00      	nop
    }
  }
}
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40004400 	.word	0x40004400
 80050bc:	40004404 	.word	0x40004404
 80050c0:	20019268 	.word	0x20019268
 80050c4:	2001926c 	.word	0x2001926c
 80050c8:	4000440c 	.word	0x4000440c

080050cc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	4000440c 	.word	0x4000440c

080050ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80050f2:	4b26      	ldr	r3, [pc, #152]	; (800518c <_DoInit+0xa0>)
 80050f4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80050f6:	22a8      	movs	r2, #168	; 0xa8
 80050f8:	2100      	movs	r1, #0
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f001 fc70 	bl	80069e0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2203      	movs	r2, #3
 8005104:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2203      	movs	r2, #3
 800510a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4a20      	ldr	r2, [pc, #128]	; (8005190 <_DoInit+0xa4>)
 8005110:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <_DoInit+0xa8>)
 8005116:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800511e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <_DoInit+0xa4>)
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <_DoInit+0xac>)
 800513c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2210      	movs	r2, #16
 8005142:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005156:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	e00c      	b.n	800517a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1c3 030f 	rsb	r3, r3, #15
 8005166:	4a0d      	ldr	r2, [pc, #52]	; (800519c <_DoInit+0xb0>)
 8005168:	5cd1      	ldrb	r1, [r2, r3]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4413      	add	r3, r2
 8005170:	460a      	mov	r2, r1
 8005172:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3301      	adds	r3, #1
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d9ef      	bls.n	8005160 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005180:	f3bf 8f5f 	dmb	sy
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	2001a838 	.word	0x2001a838
 8005190:	080073f4 	.word	0x080073f4
 8005194:	20019270 	.word	0x20019270
 8005198:	20019670 	.word	0x20019670
 800519c:	08007428 	.word	0x08007428

080051a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	; 0x30
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80051ac:	4b3e      	ldr	r3, [pc, #248]	; (80052a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80051ae:	623b      	str	r3, [r7, #32]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <SEGGER_RTT_ReadNoLock+0x1e>
 80051ba:	f7ff ff97 	bl	80050ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	3360      	adds	r3, #96	; 0x60
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d92b      	bls.n	8005244 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bf28      	it	cs
 80051fe:	4613      	movcs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	4413      	add	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005212:	f001 fbda 	bl	80069ca <memcpy>
    NumBytesRead += NumBytesRem;
 8005216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800522e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523c:	429a      	cmp	r2, r3
 800523e:	d101      	bne.n	8005244 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005240:	2300      	movs	r3, #0
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4293      	cmp	r3, r2
 8005252:	bf28      	it	cs
 8005254:	4613      	movcs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d019      	beq.n	8005292 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	4413      	add	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526e:	f001 fbac 	bl	80069ca <memcpy>
    NumBytesRead += NumBytesRem;
 8005272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800528a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2001a838 	.word	0x2001a838

080052ac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052ba:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <SEGGER_RTT_AllocUpBuffer+0x20>
 80052c8:	f7ff ff10 	bl	80050ec <_DoInit>
  SEGGER_RTT_LOCK();
 80052cc:	f3ef 8311 	mrs	r3, BASEPRI
 80052d0:	f04f 0120 	mov.w	r1, #32
 80052d4:	f381 8811 	msr	BASEPRI, r1
 80052d8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052da:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052dc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052e2:	6939      	ldr	r1, [r7, #16]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	4613      	mov	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	440b      	add	r3, r1
 80052f2:	3304      	adds	r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	429a      	cmp	r2, r3
 8005308:	dbeb      	blt.n	80052e2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800530a:	e000      	b.n	800530e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800530c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	da3f      	bge.n	8005398 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005318:	6939      	ldr	r1, [r7, #16]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	3304      	adds	r3, #4
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005342:	6939      	ldr	r1, [r7, #16]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	4613      	mov	r3, r2
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	440b      	add	r3, r1
 8005350:	3320      	adds	r3, #32
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	440b      	add	r3, r1
 8005364:	3328      	adds	r3, #40	; 0x28
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	3324      	adds	r3, #36	; 0x24
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800537e:	6939      	ldr	r1, [r7, #16]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	332c      	adds	r3, #44	; 0x2c
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005392:	f3bf 8f5f 	dmb	sy
 8005396:	e002      	b.n	800539e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80053a4:	69fb      	ldr	r3, [r7, #28]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2001a838 	.word	0x2001a838

080053b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053d0:	f7ff fe8c 	bl	80050ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053d4:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053d6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d82c      	bhi.n	8005438 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053de:	f3ef 8311 	mrs	r3, BASEPRI
 80053e2:	f04f 0120 	mov.w	r1, #32
 80053e6:	f381 8811 	msr	BASEPRI, r1
 80053ea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	3360      	adds	r3, #96	; 0x60
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00e      	beq.n	8005422 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005426:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005428:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e002      	b.n	800543e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	2001a838 	.word	0x2001a838

0800544c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005462:	e002      	b.n	800546a <_EncodeStr+0x1e>
      Len++;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3301      	adds	r3, #1
 8005468:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f6      	bne.n	8005464 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d901      	bls.n	8005482 <_EncodeStr+0x36>
      Len = Limit;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2bfe      	cmp	r3, #254	; 0xfe
 8005486:	d806      	bhi.n	8005496 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	60fa      	str	r2, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e011      	b.n	80054ba <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	22ff      	movs	r2, #255	; 0xff
 800549e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	60fa      	str	r2, [r7, #12]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	0a19      	lsrs	r1, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	60fa      	str	r2, [r7, #12]
 80054b6:	b2ca      	uxtb	r2, r1
 80054b8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054be:	e00a      	b.n	80054d6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	1c53      	adds	r3, r2, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1c59      	adds	r1, r3, #1
 80054ca:	60f9      	str	r1, [r7, #12]
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	701a      	strb	r2, [r3, #0]
    n++;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	3301      	adds	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d3f0      	bcc.n	80054c0 <_EncodeStr+0x74>
  }
  return pPayload;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3307      	adds	r3, #7
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800550a:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <_HandleIncomingPacket+0xd0>)
 800550c:	7e1b      	ldrb	r3, [r3, #24]
 800550e:	4618      	mov	r0, r3
 8005510:	1cfb      	adds	r3, r7, #3
 8005512:	2201      	movs	r2, #1
 8005514:	4619      	mov	r1, r3
 8005516:	f7ff fe43 	bl	80051a0 <SEGGER_RTT_ReadNoLock>
 800551a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04c      	beq.n	80055bc <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	2b05      	cmp	r3, #5
 8005526:	d022      	beq.n	800556e <_HandleIncomingPacket+0x6a>
 8005528:	2b05      	cmp	r3, #5
 800552a:	dc0b      	bgt.n	8005544 <_HandleIncomingPacket+0x40>
 800552c:	2b02      	cmp	r3, #2
 800552e:	d015      	beq.n	800555c <_HandleIncomingPacket+0x58>
 8005530:	2b02      	cmp	r3, #2
 8005532:	dc02      	bgt.n	800553a <_HandleIncomingPacket+0x36>
 8005534:	2b01      	cmp	r3, #1
 8005536:	d00e      	beq.n	8005556 <_HandleIncomingPacket+0x52>
 8005538:	e033      	b.n	80055a2 <_HandleIncomingPacket+0x9e>
 800553a:	2b03      	cmp	r3, #3
 800553c:	d011      	beq.n	8005562 <_HandleIncomingPacket+0x5e>
 800553e:	2b04      	cmp	r3, #4
 8005540:	d012      	beq.n	8005568 <_HandleIncomingPacket+0x64>
 8005542:	e02e      	b.n	80055a2 <_HandleIncomingPacket+0x9e>
 8005544:	2b07      	cmp	r3, #7
 8005546:	d018      	beq.n	800557a <_HandleIncomingPacket+0x76>
 8005548:	2b07      	cmp	r3, #7
 800554a:	db13      	blt.n	8005574 <_HandleIncomingPacket+0x70>
 800554c:	2b7f      	cmp	r3, #127	; 0x7f
 800554e:	d037      	beq.n	80055c0 <_HandleIncomingPacket+0xbc>
 8005550:	2b80      	cmp	r3, #128	; 0x80
 8005552:	d015      	beq.n	8005580 <_HandleIncomingPacket+0x7c>
 8005554:	e025      	b.n	80055a2 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005556:	f000 fc33 	bl	8005dc0 <SEGGER_SYSVIEW_Start>
      break;
 800555a:	e036      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800555c:	f000 fcec 	bl	8005f38 <SEGGER_SYSVIEW_Stop>
      break;
 8005560:	e033      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005562:	f000 fec5 	bl	80062f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005566:	e030      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005568:	f000 fe8a 	bl	8006280 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800556c:	e02d      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800556e:	f000 fd09 	bl	8005f84 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005572:	e02a      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005574:	f001 f956 	bl	8006824 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005578:	e027      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800557a:	f001 f935 	bl	80067e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800557e:	e024      	b.n	80055ca <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <_HandleIncomingPacket+0xd0>)
 8005582:	7e1b      	ldrb	r3, [r3, #24]
 8005584:	4618      	mov	r0, r3
 8005586:	1cfb      	adds	r3, r7, #3
 8005588:	2201      	movs	r2, #1
 800558a:	4619      	mov	r1, r3
 800558c:	f7ff fe08 	bl	80051a0 <SEGGER_RTT_ReadNoLock>
 8005590:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f8a4 	bl	80066e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80055a0:	e010      	b.n	80055c4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da0e      	bge.n	80055c8 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <_HandleIncomingPacket+0xd0>)
 80055ac:	7e1b      	ldrb	r3, [r3, #24]
 80055ae:	4618      	mov	r0, r3
 80055b0:	1cfb      	adds	r3, r7, #3
 80055b2:	2201      	movs	r2, #1
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7ff fdf3 	bl	80051a0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80055ba:	e005      	b.n	80055c8 <_HandleIncomingPacket+0xc4>
    }
  }
 80055bc:	bf00      	nop
 80055be:	e004      	b.n	80055ca <_HandleIncomingPacket+0xc6>
      break;
 80055c0:	bf00      	nop
 80055c2:	e002      	b.n	80055ca <_HandleIncomingPacket+0xc6>
      break;
 80055c4:	bf00      	nop
 80055c6:	e000      	b.n	80055ca <_HandleIncomingPacket+0xc6>
      break;
 80055c8:	bf00      	nop
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2001a688 	.word	0x2001a688

080055d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	; 0x30
 80055dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055de:	2301      	movs	r3, #1
 80055e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ec:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f2:	e00b      	b.n	800560c <_TrySendOverflowPacket+0x34>
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b7f      	cmp	r3, #127	; 0x7f
 8005610:	d8f0      	bhi.n	80055f4 <_TrySendOverflowPacket+0x1c>
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <_TrySendOverflowPacket+0xe4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e00b      	b.n	8005654 <_TrySendOverflowPacket+0x7c>
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	6279      	str	r1, [r7, #36]	; 0x24
 8005646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	09db      	lsrs	r3, r3, #7
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	2b7f      	cmp	r3, #127	; 0x7f
 8005658:	d8f0      	bhi.n	800563c <_TrySendOverflowPacket+0x64>
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	627a      	str	r2, [r7, #36]	; 0x24
 8005660:	6a3a      	ldr	r2, [r7, #32]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800566a:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	4618      	mov	r0, r3
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	461a      	mov	r2, r3
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	4619      	mov	r1, r3
 800567c:	f7fa fdb0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005680:	4603      	mov	r3, r0
 8005682:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005684:	f7ff fd22 	bl	80050cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800568e:	4a0a      	ldr	r2, [pc, #40]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e004      	b.n	80056ac <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <_TrySendOverflowPacket+0xe0>)
 80056aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80056ac:	693b      	ldr	r3, [r7, #16]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3730      	adds	r7, #48	; 0x30
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	2001a688 	.word	0x2001a688
 80056bc:	e0001004 	.word	0xe0001004

080056c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056cc:	4b9b      	ldr	r3, [pc, #620]	; (800593c <_SendPacket+0x27c>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d010      	beq.n	80056f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056d4:	4b99      	ldr	r3, [pc, #612]	; (800593c <_SendPacket+0x27c>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 812b 	beq.w	8005934 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056de:	4b97      	ldr	r3, [pc, #604]	; (800593c <_SendPacket+0x27c>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d109      	bne.n	80056fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056e6:	f7ff ff77 	bl	80055d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056ea:	4b94      	ldr	r3, [pc, #592]	; (800593c <_SendPacket+0x27c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	f040 8122 	bne.w	8005938 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80056f4:	e001      	b.n	80056fa <_SendPacket+0x3a>
    goto Send;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <_SendPacket+0x3c>
Send:
 80056fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b1f      	cmp	r3, #31
 8005700:	d809      	bhi.n	8005716 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005702:	4b8e      	ldr	r3, [pc, #568]	; (800593c <_SendPacket+0x27c>)
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8117 	bne.w	8005944 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b17      	cmp	r3, #23
 800571a:	d807      	bhi.n	800572c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3b01      	subs	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e0c4      	b.n	80058b6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b7f      	cmp	r3, #127	; 0x7f
 8005738:	d912      	bls.n	8005760 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	09da      	lsrs	r2, r3, #7
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3b01      	subs	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	3a01      	subs	r2, #1
 8005752:	60fa      	str	r2, [r7, #12]
 8005754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e006      	b.n	800576e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3b01      	subs	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b7e      	cmp	r3, #126	; 0x7e
 8005772:	d807      	bhi.n	8005784 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e098      	b.n	80058b6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578a:	d212      	bcs.n	80057b2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	09da      	lsrs	r2, r3, #7
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3b01      	subs	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	3a01      	subs	r2, #1
 80057a4:	60fa      	str	r2, [r7, #12]
 80057a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e081      	b.n	80058b6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057b8:	d21d      	bcs.n	80057f6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0b9a      	lsrs	r2, r3, #14
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	09db      	lsrs	r3, r3, #7
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	3a01      	subs	r2, #1
 80057d4:	60fa      	str	r2, [r7, #12]
 80057d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	3a01      	subs	r2, #1
 80057e8:	60fa      	str	r2, [r7, #12]
 80057ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e05f      	b.n	80058b6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fc:	d228      	bcs.n	8005850 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0d5a      	lsrs	r2, r3, #21
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b01      	subs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0b9b      	lsrs	r3, r3, #14
 8005812:	b2db      	uxtb	r3, r3
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	3a01      	subs	r2, #1
 8005818:	60fa      	str	r2, [r7, #12]
 800581a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	09db      	lsrs	r3, r3, #7
 8005828:	b2db      	uxtb	r3, r3
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	3a01      	subs	r2, #1
 800582e:	60fa      	str	r2, [r7, #12]
 8005830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	3a01      	subs	r2, #1
 8005842:	60fa      	str	r2, [r7, #12]
 8005844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e032      	b.n	80058b6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	0f1a      	lsrs	r2, r3, #28
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3b01      	subs	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0d5b      	lsrs	r3, r3, #21
 8005864:	b2db      	uxtb	r3, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	3a01      	subs	r2, #1
 800586a:	60fa      	str	r2, [r7, #12]
 800586c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0b9b      	lsrs	r3, r3, #14
 800587a:	b2db      	uxtb	r3, r3
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	3a01      	subs	r2, #1
 8005880:	60fa      	str	r2, [r7, #12]
 8005882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	09db      	lsrs	r3, r3, #7
 8005890:	b2db      	uxtb	r3, r3
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	3a01      	subs	r2, #1
 8005896:	60fa      	str	r2, [r7, #12]
 8005898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	3a01      	subs	r2, #1
 80058aa:	60fa      	str	r2, [r7, #12]
 80058ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <_SendPacket+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058bc:	4b1f      	ldr	r3, [pc, #124]	; (800593c <_SendPacket+0x27c>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	e00b      	b.n	80058e8 <_SendPacket+0x228>
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	1c59      	adds	r1, r3, #1
 80058d8:	6279      	str	r1, [r7, #36]	; 0x24
 80058da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b7f      	cmp	r3, #127	; 0x7f
 80058ec:	d8f0      	bhi.n	80058d0 <_SendPacket+0x210>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	627a      	str	r2, [r7, #36]	; 0x24
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <_SendPacket+0x27c>)
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	4618      	mov	r0, r3
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	461a      	mov	r2, r3
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	f7fa fc67 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005912:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005914:	f7ff fbda 	bl	80050cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800591e:	4a07      	ldr	r2, [pc, #28]	; (800593c <_SendPacket+0x27c>)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	60d3      	str	r3, [r2, #12]
 8005924:	e00f      	b.n	8005946 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <_SendPacket+0x27c>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b03      	ldr	r3, [pc, #12]	; (800593c <_SendPacket+0x27c>)
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e008      	b.n	8005946 <_SendPacket+0x286>
    goto SendDone;
 8005934:	bf00      	nop
 8005936:	e006      	b.n	8005946 <_SendPacket+0x286>
      goto SendDone;
 8005938:	bf00      	nop
 800593a:	e004      	b.n	8005946 <_SendPacket+0x286>
 800593c:	2001a688 	.word	0x2001a688
 8005940:	e0001004 	.word	0xe0001004
      goto SendDone;
 8005944:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <_SendPacket+0x2d8>)
 8005948:	7e1b      	ldrb	r3, [r3, #24]
 800594a:	4619      	mov	r1, r3
 800594c:	4a13      	ldr	r2, [pc, #76]	; (800599c <_SendPacket+0x2dc>)
 800594e:	460b      	mov	r3, r1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	440b      	add	r3, r1
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	336c      	adds	r3, #108	; 0x6c
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <_SendPacket+0x2d8>)
 800595e:	7e1b      	ldrb	r3, [r3, #24]
 8005960:	4618      	mov	r0, r3
 8005962:	490e      	ldr	r1, [pc, #56]	; (800599c <_SendPacket+0x2dc>)
 8005964:	4603      	mov	r3, r0
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4403      	add	r3, r0
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	3370      	adds	r3, #112	; 0x70
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d00b      	beq.n	800598e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <_SendPacket+0x2d8>)
 8005978:	789b      	ldrb	r3, [r3, #2]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <_SendPacket+0x2d8>)
 8005980:	2201      	movs	r2, #1
 8005982:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005984:	f7ff fdbe 	bl	8005504 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <_SendPacket+0x2d8>)
 800598a:	2200      	movs	r2, #0
 800598c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800598e:	bf00      	nop
 8005990:	3728      	adds	r7, #40	; 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	2001a688 	.word	0x2001a688
 800599c:	2001a838 	.word	0x2001a838

080059a0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80059ae:	2300      	movs	r3, #0
 80059b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059b4:	4917      	ldr	r1, [pc, #92]	; (8005a14 <SEGGER_SYSVIEW_Init+0x74>)
 80059b6:	4818      	ldr	r0, [pc, #96]	; (8005a18 <SEGGER_SYSVIEW_Init+0x78>)
 80059b8:	f7ff fc78 	bl	80052ac <SEGGER_RTT_AllocUpBuffer>
 80059bc:	4603      	mov	r3, r0
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059c2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80059c4:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059c6:	785a      	ldrb	r2, [r3, #1]
 80059c8:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059ca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059ce:	7e1b      	ldrb	r3, [r3, #24]
 80059d0:	4618      	mov	r0, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2308      	movs	r3, #8
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <SEGGER_SYSVIEW_Init+0x80>)
 80059da:	490f      	ldr	r1, [pc, #60]	; (8005a18 <SEGGER_SYSVIEW_Init+0x78>)
 80059dc:	f7ff fcea 	bl	80053b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <SEGGER_SYSVIEW_Init+0x84>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059ec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80059ee:	4a0b      	ldr	r2, [pc, #44]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80059f4:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80059fa:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005a00:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20019680 	.word	0x20019680
 8005a18:	08007400 	.word	0x08007400
 8005a1c:	2001a688 	.word	0x2001a688
 8005a20:	2001a680 	.word	0x2001a680
 8005a24:	e0001004 	.word	0xe0001004

08005a28 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6113      	str	r3, [r2, #16]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2001a688 	.word	0x2001a688

08005a48 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a50:	f3ef 8311 	mrs	r3, BASEPRI
 8005a54:	f04f 0120 	mov.w	r1, #32
 8005a58:	f381 8811 	msr	BASEPRI, r1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4808      	ldr	r0, [pc, #32]	; (8005a80 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005a60:	f7ff fd44 	bl	80054ec <_PreparePacket>
 8005a64:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	68b8      	ldr	r0, [r7, #8]
 8005a6c:	f7ff fe28 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f383 8811 	msr	BASEPRI, r3
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	2001a6b8 	.word	0x2001a6b8

08005a84 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a92:	f04f 0120 	mov.w	r1, #32
 8005a96:	f381 8811 	msr	BASEPRI, r1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	4816      	ldr	r0, [pc, #88]	; (8005af8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005a9e:	f7ff fd25 	bl	80054ec <_PreparePacket>
 8005aa2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e00b      	b.n	8005aca <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1c59      	adds	r1, r3, #1
 8005aba:	61f9      	str	r1, [r7, #28]
 8005abc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	09db      	lsrs	r3, r3, #7
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ace:	d8f0      	bhi.n	8005ab2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6938      	ldr	r0, [r7, #16]
 8005ae6:	f7ff fdeb 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f383 8811 	msr	BASEPRI, r3
}
 8005af0:	bf00      	nop
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	2001a6b8 	.word	0x2001a6b8

08005afc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b08:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0c:	f04f 0120 	mov.w	r1, #32
 8005b10:	f381 8811 	msr	BASEPRI, r1
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	4825      	ldr	r0, [pc, #148]	; (8005bac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b18:	f7ff fce8 	bl	80054ec <_PreparePacket>
 8005b1c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2a:	e00b      	b.n	8005b44 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	09db      	lsrs	r3, r3, #7
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	2b7f      	cmp	r3, #127	; 0x7f
 8005b48:	d8f0      	bhi.n	8005b2c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	e00b      	b.n	8005b7c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	09db      	lsrs	r3, r3, #7
 8005b7a:	623b      	str	r3, [r7, #32]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b80:	d8f0      	bhi.n	8005b64 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	627a      	str	r2, [r7, #36]	; 0x24
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	69b8      	ldr	r0, [r7, #24]
 8005b98:	f7ff fd92 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ba2:	bf00      	nop
 8005ba4:	3730      	adds	r7, #48	; 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	2001a6b8 	.word	0x2001a6b8

08005bb0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	; 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc2:	f04f 0120 	mov.w	r1, #32
 8005bc6:	f381 8811 	msr	BASEPRI, r1
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	4832      	ldr	r0, [pc, #200]	; (8005c98 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005bce:	f7ff fc8d 	bl	80054ec <_PreparePacket>
 8005bd2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
 8005be0:	e00b      	b.n	8005bfa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	6379      	str	r1, [r7, #52]	; 0x34
 8005bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	09db      	lsrs	r3, r3, #7
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfe:	d8f0      	bhi.n	8005be2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	637a      	str	r2, [r7, #52]	; 0x34
 8005c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c18:	e00b      	b.n	8005c32 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	1c59      	adds	r1, r3, #1
 8005c22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	09db      	lsrs	r3, r3, #7
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2b7f      	cmp	r3, #127	; 0x7f
 8005c36:	d8f0      	bhi.n	8005c1a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	623b      	str	r3, [r7, #32]
 8005c50:	e00b      	b.n	8005c6a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	09db      	lsrs	r3, r3, #7
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6e:	d8f0      	bhi.n	8005c52 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	627a      	str	r2, [r7, #36]	; 0x24
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	69b8      	ldr	r0, [r7, #24]
 8005c86:	f7ff fd1b 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f383 8811 	msr	BASEPRI, r3
}
 8005c90:	bf00      	nop
 8005c92:	3738      	adds	r7, #56	; 0x38
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	2001a6b8 	.word	0x2001a6b8

08005c9c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b090      	sub	sp, #64	; 0x40
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005caa:	f3ef 8311 	mrs	r3, BASEPRI
 8005cae:	f04f 0120 	mov.w	r1, #32
 8005cb2:	f381 8811 	msr	BASEPRI, r1
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	4840      	ldr	r0, [pc, #256]	; (8005dbc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005cba:	f7ff fc17 	bl	80054ec <_PreparePacket>
 8005cbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ccc:	e00b      	b.n	8005ce6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cea:	d8f0      	bhi.n	8005cce <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
 8005d04:	e00b      	b.n	8005d1e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	1c59      	adds	r1, r3, #1
 8005d0e:	6379      	str	r1, [r7, #52]	; 0x34
 8005d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b7f      	cmp	r3, #127	; 0x7f
 8005d22:	d8f0      	bhi.n	8005d06 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	637a      	str	r2, [r7, #52]	; 0x34
 8005d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3c:	e00b      	b.n	8005d56 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	1c59      	adds	r1, r3, #1
 8005d46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	09db      	lsrs	r3, r3, #7
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5a:	d8f0      	bhi.n	8005d3e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	e00b      	b.n	8005d8e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	09db      	lsrs	r3, r3, #7
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b7f      	cmp	r3, #127	; 0x7f
 8005d92:	d8f0      	bhi.n	8005d76 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	627a      	str	r2, [r7, #36]	; 0x24
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6979      	ldr	r1, [r7, #20]
 8005da8:	69b8      	ldr	r0, [r7, #24]
 8005daa:	f7ff fc89 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f383 8811 	msr	BASEPRI, r3
}
 8005db4:	bf00      	nop
 8005db6:	3740      	adds	r7, #64	; 0x40
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	2001a6b8 	.word	0x2001a6b8

08005dc0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08c      	sub	sp, #48	; 0x30
 8005dc4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005dc6:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd0:	f04f 0120 	mov.w	r1, #32
 8005dd4:	f381 8811 	msr	BASEPRI, r1
 8005dd8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005dda:	4b54      	ldr	r3, [pc, #336]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	220a      	movs	r2, #10
 8005de0:	4953      	ldr	r1, [pc, #332]	; (8005f30 <SEGGER_SYSVIEW_Start+0x170>)
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fa f9fc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005dee:	f7ff f96d 	bl	80050cc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005df2:	200a      	movs	r0, #10
 8005df4:	f7ff fe28 	bl	8005a48 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005df8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfc:	f04f 0120 	mov.w	r1, #32
 8005e00:	f381 8811 	msr	BASEPRI, r1
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	484b      	ldr	r0, [pc, #300]	; (8005f34 <SEGGER_SYSVIEW_Start+0x174>)
 8005e08:	f7ff fb70 	bl	80054ec <_PreparePacket>
 8005e0c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e16:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_Start+0x76>
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_Start+0x5e>
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	623b      	str	r3, [r7, #32]
 8005e56:	e00b      	b.n	8005e70 <SEGGER_SYSVIEW_Start+0xb0>
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	6279      	str	r1, [r7, #36]	; 0x24
 8005e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <SEGGER_SYSVIEW_Start+0x98>
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	4b28      	ldr	r3, [pc, #160]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	61bb      	str	r3, [r7, #24]
 8005e90:	e00b      	b.n	8005eaa <SEGGER_SYSVIEW_Start+0xea>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	61f9      	str	r1, [r7, #28]
 8005e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b7f      	cmp	r3, #127	; 0x7f
 8005eae:	d8f0      	bhi.n	8005e92 <SEGGER_SYSVIEW_Start+0xd2>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	61fa      	str	r2, [r7, #28]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e00b      	b.n	8005ee2 <SEGGER_SYSVIEW_Start+0x122>
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	6179      	str	r1, [r7, #20]
 8005ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d8f0      	bhi.n	8005eca <SEGGER_SYSVIEW_Start+0x10a>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	617a      	str	r2, [r7, #20]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ef8:	2218      	movs	r2, #24
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fbdf 	bl	80056c0 <_SendPacket>
      RECORD_END();
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <SEGGER_SYSVIEW_Start+0x16c>)
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005f16:	f000 f9eb 	bl	80062f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005f1a:	f000 f9b1 	bl	8006280 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005f1e:	f000 fc81 	bl	8006824 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005f22:	bf00      	nop
 8005f24:	3730      	adds	r7, #48	; 0x30
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	2001a688 	.word	0x2001a688
 8005f30:	0800743c 	.word	0x0800743c
 8005f34:	2001a6b8 	.word	0x2001a6b8

08005f38 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f42:	f04f 0120 	mov.w	r1, #32
 8005f46:	f381 8811 	msr	BASEPRI, r1
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	480b      	ldr	r0, [pc, #44]	; (8005f7c <SEGGER_SYSVIEW_Stop+0x44>)
 8005f4e:	f7ff facd 	bl	80054ec <_PreparePacket>
 8005f52:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005f5c:	220b      	movs	r2, #11
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6838      	ldr	r0, [r7, #0]
 8005f62:	f7ff fbad 	bl	80056c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f383 8811 	msr	BASEPRI, r3
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2001a6b8 	.word	0x2001a6b8
 8005f80:	2001a688 	.word	0x2001a688

08005f84 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8e:	f04f 0120 	mov.w	r1, #32
 8005f92:	f381 8811 	msr	BASEPRI, r1
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	4845      	ldr	r0, [pc, #276]	; (80060b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005f9a:	f7ff faa7 	bl	80054ec <_PreparePacket>
 8005f9e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa8:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fae:	e00b      	b.n	8005fc8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	2b7f      	cmp	r3, #127	; 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	4b34      	ldr	r3, [pc, #208]	; (80060b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	623b      	str	r3, [r7, #32]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	6279      	str	r1, [r7, #36]	; 0x24
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	627a      	str	r2, [r7, #36]	; 0x24
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e00b      	b.n	800603c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	61f9      	str	r1, [r7, #28]
 800602e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b7f      	cmp	r3, #127	; 0x7f
 8006040:	d8f0      	bhi.n	8006024 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	e00b      	b.n	8006074 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	6179      	str	r1, [r7, #20]
 8006066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d8f0      	bhi.n	800605c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	617a      	str	r2, [r7, #20]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800608a:	2218      	movs	r2, #24
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7ff fb16 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80060a2:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	4798      	blx	r3
  }
}
 80060a8:	bf00      	nop
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2001a6b8 	.word	0x2001a6b8
 80060b4:	2001a688 	.word	0x2001a688

080060b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b092      	sub	sp, #72	; 0x48
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80060c0:	f3ef 8311 	mrs	r3, BASEPRI
 80060c4:	f04f 0120 	mov.w	r1, #32
 80060c8:	f381 8811 	msr	BASEPRI, r1
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	486a      	ldr	r0, [pc, #424]	; (8006278 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80060d0:	f7ff fa0c 	bl	80054ec <_PreparePacket>
 80060d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b66      	ldr	r3, [pc, #408]	; (800627c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	643b      	str	r3, [r7, #64]	; 0x40
 80060ea:	e00b      	b.n	8006104 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80060ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	6479      	str	r1, [r7, #68]	; 0x44
 80060f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006100:	09db      	lsrs	r3, r3, #7
 8006102:	643b      	str	r3, [r7, #64]	; 0x40
 8006104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006106:	2b7f      	cmp	r3, #127	; 0x7f
 8006108:	d8f0      	bhi.n	80060ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800610a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	647a      	str	r2, [r7, #68]	; 0x44
 8006110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
 8006124:	e00b      	b.n	800613e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	b2da      	uxtb	r2, r3
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	09db      	lsrs	r3, r3, #7
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b7f      	cmp	r3, #127	; 0x7f
 8006142:	d8f0      	bhi.n	8006126 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800614a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	4619      	mov	r1, r3
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff f975 	bl	800544c <_EncodeStr>
 8006162:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006164:	2209      	movs	r2, #9
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	6938      	ldr	r0, [r7, #16]
 800616a:	f7ff faa9 	bl	80056c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b40      	ldr	r3, [pc, #256]	; (800627c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	e00b      	b.n	800619c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	6379      	str	r1, [r7, #52]	; 0x34
 800618e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	09db      	lsrs	r3, r3, #7
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b7f      	cmp	r3, #127	; 0x7f
 80061a0:	d8f0      	bhi.n	8006184 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	637a      	str	r2, [r7, #52]	; 0x34
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80061bc:	e00b      	b.n	80061d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	1c59      	adds	r1, r3, #1
 80061c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b7f      	cmp	r3, #127	; 0x7f
 80061da:	d8f0      	bhi.n	80061be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	e00b      	b.n	8006210 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	6279      	str	r1, [r7, #36]	; 0x24
 8006202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	2b7f      	cmp	r3, #127	; 0x7f
 8006214:	d8f0      	bhi.n	80061f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	627a      	str	r2, [r7, #36]	; 0x24
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e00b      	b.n	8006248 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	61f9      	str	r1, [r7, #28]
 800623a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b7f      	cmp	r3, #127	; 0x7f
 800624c:	d8f0      	bhi.n	8006230 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	61fa      	str	r2, [r7, #28]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800625e:	2215      	movs	r2, #21
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6938      	ldr	r0, [r7, #16]
 8006264:	f7ff fa2c 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
 8006270:	3748      	adds	r7, #72	; 0x48
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2001a6b8 	.word	0x2001a6b8
 800627c:	2001a688 	.word	0x2001a688

08006280 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006296:	4b03      	ldr	r3, [pc, #12]	; (80062a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4798      	blx	r3
  }
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2001a688 	.word	0x2001a688

080062a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062b0:	f3ef 8311 	mrs	r3, BASEPRI
 80062b4:	f04f 0120 	mov.w	r1, #32
 80062b8:	f381 8811 	msr	BASEPRI, r1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	480b      	ldr	r0, [pc, #44]	; (80062ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80062c0:	f7ff f914 	bl	80054ec <_PreparePacket>
 80062c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062c6:	2280      	movs	r2, #128	; 0x80
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	6938      	ldr	r0, [r7, #16]
 80062cc:	f7ff f8be 	bl	800544c <_EncodeStr>
 80062d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80062d2:	220e      	movs	r2, #14
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7ff f9f2 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f383 8811 	msr	BASEPRI, r3
}
 80062e2:	bf00      	nop
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2001a6b8 	.word	0x2001a6b8

080062f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d019      	beq.n	8006332 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d014      	beq.n	8006332 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4798      	blx	r3
 8006310:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006314:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006316:	e9d7 1200 	ldrd	r1, r2, [r7]
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	0013      	movs	r3, r2
 8006324:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006326:	461a      	mov	r2, r3
 8006328:	4601      	mov	r1, r0
 800632a:	200d      	movs	r0, #13
 800632c:	f7ff fbe6 	bl	8005afc <SEGGER_SYSVIEW_RecordU32x2>
 8006330:	e005      	b.n	800633e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	200c      	movs	r0, #12
 800633a:	f7ff fba3 	bl	8005a84 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	2001a688 	.word	0x2001a688
 800634c:	e0001004 	.word	0xe0001004

08006350 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006356:	f3ef 8311 	mrs	r3, BASEPRI
 800635a:	f04f 0120 	mov.w	r1, #32
 800635e:	f381 8811 	msr	BASEPRI, r1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	4819      	ldr	r0, [pc, #100]	; (80063cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006366:	f7ff f8c1 	bl	80054ec <_PreparePacket>
 800636a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e00b      	b.n	800639c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	6179      	str	r1, [r7, #20]
 800638e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	09db      	lsrs	r3, r3, #7
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b7f      	cmp	r3, #127	; 0x7f
 80063a0:	d8f0      	bhi.n	8006384 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	617a      	str	r2, [r7, #20]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80063b2:	2202      	movs	r2, #2
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	68b8      	ldr	r0, [r7, #8]
 80063b8:	f7ff f982 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f383 8811 	msr	BASEPRI, r3
}
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	2001a6b8 	.word	0x2001a6b8
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063da:	f3ef 8311 	mrs	r3, BASEPRI
 80063de:	f04f 0120 	mov.w	r1, #32
 80063e2:	f381 8811 	msr	BASEPRI, r1
 80063e6:	607b      	str	r3, [r7, #4]
 80063e8:	4807      	ldr	r0, [pc, #28]	; (8006408 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80063ea:	f7ff f87f 	bl	80054ec <_PreparePacket>
 80063ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80063f0:	2203      	movs	r2, #3
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6838      	ldr	r0, [r7, #0]
 80063f6:	f7ff f963 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f383 8811 	msr	BASEPRI, r3
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	2001a6b8 	.word	0x2001a6b8

0800640c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006412:	f3ef 8311 	mrs	r3, BASEPRI
 8006416:	f04f 0120 	mov.w	r1, #32
 800641a:	f381 8811 	msr	BASEPRI, r1
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	4807      	ldr	r0, [pc, #28]	; (8006440 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006422:	f7ff f863 	bl	80054ec <_PreparePacket>
 8006426:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006428:	2212      	movs	r2, #18
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6838      	ldr	r0, [r7, #0]
 800642e:	f7ff f947 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f383 8811 	msr	BASEPRI, r3
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	2001a6b8 	.word	0x2001a6b8

08006444 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800644a:	f3ef 8311 	mrs	r3, BASEPRI
 800644e:	f04f 0120 	mov.w	r1, #32
 8006452:	f381 8811 	msr	BASEPRI, r1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	4807      	ldr	r0, [pc, #28]	; (8006478 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800645a:	f7ff f847 	bl	80054ec <_PreparePacket>
 800645e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006460:	2211      	movs	r2, #17
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6838      	ldr	r0, [r7, #0]
 8006466:	f7ff f92b 	bl	80056c0 <_SendPacket>
  RECORD_END();
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f383 8811 	msr	BASEPRI, r3
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	2001a6b8 	.word	0x2001a6b8

0800647c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006484:	f3ef 8311 	mrs	r3, BASEPRI
 8006488:	f04f 0120 	mov.w	r1, #32
 800648c:	f381 8811 	msr	BASEPRI, r1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	4819      	ldr	r0, [pc, #100]	; (80064f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006494:	f7ff f82a 	bl	80054ec <_PreparePacket>
 8006498:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800649e:	4b17      	ldr	r3, [pc, #92]	; (80064fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e00b      	b.n	80064ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	1c59      	adds	r1, r3, #1
 80064ba:	61f9      	str	r1, [r7, #28]
 80064bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	09db      	lsrs	r3, r3, #7
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b7f      	cmp	r3, #127	; 0x7f
 80064ce:	d8f0      	bhi.n	80064b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	61fa      	str	r2, [r7, #28]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80064e0:	2208      	movs	r2, #8
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	6938      	ldr	r0, [r7, #16]
 80064e6:	f7ff f8eb 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f383 8811 	msr	BASEPRI, r3
}
 80064f0:	bf00      	nop
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	2001a6b8 	.word	0x2001a6b8
 80064fc:	2001a688 	.word	0x2001a688

08006500 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006508:	f3ef 8311 	mrs	r3, BASEPRI
 800650c:	f04f 0120 	mov.w	r1, #32
 8006510:	f381 8811 	msr	BASEPRI, r1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	4819      	ldr	r0, [pc, #100]	; (800657c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006518:	f7fe ffe8 	bl	80054ec <_PreparePacket>
 800651c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006522:	4b17      	ldr	r3, [pc, #92]	; (8006580 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e00b      	b.n	800654e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	1c59      	adds	r1, r3, #1
 800653e:	61f9      	str	r1, [r7, #28]
 8006540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	09db      	lsrs	r3, r3, #7
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b7f      	cmp	r3, #127	; 0x7f
 8006552:	d8f0      	bhi.n	8006536 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006564:	2204      	movs	r2, #4
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f7ff f8a9 	bl	80056c0 <_SendPacket>
  RECORD_END();
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f383 8811 	msr	BASEPRI, r3
}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	2001a6b8 	.word	0x2001a6b8
 8006580:	2001a688 	.word	0x2001a688

08006584 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800658c:	f3ef 8311 	mrs	r3, BASEPRI
 8006590:	f04f 0120 	mov.w	r1, #32
 8006594:	f381 8811 	msr	BASEPRI, r1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	4819      	ldr	r0, [pc, #100]	; (8006600 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800659c:	f7fe ffa6 	bl	80054ec <_PreparePacket>
 80065a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e00b      	b.n	80065d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	61f9      	str	r1, [r7, #28]
 80065c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	09db      	lsrs	r3, r3, #7
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b7f      	cmp	r3, #127	; 0x7f
 80065d6:	d8f0      	bhi.n	80065ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	61fa      	str	r2, [r7, #28]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80065e8:	2206      	movs	r2, #6
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	6938      	ldr	r0, [r7, #16]
 80065ee:	f7ff f867 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f383 8811 	msr	BASEPRI, r3
}
 80065f8:	bf00      	nop
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	2001a6b8 	.word	0x2001a6b8
 8006604:	2001a688 	.word	0x2001a688

08006608 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006612:	f3ef 8311 	mrs	r3, BASEPRI
 8006616:	f04f 0120 	mov.w	r1, #32
 800661a:	f381 8811 	msr	BASEPRI, r1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	4827      	ldr	r0, [pc, #156]	; (80066c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006622:	f7fe ff63 	bl	80054ec <_PreparePacket>
 8006626:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	6279      	str	r1, [r7, #36]	; 0x24
 800664a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	623b      	str	r3, [r7, #32]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2b7f      	cmp	r3, #127	; 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	627a      	str	r2, [r7, #36]	; 0x24
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	61f9      	str	r1, [r7, #28]
 8006682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b7f      	cmp	r3, #127	; 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	61fa      	str	r2, [r7, #28]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80066a6:	2207      	movs	r2, #7
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f7ff f808 	bl	80056c0 <_SendPacket>
  RECORD_END();
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f383 8811 	msr	BASEPRI, r3
}
 80066b6:	bf00      	nop
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	2001a6b8 	.word	0x2001a6b8
 80066c4:	2001a688 	.word	0x2001a688

080066c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	1ad3      	subs	r3, r2, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	2001a688 	.word	0x2001a688

080066e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06d      	beq.n	80067d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006700:	2300      	movs	r3, #0
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
 8006704:	e008      	b.n	8006718 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	3301      	adds	r3, #1
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	429a      	cmp	r2, r3
 800671e:	d3f2      	bcc.n	8006706 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006720:	e000      	b.n	8006724 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006722:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d055      	beq.n	80067d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800672a:	f3ef 8311 	mrs	r3, BASEPRI
 800672e:	f04f 0120 	mov.w	r1, #32
 8006732:	f381 8811 	msr	BASEPRI, r1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	482a      	ldr	r0, [pc, #168]	; (80067e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800673a:	f7fe fed7 	bl	80054ec <_PreparePacket>
 800673e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	623b      	str	r3, [r7, #32]
 800674c:	e00b      	b.n	8006766 <SEGGER_SYSVIEW_SendModule+0x7e>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	1c59      	adds	r1, r3, #1
 8006756:	6279      	str	r1, [r7, #36]	; 0x24
 8006758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b7f      	cmp	r3, #127	; 0x7f
 800676a:	d8f0      	bhi.n	800674e <SEGGER_SYSVIEW_SendModule+0x66>
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	627a      	str	r2, [r7, #36]	; 0x24
 8006772:	6a3a      	ldr	r2, [r7, #32]
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e00b      	b.n	80067a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	61f9      	str	r1, [r7, #28]
 8006792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	09db      	lsrs	r3, r3, #7
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b7f      	cmp	r3, #127	; 0x7f
 80067a4:	d8f0      	bhi.n	8006788 <SEGGER_SYSVIEW_SendModule+0xa0>
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	61fa      	str	r2, [r7, #28]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fe fe44 	bl	800544c <_EncodeStr>
 80067c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80067c6:	2216      	movs	r2, #22
 80067c8:	68f9      	ldr	r1, [r7, #12]
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f7fe ff78 	bl	80056c0 <_SendPacket>
      RECORD_END();
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80067d6:	bf00      	nop
 80067d8:	3730      	adds	r7, #48	; 0x30
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	2001a6b0 	.word	0x2001a6b0
 80067e4:	2001a6b8 	.word	0x2001a6b8

080067e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00f      	beq.n	8006816 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f2      	bne.n	80067fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	2001a6b0 	.word	0x2001a6b0

08006824 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800682a:	f3ef 8311 	mrs	r3, BASEPRI
 800682e:	f04f 0120 	mov.w	r1, #32
 8006832:	f381 8811 	msr	BASEPRI, r1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	4817      	ldr	r0, [pc, #92]	; (8006898 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800683a:	f7fe fe57 	bl	80054ec <_PreparePacket>
 800683e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	4b14      	ldr	r3, [pc, #80]	; (800689c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e00b      	b.n	8006868 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	6179      	str	r1, [r7, #20]
 800685a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	09db      	lsrs	r3, r3, #7
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b7f      	cmp	r3, #127	; 0x7f
 800686c:	d8f0      	bhi.n	8006850 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	617a      	str	r2, [r7, #20]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800687e:	221b      	movs	r2, #27
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f7fe ff1c 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f383 8811 	msr	BASEPRI, r3
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	2001a6b8 	.word	0x2001a6b8
 800689c:	2001a6b4 	.word	0x2001a6b4

080068a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068a8:	f3ef 8311 	mrs	r3, BASEPRI
 80068ac:	f04f 0120 	mov.w	r1, #32
 80068b0:	f381 8811 	msr	BASEPRI, r1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	4827      	ldr	r0, [pc, #156]	; (8006954 <SEGGER_SYSVIEW_Warn+0xb4>)
 80068b8:	f7fe fe18 	bl	80054ec <_PreparePacket>
 80068bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068be:	2280      	movs	r2, #128	; 0x80
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	6938      	ldr	r0, [r7, #16]
 80068c4:	f7fe fdc2 	bl	800544c <_EncodeStr>
 80068c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	2301      	movs	r3, #1
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	e00b      	b.n	80068ec <SEGGER_SYSVIEW_Warn+0x4c>
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	6279      	str	r1, [r7, #36]	; 0x24
 80068de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	623b      	str	r3, [r7, #32]
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b7f      	cmp	r3, #127	; 0x7f
 80068f0:	d8f0      	bhi.n	80068d4 <SEGGER_SYSVIEW_Warn+0x34>
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	627a      	str	r2, [r7, #36]	; 0x24
 80068f8:	6a3a      	ldr	r2, [r7, #32]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_Warn+0x84>
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	61f9      	str	r1, [r7, #28]
 8006916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b7f      	cmp	r3, #127	; 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_Warn+0x6c>
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	61fa      	str	r2, [r7, #28]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800693a:	221a      	movs	r2, #26
 800693c:	68f9      	ldr	r1, [r7, #12]
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f7fe febe 	bl	80056c0 <_SendPacket>
  RECORD_END();
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f383 8811 	msr	BASEPRI, r3
}
 800694a:	bf00      	nop
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2001a6b8 	.word	0x2001a6b8

08006958 <__errno>:
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <__errno+0x8>)
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000014 	.word	0x20000014

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4e0d      	ldr	r6, [pc, #52]	; (800699c <__libc_init_array+0x38>)
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <__libc_init_array+0x3c>)
 800696a:	1ba4      	subs	r4, r4, r6
 800696c:	10a4      	asrs	r4, r4, #2
 800696e:	2500      	movs	r5, #0
 8006970:	42a5      	cmp	r5, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	4e0b      	ldr	r6, [pc, #44]	; (80069a4 <__libc_init_array+0x40>)
 8006976:	4c0c      	ldr	r4, [pc, #48]	; (80069a8 <__libc_init_array+0x44>)
 8006978:	f000 fc72 	bl	8007260 <_init>
 800697c:	1ba4      	subs	r4, r4, r6
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	2500      	movs	r5, #0
 8006982:	42a5      	cmp	r5, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800698c:	4798      	blx	r3
 800698e:	3501      	adds	r5, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006996:	4798      	blx	r3
 8006998:	3501      	adds	r5, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	08007484 	.word	0x08007484
 80069a0:	08007484 	.word	0x08007484
 80069a4:	08007484 	.word	0x08007484
 80069a8:	08007488 	.word	0x08007488

080069ac <memcmp>:
 80069ac:	b530      	push	{r4, r5, lr}
 80069ae:	2400      	movs	r4, #0
 80069b0:	42a2      	cmp	r2, r4
 80069b2:	d101      	bne.n	80069b8 <memcmp+0xc>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e007      	b.n	80069c8 <memcmp+0x1c>
 80069b8:	5d03      	ldrb	r3, [r0, r4]
 80069ba:	3401      	adds	r4, #1
 80069bc:	190d      	adds	r5, r1, r4
 80069be:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	d0f4      	beq.n	80069b0 <memcmp+0x4>
 80069c6:	1b58      	subs	r0, r3, r5
 80069c8:	bd30      	pop	{r4, r5, pc}

080069ca <memcpy>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	1e43      	subs	r3, r0, #1
 80069ce:	440a      	add	r2, r1
 80069d0:	4291      	cmp	r1, r2
 80069d2:	d100      	bne.n	80069d6 <memcpy+0xc>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069de:	e7f7      	b.n	80069d0 <memcpy+0x6>

080069e0 <memset>:
 80069e0:	4402      	add	r2, r0
 80069e2:	4603      	mov	r3, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d100      	bne.n	80069ea <memset+0xa>
 80069e8:	4770      	bx	lr
 80069ea:	f803 1b01 	strb.w	r1, [r3], #1
 80069ee:	e7f9      	b.n	80069e4 <memset+0x4>

080069f0 <rand>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <rand+0x50>)
 80069f4:	681c      	ldr	r4, [r3, #0]
 80069f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f8:	b97b      	cbnz	r3, 8006a1a <rand+0x2a>
 80069fa:	2018      	movs	r0, #24
 80069fc:	f000 f84c 	bl	8006a98 <malloc>
 8006a00:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <rand+0x54>)
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <rand+0x58>)
 8006a04:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a06:	e9c0 2300 	strd	r2, r3, [r0]
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <rand+0x5c>)
 8006a0c:	6083      	str	r3, [r0, #8]
 8006a0e:	230b      	movs	r3, #11
 8006a10:	8183      	strh	r3, [r0, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	2300      	movs	r3, #0
 8006a16:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006a1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a1c:	480c      	ldr	r0, [pc, #48]	; (8006a50 <rand+0x60>)
 8006a1e:	690a      	ldr	r2, [r1, #16]
 8006a20:	694b      	ldr	r3, [r1, #20]
 8006a22:	4c0c      	ldr	r4, [pc, #48]	; (8006a54 <rand+0x64>)
 8006a24:	4350      	muls	r0, r2
 8006a26:	fb04 0003 	mla	r0, r4, r3, r0
 8006a2a:	fba2 2304 	umull	r2, r3, r2, r4
 8006a2e:	4403      	add	r3, r0
 8006a30:	1c54      	adds	r4, r2, #1
 8006a32:	f143 0500 	adc.w	r5, r3, #0
 8006a36:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006a3a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000014 	.word	0x20000014
 8006a44:	abcd330e 	.word	0xabcd330e
 8006a48:	e66d1234 	.word	0xe66d1234
 8006a4c:	0005deec 	.word	0x0005deec
 8006a50:	5851f42d 	.word	0x5851f42d
 8006a54:	4c957f2d 	.word	0x4c957f2d

08006a58 <siprintf>:
 8006a58:	b40e      	push	{r1, r2, r3}
 8006a5a:	b500      	push	{lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a68:	4809      	ldr	r0, [pc, #36]	; (8006a90 <siprintf+0x38>)
 8006a6a:	9107      	str	r1, [sp, #28]
 8006a6c:	9104      	str	r1, [sp, #16]
 8006a6e:	4909      	ldr	r1, [pc, #36]	; (8006a94 <siprintf+0x3c>)
 8006a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a74:	9105      	str	r1, [sp, #20]
 8006a76:	6800      	ldr	r0, [r0, #0]
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	a902      	add	r1, sp, #8
 8006a7c:	f000 f916 	bl	8006cac <_svfiprintf_r>
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	b01c      	add	sp, #112	; 0x70
 8006a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a8c:	b003      	add	sp, #12
 8006a8e:	4770      	bx	lr
 8006a90:	20000014 	.word	0x20000014
 8006a94:	ffff0208 	.word	0xffff0208

08006a98 <malloc>:
 8006a98:	4b02      	ldr	r3, [pc, #8]	; (8006aa4 <malloc+0xc>)
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f000 b851 	b.w	8006b44 <_malloc_r>
 8006aa2:	bf00      	nop
 8006aa4:	20000014 	.word	0x20000014

08006aa8 <_free_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4605      	mov	r5, r0
 8006aac:	2900      	cmp	r1, #0
 8006aae:	d045      	beq.n	8006b3c <_free_r+0x94>
 8006ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab4:	1f0c      	subs	r4, r1, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bfb8      	it	lt
 8006aba:	18e4      	addlt	r4, r4, r3
 8006abc:	f000 fb9f 	bl	80071fe <__malloc_lock>
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <_free_r+0x98>)
 8006ac2:	6813      	ldr	r3, [r2, #0]
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	b933      	cbnz	r3, 8006ad6 <_free_r+0x2e>
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	6014      	str	r4, [r2, #0]
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad2:	f000 bb95 	b.w	8007200 <__malloc_unlock>
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	d90c      	bls.n	8006af4 <_free_r+0x4c>
 8006ada:	6821      	ldr	r1, [r4, #0]
 8006adc:	1862      	adds	r2, r4, r1
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bf04      	itt	eq
 8006ae2:	681a      	ldreq	r2, [r3, #0]
 8006ae4:	685b      	ldreq	r3, [r3, #4]
 8006ae6:	6063      	str	r3, [r4, #4]
 8006ae8:	bf04      	itt	eq
 8006aea:	1852      	addeq	r2, r2, r1
 8006aec:	6022      	streq	r2, [r4, #0]
 8006aee:	6004      	str	r4, [r0, #0]
 8006af0:	e7ec      	b.n	8006acc <_free_r+0x24>
 8006af2:	4613      	mov	r3, r2
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	b10a      	cbz	r2, 8006afc <_free_r+0x54>
 8006af8:	42a2      	cmp	r2, r4
 8006afa:	d9fa      	bls.n	8006af2 <_free_r+0x4a>
 8006afc:	6819      	ldr	r1, [r3, #0]
 8006afe:	1858      	adds	r0, r3, r1
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d10b      	bne.n	8006b1c <_free_r+0x74>
 8006b04:	6820      	ldr	r0, [r4, #0]
 8006b06:	4401      	add	r1, r0
 8006b08:	1858      	adds	r0, r3, r1
 8006b0a:	4282      	cmp	r2, r0
 8006b0c:	6019      	str	r1, [r3, #0]
 8006b0e:	d1dd      	bne.n	8006acc <_free_r+0x24>
 8006b10:	6810      	ldr	r0, [r2, #0]
 8006b12:	6852      	ldr	r2, [r2, #4]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	4401      	add	r1, r0
 8006b18:	6019      	str	r1, [r3, #0]
 8006b1a:	e7d7      	b.n	8006acc <_free_r+0x24>
 8006b1c:	d902      	bls.n	8006b24 <_free_r+0x7c>
 8006b1e:	230c      	movs	r3, #12
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	e7d3      	b.n	8006acc <_free_r+0x24>
 8006b24:	6820      	ldr	r0, [r4, #0]
 8006b26:	1821      	adds	r1, r4, r0
 8006b28:	428a      	cmp	r2, r1
 8006b2a:	bf04      	itt	eq
 8006b2c:	6811      	ldreq	r1, [r2, #0]
 8006b2e:	6852      	ldreq	r2, [r2, #4]
 8006b30:	6062      	str	r2, [r4, #4]
 8006b32:	bf04      	itt	eq
 8006b34:	1809      	addeq	r1, r1, r0
 8006b36:	6021      	streq	r1, [r4, #0]
 8006b38:	605c      	str	r4, [r3, #4]
 8006b3a:	e7c7      	b.n	8006acc <_free_r+0x24>
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	bf00      	nop
 8006b40:	2001a79c 	.word	0x2001a79c

08006b44 <_malloc_r>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	1ccd      	adds	r5, r1, #3
 8006b48:	f025 0503 	bic.w	r5, r5, #3
 8006b4c:	3508      	adds	r5, #8
 8006b4e:	2d0c      	cmp	r5, #12
 8006b50:	bf38      	it	cc
 8006b52:	250c      	movcc	r5, #12
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	4606      	mov	r6, r0
 8006b58:	db01      	blt.n	8006b5e <_malloc_r+0x1a>
 8006b5a:	42a9      	cmp	r1, r5
 8006b5c:	d903      	bls.n	8006b66 <_malloc_r+0x22>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	2000      	movs	r0, #0
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	f000 fb4a 	bl	80071fe <__malloc_lock>
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <_malloc_r+0xac>)
 8006b6c:	6814      	ldr	r4, [r2, #0]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	b991      	cbnz	r1, 8006b98 <_malloc_r+0x54>
 8006b72:	4c20      	ldr	r4, [pc, #128]	; (8006bf4 <_malloc_r+0xb0>)
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	b91b      	cbnz	r3, 8006b80 <_malloc_r+0x3c>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 fb17 	bl	80071ac <_sbrk_r>
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 fb12 	bl	80071ac <_sbrk_r>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d124      	bne.n	8006bd6 <_malloc_r+0x92>
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	6033      	str	r3, [r6, #0]
 8006b90:	4630      	mov	r0, r6
 8006b92:	f000 fb35 	bl	8007200 <__malloc_unlock>
 8006b96:	e7e4      	b.n	8006b62 <_malloc_r+0x1e>
 8006b98:	680b      	ldr	r3, [r1, #0]
 8006b9a:	1b5b      	subs	r3, r3, r5
 8006b9c:	d418      	bmi.n	8006bd0 <_malloc_r+0x8c>
 8006b9e:	2b0b      	cmp	r3, #11
 8006ba0:	d90f      	bls.n	8006bc2 <_malloc_r+0x7e>
 8006ba2:	600b      	str	r3, [r1, #0]
 8006ba4:	50cd      	str	r5, [r1, r3]
 8006ba6:	18cc      	adds	r4, r1, r3
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 fb29 	bl	8007200 <__malloc_unlock>
 8006bae:	f104 000b 	add.w	r0, r4, #11
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	f020 0007 	bic.w	r0, r0, #7
 8006bb8:	1ac3      	subs	r3, r0, r3
 8006bba:	d0d3      	beq.n	8006b64 <_malloc_r+0x20>
 8006bbc:	425a      	negs	r2, r3
 8006bbe:	50e2      	str	r2, [r4, r3]
 8006bc0:	e7d0      	b.n	8006b64 <_malloc_r+0x20>
 8006bc2:	428c      	cmp	r4, r1
 8006bc4:	684b      	ldr	r3, [r1, #4]
 8006bc6:	bf16      	itet	ne
 8006bc8:	6063      	strne	r3, [r4, #4]
 8006bca:	6013      	streq	r3, [r2, #0]
 8006bcc:	460c      	movne	r4, r1
 8006bce:	e7eb      	b.n	8006ba8 <_malloc_r+0x64>
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	6849      	ldr	r1, [r1, #4]
 8006bd4:	e7cc      	b.n	8006b70 <_malloc_r+0x2c>
 8006bd6:	1cc4      	adds	r4, r0, #3
 8006bd8:	f024 0403 	bic.w	r4, r4, #3
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d005      	beq.n	8006bec <_malloc_r+0xa8>
 8006be0:	1a21      	subs	r1, r4, r0
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 fae2 	bl	80071ac <_sbrk_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d0cf      	beq.n	8006b8c <_malloc_r+0x48>
 8006bec:	6025      	str	r5, [r4, #0]
 8006bee:	e7db      	b.n	8006ba8 <_malloc_r+0x64>
 8006bf0:	2001a79c 	.word	0x2001a79c
 8006bf4:	2001a7a0 	.word	0x2001a7a0

08006bf8 <__ssputs_r>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	688e      	ldr	r6, [r1, #8]
 8006bfe:	429e      	cmp	r6, r3
 8006c00:	4682      	mov	sl, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	4690      	mov	r8, r2
 8006c06:	4699      	mov	r9, r3
 8006c08:	d837      	bhi.n	8006c7a <__ssputs_r+0x82>
 8006c0a:	898a      	ldrh	r2, [r1, #12]
 8006c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c10:	d031      	beq.n	8006c76 <__ssputs_r+0x7e>
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	6909      	ldr	r1, [r1, #16]
 8006c16:	1a6f      	subs	r7, r5, r1
 8006c18:	6965      	ldr	r5, [r4, #20]
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c24:	f109 0301 	add.w	r3, r9, #1
 8006c28:	443b      	add	r3, r7
 8006c2a:	429d      	cmp	r5, r3
 8006c2c:	bf38      	it	cc
 8006c2e:	461d      	movcc	r5, r3
 8006c30:	0553      	lsls	r3, r2, #21
 8006c32:	d530      	bpl.n	8006c96 <__ssputs_r+0x9e>
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7ff ff85 	bl	8006b44 <_malloc_r>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	b950      	cbnz	r0, 8006c54 <__ssputs_r+0x5c>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	f8ca 3000 	str.w	r3, [sl]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	463a      	mov	r2, r7
 8006c56:	6921      	ldr	r1, [r4, #16]
 8006c58:	f7ff feb7 	bl	80069ca <memcpy>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	6126      	str	r6, [r4, #16]
 8006c6a:	6165      	str	r5, [r4, #20]
 8006c6c:	443e      	add	r6, r7
 8006c6e:	1bed      	subs	r5, r5, r7
 8006c70:	6026      	str	r6, [r4, #0]
 8006c72:	60a5      	str	r5, [r4, #8]
 8006c74:	464e      	mov	r6, r9
 8006c76:	454e      	cmp	r6, r9
 8006c78:	d900      	bls.n	8006c7c <__ssputs_r+0x84>
 8006c7a:	464e      	mov	r6, r9
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4641      	mov	r1, r8
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	f000 faa3 	bl	80071cc <memmove>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	1b9b      	subs	r3, r3, r6
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	441e      	add	r6, r3
 8006c90:	6026      	str	r6, [r4, #0]
 8006c92:	2000      	movs	r0, #0
 8006c94:	e7dc      	b.n	8006c50 <__ssputs_r+0x58>
 8006c96:	462a      	mov	r2, r5
 8006c98:	f000 fab3 	bl	8007202 <_realloc_r>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1e2      	bne.n	8006c68 <__ssputs_r+0x70>
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	f7ff feff 	bl	8006aa8 <_free_r>
 8006caa:	e7c8      	b.n	8006c3e <__ssputs_r+0x46>

08006cac <_svfiprintf_r>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	461d      	mov	r5, r3
 8006cb2:	898b      	ldrh	r3, [r1, #12]
 8006cb4:	061f      	lsls	r7, r3, #24
 8006cb6:	b09d      	sub	sp, #116	; 0x74
 8006cb8:	4680      	mov	r8, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	d50f      	bpl.n	8006ce0 <_svfiprintf_r+0x34>
 8006cc0:	690b      	ldr	r3, [r1, #16]
 8006cc2:	b96b      	cbnz	r3, 8006ce0 <_svfiprintf_r+0x34>
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	f7ff ff3d 	bl	8006b44 <_malloc_r>
 8006cca:	6020      	str	r0, [r4, #0]
 8006ccc:	6120      	str	r0, [r4, #16]
 8006cce:	b928      	cbnz	r0, 8006cdc <_svfiprintf_r+0x30>
 8006cd0:	230c      	movs	r3, #12
 8006cd2:	f8c8 3000 	str.w	r3, [r8]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cda:	e0c8      	b.n	8006e6e <_svfiprintf_r+0x1c2>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	6163      	str	r3, [r4, #20]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cea:	2330      	movs	r3, #48	; 0x30
 8006cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cf0:	9503      	str	r5, [sp, #12]
 8006cf2:	f04f 0b01 	mov.w	fp, #1
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	463d      	mov	r5, r7
 8006cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cfe:	b10b      	cbz	r3, 8006d04 <_svfiprintf_r+0x58>
 8006d00:	2b25      	cmp	r3, #37	; 0x25
 8006d02:	d13e      	bne.n	8006d82 <_svfiprintf_r+0xd6>
 8006d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d08:	d00b      	beq.n	8006d22 <_svfiprintf_r+0x76>
 8006d0a:	4653      	mov	r3, sl
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4640      	mov	r0, r8
 8006d12:	f7ff ff71 	bl	8006bf8 <__ssputs_r>
 8006d16:	3001      	adds	r0, #1
 8006d18:	f000 80a4 	beq.w	8006e64 <_svfiprintf_r+0x1b8>
 8006d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1e:	4453      	add	r3, sl
 8006d20:	9309      	str	r3, [sp, #36]	; 0x24
 8006d22:	783b      	ldrb	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 809d 	beq.w	8006e64 <_svfiprintf_r+0x1b8>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d3e:	462f      	mov	r7, r5
 8006d40:	2205      	movs	r2, #5
 8006d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d46:	4850      	ldr	r0, [pc, #320]	; (8006e88 <_svfiprintf_r+0x1dc>)
 8006d48:	f7f9 faa2 	bl	8000290 <memchr>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	b9d0      	cbnz	r0, 8006d86 <_svfiprintf_r+0xda>
 8006d50:	06d9      	lsls	r1, r3, #27
 8006d52:	bf44      	itt	mi
 8006d54:	2220      	movmi	r2, #32
 8006d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d5a:	071a      	lsls	r2, r3, #28
 8006d5c:	bf44      	itt	mi
 8006d5e:	222b      	movmi	r2, #43	; 0x2b
 8006d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d64:	782a      	ldrb	r2, [r5, #0]
 8006d66:	2a2a      	cmp	r2, #42	; 0x2a
 8006d68:	d015      	beq.n	8006d96 <_svfiprintf_r+0xea>
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	462f      	mov	r7, r5
 8006d6e:	2000      	movs	r0, #0
 8006d70:	250a      	movs	r5, #10
 8006d72:	4639      	mov	r1, r7
 8006d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d78:	3b30      	subs	r3, #48	; 0x30
 8006d7a:	2b09      	cmp	r3, #9
 8006d7c:	d94d      	bls.n	8006e1a <_svfiprintf_r+0x16e>
 8006d7e:	b1b8      	cbz	r0, 8006db0 <_svfiprintf_r+0x104>
 8006d80:	e00f      	b.n	8006da2 <_svfiprintf_r+0xf6>
 8006d82:	462f      	mov	r7, r5
 8006d84:	e7b8      	b.n	8006cf8 <_svfiprintf_r+0x4c>
 8006d86:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <_svfiprintf_r+0x1dc>)
 8006d88:	1a80      	subs	r0, r0, r2
 8006d8a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d8e:	4318      	orrs	r0, r3
 8006d90:	9004      	str	r0, [sp, #16]
 8006d92:	463d      	mov	r5, r7
 8006d94:	e7d3      	b.n	8006d3e <_svfiprintf_r+0x92>
 8006d96:	9a03      	ldr	r2, [sp, #12]
 8006d98:	1d11      	adds	r1, r2, #4
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	9103      	str	r1, [sp, #12]
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	db01      	blt.n	8006da6 <_svfiprintf_r+0xfa>
 8006da2:	9207      	str	r2, [sp, #28]
 8006da4:	e004      	b.n	8006db0 <_svfiprintf_r+0x104>
 8006da6:	4252      	negs	r2, r2
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	9207      	str	r2, [sp, #28]
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	783b      	ldrb	r3, [r7, #0]
 8006db2:	2b2e      	cmp	r3, #46	; 0x2e
 8006db4:	d10c      	bne.n	8006dd0 <_svfiprintf_r+0x124>
 8006db6:	787b      	ldrb	r3, [r7, #1]
 8006db8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dba:	d133      	bne.n	8006e24 <_svfiprintf_r+0x178>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	1d1a      	adds	r2, r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	9203      	str	r2, [sp, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bfb8      	it	lt
 8006dc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dcc:	3702      	adds	r7, #2
 8006dce:	9305      	str	r3, [sp, #20]
 8006dd0:	4d2e      	ldr	r5, [pc, #184]	; (8006e8c <_svfiprintf_r+0x1e0>)
 8006dd2:	7839      	ldrb	r1, [r7, #0]
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7f9 fa5a 	bl	8000290 <memchr>
 8006ddc:	b138      	cbz	r0, 8006dee <_svfiprintf_r+0x142>
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	1b40      	subs	r0, r0, r5
 8006de2:	fa03 f000 	lsl.w	r0, r3, r0
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	4303      	orrs	r3, r0
 8006dea:	3701      	adds	r7, #1
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	7839      	ldrb	r1, [r7, #0]
 8006df0:	4827      	ldr	r0, [pc, #156]	; (8006e90 <_svfiprintf_r+0x1e4>)
 8006df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006df6:	2206      	movs	r2, #6
 8006df8:	1c7e      	adds	r6, r7, #1
 8006dfa:	f7f9 fa49 	bl	8000290 <memchr>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d038      	beq.n	8006e74 <_svfiprintf_r+0x1c8>
 8006e02:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <_svfiprintf_r+0x1e8>)
 8006e04:	bb13      	cbnz	r3, 8006e4c <_svfiprintf_r+0x1a0>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	3307      	adds	r3, #7
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	3308      	adds	r3, #8
 8006e10:	9303      	str	r3, [sp, #12]
 8006e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e14:	444b      	add	r3, r9
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
 8006e18:	e76d      	b.n	8006cf6 <_svfiprintf_r+0x4a>
 8006e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e1e:	2001      	movs	r0, #1
 8006e20:	460f      	mov	r7, r1
 8006e22:	e7a6      	b.n	8006d72 <_svfiprintf_r+0xc6>
 8006e24:	2300      	movs	r3, #0
 8006e26:	3701      	adds	r7, #1
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	250a      	movs	r5, #10
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e34:	3a30      	subs	r2, #48	; 0x30
 8006e36:	2a09      	cmp	r2, #9
 8006e38:	d903      	bls.n	8006e42 <_svfiprintf_r+0x196>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0c8      	beq.n	8006dd0 <_svfiprintf_r+0x124>
 8006e3e:	9105      	str	r1, [sp, #20]
 8006e40:	e7c6      	b.n	8006dd0 <_svfiprintf_r+0x124>
 8006e42:	fb05 2101 	mla	r1, r5, r1, r2
 8006e46:	2301      	movs	r3, #1
 8006e48:	4607      	mov	r7, r0
 8006e4a:	e7f0      	b.n	8006e2e <_svfiprintf_r+0x182>
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4622      	mov	r2, r4
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <_svfiprintf_r+0x1ec>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4640      	mov	r0, r8
 8006e58:	f3af 8000 	nop.w
 8006e5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006e60:	4681      	mov	r9, r0
 8006e62:	d1d6      	bne.n	8006e12 <_svfiprintf_r+0x166>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	065b      	lsls	r3, r3, #25
 8006e68:	f53f af35 	bmi.w	8006cd6 <_svfiprintf_r+0x2a>
 8006e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e6e:	b01d      	add	sp, #116	; 0x74
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <_svfiprintf_r+0x1ec>)
 8006e7c:	a904      	add	r1, sp, #16
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f000 f882 	bl	8006f88 <_printf_i>
 8006e84:	e7ea      	b.n	8006e5c <_svfiprintf_r+0x1b0>
 8006e86:	bf00      	nop
 8006e88:	08007446 	.word	0x08007446
 8006e8c:	0800744c 	.word	0x0800744c
 8006e90:	08007450 	.word	0x08007450
 8006e94:	00000000 	.word	0x00000000
 8006e98:	08006bf9 	.word	0x08006bf9

08006e9c <_printf_common>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	688a      	ldr	r2, [r1, #8]
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfb8      	it	lt
 8006eb0:	4613      	movlt	r3, r2
 8006eb2:	f8c9 3000 	str.w	r3, [r9]
 8006eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	b112      	cbz	r2, 8006ec6 <_printf_common+0x2a>
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f8c9 3000 	str.w	r3, [r9]
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	0699      	lsls	r1, r3, #26
 8006eca:	bf42      	ittt	mi
 8006ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ed0:	3302      	addmi	r3, #2
 8006ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	f015 0506 	ands.w	r5, r5, #6
 8006edc:	d107      	bne.n	8006eee <_printf_common+0x52>
 8006ede:	f104 0a19 	add.w	sl, r4, #25
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	dc28      	bgt.n	8006f40 <_printf_common+0xa4>
 8006eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ef2:	6822      	ldr	r2, [r4, #0]
 8006ef4:	3300      	adds	r3, #0
 8006ef6:	bf18      	it	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	0692      	lsls	r2, r2, #26
 8006efc:	d42d      	bmi.n	8006f5a <_printf_common+0xbe>
 8006efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f02:	4639      	mov	r1, r7
 8006f04:	4630      	mov	r0, r6
 8006f06:	47c0      	blx	r8
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d020      	beq.n	8006f4e <_printf_common+0xb2>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	68e5      	ldr	r5, [r4, #12]
 8006f10:	f8d9 2000 	ldr.w	r2, [r9]
 8006f14:	f003 0306 	and.w	r3, r3, #6
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	bf08      	it	eq
 8006f1c:	1aad      	subeq	r5, r5, r2
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	bf0c      	ite	eq
 8006f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f28:	2500      	movne	r5, #0
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	bfc4      	itt	gt
 8006f2e:	1a9b      	subgt	r3, r3, r2
 8006f30:	18ed      	addgt	r5, r5, r3
 8006f32:	f04f 0900 	mov.w	r9, #0
 8006f36:	341a      	adds	r4, #26
 8006f38:	454d      	cmp	r5, r9
 8006f3a:	d11a      	bne.n	8006f72 <_printf_common+0xd6>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e008      	b.n	8006f52 <_printf_common+0xb6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4652      	mov	r2, sl
 8006f44:	4639      	mov	r1, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	47c0      	blx	r8
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d103      	bne.n	8006f56 <_printf_common+0xba>
 8006f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f56:	3501      	adds	r5, #1
 8006f58:	e7c3      	b.n	8006ee2 <_printf_common+0x46>
 8006f5a:	18e1      	adds	r1, r4, r3
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	2030      	movs	r0, #48	; 0x30
 8006f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f64:	4422      	add	r2, r4
 8006f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f6e:	3302      	adds	r3, #2
 8006f70:	e7c5      	b.n	8006efe <_printf_common+0x62>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4622      	mov	r2, r4
 8006f76:	4639      	mov	r1, r7
 8006f78:	4630      	mov	r0, r6
 8006f7a:	47c0      	blx	r8
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d0e6      	beq.n	8006f4e <_printf_common+0xb2>
 8006f80:	f109 0901 	add.w	r9, r9, #1
 8006f84:	e7d8      	b.n	8006f38 <_printf_common+0x9c>
	...

08006f88 <_printf_i>:
 8006f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f90:	460c      	mov	r4, r1
 8006f92:	7e09      	ldrb	r1, [r1, #24]
 8006f94:	b085      	sub	sp, #20
 8006f96:	296e      	cmp	r1, #110	; 0x6e
 8006f98:	4617      	mov	r7, r2
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	4698      	mov	r8, r3
 8006f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fa0:	f000 80b3 	beq.w	800710a <_printf_i+0x182>
 8006fa4:	d822      	bhi.n	8006fec <_printf_i+0x64>
 8006fa6:	2963      	cmp	r1, #99	; 0x63
 8006fa8:	d036      	beq.n	8007018 <_printf_i+0x90>
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x3a>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	f000 80b9 	beq.w	8007124 <_printf_i+0x19c>
 8006fb2:	2958      	cmp	r1, #88	; 0x58
 8006fb4:	f000 8083 	beq.w	80070be <_printf_i+0x136>
 8006fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fc0:	e032      	b.n	8007028 <_printf_i+0xa0>
 8006fc2:	2964      	cmp	r1, #100	; 0x64
 8006fc4:	d001      	beq.n	8006fca <_printf_i+0x42>
 8006fc6:	2969      	cmp	r1, #105	; 0x69
 8006fc8:	d1f6      	bne.n	8006fb8 <_printf_i+0x30>
 8006fca:	6820      	ldr	r0, [r4, #0]
 8006fcc:	6813      	ldr	r3, [r2, #0]
 8006fce:	0605      	lsls	r5, r0, #24
 8006fd0:	f103 0104 	add.w	r1, r3, #4
 8006fd4:	d52a      	bpl.n	800702c <_printf_i+0xa4>
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6011      	str	r1, [r2, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da03      	bge.n	8006fe6 <_printf_i+0x5e>
 8006fde:	222d      	movs	r2, #45	; 0x2d
 8006fe0:	425b      	negs	r3, r3
 8006fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fe6:	486f      	ldr	r0, [pc, #444]	; (80071a4 <_printf_i+0x21c>)
 8006fe8:	220a      	movs	r2, #10
 8006fea:	e039      	b.n	8007060 <_printf_i+0xd8>
 8006fec:	2973      	cmp	r1, #115	; 0x73
 8006fee:	f000 809d 	beq.w	800712c <_printf_i+0x1a4>
 8006ff2:	d808      	bhi.n	8007006 <_printf_i+0x7e>
 8006ff4:	296f      	cmp	r1, #111	; 0x6f
 8006ff6:	d020      	beq.n	800703a <_printf_i+0xb2>
 8006ff8:	2970      	cmp	r1, #112	; 0x70
 8006ffa:	d1dd      	bne.n	8006fb8 <_printf_i+0x30>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	f043 0320 	orr.w	r3, r3, #32
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	e003      	b.n	800700e <_printf_i+0x86>
 8007006:	2975      	cmp	r1, #117	; 0x75
 8007008:	d017      	beq.n	800703a <_printf_i+0xb2>
 800700a:	2978      	cmp	r1, #120	; 0x78
 800700c:	d1d4      	bne.n	8006fb8 <_printf_i+0x30>
 800700e:	2378      	movs	r3, #120	; 0x78
 8007010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007014:	4864      	ldr	r0, [pc, #400]	; (80071a8 <_printf_i+0x220>)
 8007016:	e055      	b.n	80070c4 <_printf_i+0x13c>
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	1d19      	adds	r1, r3, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6011      	str	r1, [r2, #0]
 8007020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007028:	2301      	movs	r3, #1
 800702a:	e08c      	b.n	8007146 <_printf_i+0x1be>
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6011      	str	r1, [r2, #0]
 8007030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007034:	bf18      	it	ne
 8007036:	b21b      	sxthne	r3, r3
 8007038:	e7cf      	b.n	8006fda <_printf_i+0x52>
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	1d18      	adds	r0, r3, #4
 8007040:	6010      	str	r0, [r2, #0]
 8007042:	0628      	lsls	r0, r5, #24
 8007044:	d501      	bpl.n	800704a <_printf_i+0xc2>
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	e002      	b.n	8007050 <_printf_i+0xc8>
 800704a:	0668      	lsls	r0, r5, #25
 800704c:	d5fb      	bpl.n	8007046 <_printf_i+0xbe>
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	4854      	ldr	r0, [pc, #336]	; (80071a4 <_printf_i+0x21c>)
 8007052:	296f      	cmp	r1, #111	; 0x6f
 8007054:	bf14      	ite	ne
 8007056:	220a      	movne	r2, #10
 8007058:	2208      	moveq	r2, #8
 800705a:	2100      	movs	r1, #0
 800705c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007060:	6865      	ldr	r5, [r4, #4]
 8007062:	60a5      	str	r5, [r4, #8]
 8007064:	2d00      	cmp	r5, #0
 8007066:	f2c0 8095 	blt.w	8007194 <_printf_i+0x20c>
 800706a:	6821      	ldr	r1, [r4, #0]
 800706c:	f021 0104 	bic.w	r1, r1, #4
 8007070:	6021      	str	r1, [r4, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d13d      	bne.n	80070f2 <_printf_i+0x16a>
 8007076:	2d00      	cmp	r5, #0
 8007078:	f040 808e 	bne.w	8007198 <_printf_i+0x210>
 800707c:	4665      	mov	r5, ip
 800707e:	2a08      	cmp	r2, #8
 8007080:	d10b      	bne.n	800709a <_printf_i+0x112>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	07db      	lsls	r3, r3, #31
 8007086:	d508      	bpl.n	800709a <_printf_i+0x112>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	bfde      	ittt	le
 8007090:	2330      	movle	r3, #48	; 0x30
 8007092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007096:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800709a:	ebac 0305 	sub.w	r3, ip, r5
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	f8cd 8000 	str.w	r8, [sp]
 80070a4:	463b      	mov	r3, r7
 80070a6:	aa03      	add	r2, sp, #12
 80070a8:	4621      	mov	r1, r4
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff fef6 	bl	8006e9c <_printf_common>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d14d      	bne.n	8007150 <_printf_i+0x1c8>
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b8:	b005      	add	sp, #20
 80070ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070be:	4839      	ldr	r0, [pc, #228]	; (80071a4 <_printf_i+0x21c>)
 80070c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	6821      	ldr	r1, [r4, #0]
 80070c8:	1d1d      	adds	r5, r3, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6015      	str	r5, [r2, #0]
 80070ce:	060a      	lsls	r2, r1, #24
 80070d0:	d50b      	bpl.n	80070ea <_printf_i+0x162>
 80070d2:	07ca      	lsls	r2, r1, #31
 80070d4:	bf44      	itt	mi
 80070d6:	f041 0120 	orrmi.w	r1, r1, #32
 80070da:	6021      	strmi	r1, [r4, #0]
 80070dc:	b91b      	cbnz	r3, 80070e6 <_printf_i+0x15e>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	f022 0220 	bic.w	r2, r2, #32
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	2210      	movs	r2, #16
 80070e8:	e7b7      	b.n	800705a <_printf_i+0xd2>
 80070ea:	064d      	lsls	r5, r1, #25
 80070ec:	bf48      	it	mi
 80070ee:	b29b      	uxthmi	r3, r3
 80070f0:	e7ef      	b.n	80070d2 <_printf_i+0x14a>
 80070f2:	4665      	mov	r5, ip
 80070f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070f8:	fb02 3311 	mls	r3, r2, r1, r3
 80070fc:	5cc3      	ldrb	r3, [r0, r3]
 80070fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007102:	460b      	mov	r3, r1
 8007104:	2900      	cmp	r1, #0
 8007106:	d1f5      	bne.n	80070f4 <_printf_i+0x16c>
 8007108:	e7b9      	b.n	800707e <_printf_i+0xf6>
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	6961      	ldr	r1, [r4, #20]
 8007110:	1d18      	adds	r0, r3, #4
 8007112:	6010      	str	r0, [r2, #0]
 8007114:	0628      	lsls	r0, r5, #24
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	d501      	bpl.n	800711e <_printf_i+0x196>
 800711a:	6019      	str	r1, [r3, #0]
 800711c:	e002      	b.n	8007124 <_printf_i+0x19c>
 800711e:	066a      	lsls	r2, r5, #25
 8007120:	d5fb      	bpl.n	800711a <_printf_i+0x192>
 8007122:	8019      	strh	r1, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	4665      	mov	r5, ip
 800712a:	e7b9      	b.n	80070a0 <_printf_i+0x118>
 800712c:	6813      	ldr	r3, [r2, #0]
 800712e:	1d19      	adds	r1, r3, #4
 8007130:	6011      	str	r1, [r2, #0]
 8007132:	681d      	ldr	r5, [r3, #0]
 8007134:	6862      	ldr	r2, [r4, #4]
 8007136:	2100      	movs	r1, #0
 8007138:	4628      	mov	r0, r5
 800713a:	f7f9 f8a9 	bl	8000290 <memchr>
 800713e:	b108      	cbz	r0, 8007144 <_printf_i+0x1bc>
 8007140:	1b40      	subs	r0, r0, r5
 8007142:	6060      	str	r0, [r4, #4]
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	2300      	movs	r3, #0
 800714a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714e:	e7a7      	b.n	80070a0 <_printf_i+0x118>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	462a      	mov	r2, r5
 8007154:	4639      	mov	r1, r7
 8007156:	4630      	mov	r0, r6
 8007158:	47c0      	blx	r8
 800715a:	3001      	adds	r0, #1
 800715c:	d0aa      	beq.n	80070b4 <_printf_i+0x12c>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	079b      	lsls	r3, r3, #30
 8007162:	d413      	bmi.n	800718c <_printf_i+0x204>
 8007164:	68e0      	ldr	r0, [r4, #12]
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	4298      	cmp	r0, r3
 800716a:	bfb8      	it	lt
 800716c:	4618      	movlt	r0, r3
 800716e:	e7a3      	b.n	80070b8 <_printf_i+0x130>
 8007170:	2301      	movs	r3, #1
 8007172:	464a      	mov	r2, r9
 8007174:	4639      	mov	r1, r7
 8007176:	4630      	mov	r0, r6
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d09a      	beq.n	80070b4 <_printf_i+0x12c>
 800717e:	3501      	adds	r5, #1
 8007180:	68e3      	ldr	r3, [r4, #12]
 8007182:	9a03      	ldr	r2, [sp, #12]
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	42ab      	cmp	r3, r5
 8007188:	dcf2      	bgt.n	8007170 <_printf_i+0x1e8>
 800718a:	e7eb      	b.n	8007164 <_printf_i+0x1dc>
 800718c:	2500      	movs	r5, #0
 800718e:	f104 0919 	add.w	r9, r4, #25
 8007192:	e7f5      	b.n	8007180 <_printf_i+0x1f8>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1ac      	bne.n	80070f2 <_printf_i+0x16a>
 8007198:	7803      	ldrb	r3, [r0, #0]
 800719a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800719e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a2:	e76c      	b.n	800707e <_printf_i+0xf6>
 80071a4:	08007457 	.word	0x08007457
 80071a8:	08007468 	.word	0x08007468

080071ac <_sbrk_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4c06      	ldr	r4, [pc, #24]	; (80071c8 <_sbrk_r+0x1c>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4605      	mov	r5, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	f7f9 fd8c 	bl	8000cd4 <_sbrk>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_sbrk_r+0x1a>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_sbrk_r+0x1a>
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	2001a8e0 	.word	0x2001a8e0

080071cc <memmove>:
 80071cc:	4288      	cmp	r0, r1
 80071ce:	b510      	push	{r4, lr}
 80071d0:	eb01 0302 	add.w	r3, r1, r2
 80071d4:	d807      	bhi.n	80071e6 <memmove+0x1a>
 80071d6:	1e42      	subs	r2, r0, #1
 80071d8:	4299      	cmp	r1, r3
 80071da:	d00a      	beq.n	80071f2 <memmove+0x26>
 80071dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071e4:	e7f8      	b.n	80071d8 <memmove+0xc>
 80071e6:	4283      	cmp	r3, r0
 80071e8:	d9f5      	bls.n	80071d6 <memmove+0xa>
 80071ea:	1881      	adds	r1, r0, r2
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	42d3      	cmn	r3, r2
 80071f0:	d100      	bne.n	80071f4 <memmove+0x28>
 80071f2:	bd10      	pop	{r4, pc}
 80071f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071fc:	e7f7      	b.n	80071ee <memmove+0x22>

080071fe <__malloc_lock>:
 80071fe:	4770      	bx	lr

08007200 <__malloc_unlock>:
 8007200:	4770      	bx	lr

08007202 <_realloc_r>:
 8007202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007204:	4607      	mov	r7, r0
 8007206:	4614      	mov	r4, r2
 8007208:	460e      	mov	r6, r1
 800720a:	b921      	cbnz	r1, 8007216 <_realloc_r+0x14>
 800720c:	4611      	mov	r1, r2
 800720e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007212:	f7ff bc97 	b.w	8006b44 <_malloc_r>
 8007216:	b922      	cbnz	r2, 8007222 <_realloc_r+0x20>
 8007218:	f7ff fc46 	bl	8006aa8 <_free_r>
 800721c:	4625      	mov	r5, r4
 800721e:	4628      	mov	r0, r5
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007222:	f000 f814 	bl	800724e <_malloc_usable_size_r>
 8007226:	42a0      	cmp	r0, r4
 8007228:	d20f      	bcs.n	800724a <_realloc_r+0x48>
 800722a:	4621      	mov	r1, r4
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff fc89 	bl	8006b44 <_malloc_r>
 8007232:	4605      	mov	r5, r0
 8007234:	2800      	cmp	r0, #0
 8007236:	d0f2      	beq.n	800721e <_realloc_r+0x1c>
 8007238:	4631      	mov	r1, r6
 800723a:	4622      	mov	r2, r4
 800723c:	f7ff fbc5 	bl	80069ca <memcpy>
 8007240:	4631      	mov	r1, r6
 8007242:	4638      	mov	r0, r7
 8007244:	f7ff fc30 	bl	8006aa8 <_free_r>
 8007248:	e7e9      	b.n	800721e <_realloc_r+0x1c>
 800724a:	4635      	mov	r5, r6
 800724c:	e7e7      	b.n	800721e <_realloc_r+0x1c>

0800724e <_malloc_usable_size_r>:
 800724e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007252:	1f18      	subs	r0, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	bfbc      	itt	lt
 8007258:	580b      	ldrlt	r3, [r1, r0]
 800725a:	18c0      	addlt	r0, r0, r3
 800725c:	4770      	bx	lr
	...

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
