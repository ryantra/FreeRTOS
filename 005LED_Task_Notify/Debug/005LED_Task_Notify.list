
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d98  08005d98  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da0  08005da0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a820  20000014  08005dbc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a834  08005dbc  0002a834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001459b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a24  00000000  00000000  000345df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e8e  00000000  00000000  00039090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db72  00000000  00000000  00050f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000975ba  00000000  00000000  0005ea90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f604a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004630  00000000  00000000  000f60c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bd8 	.word	0x08005bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005bd8 	.word	0x08005bd8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a78c 	.word	0x2001a78c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb59 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f885 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8eb 	bl	800075c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //Cycle count enable
    DWT_CTRL |= (1 << 0);
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <main+0xe0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a32      	ldr	r2, [pc, #200]	; (8000654 <main+0xe0>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000592:	f003 f975 	bl	8003880 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000596:	f004 fcf9 	bl	8004f8c <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led1_handler, "LED_1_task", 200, NULL, 3, &task1_handle);
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <main+0xe4>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	22c8      	movs	r2, #200	; 0xc8
 80005a6:	492d      	ldr	r1, [pc, #180]	; (800065c <main+0xe8>)
 80005a8:	482d      	ldr	r0, [pc, #180]	; (8000660 <main+0xec>)
 80005aa:	f001 fd85 	bl	80020b8 <xTaskCreate>
 80005ae:	60f8      	str	r0, [r7, #12]

	configASSERT(status == pdPASS);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d009      	beq.n	80005ca <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	e7fe      	b.n	80005c8 <main+0x54>

	next_task_handle = task1_handle;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <main+0xe4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a25      	ldr	r2, [pc, #148]	; (8000664 <main+0xf0>)
 80005d0:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led2_handler, "LED_2_task", 200, NULL, 2, &task2_handle);
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <main+0xf4>)
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4923      	ldr	r1, [pc, #140]	; (800066c <main+0xf8>)
 80005e0:	4823      	ldr	r0, [pc, #140]	; (8000670 <main+0xfc>)
 80005e2:	f001 fd69 	bl	80020b8 <xTaskCreate>
 80005e6:	60f8      	str	r0, [r7, #12]

	configASSERT(status == pdPASS);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d009      	beq.n	8000602 <main+0x8e>
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	e7fe      	b.n	8000600 <main+0x8c>

	status = xTaskCreate(led3_handler, "LED_3_task", 200, NULL, 1, &task3_handle);
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <main+0x100>)
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	491a      	ldr	r1, [pc, #104]	; (8000678 <main+0x104>)
 8000610:	481a      	ldr	r0, [pc, #104]	; (800067c <main+0x108>)
 8000612:	f001 fd51 	bl	80020b8 <xTaskCreate>
 8000616:	60f8      	str	r0, [r7, #12]

	configASSERT(status == pdPASS);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d009      	beq.n	8000632 <main+0xbe>
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	e7fe      	b.n	8000630 <main+0xbc>

	status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x10c>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2304      	movs	r3, #4
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	22c8      	movs	r2, #200	; 0xc8
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <main+0x110>)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0x114>)
 8000642:	f001 fd39 	bl	80020b8 <xTaskCreate>
 8000646:	60f8      	str	r0, [r7, #12]

	configASSERT(status = pdPASS);
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]

	//start the freeRTOS scheduler
	 vTaskStartScheduler();
 800064c:	f001 ff76 	bl	800253c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0xdc>
 8000652:	bf00      	nop
 8000654:	e0001000 	.word	0xe0001000
 8000658:	2001a738 	.word	0x2001a738
 800065c:	08005bf0 	.word	0x08005bf0
 8000660:	08000889 	.word	0x08000889
 8000664:	20000030 	.word	0x20000030
 8000668:	2001a73c 	.word	0x2001a73c
 800066c:	08005bfc 	.word	0x08005bfc
 8000670:	080008f9 	.word	0x080008f9
 8000674:	2001a744 	.word	0x2001a744
 8000678:	08005c08 	.word	0x08005c08
 800067c:	08000969 	.word	0x08000969
 8000680:	2001a740 	.word	0x2001a740
 8000684:	08005c14 	.word	0x08005c14
 8000688:	080009e1 	.word	0x080009e1

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fa94 	bl	8005bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <SystemClock_Config+0xc8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <SystemClock_Config+0xc8>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <SystemClock_Config+0xcc>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd7f 	bl	8001214 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f99a 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2103      	movs	r1, #3
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ffd9 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000748:	f000 f984 	bl	8000a54 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <MX_GPIO_Init+0x118>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a3e      	ldr	r2, [pc, #248]	; (8000874 <MX_GPIO_Init+0x118>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <MX_GPIO_Init+0x118>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_GPIO_Init+0x118>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a37      	ldr	r2, [pc, #220]	; (8000874 <MX_GPIO_Init+0x118>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b35      	ldr	r3, [pc, #212]	; (8000874 <MX_GPIO_Init+0x118>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0x118>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <MX_GPIO_Init+0x118>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_GPIO_Init+0x118>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0x118>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a29      	ldr	r2, [pc, #164]	; (8000874 <MX_GPIO_Init+0x118>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_GPIO_Init+0x118>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <MX_GPIO_Init+0x11c>)
 80007e8:	f000 fce0 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_GPIO_Init+0x120>)
 80007f4:	f000 fcda 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_GPIO_Init+0x124>)
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <MX_GPIO_Init+0x128>)
 800080e:	f000 fb33 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000822:	2307      	movs	r3, #7
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_GPIO_Init+0x11c>)
 800082e:	f000 fb23 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000832:	2320      	movs	r3, #32
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x11c>)
 800084a:	f000 fb15 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800084e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x120>)
 8000868:	f000 fb06 	bl	8000e78 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	10210000 	.word	0x10210000
 8000884:	40020800 	.word	0x40020800

08000888 <led1_handler>:

/* USER CODE BEGIN 4 */

static void led1_handler(void* parameters)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 8000890:	4814      	ldr	r0, [pc, #80]	; (80008e4 <led1_handler+0x5c>)
 8000892:	f005 f8eb 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <led1_handler+0x60>)
 800089c:	f000 fc9f 	bl	80011de <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f002 f933 	bl	8002b18 <xTaskGenericNotifyWait>
 80008b2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d1ea      	bne.n	8000890 <led1_handler+0x8>
		{
			vTaskSuspendAll();
 80008ba:	f001 fe99 	bl	80025f0 <vTaskSuspendAll>
			next_task_handle = task2_handle;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <led1_handler+0x64>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <led1_handler+0x68>)
 80008c4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008c6:	f001 fea1 	bl	800260c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <led1_handler+0x60>)
 80008d2:	f000 fc6b 	bl	80011ac <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Task LED1");
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <led1_handler+0x6c>)
 80008d8:	f005 f8c8 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80008dc:	2000      	movs	r0, #0
 80008de:	f001 fd4d 	bl	800237c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 80008e2:	e7d5      	b.n	8000890 <led1_handler+0x8>
 80008e4:	08005c20 	.word	0x08005c20
 80008e8:	40020400 	.word	0x40020400
 80008ec:	2001a73c 	.word	0x2001a73c
 80008f0:	20000030 	.word	0x20000030
 80008f4:	08005c30 	.word	0x08005c30

080008f8 <led2_handler>:
	}
}


static void led2_handler(void* parameters)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 8000900:	4814      	ldr	r0, [pc, #80]	; (8000954 <led2_handler+0x5c>)
 8000902:	f005 f8b3 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <led2_handler+0x60>)
 800090c:	f000 fc67 	bl	80011de <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000910:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f002 f8fb 	bl	8002b18 <xTaskGenericNotifyWait>
 8000922:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d1ea      	bne.n	8000900 <led2_handler+0x8>
		{
			vTaskSuspendAll();
 800092a:	f001 fe61 	bl	80025f0 <vTaskSuspendAll>
			next_task_handle = task3_handle;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <led2_handler+0x64>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <led2_handler+0x68>)
 8000934:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000936:	f001 fe69 	bl	800260c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <led2_handler+0x60>)
 8000942:	f000 fc33 	bl	80011ac <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Task LED2");
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <led2_handler+0x6c>)
 8000948:	f005 f890 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 800094c:	2000      	movs	r0, #0
 800094e:	f001 fd15 	bl	800237c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 8000952:	e7d5      	b.n	8000900 <led2_handler+0x8>
 8000954:	08005c44 	.word	0x08005c44
 8000958:	40020400 	.word	0x40020400
 800095c:	2001a744 	.word	0x2001a744
 8000960:	20000030 	.word	0x20000030
 8000964:	08005c54 	.word	0x08005c54

08000968 <led3_handler>:
	}

}

static void led3_handler(void* parameters)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <led3_handler+0x64>)
 8000972:	f005 f87b 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <led3_handler+0x68>)
 800097c:	f000 fc2f 	bl	80011de <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000980:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2300      	movs	r3, #0
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f002 f8c3 	bl	8002b18 <xTaskGenericNotifyWait>
 8000992:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d1ea      	bne.n	8000970 <led3_handler+0x8>
		{
			vTaskSuspendAll();
 800099a:	f001 fe29 	bl	80025f0 <vTaskSuspendAll>
			next_task_handle = NULL;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <led3_handler+0x6c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009a4:	f001 fe32 	bl	800260c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <led3_handler+0x68>)
 80009b0:	f000 fbfc 	bl	80011ac <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Task LED3");
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <led3_handler+0x70>)
 80009b6:	f005 f859 	bl	8005a6c <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <led3_handler+0x74>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fcdc 	bl	800237c <vTaskDelete>
			vTaskDelete(NULL);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fcd9 	bl	800237c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80009ca:	e7d1      	b.n	8000970 <led3_handler+0x8>
 80009cc:	08005c68 	.word	0x08005c68
 80009d0:	40020400 	.word	0x40020400
 80009d4:	20000030 	.word	0x20000030
 80009d8:	08005c78 	.word	0x08005c78
 80009dc:	2001a740 	.word	0x2001a740

080009e0 <button_handler>:
	}

}

static void button_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOC, B1_Pin);
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <button_handler+0x48>)
 80009f6:	f000 fbc1 	bl	800117c <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	73bb      	strb	r3, [r7, #14]

		if(!btn_read)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10b      	bne.n	8000a1c <button_handler+0x3c>
		{
			if(prev_read)
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d008      	beq.n	8000a1c <button_handler+0x3c>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <button_handler+0x4c>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2300      	movs	r3, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f002 f906 	bl	8002c28 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 fd53 	bl	80024cc <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, B1_Pin);
 8000a26:	e7e3      	b.n	80009f0 <button_handler+0x10>
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	20000030 	.word	0x20000030

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 f917 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40000c00 	.word	0x40000c00

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	vInitPrioGroupValue();
 8000a6a:	f002 fb69 	bl	8003140 <vInitPrioGroupValue>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2032      	movs	r0, #50	; 0x32
 8000aca:	f000 f9ab 	bl	8000e24 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ace:	2032      	movs	r0, #50	; 0x32
 8000ad0:	f000 f9c4 	bl	8000e5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_InitTick+0xa4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_InitTick+0xa4>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_InitTick+0xa4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 ffd8 	bl	8001ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b00:	f000 ffc2 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8000b04:	4603      	mov	r3, r0
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_InitTick+0xa8>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	3b01      	subs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_InitTick+0xac>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <HAL_InitTick+0xb0>)
 8000b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_InitTick+0xac>)
 8000b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b24:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_InitTick+0xac>)
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_InitTick+0xac>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_InitTick+0xac>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_InitTick+0xac>)
 8000b3a:	f000 ffeb 	bl	8001b14 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_InitTick+0xac>)
 8000b46:	f001 f81a 	bl	8001b7e <HAL_TIM_Base_Start_IT>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	2001a748 	.word	0x2001a748
 8000b64:	40000c00 	.word	0x40000c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM5_IRQHandler+0x10>)
 8000ba2:	f001 f810 	bl	8001bc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2001a748 	.word	0x2001a748

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SystemInit+0x28>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <SystemInit+0x28>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SystemInit+0x28>)
 8000bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bca:	609a      	str	r2, [r3, #8]
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000be2:	e003      	b.n	8000bec <LoopCopyDataInit>

08000be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bea:	3104      	adds	r1, #4

08000bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf4:	d3f6      	bcc.n	8000be4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf8:	e002      	b.n	8000c00 <LoopFillZerobss>

08000bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bfc:	f842 3b04 	str.w	r3, [r2], #4

08000c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c04:	d3f9      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd3 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 ff9f 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fcb1 	bl	8000574 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c18:	08005da8 	.word	0x08005da8
  ldr  r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c20:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000c24:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000c28:	2001a834 	.word	0x2001a834

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ff28 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fefe 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	2001a788 	.word	0x2001a788

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2001a788 	.word	0x2001a788

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e159      	b.n	8001148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8148 	bne.w	8001142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0xfc>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b12      	cmp	r3, #18
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a2 	beq.w	8001142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a55      	ldr	r2, [pc, #340]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x2e8>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2ec>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x202>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_GPIO_Init+0x2f0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x1fe>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_Init+0x2f4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x1fa>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x2f8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x1f6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a44      	ldr	r2, [pc, #272]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x1f2>
 8001066:	2304      	movs	r3, #4
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106a:	2307      	movs	r3, #7
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x204>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4934      	ldr	r1, [pc, #208]	; (8001160 <HAL_GPIO_Init+0x2e8>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x300>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010be:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x300>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x300>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_GPIO_Init+0x300>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f aea2 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	401a      	ands	r2, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d104      	bne.n	8001202 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e25b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d075      	beq.n	800131e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	4ba3      	ldr	r3, [pc, #652]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b04      	cmp	r3, #4
 800123c:	d00c      	beq.n	8001258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001246:	2b08      	cmp	r3, #8
 8001248:	d112      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4b9d      	ldr	r3, [pc, #628]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001256:	d10b      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d05b      	beq.n	800131c <HAL_RCC_OscConfig+0x108>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d157      	bne.n	800131c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e236      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d106      	bne.n	8001288 <HAL_RCC_OscConfig+0x74>
 800127a:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a87      	ldr	r2, [pc, #540]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 80012ac:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a83      	ldr	r2, [pc, #524]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a80      	ldr	r2, [pc, #512]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fce6 	bl	8000c9c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fce2 	bl	8000c9c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1fb      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xc0>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcd2 	bl	8000c9c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcce 	bl	8000c9c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1e7      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0xe8>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1bb      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4952      	ldr	r1, [pc, #328]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fc87 	bl	8000c9c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc83 	bl	8000c9c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e19c      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4940      	ldr	r1, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc66 	bl	8000c9c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc62 	bl	8000c9c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e17b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d030      	beq.n	8001460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d016      	beq.n	8001434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fc46 	bl	8000c9c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fc42 	bl	8000c9c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e15b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x200>
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff fc2f 	bl	8000c9c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fc2b 	bl	8000c9c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e144      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d121      	bne.n	80014ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbf1 	bl	8000c9c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7ff fbe4 	bl	8000c9c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0fd      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x2f0>
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a7c      	ldr	r2, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 800150c:	4b77      	ldr	r3, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a76      	ldr	r2, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b74      	ldr	r3, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a73      	ldr	r2, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001526:	4b71      	ldr	r3, [pc, #452]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a70      	ldr	r2, [pc, #448]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b6e      	ldr	r3, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a6d      	ldr	r2, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fba9 	bl	8000c9c <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fba5 	bl	8000c9c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0bc      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x33a>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb93 	bl	8000c9c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb8f 	bl	8000c9c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0a6      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8092 	beq.w	80016dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d05c      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d141      	bne.n	8001650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015cc:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb63 	bl	8000c9c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fb5f 	bl	8000c9c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e078      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	019b      	lsls	r3, r3, #6
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	4933      	ldr	r1, [pc, #204]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb38 	bl	8000c9c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fb34 	bl	8000c9c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04d      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x41c>
 800164e:	e045      	b.n	80016dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb21 	bl	8000c9c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb1d 	bl	8000c9c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e036      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x44a>
 800167c:	e02e      	b.n	80016dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e029      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	429a      	cmp	r2, r3
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d115      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b2:	4013      	ands	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470060 	.word	0x42470060

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa5a 	bl	8000c9c <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa56 	bl	8000c9c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4601      	mov	r1, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	fa21 f303 	lsr.w	r3, r1, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f90a 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08005d48 	.word	0x08005d48
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d007      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x32>
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d008      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x38>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80b4 	bne.w	8001a54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018ee:	60bb      	str	r3, [r7, #8]
       break;
 80018f0:	e0b3      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018f4:	60bb      	str	r3, [r7, #8]
      break;
 80018f6:	e0b0      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001902:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04a      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	f240 11ff 	movw	r1, #511	; 0x1ff
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	ea03 0501 	and.w	r5, r3, r1
 8001924:	ea04 0602 	and.w	r6, r4, r2
 8001928:	4629      	mov	r1, r5
 800192a:	4632      	mov	r2, r6
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	f04f 0400 	mov.w	r4, #0
 8001934:	0154      	lsls	r4, r2, #5
 8001936:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193a:	014b      	lsls	r3, r1, #5
 800193c:	4619      	mov	r1, r3
 800193e:	4622      	mov	r2, r4
 8001940:	1b49      	subs	r1, r1, r5
 8001942:	eb62 0206 	sbc.w	r2, r2, r6
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	0194      	lsls	r4, r2, #6
 8001950:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001954:	018b      	lsls	r3, r1, #6
 8001956:	1a5b      	subs	r3, r3, r1
 8001958:	eb64 0402 	sbc.w	r4, r4, r2
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	00e2      	lsls	r2, r4, #3
 8001966:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196a:	00d9      	lsls	r1, r3, #3
 800196c:	460b      	mov	r3, r1
 800196e:	4614      	mov	r4, r2
 8001970:	195b      	adds	r3, r3, r5
 8001972:	eb44 0406 	adc.w	r4, r4, r6
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	0262      	lsls	r2, r4, #9
 8001980:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001984:	0259      	lsls	r1, r3, #9
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	4618      	mov	r0, r3
 800198c:	4621      	mov	r1, r4
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f04f 0400 	mov.w	r4, #0
 8001994:	461a      	mov	r2, r3
 8001996:	4623      	mov	r3, r4
 8001998:	f7fe fc6c 	bl	8000274 <__aeabi_uldivmod>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e049      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	f04f 0400 	mov.w	r4, #0
 80019ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	ea03 0501 	and.w	r5, r3, r1
 80019ba:	ea04 0602 	and.w	r6, r4, r2
 80019be:	4629      	mov	r1, r5
 80019c0:	4632      	mov	r2, r6
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0154      	lsls	r4, r2, #5
 80019cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019d0:	014b      	lsls	r3, r1, #5
 80019d2:	4619      	mov	r1, r3
 80019d4:	4622      	mov	r2, r4
 80019d6:	1b49      	subs	r1, r1, r5
 80019d8:	eb62 0206 	sbc.w	r2, r2, r6
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0194      	lsls	r4, r2, #6
 80019e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	eb64 0402 	sbc.w	r4, r4, r2
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	00e2      	lsls	r2, r4, #3
 80019fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a00:	00d9      	lsls	r1, r3, #3
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	195b      	adds	r3, r3, r5
 8001a08:	eb44 0406 	adc.w	r4, r4, r6
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	02a2      	lsls	r2, r4, #10
 8001a16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a1a:	0299      	lsls	r1, r3, #10
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	4621      	mov	r1, r4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	f7fe fc21 	bl	8000274 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	60bb      	str	r3, [r7, #8]
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a56:	60bb      	str	r3, [r7, #8]
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08005d58 	.word	0x08005d58

08001ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	220f      	movs	r2, #15
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCC_GetClockConfig+0x60>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01d      	b.n	8001b62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f815 	bl	8001b6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 f968 	bl	8001e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d122      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d11b      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0202 	mvn.w	r2, #2
 8001bf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8ee 	bl	8001dea <HAL_TIM_IC_CaptureCallback>
 8001c0e:	e005      	b.n	8001c1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8e0 	bl	8001dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8f1 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d122      	bne.n	8001c76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d11b      	bne.n	8001c76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0204 	mvn.w	r2, #4
 8001c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8c4 	bl	8001dea <HAL_TIM_IC_CaptureCallback>
 8001c62:	e005      	b.n	8001c70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8b6 	bl	8001dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8c7 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d122      	bne.n	8001cca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0208 	mvn.w	r2, #8
 8001c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f89a 	bl	8001dea <HAL_TIM_IC_CaptureCallback>
 8001cb6:	e005      	b.n	8001cc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f88c 	bl	8001dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f89d 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d122      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d11b      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0210 	mvn.w	r2, #16
 8001cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f870 	bl	8001dea <HAL_TIM_IC_CaptureCallback>
 8001d0a:	e005      	b.n	8001d18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f862 	bl	8001dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f873 	bl	8001dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10e      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0201 	mvn.w	r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe fe73 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b80      	cmp	r3, #128	; 0x80
 8001d56:	d10e      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b80      	cmp	r3, #128	; 0x80
 8001d64:	d107      	bne.n	8001d76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8e3 	bl	8001f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d80:	2b40      	cmp	r3, #64	; 0x40
 8001d82:	d10e      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f838 	bl	8001e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	d10e      	bne.n	8001dce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d107      	bne.n	8001dce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0220 	mvn.w	r2, #32
 8001dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8ad 	bl	8001f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <TIM_Base_SetConfig+0xe4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00f      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e46:	d00b      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <TIM_Base_SetConfig+0xe8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <TIM_Base_SetConfig+0xec>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0x38>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <TIM_Base_SetConfig+0xf0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <TIM_Base_SetConfig+0xe4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01b      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d017      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <TIM_Base_SetConfig+0xe8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <TIM_Base_SetConfig+0xec>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00f      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <TIM_Base_SetConfig+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00b      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <TIM_Base_SetConfig+0xf4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <TIM_Base_SetConfig+0xf8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <TIM_Base_SetConfig+0xfc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <TIM_Base_SetConfig+0xe4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d103      	bne.n	8001ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010000 	.word	0x40010000
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800

08001f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 0208 	add.w	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f68:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f103 0208 	add.w	r2, r3, #8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0208 	add.w	r2, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d103      	bne.n	8002012 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e00c      	b.n	800202c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e002      	b.n	8002020 <vListInsert+0x2e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	429a      	cmp	r2, r3
 800202a:	d2f6      	bcs.n	800201a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6892      	ldr	r2, [r2, #8]
 800207a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6852      	ldr	r2, [r2, #4]
 8002084:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d103      	bne.n	8002098 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1e5a      	subs	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 f9d1 	bl	8003474 <pvPortMalloc>
 80020d2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020da:	2058      	movs	r0, #88	; 0x58
 80020dc:	f001 f9ca 	bl	8003474 <pvPortMalloc>
 80020e0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
 80020ee:	e005      	b.n	80020fc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80020f0:	6978      	ldr	r0, [r7, #20]
 80020f2:	f001 fa9b 	bl	800362c <vPortFree>
 80020f6:	e001      	b.n	80020fc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d013      	beq.n	800212a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	2300      	movs	r3, #0
 8002106:	9303      	str	r3, [sp, #12]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f80e 	bl	800213a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800211e:	69f8      	ldr	r0, [r7, #28]
 8002120:	f000 f8a0 	bl	8002264 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	e002      	b.n	8002130 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002130:	69bb      	ldr	r3, [r7, #24]
    }
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	461a      	mov	r2, r3
 8002152:	21a5      	movs	r1, #165	; 0xa5
 8002154:	f003 fd38 	bl	8005bc8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002162:	3b01      	subs	r3, #1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <prvInitialiseNewTask+0x56>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e7fe      	b.n	800218e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01f      	beq.n	80021d6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e012      	b.n	80021c2 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	7819      	ldrb	r1, [r3, #0]
 80021a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	3334      	adds	r3, #52	; 0x34
 80021ac:	460a      	mov	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3301      	adds	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d9e9      	bls.n	800219c <prvInitialiseNewTask+0x62>
 80021c8:	e000      	b.n	80021cc <prvInitialiseNewTask+0x92>
            {
                break;
 80021ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021d4:	e003      	b.n	80021de <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d901      	bls.n	80021e8 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021e4:	2304      	movs	r3, #4
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	2200      	movs	r2, #0
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	3304      	adds	r3, #4
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fec6 	bl	8001f90 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	3318      	adds	r3, #24
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fec1 	bl	8001f90 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002212:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	f1c3 0205 	rsb	r2, r3, #5
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	2204      	movs	r2, #4
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fccb 	bl	8005bc8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	3354      	adds	r3, #84	; 0x54
 8002236:	2201      	movs	r2, #1
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fcc4 	bl	8005bc8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	69b8      	ldr	r0, [r7, #24]
 8002246:	f000 fe55 	bl	8002ef4 <pxPortInitialiseStack>
 800224a:	4602      	mov	r2, r0
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800226c:	f000 ffe2 	bl	8003234 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <prvAddNewTaskToReadyList+0xfc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a3a      	ldr	r2, [pc, #232]	; (8002360 <prvAddNewTaskToReadyList+0xfc>)
 8002278:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800227a:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <prvAddNewTaskToReadyList+0x100>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002282:	4a38      	ldr	r2, [pc, #224]	; (8002364 <prvAddNewTaskToReadyList+0x100>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <prvAddNewTaskToReadyList+0xfc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d110      	bne.n	80022b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002290:	f000 fbaa 	bl	80029e8 <prvInitialiseTaskLists>
 8002294:	e00d      	b.n	80022b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <prvAddNewTaskToReadyList+0x104>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <prvAddNewTaskToReadyList+0x100>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d802      	bhi.n	80022b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <prvAddNewTaskToReadyList+0x100>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <prvAddNewTaskToReadyList+0x108>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a2c      	ldr	r2, [pc, #176]	; (800236c <prvAddNewTaskToReadyList+0x108>)
 80022ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <prvAddNewTaskToReadyList+0x108>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <prvAddNewTaskToReadyList+0x94>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 f9bb 	bl	8005648 <SEGGER_SYSVIEW_OnTaskCreate>
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	461d      	mov	r5, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461c      	mov	r4, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1ae3      	subs	r3, r4, r3
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	462b      	mov	r3, r5
 80022f4:	f001 fb5e 	bl	80039b4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fa28 	bl	8005750 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2201      	movs	r2, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <prvAddNewTaskToReadyList+0x10c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <prvAddNewTaskToReadyList+0x10c>)
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <prvAddNewTaskToReadyList+0x110>)
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7ff fe3e 	bl	8001faa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800232e:	f000 ffaf 	bl	8003290 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <prvAddNewTaskToReadyList+0x104>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <prvAddNewTaskToReadyList+0x100>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <prvAddNewTaskToReadyList+0x114>)
 800234a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	2000010c 	.word	0x2000010c
 8002364:	20000034 	.word	0x20000034
 8002368:	20000118 	.word	0x20000118
 800236c:	20000128 	.word	0x20000128
 8002370:	20000114 	.word	0x20000114
 8002374:	20000038 	.word	0x20000038
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002384:	f000 ff56 	bl	8003234 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <vTaskDelete+0x18>
 800238e:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <vTaskDelete+0x128>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e000      	b.n	8002396 <vTaskDelete+0x1a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3304      	adds	r3, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fe61 	bl	8002064 <uxListRemove>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d115      	bne.n	80023d4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	493e      	ldr	r1, [pc, #248]	; (80024a8 <vTaskDelete+0x12c>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <vTaskDelete+0x58>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	2201      	movs	r2, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <vTaskDelete+0x130>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a36      	ldr	r2, [pc, #216]	; (80024ac <vTaskDelete+0x130>)
 80023d2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3318      	adds	r3, #24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fe3f 	bl	8002064 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <vTaskDelete+0x134>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <vTaskDelete+0x134>)
 80023ee:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <vTaskDelete+0x128>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d118      	bne.n	800242c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	482c      	ldr	r0, [pc, #176]	; (80024b4 <vTaskDelete+0x138>)
 8002402:	f7ff fdd2 	bl	8001faa <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <vTaskDelete+0x13c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <vTaskDelete+0x13c>)
 800240e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fa3e 	bl	8005894 <SEGGER_SYSVIEW_ShrinkId>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	2022      	movs	r0, #34	; 0x22
 800241e:	f002 fc8d 	bl	8004d3c <SEGGER_SYSVIEW_RecordU32>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fb2d 	bl	8003a84 <SYSVIEW_DeleteTask>
 800242a:	e016      	b.n	800245a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <vTaskDelete+0x140>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <vTaskDelete+0x140>)
 8002434:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fa2b 	bl	8005894 <SEGGER_SYSVIEW_ShrinkId>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	2022      	movs	r0, #34	; 0x22
 8002444:	f002 fc7a 	bl	8004d3c <SEGGER_SYSVIEW_RecordU32>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fb1a 	bl	8003a84 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fb35 	bl	8002ac0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002456:	f000 fb43 	bl	8002ae0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800245a:	f000 ff19 	bl	8003290 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <vTaskDelete+0x144>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01a      	beq.n	800249c <vTaskDelete+0x120>
        {
            if( pxTCB == pxCurrentTCB )
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <vTaskDelete+0x128>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d115      	bne.n	800249c <vTaskDelete+0x120>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <vTaskDelete+0x148>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <vTaskDelete+0x110>
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	e7fe      	b.n	800248a <vTaskDelete+0x10e>
                portYIELD_WITHIN_API();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <vTaskDelete+0x14c>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000034 	.word	0x20000034
 80024a8:	20000038 	.word	0x20000038
 80024ac:	20000114 	.word	0x20000114
 80024b0:	20000128 	.word	0x20000128
 80024b4:	200000e0 	.word	0x200000e0
 80024b8:	200000f4 	.word	0x200000f4
 80024bc:	2000010c 	.word	0x2000010c
 80024c0:	20000118 	.word	0x20000118
 80024c4:	20000134 	.word	0x20000134
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <vTaskDelay+0x68>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <vTaskDelay+0x2e>
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	e7fe      	b.n	80024f8 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80024fa:	f000 f879 	bl	80025f0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	2023      	movs	r0, #35	; 0x23
 8002502:	f002 fc1b 	bl	8004d3c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fc7b 	bl	8002e04 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800250e:	f000 f87d 	bl	800260c <xTaskResumeAll>
 8002512:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <vTaskDelay+0x6c>)
 800251c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000134 	.word	0x20000134
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <vTaskStartScheduler+0x94>)
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2300      	movs	r3, #0
 800254c:	2282      	movs	r2, #130	; 0x82
 800254e:	4921      	ldr	r1, [pc, #132]	; (80025d4 <vTaskStartScheduler+0x98>)
 8002550:	4821      	ldr	r0, [pc, #132]	; (80025d8 <vTaskStartScheduler+0x9c>)
 8002552:	f7ff fdb1 	bl	80020b8 <xTaskCreate>
 8002556:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d123      	bne.n	80025a6 <vTaskStartScheduler+0x6a>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <vTaskStartScheduler+0xa0>)
 8002572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002576:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <vTaskStartScheduler+0xa4>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <vTaskStartScheduler+0xa8>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <vTaskStartScheduler+0xac>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <vTaskStartScheduler+0x94>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d102      	bne.n	8002596 <vTaskStartScheduler+0x5a>
 8002590:	f003 f83e 	bl	8005610 <SEGGER_SYSVIEW_OnIdle>
 8002594:	e004      	b.n	80025a0 <vTaskStartScheduler+0x64>
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <vTaskStartScheduler+0xac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f896 	bl	80056cc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025a0:	f000 fd30 	bl	8003004 <xPortStartScheduler>
 80025a4:	e00d      	b.n	80025c2 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ac:	d109      	bne.n	80025c2 <vTaskStartScheduler+0x86>
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e7fe      	b.n	80025c0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <vTaskStartScheduler+0xb0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000130 	.word	0x20000130
 80025d4:	08005c8c 	.word	0x08005c8c
 80025d8:	080029b9 	.word	0x080029b9
 80025dc:	2000012c 	.word	0x2000012c
 80025e0:	20000118 	.word	0x20000118
 80025e4:	20000110 	.word	0x20000110
 80025e8:	20000034 	.word	0x20000034
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <vTaskSuspendAll+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a03      	ldr	r2, [pc, #12]	; (8002608 <vTaskSuspendAll+0x18>)
 80025fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	20000134 	.word	0x20000134

0800260c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800261a:	4b43      	ldr	r3, [pc, #268]	; (8002728 <xTaskResumeAll+0x11c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <xTaskResumeAll+0x2a>
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	e7fe      	b.n	8002634 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002636:	f000 fdfd 	bl	8003234 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <xTaskResumeAll+0x11c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3b01      	subs	r3, #1
 8002640:	4a39      	ldr	r2, [pc, #228]	; (8002728 <xTaskResumeAll+0x11c>)
 8002642:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <xTaskResumeAll+0x11c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d165      	bne.n	8002718 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <xTaskResumeAll+0x120>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d061      	beq.n	8002718 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002654:	e032      	b.n	80026bc <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <xTaskResumeAll+0x124>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3318      	adds	r3, #24
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fcfe 	bl	8002064 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3304      	adds	r3, #4
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fcf9 	bl	8002064 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f86b 	bl	8005750 <SEGGER_SYSVIEW_OnTaskStartReady>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	2201      	movs	r2, #1
 8002680:	409a      	lsls	r2, r3
 8002682:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <xTaskResumeAll+0x128>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <xTaskResumeAll+0x128>)
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <xTaskResumeAll+0x12c>)
 800269a:	441a      	add	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f7ff fc81 	bl	8001faa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <xTaskResumeAll+0x130>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <xTaskResumeAll+0x134>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <xTaskResumeAll+0x124>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1c8      	bne.n	8002656 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026ca:	f000 fa09 	bl	8002ae0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <xTaskResumeAll+0x138>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026da:	f000 f849 	bl	8002770 <xTaskIncrementTick>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <xTaskResumeAll+0x134>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f1      	bne.n	80026da <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <xTaskResumeAll+0x138>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <xTaskResumeAll+0x134>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <xTaskResumeAll+0x13c>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002718:	f000 fdba 	bl	8003290 <vPortExitCritical>

    return xAlreadyYielded;
 800271c:	68bb      	ldr	r3, [r7, #8]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000134 	.word	0x20000134
 800272c:	2000010c 	.word	0x2000010c
 8002730:	200000cc 	.word	0x200000cc
 8002734:	20000114 	.word	0x20000114
 8002738:	20000038 	.word	0x20000038
 800273c:	20000034 	.word	0x20000034
 8002740:	20000120 	.word	0x20000120
 8002744:	2000011c 	.word	0x2000011c
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002752:	f000 fe51 	bl	80033f8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <xTaskGetTickCountFromISR+0x20>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002760:	683b      	ldr	r3, [r7, #0]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000110 	.word	0x20000110

08002770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <xTaskIncrementTick+0x14c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8091 	bne.w	80028a6 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <xTaskIncrementTick+0x150>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800278c:	4a4c      	ldr	r2, [pc, #304]	; (80028c0 <xTaskIncrementTick+0x150>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11f      	bne.n	80027d8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <xTaskIncrementTick+0x154>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <xTaskIncrementTick+0x46>
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	e7fe      	b.n	80027b4 <xTaskIncrementTick+0x44>
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <xTaskIncrementTick+0x154>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <xTaskIncrementTick+0x158>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a40      	ldr	r2, [pc, #256]	; (80028c4 <xTaskIncrementTick+0x154>)
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <xTaskIncrementTick+0x158>)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b40      	ldr	r3, [pc, #256]	; (80028cc <xTaskIncrementTick+0x15c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <xTaskIncrementTick+0x15c>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	f000 f984 	bl	8002ae0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <xTaskIncrementTick+0x160>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d34c      	bcc.n	800287c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <xTaskIncrementTick+0x154>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <xTaskIncrementTick+0x160>)
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f2:	601a      	str	r2, [r3, #0]
                    break;
 80027f4:	e042      	b.n	800287c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <xTaskIncrementTick+0x154>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d203      	bcs.n	8002816 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800280e:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <xTaskIncrementTick+0x160>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002814:	e032      	b.n	800287c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3304      	adds	r3, #4
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fc22 	bl	8002064 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3318      	adds	r3, #24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc19 	bl	8002064 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f002 ff8b 	bl	8005750 <SEGGER_SYSVIEW_OnTaskStartReady>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	2201      	movs	r2, #1
 8002840:	409a      	lsls	r2, r3
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <xTaskIncrementTick+0x164>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <xTaskIncrementTick+0x164>)
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <xTaskIncrementTick+0x168>)
 800285a:	441a      	add	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f7ff fba1 	bl	8001faa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <xTaskIncrementTick+0x16c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	429a      	cmp	r2, r3
 8002874:	d3b5      	bcc.n	80027e2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002876:	2301      	movs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800287a:	e7b2      	b.n	80027e2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <xTaskIncrementTick+0x16c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4915      	ldr	r1, [pc, #84]	; (80028d8 <xTaskIncrementTick+0x168>)
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d901      	bls.n	8002898 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002894:	2301      	movs	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <xTaskIncrementTick+0x170>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e004      	b.n	80028b0 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <xTaskIncrementTick+0x174>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <xTaskIncrementTick+0x174>)
 80028ae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028b0:	697b      	ldr	r3, [r7, #20]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000134 	.word	0x20000134
 80028c0:	20000110 	.word	0x20000110
 80028c4:	200000c4 	.word	0x200000c4
 80028c8:	200000c8 	.word	0x200000c8
 80028cc:	20000124 	.word	0x20000124
 80028d0:	2000012c 	.word	0x2000012c
 80028d4:	20000114 	.word	0x20000114
 80028d8:	20000038 	.word	0x20000038
 80028dc:	20000034 	.word	0x20000034
 80028e0:	20000120 	.word	0x20000120
 80028e4:	2000011c 	.word	0x2000011c

080028e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <vTaskSwitchContext+0xb8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <vTaskSwitchContext+0xbc>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80028fc:	e04c      	b.n	8002998 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <vTaskSwitchContext+0xbc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <vTaskSwitchContext+0xc0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f1c3 031f 	rsb	r3, r3, #31
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	4924      	ldr	r1, [pc, #144]	; (80029ac <vTaskSwitchContext+0xc4>)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <vTaskSwitchContext+0x5a>
        __asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	e7fe      	b.n	8002940 <vTaskSwitchContext+0x58>
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <vTaskSwitchContext+0xc4>)
 800294e:	4413      	add	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	3308      	adds	r3, #8
 8002964:	429a      	cmp	r2, r3
 8002966:	d104      	bne.n	8002972 <vTaskSwitchContext+0x8a>
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <vTaskSwitchContext+0xc8>)
 800297a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <vTaskSwitchContext+0xc8>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <vTaskSwitchContext+0xcc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d102      	bne.n	800298e <vTaskSwitchContext+0xa6>
 8002988:	f002 fe42 	bl	8005610 <SEGGER_SYSVIEW_OnIdle>
}
 800298c:	e004      	b.n	8002998 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <vTaskSwitchContext+0xc8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fe9a 	bl	80056cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000134 	.word	0x20000134
 80029a4:	20000120 	.word	0x20000120
 80029a8:	20000114 	.word	0x20000114
 80029ac:	20000038 	.word	0x20000038
 80029b0:	20000034 	.word	0x20000034
 80029b4:	20000130 	.word	0x20000130

080029b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029c0:	f000 f852 	bl	8002a68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <prvIdleTask+0x28>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d9f9      	bls.n	80029c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <prvIdleTask+0x2c>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029dc:	e7f0      	b.n	80029c0 <prvIdleTask+0x8>
 80029de:	bf00      	nop
 80029e0:	20000038 	.word	0x20000038
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	e00c      	b.n	8002a0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <prvInitialiseTaskLists+0x60>)
 8002a00:	4413      	add	r3, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff faa4 	bl	8001f50 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d9ef      	bls.n	80029f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <prvInitialiseTaskLists+0x64>)
 8002a16:	f7ff fa9b 	bl	8001f50 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <prvInitialiseTaskLists+0x68>)
 8002a1c:	f7ff fa98 	bl	8001f50 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <prvInitialiseTaskLists+0x6c>)
 8002a22:	f7ff fa95 	bl	8001f50 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a26:	480c      	ldr	r0, [pc, #48]	; (8002a58 <prvInitialiseTaskLists+0x70>)
 8002a28:	f7ff fa92 	bl	8001f50 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <prvInitialiseTaskLists+0x74>)
 8002a2e:	f7ff fa8f 	bl	8001f50 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <prvInitialiseTaskLists+0x78>)
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <prvInitialiseTaskLists+0x64>)
 8002a36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <prvInitialiseTaskLists+0x7c>)
 8002a3a:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <prvInitialiseTaskLists+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000038 	.word	0x20000038
 8002a4c:	2000009c 	.word	0x2000009c
 8002a50:	200000b0 	.word	0x200000b0
 8002a54:	200000cc 	.word	0x200000cc
 8002a58:	200000e0 	.word	0x200000e0
 8002a5c:	200000f8 	.word	0x200000f8
 8002a60:	200000c4 	.word	0x200000c4
 8002a64:	200000c8 	.word	0x200000c8

08002a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a6e:	e019      	b.n	8002aa4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a70:	f000 fbe0 	bl	8003234 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <prvCheckTasksWaitingTermination+0x4c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff faef 	bl	8002064 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <prvCheckTasksWaitingTermination+0x50>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <prvCheckTasksWaitingTermination+0x50>)
 8002a8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <prvCheckTasksWaitingTermination+0x54>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <prvCheckTasksWaitingTermination+0x54>)
 8002a98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a9a:	f000 fbf9 	bl	8003290 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f80e 	bl	8002ac0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <prvCheckTasksWaitingTermination+0x54>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e1      	bne.n	8002a70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200000e0 	.word	0x200000e0
 8002ab8:	2000010c 	.word	0x2000010c
 8002abc:	200000f4 	.word	0x200000f4

08002ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fdad 	bl	800362c <vPortFree>
                vPortFree( pxTCB );
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fdaa 	bl	800362c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <prvResetNextTaskUnblockTime+0x30>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <prvResetNextTaskUnblockTime+0x34>)
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002af6:	e005      	b.n	8002b04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <prvResetNextTaskUnblockTime+0x30>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <prvResetNextTaskUnblockTime+0x34>)
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	200000c4 	.word	0x200000c4
 8002b14:	2000012c 	.word	0x2000012c

08002b18 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <xTaskGenericNotifyWait+0x28>
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e7fe      	b.n	8002b3e <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8002b40:	f000 fb78 	bl	8003234 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3354      	adds	r3, #84	; 0x54
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d022      	beq.n	8002b9c <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	3214      	adds	r2, #20
 8002b5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	43d2      	mvns	r2, r2
 8002b66:	4011      	ands	r1, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	3214      	adds	r2, #20
 8002b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	3354      	adds	r3, #84	; 0x54
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b84:	2101      	movs	r1, #1
 8002b86:	6a38      	ldr	r0, [r7, #32]
 8002b88:	f000 f93c 	bl	8002e04 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <xTaskGenericNotifyWait+0x10c>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b9c:	f000 fb78 	bl	8003290 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002ba0:	f000 fb48 	bl	8003234 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	2040      	movs	r0, #64	; 0x40
 8002bb2:	f002 f959 	bl	8004e68 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	3214      	adds	r2, #20
 8002bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3354      	adds	r3, #84	; 0x54
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d002      	beq.n	8002be4 <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e00e      	b.n	8002c02 <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	3214      	adds	r2, #20
 8002bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	43d2      	mvns	r2, r2
 8002bf4:	4011      	ands	r1, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	3214      	adds	r2, #20
 8002bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <xTaskGenericNotifyWait+0x108>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002c10:	f000 fb3e 	bl	8003290 <vPortExitCritical>

        return xReturn;
 8002c14:	697b      	ldr	r3, [r7, #20]
    }
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000034 	.word	0x20000034
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002c36:	2301      	movs	r3, #1
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <xTaskGenericNotify+0x2c>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e7fe      	b.n	8002c52 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <xTaskGenericNotify+0x46>
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e7fe      	b.n	8002c6c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002c72:	f000 fadf 	bl	8003234 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	3214      	adds	r2, #20
 8002c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3354      	adds	r3, #84	; 0x54
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3354      	adds	r3, #84	; 0x54
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d83b      	bhi.n	8002d22 <xTaskGenericNotify+0xfa>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <xTaskGenericNotify+0x88>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002d3f 	.word	0x08002d3f
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002cf9 	.word	0x08002cf9
 8002cc0:	08002d07 	.word	0x08002d07
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	3214      	adds	r2, #20
 8002cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ea42 0103 	orr.w	r1, r2, r3
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	3214      	adds	r2, #20
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cde:	e031      	b.n	8002d44 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	3214      	adds	r2, #20
 8002ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cea:	1c59      	adds	r1, r3, #1
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	3214      	adds	r2, #20
 8002cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cf6:	e025      	b.n	8002d44 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	3214      	adds	r2, #20
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002d04:	e01e      	b.n	8002d44 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d006      	beq.n	8002d1c <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	3214      	adds	r2, #20
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002d1a:	e013      	b.n	8002d44 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002d20:	e010      	b.n	8002d44 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002d22:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <xTaskGenericNotify+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <xTaskGenericNotify+0x11a>
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e7fe      	b.n	8002d3c <xTaskGenericNotify+0x114>
                    break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <xTaskGenericNotify+0x11c>

                    break;
 8002d42:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fda4 	bl	8005894 <SEGGER_SYSVIEW_ShrinkId>
 8002d4c:	4601      	mov	r1, r0
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	203e      	movs	r0, #62	; 0x3e
 8002d5a:	f002 f885 	bl	8004e68 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d13c      	bne.n	8002de0 <xTaskGenericNotify+0x1b8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f97a 	bl	8002064 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fcec 	bl	8005750 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <xTaskGenericNotify+0x1cc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <xTaskGenericNotify+0x1cc>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <xTaskGenericNotify+0x1d0>)
 8002d98:	441a      	add	r2, r3
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7ff f902 	bl	8001faa <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <xTaskGenericNotify+0x19a>
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e7fe      	b.n	8002dc0 <xTaskGenericNotify+0x198>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <xTaskGenericNotify+0x1d4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d907      	bls.n	8002de0 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <xTaskGenericNotify+0x1d8>)
 8002dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002de0:	f000 fa56 	bl	8003290 <vPortExitCritical>

        return xReturn;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002de6:	4618      	mov	r0, r3
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000110 	.word	0x20000110
 8002df4:	20000114 	.word	0x20000114
 8002df8:	20000038 	.word	0x20000038
 8002dfc:	20000034 	.word	0x20000034
 8002e00:	e000ed04 	.word	0xe000ed04

08002e04 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff f922 	bl	8002064 <uxListRemove>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e44:	d110      	bne.n	8002e68 <prvAddCurrentTaskToDelayedList+0x64>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	211b      	movs	r1, #27
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fcbe 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002e62:	f7ff f8a2 	bl	8001faa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e66:	e032      	b.n	8002ece <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d20f      	bcs.n	8002ea0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2104      	movs	r1, #4
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fca4 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7ff f8aa 	bl	8001ff2 <vListInsert>
}
 8002e9e:	e016      	b.n	8002ece <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fc94 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f7ff f89a 	bl	8001ff2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d202      	bcs.n	8002ece <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ec8:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000110 	.word	0x20000110
 8002edc:	20000034 	.word	0x20000034
 8002ee0:	20000114 	.word	0x20000114
 8002ee4:	200000f8 	.word	0x200000f8
 8002ee8:	200000c8 	.word	0x200000c8
 8002eec:	200000c4 	.word	0x200000c4
 8002ef0:	2000012c 	.word	0x2000012c

08002ef4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b04      	subs	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b04      	subs	r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3b04      	subs	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <pxPortInitialiseStack+0x64>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3b14      	subs	r3, #20
 8002f2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b04      	subs	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f06f 0202 	mvn.w	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3b20      	subs	r3, #32
 8002f48:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	08002f5d 	.word	0x08002f5d

08002f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <prvTaskExitError+0x50>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6e:	d009      	beq.n	8002f84 <prvTaskExitError+0x28>
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e7fe      	b.n	8002f82 <prvTaskExitError+0x26>
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f96:	bf00      	nop
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0fc      	beq.n	8002f98 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000010 	.word	0x20000010

08002fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <pxCurrentTCBConst2>)
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	6808      	ldr	r0, [r1, #0]
 8002fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	f380 8809 	msr	PSP, r0
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f380 8811 	msr	BASEPRI, r0
 8002fca:	4770      	bx	lr
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst2>:
 8002fd0:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fd8:	4808      	ldr	r0, [pc, #32]	; (8002ffc <prvPortStartFirstTask+0x24>)
 8002fda:	6800      	ldr	r0, [r0, #0]
 8002fdc:	6800      	ldr	r0, [r0, #0]
 8002fde:	f380 8808 	msr	MSP, r0
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f380 8814 	msr	CONTROL, r0
 8002fea:	b662      	cpsie	i
 8002fec:	b661      	cpsie	f
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	df00      	svc	0
 8002ff8:	bf00      	nop
 8002ffa:	0000      	.short	0x0000
 8002ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop

08003004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800300a:	4b44      	ldr	r3, [pc, #272]	; (800311c <xPortStartScheduler+0x118>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a44      	ldr	r2, [pc, #272]	; (8003120 <xPortStartScheduler+0x11c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d109      	bne.n	8003028 <xPortStartScheduler+0x24>
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e7fe      	b.n	8003026 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003028:	4b3c      	ldr	r3, [pc, #240]	; (800311c <xPortStartScheduler+0x118>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <xPortStartScheduler+0x120>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d109      	bne.n	8003046 <xPortStartScheduler+0x42>
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e7fe      	b.n	8003044 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <xPortStartScheduler+0x124>)
 8003048:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	22ff      	movs	r2, #255	; 0xff
 8003056:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <xPortStartScheduler+0x128>)
 800306c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <xPortStartScheduler+0x12c>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003074:	e009      	b.n	800308a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003076:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <xPortStartScheduler+0x12c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <xPortStartScheduler+0x12c>)
 800307e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d0ef      	beq.n	8003076 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <xPortStartScheduler+0x12c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d009      	beq.n	80030b6 <xPortStartScheduler+0xb2>
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	e7fe      	b.n	80030b4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <xPortStartScheduler+0x12c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <xPortStartScheduler+0x12c>)
 80030be:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <xPortStartScheduler+0x12c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <xPortStartScheduler+0x12c>)
 80030ca:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <xPortStartScheduler+0x130>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <xPortStartScheduler+0x130>)
 80030da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030de:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <xPortStartScheduler+0x130>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a13      	ldr	r2, [pc, #76]	; (8003134 <xPortStartScheduler+0x130>)
 80030e6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030ec:	f000 f954 	bl	8003398 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <xPortStartScheduler+0x134>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030f6:	f000 f973 	bl	80033e0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <xPortStartScheduler+0x138>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a0f      	ldr	r2, [pc, #60]	; (800313c <xPortStartScheduler+0x138>)
 8003100:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003104:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003106:	f7ff ff67 	bl	8002fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800310a:	f7ff fbed 	bl	80028e8 <vTaskSwitchContext>
    prvTaskExitError();
 800310e:	f7ff ff25 	bl	8002f5c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	e000ed00 	.word	0xe000ed00
 8003120:	410fc271 	.word	0x410fc271
 8003124:	410fc270 	.word	0x410fc270
 8003128:	e000e400 	.word	0xe000e400
 800312c:	20000138 	.word	0x20000138
 8003130:	2000013c 	.word	0x2000013c
 8003134:	e000ed20 	.word	0xe000ed20
 8003138:	20000010 	.word	0x20000010
 800313c:	e000ef34 	.word	0xe000ef34

08003140 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <vInitPrioGroupValue+0xdc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a35      	ldr	r2, [pc, #212]	; (8003220 <vInitPrioGroupValue+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d109      	bne.n	8003164 <vInitPrioGroupValue+0x24>
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e7fe      	b.n	8003162 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <vInitPrioGroupValue+0xdc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <vInitPrioGroupValue+0xe4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d109      	bne.n	8003182 <vInitPrioGroupValue+0x42>
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e7fe      	b.n	8003180 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <vInitPrioGroupValue+0xe8>)
 8003184:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <vInitPrioGroupValue+0xec>)
 80031a8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031b0:	e009      	b.n	80031c6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031ba:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d0ef      	beq.n	80031b2 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d009      	beq.n	80031f2 <vInitPrioGroupValue+0xb2>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e7fe      	b.n	80031f0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <vInitPrioGroupValue+0xf0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <vInitPrioGroupValue+0xf0>)
 8003206:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	410fc271 	.word	0x410fc271
 8003224:	410fc270 	.word	0x410fc270
 8003228:	e000e400 	.word	0xe000e400
 800322c:	20000138 	.word	0x20000138
 8003230:	2000013c 	.word	0x2000013c

08003234 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <vPortEnterCritical+0x54>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <vPortEnterCritical+0x54>)
 8003254:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <vPortEnterCritical+0x54>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10e      	bne.n	800327c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <vPortEnterCritical+0x58>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <vPortEnterCritical+0x48>
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	e7fe      	b.n	800327a <vPortEnterCritical+0x46>
    }
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	20000010 	.word	0x20000010
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <vPortExitCritical+0x4c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <vPortExitCritical+0x22>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	e7fe      	b.n	80032b0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <vPortExitCritical+0x4c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <vPortExitCritical+0x4c>)
 80032ba:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <vPortExitCritical+0x4c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <vPortExitCritical+0x3e>
 80032c4:	2300      	movs	r3, #0
 80032c6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000010 	.word	0x20000010

080032e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032e0:	f3ef 8009 	mrs	r0, PSP
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	4b15      	ldr	r3, [pc, #84]	; (8003340 <pxCurrentTCBConst>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f01e 0f10 	tst.w	lr, #16
 80032f0:	bf08      	it	eq
 80032f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fa:	6010      	str	r0, [r2, #0]
 80032fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003304:	f380 8811 	msr	BASEPRI, r0
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f7ff faea 	bl	80028e8 <vTaskSwitchContext>
 8003314:	f04f 0000 	mov.w	r0, #0
 8003318:	f380 8811 	msr	BASEPRI, r0
 800331c:	bc09      	pop	{r0, r3}
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	6808      	ldr	r0, [r1, #0]
 8003322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003326:	f01e 0f10 	tst.w	lr, #16
 800332a:	bf08      	it	eq
 800332c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003330:	f380 8809 	msr	PSP, r0
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	f3af 8000 	nop.w

08003340 <pxCurrentTCBConst>:
 8003340:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop

08003348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
        __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003360:	f002 f8dc 	bl	800551c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003364:	f7ff fa04 	bl	8002770 <xTaskIncrementTick>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800336e:	f002 f933 	bl	80055d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <SysTick_Handler+0x4c>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e001      	b.n	8003380 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800337c:	f002 f910 	bl	80055a0 <SEGGER_SYSVIEW_RecordExitISR>
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <vPortSetupTimerInterrupt+0x34>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <vPortSetupTimerInterrupt+0x38>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <vPortSetupTimerInterrupt+0x3c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <vPortSetupTimerInterrupt+0x40>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <vPortSetupTimerInterrupt+0x44>)
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <vPortSetupTimerInterrupt+0x34>)
 80033bc:	2207      	movs	r2, #7
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010
 80033d0:	e000e018 	.word	0xe000e018
 80033d4:	20000000 	.word	0x20000000
 80033d8:	10624dd3 	.word	0x10624dd3
 80033dc:	e000e014 	.word	0xe000e014

080033e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033f0 <vPortEnableVFP+0x10>
 80033e4:	6801      	ldr	r1, [r0, #0]
 80033e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033ea:	6001      	str	r1, [r0, #0]
 80033ec:	4770      	bx	lr
 80033ee:	0000      	.short	0x0000
 80033f0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop

080033f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033fe:	f3ef 8305 	mrs	r3, IPSR
 8003402:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d913      	bls.n	8003432 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <vPortValidateInterruptPriority+0x6c>)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <vPortValidateInterruptPriority+0x70>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	7afa      	ldrb	r2, [r7, #11]
 800341a:	429a      	cmp	r2, r3
 800341c:	d209      	bcs.n	8003432 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e7fe      	b.n	8003430 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <vPortValidateInterruptPriority+0x74>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <vPortValidateInterruptPriority+0x78>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d909      	bls.n	8003456 <vPortValidateInterruptPriority+0x5e>
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	e7fe      	b.n	8003454 <vPortValidateInterruptPriority+0x5c>
    }
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e3f0 	.word	0xe000e3f0
 8003468:	20000138 	.word	0x20000138
 800346c:	e000ed0c 	.word	0xe000ed0c
 8003470:	2000013c 	.word	0x2000013c

08003474 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003480:	f7ff f8b6 	bl	80025f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <pvPortMalloc+0x1a0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800348c:	f000 f92e 	bl	80036ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <pvPortMalloc+0x1a4>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 80a5 	bne.w	80035e8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02c      	beq.n	80034fe <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80034a4:	2208      	movs	r2, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d226      	bcs.n	80034fe <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80034b0:	2208      	movs	r2, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f023 0307 	bic.w	r3, r3, #7
 80034c8:	3308      	adds	r3, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d213      	bcs.n	80034f8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	3308      	adds	r3, #8
 80034d8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00f      	beq.n	8003504 <pvPortMalloc+0x90>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e7fe      	b.n	80034f6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034fc:	e002      	b.n	8003504 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	e000      	b.n	8003506 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003504:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d06d      	beq.n	80035e8 <pvPortMalloc+0x174>
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <pvPortMalloc+0x1a8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d868      	bhi.n	80035e8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003516:	4b42      	ldr	r3, [pc, #264]	; (8003620 <pvPortMalloc+0x1ac>)
 8003518:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <pvPortMalloc+0x1ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003520:	e004      	b.n	800352c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d903      	bls.n	800353e <pvPortMalloc+0xca>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f1      	bne.n	8003522 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <pvPortMalloc+0x1a0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	429a      	cmp	r2, r3
 8003546:	d04f      	beq.n	80035e8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2208      	movs	r2, #8
 800354e:	4413      	add	r3, r2
 8003550:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad2      	subs	r2, r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	429a      	cmp	r2, r3
 8003568:	d91e      	bls.n	80035a8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <pvPortMalloc+0x11c>
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e7fe      	b.n	800358e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035a2:	69b8      	ldr	r0, [r7, #24]
 80035a4:	f000 f904 	bl	80037b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <pvPortMalloc+0x1a8>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <pvPortMalloc+0x1a8>)
 80035b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <pvPortMalloc+0x1a8>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <pvPortMalloc+0x1b0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d203      	bcs.n	80035ca <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <pvPortMalloc+0x1a8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <pvPortMalloc+0x1b0>)
 80035c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <pvPortMalloc+0x1a4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <pvPortMalloc+0x1b4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3301      	adds	r3, #1
 80035e4:	4a10      	ldr	r2, [pc, #64]	; (8003628 <pvPortMalloc+0x1b4>)
 80035e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035e8:	f7ff f810 	bl	800260c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <pvPortMalloc+0x196>
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e7fe      	b.n	8003608 <pvPortMalloc+0x194>
    return pvReturn;
 800360a:	69fb      	ldr	r3, [r7, #28]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20019148 	.word	0x20019148
 8003618:	2001915c 	.word	0x2001915c
 800361c:	2001914c 	.word	0x2001914c
 8003620:	20019140 	.word	0x20019140
 8003624:	20019150 	.word	0x20019150
 8003628:	20019154 	.word	0x20019154

0800362c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04b      	beq.n	80036d6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800363e:	2308      	movs	r3, #8
 8003640:	425b      	negs	r3, r3
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4413      	add	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <vPortFree+0xb4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <vPortFree+0x42>
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e7fe      	b.n	800366c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <vPortFree+0x5e>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	e7fe      	b.n	8003688 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <vPortFree+0xb4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01e      	beq.n	80036d6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11a      	bne.n	80036d6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <vPortFree+0xb4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036b0:	f7fe ff9e 	bl	80025f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <vPortFree+0xb8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <vPortFree+0xb8>)
 80036c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036c2:	6938      	ldr	r0, [r7, #16]
 80036c4:	f000 f874 	bl	80037b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <vPortFree+0xbc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <vPortFree+0xbc>)
 80036d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036d2:	f7fe ff9b 	bl	800260c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2001915c 	.word	0x2001915c
 80036e4:	2001914c 	.word	0x2001914c
 80036e8:	20019158 	.word	0x20019158

080036ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036f2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80036f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <prvHeapInit+0xac>)
 80036fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3307      	adds	r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <prvHeapInit+0xac>)
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <prvHeapInit+0xb0>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <prvHeapInit+0xb0>)
 800372c:	2200      	movs	r2, #0
 800372e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003738:	2208      	movs	r2, #8
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0307 	bic.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <prvHeapInit+0xb4>)
 800374c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <prvHeapInit+0xb4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <prvHeapInit+0xb4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <prvHeapInit+0xb4>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <prvHeapInit+0xb8>)
 800377a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <prvHeapInit+0xbc>)
 8003782:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <prvHeapInit+0xc0>)
 8003786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20000140 	.word	0x20000140
 800379c:	20019140 	.word	0x20019140
 80037a0:	20019148 	.word	0x20019148
 80037a4:	20019150 	.word	0x20019150
 80037a8:	2001914c 	.word	0x2001914c
 80037ac:	2001915c 	.word	0x2001915c

080037b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <prvInsertBlockIntoFreeList+0xac>)
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e002      	b.n	80037c4 <prvInsertBlockIntoFreeList+0x14>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d8f7      	bhi.n	80037be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d108      	bne.n	80037f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	441a      	add	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d118      	bne.n	8003838 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <prvInsertBlockIntoFreeList+0xb0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d00d      	beq.n	800382e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e008      	b.n	8003840 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <prvInsertBlockIntoFreeList+0xb0>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e003      	b.n	8003840 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	d002      	beq.n	800384e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20019140 	.word	0x20019140
 8003860:	20019148 	.word	0x20019148

08003864 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003868:	4803      	ldr	r0, [pc, #12]	; (8003878 <_cbSendSystemDesc+0x14>)
 800386a:	f001 fe03 	bl	8005474 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800386e:	4803      	ldr	r0, [pc, #12]	; (800387c <_cbSendSystemDesc+0x18>)
 8003870:	f001 fe00 	bl	8005474 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	08005c94 	.word	0x08005c94
 800387c:	08005ccc 	.word	0x08005ccc

08003880 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <SEGGER_SYSVIEW_Conf+0x20>)
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <SEGGER_SYSVIEW_Conf+0x24>)
 800388e:	4a06      	ldr	r2, [pc, #24]	; (80038a8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003890:	f001 f9e2 	bl	8004c58 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003894:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003898:	f001 fa22 	bl	8004ce0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000000 	.word	0x20000000
 80038a4:	08003865 	.word	0x08003865
 80038a8:	08005d60 	.word	0x08005d60

080038ac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	e034      	b.n	8003922 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038b8:	491e      	ldr	r1, [pc, #120]	; (8003934 <_cbSendTaskList+0x88>)
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	491a      	ldr	r1, [pc, #104]	; (8003934 <_cbSendTaskList+0x88>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3304      	adds	r3, #4
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <_cbSendTaskList+0x88>)
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3308      	adds	r3, #8
 80038ea:	681d      	ldr	r5, [r3, #0]
 80038ec:	4911      	ldr	r1, [pc, #68]	; (8003934 <_cbSendTaskList+0x88>)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	330c      	adds	r3, #12
 80038fc:	681e      	ldr	r6, [r3, #0]
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <_cbSendTaskList+0x88>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3310      	adds	r3, #16
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4633      	mov	r3, r6
 8003914:	462a      	mov	r2, r5
 8003916:	4621      	mov	r1, r4
 8003918:	f000 f970 	bl	8003bfc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <_cbSendTaskList+0x8c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3c5      	bcc.n	80038b8 <_cbSendTaskList+0xc>
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003934:	20019160 	.word	0x20019160
 8003938:	20019200 	.word	0x20019200

0800393c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003942:	f7fe ff03 	bl	800274c <xTaskGetTickCountFromISR>
 8003946:	4603      	mov	r3, r0
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003950:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003954:	462b      	mov	r3, r5
 8003956:	4634      	mov	r4, r6
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	0162      	lsls	r2, r4, #5
 8003962:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	460b      	mov	r3, r1
 800396a:	4614      	mov	r4, r2
 800396c:	1b5b      	subs	r3, r3, r5
 800396e:	eb64 0406 	sbc.w	r4, r4, r6
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	00a2      	lsls	r2, r4, #2
 800397c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003980:	0099      	lsls	r1, r3, #2
 8003982:	460b      	mov	r3, r1
 8003984:	4614      	mov	r4, r2
 8003986:	195b      	adds	r3, r3, r5
 8003988:	eb44 0406 	adc.w	r4, r4, r6
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	00e2      	lsls	r2, r4, #3
 8003996:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800399a:	00d9      	lsls	r1, r3, #3
 800399c:	460b      	mov	r3, r1
 800399e:	4614      	mov	r4, r2
 80039a0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80039a4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	4621      	mov	r1, r4
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039c2:	2205      	movs	r2, #5
 80039c4:	492b      	ldr	r1, [pc, #172]	; (8003a74 <SYSVIEW_AddTask+0xc0>)
 80039c6:	68b8      	ldr	r0, [r7, #8]
 80039c8:	f002 f8e4 	bl	8005b94 <memcmp>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04b      	beq.n	8003a6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b07      	cmp	r3, #7
 80039d8:	d903      	bls.n	80039e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80039da:	4828      	ldr	r0, [pc, #160]	; (8003a7c <SYSVIEW_AddTask+0xc8>)
 80039dc:	f002 f85a 	bl	8005a94 <SEGGER_SYSVIEW_Warn>
    return;
 80039e0:	e044      	b.n	8003a6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039e2:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4926      	ldr	r1, [pc, #152]	; (8003a80 <SYSVIEW_AddTask+0xcc>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4921      	ldr	r1, [pc, #132]	; (8003a80 <SYSVIEW_AddTask+0xcc>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3304      	adds	r3, #4
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	491b      	ldr	r1, [pc, #108]	; (8003a80 <SYSVIEW_AddTask+0xcc>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4916      	ldr	r1, [pc, #88]	; (8003a80 <SYSVIEW_AddTask+0xcc>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	330c      	adds	r3, #12
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4910      	ldr	r1, [pc, #64]	; (8003a80 <SYSVIEW_AddTask+0xcc>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3310      	adds	r3, #16
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <SYSVIEW_AddTask+0xc4>)
 8003a56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f8ca 	bl	8003bfc <SYSVIEW_SendTaskInfo>
 8003a68:	e000      	b.n	8003a6c <SYSVIEW_AddTask+0xb8>
    return;
 8003a6a:	bf00      	nop

}
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	08005cdc 	.word	0x08005cdc
 8003a78:	20019200 	.word	0x20019200
 8003a7c:	08005ce4 	.word	0x08005ce4
 8003a80:	20019160 	.word	0x20019160

08003a84 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003a8c:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80ab 	beq.w	8003bec <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e00d      	b.n	8003ab8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003a9c:	4956      	ldr	r1, [pc, #344]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d008      	beq.n	8003ac4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d3ec      	bcc.n	8003a9c <SYSVIEW_DeleteTask+0x18>
 8003ac2:	e000      	b.n	8003ac6 <SYSVIEW_DeleteTask+0x42>
      break;
 8003ac4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003ac6:	4b4b      	ldr	r3, [pc, #300]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d111      	bne.n	8003af6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4a46      	ldr	r2, [pc, #280]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003ade:	4413      	add	r3, r2
 8003ae0:	2214      	movs	r2, #20
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 f86f 	bl	8005bc8 <memset>
    _NumTasks--;
 8003aea:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e07b      	b.n	8003bee <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003af6:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d276      	bcs.n	8003bee <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003b00:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	493c      	ldr	r1, [pc, #240]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	4838      	ldr	r0, [pc, #224]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4403      	add	r3, r0
 8003b22:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	4933      	ldr	r1, [pc, #204]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3304      	adds	r3, #4
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	482f      	ldr	r0, [pc, #188]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4403      	add	r3, r0
 8003b48:	3304      	adds	r3, #4
 8003b4a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003b4c:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	4929      	ldr	r1, [pc, #164]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3308      	adds	r3, #8
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	4825      	ldr	r0, [pc, #148]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4403      	add	r3, r0
 8003b70:	3308      	adds	r3, #8
 8003b72:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003b74:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	491f      	ldr	r1, [pc, #124]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	330c      	adds	r3, #12
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	481b      	ldr	r0, [pc, #108]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4403      	add	r3, r0
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	4915      	ldr	r1, [pc, #84]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3310      	adds	r3, #16
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4403      	add	r3, r0
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <SYSVIEW_DeleteTask+0x174>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	2214      	movs	r2, #20
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fff4 	bl	8005bc8 <memset>
    _NumTasks--;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <SYSVIEW_DeleteTask+0x170>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e000      	b.n	8003bee <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003bec:	bf00      	nop
  }
}
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20019200 	.word	0x20019200
 8003bf8:	20019160 	.word	0x20019160

08003bfc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	2214      	movs	r2, #20
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 ffd8 	bl	8005bc8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fb27 	bl	8005284 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <USART2_IRQHandler+0x80>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <USART2_IRQHandler+0x84>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 030b 	and.w	r3, r3, #11
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <USART2_IRQHandler+0x88>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <USART2_IRQHandler+0x88>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	79fa      	ldrb	r2, [r7, #7]
 8003c76:	4610      	mov	r0, r2
 8003c78:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01a      	beq.n	8003cba <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <USART2_IRQHandler+0x8c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <USART2_IRQHandler+0x8c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1dfa      	adds	r2, r7, #7
 8003c92:	4610      	mov	r0, r2
 8003c94:	4798      	blx	r3
 8003c96:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <USART2_IRQHandler+0x90>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <USART2_IRQHandler+0x90>)
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e006      	b.n	8003cba <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <USART2_IRQHandler+0x80>)
 8003cae:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <USART2_IRQHandler+0x84>)
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e000      	b.n	8003cba <USART2_IRQHandler+0x7a>
      return;
 8003cb8:	bf00      	nop
    }
  }
}
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40004404 	.word	0x40004404
 8003cc8:	20019204 	.word	0x20019204
 8003ccc:	20019208 	.word	0x20019208
 8003cd0:	4000440c 	.word	0x4000440c

08003cd4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	4000440c 	.word	0x4000440c

08003cf4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <_DoInit+0xa0>)
 8003cfc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003cfe:	22a8      	movs	r2, #168	; 0xa8
 8003d00:	2100      	movs	r1, #0
 8003d02:	6838      	ldr	r0, [r7, #0]
 8003d04:	f001 ff60 	bl	8005bc8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2203      	movs	r2, #3
 8003d12:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <_DoInit+0xa4>)
 8003d18:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <_DoInit+0xa8>)
 8003d1e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d26:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <_DoInit+0xa4>)
 8003d3e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <_DoInit+0xac>)
 8003d44:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d5e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	e00c      	b.n	8003d82 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1c3 030f 	rsb	r3, r3, #15
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <_DoInit+0xb0>)
 8003d70:	5cd1      	ldrb	r1, [r2, r3]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	460a      	mov	r2, r1
 8003d7a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d9ef      	bls.n	8003d68 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d88:	f3bf 8f5f 	dmb	sy
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	2001a78c 	.word	0x2001a78c
 8003d98:	08005d34 	.word	0x08005d34
 8003d9c:	2001920c 	.word	0x2001920c
 8003da0:	2001960c 	.word	0x2001960c
 8003da4:	08005d68 	.word	0x08005d68

08003da8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003db4:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003dc2:	f7ff ff97 	bl	8003cf4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3360      	adds	r3, #96	; 0x60
 8003dd2:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d92b      	bls.n	8003e4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bf28      	it	cs
 8003e06:	4613      	movcs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	4413      	add	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	6939      	ldr	r1, [r7, #16]
 8003e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e1a:	f001 feca 	bl	8005bb2 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4413      	add	r3, r2
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d101      	bne.n	8003e4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bf28      	it	cs
 8003e5c:	4613      	movcs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	4413      	add	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e76:	f001 fe9c 	bl	8005bb2 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4413      	add	r3, r2
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4413      	add	r3, r2
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	4413      	add	r3, r2
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2001a78c 	.word	0x2001a78c

08003eb4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ed0:	f7ff ff10 	bl	8003cf4 <_DoInit>
  SEGGER_RTT_LOCK();
 8003ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed8:	f04f 0120 	mov.w	r1, #32
 8003edc:	f381 8811 	msr	BASEPRI, r1
 8003ee0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ee4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003eea:	6939      	ldr	r1, [r7, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	3304      	adds	r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	dbeb      	blt.n	8003eea <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f12:	e000      	b.n	8003f16 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f14:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	da3f      	bge.n	8003fa0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f20:	6939      	ldr	r1, [r7, #16]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	440b      	add	r3, r1
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f34:	6939      	ldr	r1, [r7, #16]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	3304      	adds	r3, #4
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f4a:	6939      	ldr	r1, [r7, #16]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	3320      	adds	r3, #32
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f5e:	6939      	ldr	r1, [r7, #16]
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3328      	adds	r3, #40	; 0x28
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	332c      	adds	r3, #44	; 0x2c
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f9a:	f3bf 8f5f 	dmb	sy
 8003f9e:	e002      	b.n	8003fa6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003fac:	69fb      	ldr	r3, [r7, #28]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2001a78c 	.word	0x2001a78c

08003fbc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003fca:	4b21      	ldr	r3, [pc, #132]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003fd8:	f7ff fe8c 	bl	8003cf4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003fde:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d82c      	bhi.n	8004040 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fea:	f04f 0120 	mov.w	r1, #32
 8003fee:	f381 8811 	msr	BASEPRI, r1
 8003ff2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3360      	adds	r3, #96	; 0x60
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004030:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	e002      	b.n	8004046 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2001a78c 	.word	0x2001a78c

08004054 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00f      	beq.n	800408a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800406a:	e002      	b.n	8004072 <_EncodeStr+0x1e>
      Len++;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3301      	adds	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f6      	bne.n	800406c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d901      	bls.n	800408a <_EncodeStr+0x36>
      Len = Limit;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2bfe      	cmp	r3, #254	; 0xfe
 800408e:	d806      	bhi.n	800409e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	60fa      	str	r2, [r7, #12]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e011      	b.n	80040c2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60fa      	str	r2, [r7, #12]
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	60fa      	str	r2, [r7, #12]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	0a19      	lsrs	r1, r3, #8
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	60fa      	str	r2, [r7, #12]
 80040be:	b2ca      	uxtb	r2, r1
 80040c0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040c6:	e00a      	b.n	80040de <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	1c53      	adds	r3, r2, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	60f9      	str	r1, [r7, #12]
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	701a      	strb	r2, [r3, #0]
    n++;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3f0      	bcc.n	80040c8 <_EncodeStr+0x74>
  }
  return pPayload;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3307      	adds	r3, #7
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004112:	4b32      	ldr	r3, [pc, #200]	; (80041dc <_HandleIncomingPacket+0xd0>)
 8004114:	7e1b      	ldrb	r3, [r3, #24]
 8004116:	4618      	mov	r0, r3
 8004118:	1cfb      	adds	r3, r7, #3
 800411a:	2201      	movs	r2, #1
 800411c:	4619      	mov	r1, r3
 800411e:	f7ff fe43 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 8004122:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04c      	beq.n	80041c4 <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d022      	beq.n	8004176 <_HandleIncomingPacket+0x6a>
 8004130:	2b05      	cmp	r3, #5
 8004132:	dc0b      	bgt.n	800414c <_HandleIncomingPacket+0x40>
 8004134:	2b02      	cmp	r3, #2
 8004136:	d015      	beq.n	8004164 <_HandleIncomingPacket+0x58>
 8004138:	2b02      	cmp	r3, #2
 800413a:	dc02      	bgt.n	8004142 <_HandleIncomingPacket+0x36>
 800413c:	2b01      	cmp	r3, #1
 800413e:	d00e      	beq.n	800415e <_HandleIncomingPacket+0x52>
 8004140:	e033      	b.n	80041aa <_HandleIncomingPacket+0x9e>
 8004142:	2b03      	cmp	r3, #3
 8004144:	d011      	beq.n	800416a <_HandleIncomingPacket+0x5e>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d012      	beq.n	8004170 <_HandleIncomingPacket+0x64>
 800414a:	e02e      	b.n	80041aa <_HandleIncomingPacket+0x9e>
 800414c:	2b07      	cmp	r3, #7
 800414e:	d018      	beq.n	8004182 <_HandleIncomingPacket+0x76>
 8004150:	2b07      	cmp	r3, #7
 8004152:	db13      	blt.n	800417c <_HandleIncomingPacket+0x70>
 8004154:	2b7f      	cmp	r3, #127	; 0x7f
 8004156:	d037      	beq.n	80041c8 <_HandleIncomingPacket+0xbc>
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d015      	beq.n	8004188 <_HandleIncomingPacket+0x7c>
 800415c:	e025      	b.n	80041aa <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800415e:	f000 ff15 	bl	8004f8c <SEGGER_SYSVIEW_Start>
      break;
 8004162:	e036      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004164:	f000 ffce 	bl	8005104 <SEGGER_SYSVIEW_Stop>
      break;
 8004168:	e033      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800416a:	f001 f9a7 	bl	80054bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800416e:	e030      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004170:	f001 f96c 	bl	800544c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004174:	e02d      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004176:	f000 ffeb 	bl	8005150 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800417a:	e02a      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800417c:	f001 fc38 	bl	80059f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004180:	e027      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004182:	f001 fc17 	bl	80059b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004186:	e024      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <_HandleIncomingPacket+0xd0>)
 800418a:	7e1b      	ldrb	r3, [r3, #24]
 800418c:	4618      	mov	r0, r3
 800418e:	1cfb      	adds	r3, r7, #3
 8004190:	2201      	movs	r2, #1
 8004192:	4619      	mov	r1, r3
 8004194:	f7ff fe08 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 8004198:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fb86 	bl	80058b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041a8:	e010      	b.n	80041cc <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0e      	bge.n	80041d0 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <_HandleIncomingPacket+0xd0>)
 80041b4:	7e1b      	ldrb	r3, [r3, #24]
 80041b6:	4618      	mov	r0, r3
 80041b8:	1cfb      	adds	r3, r7, #3
 80041ba:	2201      	movs	r2, #1
 80041bc:	4619      	mov	r1, r3
 80041be:	f7ff fdf3 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80041c2:	e005      	b.n	80041d0 <_HandleIncomingPacket+0xc4>
    }
  }
 80041c4:	bf00      	nop
 80041c6:	e004      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
      break;
 80041c8:	bf00      	nop
 80041ca:	e002      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
      break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <_HandleIncomingPacket+0xc6>
      break;
 80041d0:	bf00      	nop
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2001a624 	.word	0x2001a624

080041e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80041e6:	2301      	movs	r3, #1
 80041e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	3301      	adds	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f4:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	e00b      	b.n	8004214 <_TrySendOverflowPacket+0x34>
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	1c59      	adds	r1, r3, #1
 8004204:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	09db      	lsrs	r3, r3, #7
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	2b7f      	cmp	r3, #127	; 0x7f
 8004218:	d8f0      	bhi.n	80041fc <_TrySendOverflowPacket+0x1c>
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <_TrySendOverflowPacket+0xe4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	e00b      	b.n	800425c <_TrySendOverflowPacket+0x7c>
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	6279      	str	r1, [r7, #36]	; 0x24
 800424e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	2b7f      	cmp	r3, #127	; 0x7f
 8004260:	d8f0      	bhi.n	8004244 <_TrySendOverflowPacket+0x64>
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	627a      	str	r2, [r7, #36]	; 0x24
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	4618      	mov	r0, r3
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	461a      	mov	r2, r3
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	4619      	mov	r1, r3
 8004284:	f7fb ffac 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004288:	4603      	mov	r3, r0
 800428a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800428c:	f7ff fd22 	bl	8003cd4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e004      	b.n	80042b4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	4a03      	ldr	r2, [pc, #12]	; (80042c0 <_TrySendOverflowPacket+0xe0>)
 80042b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80042b4:	693b      	ldr	r3, [r7, #16]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	; 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	2001a624 	.word	0x2001a624
 80042c4:	e0001004 	.word	0xe0001004

080042c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042d4:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <_SendPacket+0x27c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d010      	beq.n	80042fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <_SendPacket+0x27c>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 812b 	beq.w	800453c <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80042e6:	4b97      	ldr	r3, [pc, #604]	; (8004544 <_SendPacket+0x27c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d109      	bne.n	8004302 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80042ee:	f7ff ff77 	bl	80041e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80042f2:	4b94      	ldr	r3, [pc, #592]	; (8004544 <_SendPacket+0x27c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 8122 	bne.w	8004540 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80042fc:	e001      	b.n	8004302 <_SendPacket+0x3a>
    goto Send;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <_SendPacket+0x3c>
Send:
 8004302:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b1f      	cmp	r3, #31
 8004308:	d809      	bhi.n	800431e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800430a:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <_SendPacket+0x27c>)
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 8117 	bne.w	800454c <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b17      	cmp	r3, #23
 8004322:	d807      	bhi.n	8004334 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e0c4      	b.n	80044be <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b7f      	cmp	r3, #127	; 0x7f
 8004340:	d912      	bls.n	8004368 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	09da      	lsrs	r2, r3, #7
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b01      	subs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	3a01      	subs	r2, #1
 800435a:	60fa      	str	r2, [r7, #12]
 800435c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e006      	b.n	8004376 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b7e      	cmp	r3, #126	; 0x7e
 800437a:	d807      	bhi.n	800438c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e098      	b.n	80044be <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004392:	d212      	bcs.n	80043ba <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	09da      	lsrs	r2, r3, #7
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	3a01      	subs	r2, #1
 80043ac:	60fa      	str	r2, [r7, #12]
 80043ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e081      	b.n	80044be <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c0:	d21d      	bcs.n	80043fe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0b9a      	lsrs	r2, r3, #14
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	09db      	lsrs	r3, r3, #7
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	3a01      	subs	r2, #1
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	3a01      	subs	r2, #1
 80043f0:	60fa      	str	r2, [r7, #12]
 80043f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e05f      	b.n	80044be <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004404:	d228      	bcs.n	8004458 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0d5a      	lsrs	r2, r3, #21
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b01      	subs	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0b9b      	lsrs	r3, r3, #14
 800441a:	b2db      	uxtb	r3, r3
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	3a01      	subs	r2, #1
 8004420:	60fa      	str	r2, [r7, #12]
 8004422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	b2db      	uxtb	r3, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	3a01      	subs	r2, #1
 8004436:	60fa      	str	r2, [r7, #12]
 8004438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	3a01      	subs	r2, #1
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e032      	b.n	80044be <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0f1a      	lsrs	r2, r3, #28
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0d5b      	lsrs	r3, r3, #21
 800446c:	b2db      	uxtb	r3, r3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	3a01      	subs	r2, #1
 8004472:	60fa      	str	r2, [r7, #12]
 8004474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0b9b      	lsrs	r3, r3, #14
 8004482:	b2db      	uxtb	r3, r3
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	3a01      	subs	r2, #1
 8004488:	60fa      	str	r2, [r7, #12]
 800448a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	09db      	lsrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	3a01      	subs	r2, #1
 800449e:	60fa      	str	r2, [r7, #12]
 80044a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	3a01      	subs	r2, #1
 80044b2:	60fa      	str	r2, [r7, #12]
 80044b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044be:	4b22      	ldr	r3, [pc, #136]	; (8004548 <_SendPacket+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <_SendPacket+0x27c>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	e00b      	b.n	80044f0 <_SendPacket+0x228>
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	6279      	str	r1, [r7, #36]	; 0x24
 80044e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	09db      	lsrs	r3, r3, #7
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b7f      	cmp	r3, #127	; 0x7f
 80044f4:	d8f0      	bhi.n	80044d8 <_SendPacket+0x210>
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	627a      	str	r2, [r7, #36]	; 0x24
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <_SendPacket+0x27c>)
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	4618      	mov	r0, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	461a      	mov	r2, r3
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	f7fb fe63 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800451a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800451c:	f7ff fbda 	bl	8003cd4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004526:	4a07      	ldr	r2, [pc, #28]	; (8004544 <_SendPacket+0x27c>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	60d3      	str	r3, [r2, #12]
 800452c:	e00f      	b.n	800454e <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <_SendPacket+0x27c>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b03      	ldr	r3, [pc, #12]	; (8004544 <_SendPacket+0x27c>)
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e008      	b.n	800454e <_SendPacket+0x286>
    goto SendDone;
 800453c:	bf00      	nop
 800453e:	e006      	b.n	800454e <_SendPacket+0x286>
      goto SendDone;
 8004540:	bf00      	nop
 8004542:	e004      	b.n	800454e <_SendPacket+0x286>
 8004544:	2001a624 	.word	0x2001a624
 8004548:	e0001004 	.word	0xe0001004
      goto SendDone;
 800454c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <_SendPacket+0x2d8>)
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	4619      	mov	r1, r3
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <_SendPacket+0x2dc>)
 8004556:	460b      	mov	r3, r1
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	440b      	add	r3, r1
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	336c      	adds	r3, #108	; 0x6c
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <_SendPacket+0x2d8>)
 8004566:	7e1b      	ldrb	r3, [r3, #24]
 8004568:	4618      	mov	r0, r3
 800456a:	490e      	ldr	r1, [pc, #56]	; (80045a4 <_SendPacket+0x2dc>)
 800456c:	4603      	mov	r3, r0
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4403      	add	r3, r0
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	3370      	adds	r3, #112	; 0x70
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d00b      	beq.n	8004596 <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <_SendPacket+0x2d8>)
 8004580:	789b      	ldrb	r3, [r3, #2]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d107      	bne.n	8004596 <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <_SendPacket+0x2d8>)
 8004588:	2201      	movs	r2, #1
 800458a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800458c:	f7ff fdbe 	bl	800410c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <_SendPacket+0x2d8>)
 8004592:	2200      	movs	r2, #0
 8004594:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004596:	bf00      	nop
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2001a624 	.word	0x2001a624
 80045a4:	2001a78c 	.word	0x2001a78c

080045a8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3301      	adds	r3, #1
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d80a      	bhi.n	80045d8 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6051      	str	r1, [r2, #4]
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d15a      	bne.n	8004696 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	e00b      	b.n	800461a <_StoreChar+0x72>
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1c59      	adds	r1, r3, #1
 800460a:	6279      	str	r1, [r7, #36]	; 0x24
 800460c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	09db      	lsrs	r3, r3, #7
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2b7f      	cmp	r3, #127	; 0x7f
 800461e:	d8f0      	bhi.n	8004602 <_StoreChar+0x5a>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	627a      	str	r2, [r7, #36]	; 0x24
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e00b      	b.n	8004652 <_StoreChar+0xaa>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	61f9      	str	r1, [r7, #28]
 8004644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	09db      	lsrs	r3, r3, #7
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b7f      	cmp	r3, #127	; 0x7f
 8004656:	d8f0      	bhi.n	800463a <_StoreChar+0x92>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	221a      	movs	r2, #26
 800466e:	6939      	ldr	r1, [r7, #16]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe29 	bl	80042c8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fd3a 	bl	80040f4 <_PreparePacket>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
  }
}
 8004696:	bf00      	nop
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80046ba:	e007      	b.n	80046cc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80046bc:	6a3a      	ldr	r2, [r7, #32]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	623b      	str	r3, [r7, #32]
    Width++;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d2f3      	bcs.n	80046bc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d901      	bls.n	80046e0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11f      	bne.n	800472a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <_PrintUnsigned+0x66>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <_PrintUnsigned+0x66>
        c = '0';
 8004700:	2330      	movs	r3, #48	; 0x30
 8004702:	76fb      	strb	r3, [r7, #27]
 8004704:	e001      	b.n	800470a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004706:	2320      	movs	r3, #32
 8004708:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800470a:	e007      	b.n	800471c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	3b01      	subs	r3, #1
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004712:	7efb      	ldrb	r3, [r7, #27]
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ff46 	bl	80045a8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <_PrintUnsigned+0x8a>
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	429a      	cmp	r2, r3
 8004728:	d3f0      	bcc.n	800470c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d903      	bls.n	8004738 <_PrintUnsigned+0x98>
      NumDigits--;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	e009      	b.n	800474c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d200      	bcs.n	800474c <_PrintUnsigned+0xac>
        break;
 800474a:	e005      	b.n	8004758 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004756:	e7e8      	b.n	800472a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <_PrintUnsigned+0x128>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff14 	bl	80045a8 <_StoreChar>
    Digit /= Base;
 8004780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e3      	bne.n	8004758 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d011      	beq.n	80047be <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00e      	beq.n	80047be <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047a0:	e006      	b.n	80047b0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	3b01      	subs	r3, #1
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80047a8:	2120      	movs	r1, #32
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff fefc 	bl	80045a8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <_PrintUnsigned+0x11e>
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3f1      	bcc.n	80047a2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80047be:	bf00      	nop
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	08005d88 	.word	0x08005d88

080047cc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bfb8      	it	lt
 80047e0:	425b      	neglt	r3, r3
 80047e2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80047e4:	2301      	movs	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80047e8:	e007      	b.n	80047fa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
    Width++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	daf3      	bge.n	80047ea <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	429a      	cmp	r2, r3
 8004808:	d901      	bls.n	800480e <_PrintInt+0x42>
    Width = NumDigits;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <_PrintInt+0x5e>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	db04      	blt.n	8004824 <_PrintInt+0x58>
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <_PrintInt+0x5e>
    FieldWidth--;
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	3b01      	subs	r3, #1
 8004828:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <_PrintInt+0x6e>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <_PrintInt+0x9c>
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d111      	bne.n	8004868 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00e      	beq.n	8004868 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800484a:	e006      	b.n	800485a <_PrintInt+0x8e>
        FieldWidth--;
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	3b01      	subs	r3, #1
 8004850:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004852:	2120      	movs	r1, #32
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fea7 	bl	80045a8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <_PrintInt+0x9c>
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	429a      	cmp	r2, r3
 8004866:	d3f1      	bcc.n	800484c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da07      	bge.n	800487e <_PrintInt+0xb2>
    v = -v;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	425b      	negs	r3, r3
 8004872:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004874:	212d      	movs	r1, #45	; 0x2d
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fe96 	bl	80045a8 <_StoreChar>
 800487c:	e008      	b.n	8004890 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004888:	212b      	movs	r1, #43	; 0x2b
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff fe8c 	bl	80045a8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d019      	beq.n	80048ce <_PrintInt+0x102>
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d114      	bne.n	80048ce <_PrintInt+0x102>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d111      	bne.n	80048ce <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048b0:	e006      	b.n	80048c0 <_PrintInt+0xf4>
        FieldWidth--;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80048b8:	2130      	movs	r1, #48	; 0x30
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff fe74 	bl	80045a8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <_PrintInt+0x102>
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3f1      	bcc.n	80048b2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fedf 	bl	80046a0 <_PrintUnsigned>
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b098      	sub	sp, #96	; 0x60
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048f8:	f3ef 8311 	mrs	r3, BASEPRI
 80048fc:	f04f 0120 	mov.w	r1, #32
 8004900:	f381 8811 	msr	BASEPRI, r1
 8004904:	633b      	str	r3, [r7, #48]	; 0x30
 8004906:	48ac      	ldr	r0, [pc, #688]	; (8004bb8 <_VPrintTarget+0x2cc>)
 8004908:	f7ff fbf4 	bl	80040f4 <_PreparePacket>
 800490c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800490e:	4baa      	ldr	r3, [pc, #680]	; (8004bb8 <_VPrintTarget+0x2cc>)
 8004910:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3301      	adds	r3, #1
 800491e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8140 	beq.w	8004bbc <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 800493c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004940:	2b25      	cmp	r3, #37	; 0x25
 8004942:	f040 812a 	bne.w	8004b9a <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004946:	2300      	movs	r3, #0
 8004948:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800494a:	2301      	movs	r3, #1
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800495a:	3b23      	subs	r3, #35	; 0x23
 800495c:	2b0d      	cmp	r3, #13
 800495e:	d83f      	bhi.n	80049e0 <_VPrintTarget+0xf4>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <_VPrintTarget+0x7c>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	080049d1 	.word	0x080049d1
 800496c:	080049e1 	.word	0x080049e1
 8004970:	080049e1 	.word	0x080049e1
 8004974:	080049e1 	.word	0x080049e1
 8004978:	080049e1 	.word	0x080049e1
 800497c:	080049e1 	.word	0x080049e1
 8004980:	080049e1 	.word	0x080049e1
 8004984:	080049e1 	.word	0x080049e1
 8004988:	080049c1 	.word	0x080049c1
 800498c:	080049e1 	.word	0x080049e1
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049e1 	.word	0x080049e1
 8004998:	080049e1 	.word	0x080049e1
 800499c:	080049b1 	.word	0x080049b1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80049a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e01a      	b.n	80049e6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80049b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e012      	b.n	80049e6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80049c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e00a      	b.n	80049e6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80049d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d2:	f043 0308 	orr.w	r3, r3, #8
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e002      	b.n	80049e6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80049e0:	2300      	movs	r3, #0
 80049e2:	653b      	str	r3, [r7, #80]	; 0x50
 80049e4:	bf00      	nop
        }
      } while (v);
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1b0      	bne.n	800494e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80049ec:	2300      	movs	r3, #0
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80049f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049fc:	2b2f      	cmp	r3, #47	; 0x2f
 80049fe:	d912      	bls.n	8004a26 <_VPrintTarget+0x13a>
 8004a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a04:	2b39      	cmp	r3, #57	; 0x39
 8004a06:	d80e      	bhi.n	8004a26 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a1e:	4413      	add	r3, r2
 8004a20:	3b30      	subs	r3, #48	; 0x30
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004a24:	e7e4      	b.n	80049f0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004a26:	2300      	movs	r3, #0
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004a32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a36:	2b2e      	cmp	r3, #46	; 0x2e
 8004a38:	d11d      	bne.n	8004a76 <_VPrintTarget+0x18a>
        sFormat++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a4e:	d912      	bls.n	8004a76 <_VPrintTarget+0x18a>
 8004a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a54:	2b39      	cmp	r3, #57	; 0x39
 8004a56:	d80e      	bhi.n	8004a76 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b30      	subs	r3, #48	; 0x30
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004a74:	e7e4      	b.n	8004a40 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a82:	2b6c      	cmp	r3, #108	; 0x6c
 8004a84:	d003      	beq.n	8004a8e <_VPrintTarget+0x1a2>
 8004a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a8a:	2b68      	cmp	r3, #104	; 0x68
 8004a8c:	d107      	bne.n	8004a9e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004a9c:	e7ef      	b.n	8004a7e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d022      	beq.n	8004aec <_VPrintTarget+0x200>
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	dc06      	bgt.n	8004ab8 <_VPrintTarget+0x1cc>
 8004aaa:	2b58      	cmp	r3, #88	; 0x58
 8004aac:	d044      	beq.n	8004b38 <_VPrintTarget+0x24c>
 8004aae:	2b63      	cmp	r3, #99	; 0x63
 8004ab0:	d009      	beq.n	8004ac6 <_VPrintTarget+0x1da>
 8004ab2:	2b25      	cmp	r3, #37	; 0x25
 8004ab4:	d066      	beq.n	8004b84 <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004ab6:	e06c      	b.n	8004b92 <_VPrintTarget+0x2a6>
      switch (c) {
 8004ab8:	2b75      	cmp	r3, #117	; 0x75
 8004aba:	d02a      	beq.n	8004b12 <_VPrintTarget+0x226>
 8004abc:	2b78      	cmp	r3, #120	; 0x78
 8004abe:	d03b      	beq.n	8004b38 <_VPrintTarget+0x24c>
 8004ac0:	2b70      	cmp	r3, #112	; 0x70
 8004ac2:	d04c      	beq.n	8004b5e <_VPrintTarget+0x272>
        break;
 8004ac4:	e065      	b.n	8004b92 <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	1d19      	adds	r1, r3, #4
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6011      	str	r1, [r2, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004ada:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004ade:	f107 0314 	add.w	r3, r7, #20
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fd5f 	bl	80045a8 <_StoreChar>
        break;
 8004aea:	e052      	b.n	8004b92 <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	1d19      	adds	r1, r3, #4
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004afa:	f107 0014 	add.w	r0, r7, #20
 8004afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b08:	220a      	movs	r2, #10
 8004b0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b0c:	f7ff fe5e 	bl	80047cc <_PrintInt>
        break;
 8004b10:	e03f      	b.n	8004b92 <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1d19      	adds	r1, r3, #4
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6011      	str	r1, [r2, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b22:	f107 0014 	add.w	r0, r7, #20
 8004b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b30:	220a      	movs	r2, #10
 8004b32:	f7ff fdb5 	bl	80046a0 <_PrintUnsigned>
        break;
 8004b36:	e02c      	b.n	8004b92 <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004b46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b48:	f107 0014 	add.w	r0, r7, #20
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b56:	2210      	movs	r2, #16
 8004b58:	f7ff fda2 	bl	80046a0 <_PrintUnsigned>
        break;
 8004b5c:	e019      	b.n	8004b92 <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1d19      	adds	r1, r3, #4
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6011      	str	r1, [r2, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b6e:	f107 0014 	add.w	r0, r7, #20
 8004b72:	2300      	movs	r3, #0
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	2308      	movs	r3, #8
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	f7ff fd8f 	bl	80046a0 <_PrintUnsigned>
        break;
 8004b82:	e006      	b.n	8004b92 <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	2125      	movs	r1, #37	; 0x25
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fd0c 	bl	80045a8 <_StoreChar>
        break;
 8004b90:	bf00      	nop
      }
      sFormat++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e007      	b.n	8004baa <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004b9e:	f107 0314 	add.w	r3, r7, #20
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fcff 	bl	80045a8 <_StoreChar>
    }
  } while (*sFormat);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f47f aeb8 	bne.w	8004924 <_VPrintTarget+0x38>
 8004bb4:	e003      	b.n	8004bbe <_VPrintTarget+0x2d2>
 8004bb6:	bf00      	nop
 8004bb8:	2001a654 	.word	0x2001a654
      break;
 8004bbc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d041      	beq.n	8004c48 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd4:	e00b      	b.n	8004bee <_VPrintTarget+0x302>
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bdc:	1c59      	adds	r1, r3, #1
 8004bde:	6439      	str	r1, [r7, #64]	; 0x40
 8004be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	09db      	lsrs	r3, r3, #7
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf2:	d8f0      	bhi.n	8004bd6 <_VPrintTarget+0x2ea>
 8004bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8004bfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c02:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	e00b      	b.n	8004c26 <_VPrintTarget+0x33a>
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	1c59      	adds	r1, r3, #1
 8004c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	09db      	lsrs	r3, r3, #7
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2a:	d8f0      	bhi.n	8004c0e <_VPrintTarget+0x322>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	69b9      	ldr	r1, [r7, #24]
 8004c40:	221a      	movs	r2, #26
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fb40 	bl	80042c8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c4e:	bf00      	nop
 8004c50:	3758      	adds	r7, #88	; 0x58
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop

08004c58 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c66:	2300      	movs	r3, #0
 8004c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c6c:	4917      	ldr	r1, [pc, #92]	; (8004ccc <SEGGER_SYSVIEW_Init+0x74>)
 8004c6e:	4818      	ldr	r0, [pc, #96]	; (8004cd0 <SEGGER_SYSVIEW_Init+0x78>)
 8004c70:	f7ff f920 	bl	8003eb4 <SEGGER_RTT_AllocUpBuffer>
 8004c74:	4603      	mov	r3, r0
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7e:	785a      	ldrb	r2, [r3, #1]
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c82:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2308      	movs	r3, #8
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <SEGGER_SYSVIEW_Init+0x80>)
 8004c92:	490f      	ldr	r1, [pc, #60]	; (8004cd0 <SEGGER_SYSVIEW_Init+0x78>)
 8004c94:	f7ff f992 	bl	8003fbc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <SEGGER_SYSVIEW_Init+0x84>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004cb2:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004cb8:	4a06      	ldr	r2, [pc, #24]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	2001961c 	.word	0x2001961c
 8004cd0:	08005d40 	.word	0x08005d40
 8004cd4:	2001a624 	.word	0x2001a624
 8004cd8:	2001a61c 	.word	0x2001a61c
 8004cdc:	e0001004 	.word	0xe0001004

08004ce0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6113      	str	r3, [r2, #16]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2001a624 	.word	0x2001a624

08004d00 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d08:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0c:	f04f 0120 	mov.w	r1, #32
 8004d10:	f381 8811 	msr	BASEPRI, r1
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4808      	ldr	r0, [pc, #32]	; (8004d38 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d18:	f7ff f9ec 	bl	80040f4 <_PreparePacket>
 8004d1c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	68b8      	ldr	r0, [r7, #8]
 8004d24:	f7ff fad0 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2001a654 	.word	0x2001a654

08004d3c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d46:	f3ef 8311 	mrs	r3, BASEPRI
 8004d4a:	f04f 0120 	mov.w	r1, #32
 8004d4e:	f381 8811 	msr	BASEPRI, r1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	4816      	ldr	r0, [pc, #88]	; (8004db0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d56:	f7ff f9cd 	bl	80040f4 <_PreparePacket>
 8004d5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e00b      	b.n	8004d82 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	61f9      	str	r1, [r7, #28]
 8004d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	09db      	lsrs	r3, r3, #7
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b7f      	cmp	r3, #127	; 0x7f
 8004d86:	d8f0      	bhi.n	8004d6a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	61fa      	str	r2, [r7, #28]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	6938      	ldr	r0, [r7, #16]
 8004d9e:	f7ff fa93 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f383 8811 	msr	BASEPRI, r3
}
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2001a654 	.word	0x2001a654

08004db4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc4:	f04f 0120 	mov.w	r1, #32
 8004dc8:	f381 8811 	msr	BASEPRI, r1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	4825      	ldr	r0, [pc, #148]	; (8004e64 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004dd0:	f7ff f990 	bl	80040f4 <_PreparePacket>
 8004dd4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de2:	e00b      	b.n	8004dfc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	1c59      	adds	r1, r3, #1
 8004dec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	09db      	lsrs	r3, r3, #7
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004e00:	d8f0      	bhi.n	8004de4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	623b      	str	r3, [r7, #32]
 8004e1a:	e00b      	b.n	8004e34 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1c59      	adds	r1, r3, #1
 8004e24:	6279      	str	r1, [r7, #36]	; 0x24
 8004e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	09db      	lsrs	r3, r3, #7
 8004e32:	623b      	str	r3, [r7, #32]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2b7f      	cmp	r3, #127	; 0x7f
 8004e38:	d8f0      	bhi.n	8004e1c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e40:	6a3a      	ldr	r2, [r7, #32]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	69b8      	ldr	r0, [r7, #24]
 8004e50:	f7ff fa3a 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f383 8811 	msr	BASEPRI, r3
}
 8004e5a:	bf00      	nop
 8004e5c:	3730      	adds	r7, #48	; 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	2001a654 	.word	0x2001a654

08004e68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	; 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e76:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7a:	f04f 0120 	mov.w	r1, #32
 8004e7e:	f381 8811 	msr	BASEPRI, r1
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	4840      	ldr	r0, [pc, #256]	; (8004f88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004e86:	f7ff f935 	bl	80040f4 <_PreparePacket>
 8004e8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e98:	e00b      	b.n	8004eb2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	09db      	lsrs	r3, r3, #7
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb6:	d8f0      	bhi.n	8004e9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed0:	e00b      	b.n	8004eea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	1c59      	adds	r1, r3, #1
 8004eda:	6379      	str	r1, [r7, #52]	; 0x34
 8004edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	09db      	lsrs	r3, r3, #7
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	2b7f      	cmp	r3, #127	; 0x7f
 8004eee:	d8f0      	bhi.n	8004ed2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	e00b      	b.n	8004f22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	09db      	lsrs	r3, r3, #7
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	2b7f      	cmp	r3, #127	; 0x7f
 8004f26:	d8f0      	bhi.n	8004f0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	e00b      	b.n	8004f5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	09db      	lsrs	r3, r3, #7
 8004f58:	623b      	str	r3, [r7, #32]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5e:	d8f0      	bhi.n	8004f42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	627a      	str	r2, [r7, #36]	; 0x24
 8004f66:	6a3a      	ldr	r2, [r7, #32]
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	69b8      	ldr	r0, [r7, #24]
 8004f76:	f7ff f9a7 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f383 8811 	msr	BASEPRI, r3
}
 8004f80:	bf00      	nop
 8004f82:	3740      	adds	r7, #64	; 0x40
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	2001a654 	.word	0x2001a654

08004f8c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f92:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f98:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9c:	f04f 0120 	mov.w	r1, #32
 8004fa0:	f381 8811 	msr	BASEPRI, r1
 8004fa4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004fa6:	4b54      	ldr	r3, [pc, #336]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	220a      	movs	r2, #10
 8004fac:	4953      	ldr	r1, [pc, #332]	; (80050fc <SEGGER_SYSVIEW_Start+0x170>)
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb f916 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004fba:	f7fe fe8b 	bl	8003cd4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fbe:	200a      	movs	r0, #10
 8004fc0:	f7ff fe9e 	bl	8004d00 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc8:	f04f 0120 	mov.w	r1, #32
 8004fcc:	f381 8811 	msr	BASEPRI, r1
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	484b      	ldr	r0, [pc, #300]	; (8005100 <SEGGER_SYSVIEW_Start+0x174>)
 8004fd4:	f7ff f88e 	bl	80040f4 <_PreparePacket>
 8004fd8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe2:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe8:	e00b      	b.n	8005002 <SEGGER_SYSVIEW_Start+0x76>
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	09db      	lsrs	r3, r3, #7
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	2b7f      	cmp	r3, #127	; 0x7f
 8005006:	d8f0      	bhi.n	8004fea <SEGGER_SYSVIEW_Start+0x5e>
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	e00b      	b.n	800503c <SEGGER_SYSVIEW_Start+0xb0>
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	6279      	str	r1, [r7, #36]	; 0x24
 800502e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	09db      	lsrs	r3, r3, #7
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2b7f      	cmp	r3, #127	; 0x7f
 8005040:	d8f0      	bhi.n	8005024 <SEGGER_SYSVIEW_Start+0x98>
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	627a      	str	r2, [r7, #36]	; 0x24
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	4b28      	ldr	r3, [pc, #160]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e00b      	b.n	8005076 <SEGGER_SYSVIEW_Start+0xea>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	61f9      	str	r1, [r7, #28]
 8005068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b7f      	cmp	r3, #127	; 0x7f
 800507a:	d8f0      	bhi.n	800505e <SEGGER_SYSVIEW_Start+0xd2>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	2300      	movs	r3, #0
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e00b      	b.n	80050ae <SEGGER_SYSVIEW_Start+0x122>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	6179      	str	r1, [r7, #20]
 80050a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	09db      	lsrs	r3, r3, #7
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b7f      	cmp	r3, #127	; 0x7f
 80050b2:	d8f0      	bhi.n	8005096 <SEGGER_SYSVIEW_Start+0x10a>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	617a      	str	r2, [r7, #20]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050c4:	2218      	movs	r2, #24
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff f8fd 	bl	80042c8 <_SendPacket>
      RECORD_END();
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SEGGER_SYSVIEW_Start+0x16c>)
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050e2:	f000 f9eb 	bl	80054bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050e6:	f000 f9b1 	bl	800544c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050ea:	f000 fc81 	bl	80059f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050ee:	bf00      	nop
 80050f0:	3730      	adds	r7, #48	; 0x30
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2001a624 	.word	0x2001a624
 80050fc:	08005d7c 	.word	0x08005d7c
 8005100:	2001a654 	.word	0x2001a654

08005104 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800510a:	f3ef 8311 	mrs	r3, BASEPRI
 800510e:	f04f 0120 	mov.w	r1, #32
 8005112:	f381 8811 	msr	BASEPRI, r1
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	480b      	ldr	r0, [pc, #44]	; (8005148 <SEGGER_SYSVIEW_Stop+0x44>)
 800511a:	f7fe ffeb 	bl	80040f4 <_PreparePacket>
 800511e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <SEGGER_SYSVIEW_Stop+0x48>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005128:	220b      	movs	r2, #11
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6838      	ldr	r0, [r7, #0]
 800512e:	f7ff f8cb 	bl	80042c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <SEGGER_SYSVIEW_Stop+0x48>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f383 8811 	msr	BASEPRI, r3
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	2001a654 	.word	0x2001a654
 800514c:	2001a624 	.word	0x2001a624

08005150 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	; 0x30
 8005154:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005156:	f3ef 8311 	mrs	r3, BASEPRI
 800515a:	f04f 0120 	mov.w	r1, #32
 800515e:	f381 8811 	msr	BASEPRI, r1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	4845      	ldr	r0, [pc, #276]	; (800527c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005166:	f7fe ffc5 	bl	80040f4 <_PreparePacket>
 800516a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	e00b      	b.n	8005194 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	09db      	lsrs	r3, r3, #7
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	2b7f      	cmp	r3, #127	; 0x7f
 8005198:	d8f0      	bhi.n	800517c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
 80051ae:	4b34      	ldr	r3, [pc, #208]	; (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	e00b      	b.n	80051ce <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	6279      	str	r1, [r7, #36]	; 0x24
 80051c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	09db      	lsrs	r3, r3, #7
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b7f      	cmp	r3, #127	; 0x7f
 80051d2:	d8f0      	bhi.n	80051b6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	627a      	str	r2, [r7, #36]	; 0x24
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e00b      	b.n	8005208 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	61f9      	str	r1, [r7, #28]
 80051fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	09db      	lsrs	r3, r3, #7
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b7f      	cmp	r3, #127	; 0x7f
 800520c:	d8f0      	bhi.n	80051f0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	61fa      	str	r2, [r7, #28]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e00b      	b.n	8005240 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	6179      	str	r1, [r7, #20]
 8005232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	09db      	lsrs	r3, r3, #7
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b7f      	cmp	r3, #127	; 0x7f
 8005244:	d8f0      	bhi.n	8005228 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	617a      	str	r2, [r7, #20]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005256:	2218      	movs	r2, #24
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f7ff f834 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	4798      	blx	r3
  }
}
 8005274:	bf00      	nop
 8005276:	3730      	adds	r7, #48	; 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	2001a654 	.word	0x2001a654
 8005280:	2001a624 	.word	0x2001a624

08005284 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b092      	sub	sp, #72	; 0x48
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800528c:	f3ef 8311 	mrs	r3, BASEPRI
 8005290:	f04f 0120 	mov.w	r1, #32
 8005294:	f381 8811 	msr	BASEPRI, r1
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	486a      	ldr	r0, [pc, #424]	; (8005444 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800529c:	f7fe ff2a 	bl	80040f4 <_PreparePacket>
 80052a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b66      	ldr	r3, [pc, #408]	; (8005448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	643b      	str	r3, [r7, #64]	; 0x40
 80052b6:	e00b      	b.n	80052d0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052be:	1c59      	adds	r1, r3, #1
 80052c0:	6479      	str	r1, [r7, #68]	; 0x44
 80052c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052cc:	09db      	lsrs	r3, r3, #7
 80052ce:	643b      	str	r3, [r7, #64]	; 0x40
 80052d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d2:	2b7f      	cmp	r3, #127	; 0x7f
 80052d4:	d8f0      	bhi.n	80052b8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	647a      	str	r2, [r7, #68]	; 0x44
 80052dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80052f0:	e00b      	b.n	800530a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	1c59      	adds	r1, r3, #1
 80052fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	09db      	lsrs	r3, r3, #7
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b7f      	cmp	r3, #127	; 0x7f
 800530e:	d8f0      	bhi.n	80052f2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7fe fe93 	bl	8004054 <_EncodeStr>
 800532e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005330:	2209      	movs	r2, #9
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	6938      	ldr	r0, [r7, #16]
 8005336:	f7fe ffc7 	bl	80042c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b40      	ldr	r3, [pc, #256]	; (8005448 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	e00b      	b.n	8005368 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	6379      	str	r1, [r7, #52]	; 0x34
 800535a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	09db      	lsrs	r3, r3, #7
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2b7f      	cmp	r3, #127	; 0x7f
 800536c:	d8f0      	bhi.n	8005350 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	637a      	str	r2, [r7, #52]	; 0x34
 8005374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
 8005388:	e00b      	b.n	80053a2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	b2da      	uxtb	r2, r3
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	09db      	lsrs	r3, r3, #7
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	2b7f      	cmp	r3, #127	; 0x7f
 80053a6:	d8f0      	bhi.n	800538a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	e00b      	b.n	80053dc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	6279      	str	r1, [r7, #36]	; 0x24
 80053ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b7f      	cmp	r3, #127	; 0x7f
 80053e0:	d8f0      	bhi.n	80053c4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	627a      	str	r2, [r7, #36]	; 0x24
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e00b      	b.n	8005414 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	1c59      	adds	r1, r3, #1
 8005404:	61f9      	str	r1, [r7, #28]
 8005406:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	09db      	lsrs	r3, r3, #7
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b7f      	cmp	r3, #127	; 0x7f
 8005418:	d8f0      	bhi.n	80053fc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	61fa      	str	r2, [r7, #28]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800542a:	2215      	movs	r2, #21
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	6938      	ldr	r0, [r7, #16]
 8005430:	f7fe ff4a 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f383 8811 	msr	BASEPRI, r3
}
 800543a:	bf00      	nop
 800543c:	3748      	adds	r7, #72	; 0x48
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2001a654 	.word	0x2001a654
 8005448:	2001a624 	.word	0x2001a624

0800544c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005462:	4b03      	ldr	r3, [pc, #12]	; (8005470 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4798      	blx	r3
  }
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2001a624 	.word	0x2001a624

08005474 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800547c:	f3ef 8311 	mrs	r3, BASEPRI
 8005480:	f04f 0120 	mov.w	r1, #32
 8005484:	f381 8811 	msr	BASEPRI, r1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	480b      	ldr	r0, [pc, #44]	; (80054b8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800548c:	f7fe fe32 	bl	80040f4 <_PreparePacket>
 8005490:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	6938      	ldr	r0, [r7, #16]
 8005498:	f7fe fddc 	bl	8004054 <_EncodeStr>
 800549c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800549e:	220e      	movs	r2, #14
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f7fe ff10 	bl	80042c8 <_SendPacket>
  RECORD_END();
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2001a654 	.word	0x2001a654

080054bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d019      	beq.n	80054fe <SEGGER_SYSVIEW_RecordSystime+0x42>
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d014      	beq.n	80054fe <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4798      	blx	r3
 80054dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054e0:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	0013      	movs	r3, r2
 80054f0:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054f2:	461a      	mov	r2, r3
 80054f4:	4601      	mov	r1, r0
 80054f6:	200d      	movs	r0, #13
 80054f8:	f7ff fc5c 	bl	8004db4 <SEGGER_SYSVIEW_RecordU32x2>
 80054fc:	e005      	b.n	800550a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	200c      	movs	r0, #12
 8005506:	f7ff fc19 	bl	8004d3c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	bf00      	nop
 8005514:	2001a624 	.word	0x2001a624
 8005518:	e0001004 	.word	0xe0001004

0800551c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005522:	f3ef 8311 	mrs	r3, BASEPRI
 8005526:	f04f 0120 	mov.w	r1, #32
 800552a:	f381 8811 	msr	BASEPRI, r1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	4819      	ldr	r0, [pc, #100]	; (8005598 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005532:	f7fe fddf 	bl	80040f4 <_PreparePacket>
 8005536:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	6179      	str	r1, [r7, #20]
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	617a      	str	r2, [r7, #20]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800557e:	2202      	movs	r2, #2
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68b8      	ldr	r0, [r7, #8]
 8005584:	f7fe fea0 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2001a654 	.word	0x2001a654
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055a6:	f3ef 8311 	mrs	r3, BASEPRI
 80055aa:	f04f 0120 	mov.w	r1, #32
 80055ae:	f381 8811 	msr	BASEPRI, r1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055b6:	f7fe fd9d 	bl	80040f4 <_PreparePacket>
 80055ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055bc:	2203      	movs	r2, #3
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6838      	ldr	r0, [r7, #0]
 80055c2:	f7fe fe81 	bl	80042c8 <_SendPacket>
  RECORD_END();
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f383 8811 	msr	BASEPRI, r3
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	2001a654 	.word	0x2001a654

080055d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055de:	f3ef 8311 	mrs	r3, BASEPRI
 80055e2:	f04f 0120 	mov.w	r1, #32
 80055e6:	f381 8811 	msr	BASEPRI, r1
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	4807      	ldr	r0, [pc, #28]	; (800560c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055ee:	f7fe fd81 	bl	80040f4 <_PreparePacket>
 80055f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055f4:	2212      	movs	r2, #18
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6838      	ldr	r0, [r7, #0]
 80055fa:	f7fe fe65 	bl	80042c8 <_SendPacket>
  RECORD_END();
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	2001a654 	.word	0x2001a654

08005610 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005616:	f3ef 8311 	mrs	r3, BASEPRI
 800561a:	f04f 0120 	mov.w	r1, #32
 800561e:	f381 8811 	msr	BASEPRI, r1
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	4807      	ldr	r0, [pc, #28]	; (8005644 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005626:	f7fe fd65 	bl	80040f4 <_PreparePacket>
 800562a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800562c:	2211      	movs	r2, #17
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6838      	ldr	r0, [r7, #0]
 8005632:	f7fe fe49 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f383 8811 	msr	BASEPRI, r3
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	2001a654 	.word	0x2001a654

08005648 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005650:	f3ef 8311 	mrs	r3, BASEPRI
 8005654:	f04f 0120 	mov.w	r1, #32
 8005658:	f381 8811 	msr	BASEPRI, r1
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	4819      	ldr	r0, [pc, #100]	; (80056c4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005660:	f7fe fd48 	bl	80040f4 <_PreparePacket>
 8005664:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e00b      	b.n	8005696 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	1c59      	adds	r1, r3, #1
 8005686:	61f9      	str	r1, [r7, #28]
 8005688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	09db      	lsrs	r3, r3, #7
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b7f      	cmp	r3, #127	; 0x7f
 800569a:	d8f0      	bhi.n	800567e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	61fa      	str	r2, [r7, #28]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056ac:	2208      	movs	r2, #8
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	6938      	ldr	r0, [r7, #16]
 80056b2:	f7fe fe09 	bl	80042c8 <_SendPacket>
  RECORD_END();
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f383 8811 	msr	BASEPRI, r3
}
 80056bc:	bf00      	nop
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2001a654 	.word	0x2001a654
 80056c8:	2001a624 	.word	0x2001a624

080056cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056d4:	f3ef 8311 	mrs	r3, BASEPRI
 80056d8:	f04f 0120 	mov.w	r1, #32
 80056dc:	f381 8811 	msr	BASEPRI, r1
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	4819      	ldr	r0, [pc, #100]	; (8005748 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056e4:	f7fe fd06 	bl	80040f4 <_PreparePacket>
 80056e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056ee:	4b17      	ldr	r3, [pc, #92]	; (800574c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e00b      	b.n	800571a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	61f9      	str	r1, [r7, #28]
 800570c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b7f      	cmp	r3, #127	; 0x7f
 800571e:	d8f0      	bhi.n	8005702 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	61fa      	str	r2, [r7, #28]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005730:	2204      	movs	r2, #4
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	6938      	ldr	r0, [r7, #16]
 8005736:	f7fe fdc7 	bl	80042c8 <_SendPacket>
  RECORD_END();
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f383 8811 	msr	BASEPRI, r3
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2001a654 	.word	0x2001a654
 800574c:	2001a624 	.word	0x2001a624

08005750 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	f04f 0120 	mov.w	r1, #32
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	4819      	ldr	r0, [pc, #100]	; (80057cc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005768:	f7fe fcc4 	bl	80040f4 <_PreparePacket>
 800576c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e00b      	b.n	800579e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1c59      	adds	r1, r3, #1
 800578e:	61f9      	str	r1, [r7, #28]
 8005790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b7f      	cmp	r3, #127	; 0x7f
 80057a2:	d8f0      	bhi.n	8005786 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	61fa      	str	r2, [r7, #28]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057b4:	2206      	movs	r2, #6
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	6938      	ldr	r0, [r7, #16]
 80057ba:	f7fe fd85 	bl	80042c8 <_SendPacket>
  RECORD_END();
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f383 8811 	msr	BASEPRI, r3
}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2001a654 	.word	0x2001a654
 80057d0:	2001a624 	.word	0x2001a624

080057d4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057de:	f3ef 8311 	mrs	r3, BASEPRI
 80057e2:	f04f 0120 	mov.w	r1, #32
 80057e6:	f381 8811 	msr	BASEPRI, r1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	4827      	ldr	r0, [pc, #156]	; (800588c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057ee:	f7fe fc81 	bl	80040f4 <_PreparePacket>
 80057f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	6279      	str	r1, [r7, #36]	; 0x24
 8005816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	627a      	str	r2, [r7, #36]	; 0x24
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e00b      	b.n	800585c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	61f9      	str	r1, [r7, #28]
 800584e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	09db      	lsrs	r3, r3, #7
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b7f      	cmp	r3, #127	; 0x7f
 8005860:	d8f0      	bhi.n	8005844 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005872:	2207      	movs	r2, #7
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6938      	ldr	r0, [r7, #16]
 8005878:	f7fe fd26 	bl	80042c8 <_SendPacket>
  RECORD_END();
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f383 8811 	msr	BASEPRI, r3
}
 8005882:	bf00      	nop
 8005884:	3728      	adds	r7, #40	; 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2001a654 	.word	0x2001a654
 8005890:	2001a624 	.word	0x2001a624

08005894 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	1ad3      	subs	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	2001a624 	.word	0x2001a624

080058b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08c      	sub	sp, #48	; 0x30
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80058be:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d06d      	beq.n	80059a2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058c6:	4b39      	ldr	r3, [pc, #228]	; (80059ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058cc:	2300      	movs	r3, #0
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d0:	e008      	b.n	80058e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	3301      	adds	r3, #1
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3f2      	bcc.n	80058d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058ec:	e000      	b.n	80058f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d055      	beq.n	80059a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058f6:	f3ef 8311 	mrs	r3, BASEPRI
 80058fa:	f04f 0120 	mov.w	r1, #32
 80058fe:	f381 8811 	msr	BASEPRI, r1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	482a      	ldr	r0, [pc, #168]	; (80059b0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005906:	f7fe fbf5 	bl	80040f4 <_PreparePacket>
 800590a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	623b      	str	r3, [r7, #32]
 8005918:	e00b      	b.n	8005932 <SEGGER_SYSVIEW_SendModule+0x7e>
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1c59      	adds	r1, r3, #1
 8005922:	6279      	str	r1, [r7, #36]	; 0x24
 8005924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	09db      	lsrs	r3, r3, #7
 8005930:	623b      	str	r3, [r7, #32]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	2b7f      	cmp	r3, #127	; 0x7f
 8005936:	d8f0      	bhi.n	800591a <SEGGER_SYSVIEW_SendModule+0x66>
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	627a      	str	r2, [r7, #36]	; 0x24
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e00b      	b.n	800596c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	61f9      	str	r1, [r7, #28]
 800595e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	09db      	lsrs	r3, r3, #7
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b7f      	cmp	r3, #127	; 0x7f
 8005970:	d8f0      	bhi.n	8005954 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	61fa      	str	r2, [r7, #28]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	4619      	mov	r1, r3
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7fe fb62 	bl	8004054 <_EncodeStr>
 8005990:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005992:	2216      	movs	r2, #22
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	6938      	ldr	r0, [r7, #16]
 8005998:	f7fe fc96 	bl	80042c8 <_SendPacket>
      RECORD_END();
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80059a2:	bf00      	nop
 80059a4:	3730      	adds	r7, #48	; 0x30
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	2001a64c 	.word	0x2001a64c
 80059b0:	2001a654 	.word	0x2001a654

080059b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00f      	beq.n	80059e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f2      	bne.n	80059c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2001a64c 	.word	0x2001a64c

080059f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	f04f 0120 	mov.w	r1, #32
 80059fe:	f381 8811 	msr	BASEPRI, r1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	4817      	ldr	r0, [pc, #92]	; (8005a64 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a06:	f7fe fb75 	bl	80040f4 <_PreparePacket>
 8005a0a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e00b      	b.n	8005a34 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	6179      	str	r1, [r7, #20]
 8005a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b7f      	cmp	r3, #127	; 0x7f
 8005a38:	d8f0      	bhi.n	8005a1c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	617a      	str	r2, [r7, #20]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a4a:	221b      	movs	r2, #27
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f7fe fc3a 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f383 8811 	msr	BASEPRI, r3
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2001a654 	.word	0x2001a654
 8005a68:	2001a650 	.word	0x2001a650

08005a6c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a6c:	b40f      	push	{r0, r1, r2, r3}
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2100      	movs	r1, #0
 8005a80:	6938      	ldr	r0, [r7, #16]
 8005a82:	f7fe ff33 	bl	80048ec <_VPrintTarget>
  va_end(ParamList);
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a90:	b004      	add	sp, #16
 8005a92:	4770      	bx	lr

08005a94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa0:	f04f 0120 	mov.w	r1, #32
 8005aa4:	f381 8811 	msr	BASEPRI, r1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	4827      	ldr	r0, [pc, #156]	; (8005b48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005aac:	f7fe fb22 	bl	80040f4 <_PreparePacket>
 8005ab0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7fe facc 	bl	8004054 <_EncodeStr>
 8005abc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	e00b      	b.n	8005ae0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	09db      	lsrs	r3, r3, #7
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae4:	d8f0      	bhi.n	8005ac8 <SEGGER_SYSVIEW_Warn+0x34>
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	627a      	str	r2, [r7, #36]	; 0x24
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e00b      	b.n	8005b18 <SEGGER_SYSVIEW_Warn+0x84>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	61f9      	str	r1, [r7, #28]
 8005b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	09db      	lsrs	r3, r3, #7
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1c:	d8f0      	bhi.n	8005b00 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	61fa      	str	r2, [r7, #28]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b2e:	221a      	movs	r2, #26
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	6938      	ldr	r0, [r7, #16]
 8005b34:	f7fe fbc8 	bl	80042c8 <_SendPacket>
  RECORD_END();
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
 8005b40:	3728      	adds	r7, #40	; 0x28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	2001a654 	.word	0x2001a654

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4e0d      	ldr	r6, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1ba4      	subs	r4, r4, r6
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2500      	movs	r5, #0
 8005b58:	42a5      	cmp	r5, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4e0b      	ldr	r6, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f000 f83a 	bl	8005bd8 <_init>
 8005b64:	1ba4      	subs	r4, r4, r6
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2500      	movs	r5, #0
 8005b6a:	42a5      	cmp	r5, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b74:	4798      	blx	r3
 8005b76:	3501      	adds	r5, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b7e:	4798      	blx	r3
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08005da0 	.word	0x08005da0
 8005b88:	08005da0 	.word	0x08005da0
 8005b8c:	08005da0 	.word	0x08005da0
 8005b90:	08005da4 	.word	0x08005da4

08005b94 <memcmp>:
 8005b94:	b530      	push	{r4, r5, lr}
 8005b96:	2400      	movs	r4, #0
 8005b98:	42a2      	cmp	r2, r4
 8005b9a:	d101      	bne.n	8005ba0 <memcmp+0xc>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e007      	b.n	8005bb0 <memcmp+0x1c>
 8005ba0:	5d03      	ldrb	r3, [r0, r4]
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	190d      	adds	r5, r1, r4
 8005ba6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	d0f4      	beq.n	8005b98 <memcmp+0x4>
 8005bae:	1b58      	subs	r0, r3, r5
 8005bb0:	bd30      	pop	{r4, r5, pc}

08005bb2 <memcpy>:
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	1e43      	subs	r3, r0, #1
 8005bb6:	440a      	add	r2, r1
 8005bb8:	4291      	cmp	r1, r2
 8005bba:	d100      	bne.n	8005bbe <memcpy+0xc>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc6:	e7f7      	b.n	8005bb8 <memcpy+0x6>

08005bc8 <memset>:
 8005bc8:	4402      	add	r2, r0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
