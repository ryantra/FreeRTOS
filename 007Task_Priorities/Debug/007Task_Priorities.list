
007Task_Priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f90  08004f90  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f98  08004f98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a810  20000014  08004fb4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a824  08004fb4  0002a824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147c4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a36  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00037240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dd8  00000000  00000000  000392e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d967  00000000  00000000  000510c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000975d9  00000000  00000000  0005ea27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  000f607c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e64 	.word	0x08004e64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08004e64 	.word	0x08004e64

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a77c 	.word	0x2001a77c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000294:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000298:	f000 b972 	b.w	8000580 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	4688      	mov	r8, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14b      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4615      	mov	r5, r2
 80002c6:	d967      	bls.n	8000398 <__udivmoddi4+0xe4>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b14a      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002ce:	f1c2 0720 	rsb	r7, r2, #32
 80002d2:	fa01 f302 	lsl.w	r3, r1, r2
 80002d6:	fa20 f707 	lsr.w	r7, r0, r7
 80002da:	4095      	lsls	r5, r2
 80002dc:	ea47 0803 	orr.w	r8, r7, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002ec:	fa1f fc85 	uxth.w	ip, r5
 80002f0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f8:	fb07 f10c 	mul.w	r1, r7, ip
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18eb      	adds	r3, r5, r3
 8000302:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000306:	f080 811b 	bcs.w	8000540 <__udivmoddi4+0x28c>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8118 	bls.w	8000540 <__udivmoddi4+0x28c>
 8000310:	3f02      	subs	r7, #2
 8000312:	442b      	add	r3, r5
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0fe 	udiv	r0, r3, lr
 800031c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fc0c 	mul.w	ip, r0, ip
 8000328:	45a4      	cmp	ip, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	192c      	adds	r4, r5, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x290>
 8000336:	45a4      	cmp	ip, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x290>
 800033c:	3802      	subs	r0, #2
 800033e:	442c      	add	r4, r5
 8000340:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000344:	eba4 040c 	sub.w	r4, r4, ip
 8000348:	2700      	movs	r7, #0
 800034a:	b11e      	cbz	r6, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c6 4300 	strd	r4, r3, [r6]
 8000354:	4639      	mov	r1, r7
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xbe>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80eb 	beq.w	800053a <__udivmoddi4+0x286>
 8000364:	2700      	movs	r7, #0
 8000366:	e9c6 0100 	strd	r0, r1, [r6]
 800036a:	4638      	mov	r0, r7
 800036c:	4639      	mov	r1, r7
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f783 	clz	r7, r3
 8000376:	2f00      	cmp	r7, #0
 8000378:	d147      	bne.n	800040a <__udivmoddi4+0x156>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd0>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80fa 	bhi.w	8000578 <__udivmoddi4+0x2c4>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa0>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xe8>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 808f 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a6:	1b49      	subs	r1, r1, r5
 80003a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ac:	fa1f f885 	uxth.w	r8, r5
 80003b0:	2701      	movs	r7, #1
 80003b2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b6:	0c23      	lsrs	r3, r4, #16
 80003b8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb08 f10c 	mul.w	r1, r8, ip
 80003c4:	4299      	cmp	r1, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c8:	18eb      	adds	r3, r5, r3
 80003ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4299      	cmp	r1, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003d6:	4684      	mov	ip, r0
 80003d8:	1a59      	subs	r1, r3, r1
 80003da:	b2a3      	uxth	r3, r4
 80003dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e8:	fb08 f800 	mul.w	r8, r8, r0
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x14c>
 80003f0:	192c      	adds	r4, r5, r4
 80003f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x14a>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	f200 80b6 	bhi.w	800056a <__udivmoddi4+0x2b6>
 80003fe:	4618      	mov	r0, r3
 8000400:	eba4 0408 	sub.w	r4, r4, r8
 8000404:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000408:	e79f      	b.n	800034a <__udivmoddi4+0x96>
 800040a:	f1c7 0c20 	rsb	ip, r7, #32
 800040e:	40bb      	lsls	r3, r7
 8000410:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000414:	ea4e 0e03 	orr.w	lr, lr, r3
 8000418:	fa01 f407 	lsl.w	r4, r1, r7
 800041c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000420:	fa21 f30c 	lsr.w	r3, r1, ip
 8000424:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000428:	4325      	orrs	r5, r4
 800042a:	fbb3 f9f8 	udiv	r9, r3, r8
 800042e:	0c2c      	lsrs	r4, r5, #16
 8000430:	fb08 3319 	mls	r3, r8, r9, r3
 8000434:	fa1f fa8e 	uxth.w	sl, lr
 8000438:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800043c:	fb09 f40a 	mul.w	r4, r9, sl
 8000440:	429c      	cmp	r4, r3
 8000442:	fa02 f207 	lsl.w	r2, r2, r7
 8000446:	fa00 f107 	lsl.w	r1, r0, r7
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1e 0303 	adds.w	r3, lr, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	f080 8087 	bcs.w	8000566 <__udivmoddi4+0x2b2>
 8000458:	429c      	cmp	r4, r3
 800045a:	f240 8084 	bls.w	8000566 <__udivmoddi4+0x2b2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4473      	add	r3, lr
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	b2ad      	uxth	r5, r5
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3310 	mls	r3, r8, r0, r3
 8000470:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000474:	fb00 fa0a 	mul.w	sl, r0, sl
 8000478:	45a2      	cmp	sl, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1e 0404 	adds.w	r4, lr, r4
 8000480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000484:	d26b      	bcs.n	800055e <__udivmoddi4+0x2aa>
 8000486:	45a2      	cmp	sl, r4
 8000488:	d969      	bls.n	800055e <__udivmoddi4+0x2aa>
 800048a:	3802      	subs	r0, #2
 800048c:	4474      	add	r4, lr
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	eba4 040a 	sub.w	r4, r4, sl
 800049a:	454c      	cmp	r4, r9
 800049c:	46c2      	mov	sl, r8
 800049e:	464b      	mov	r3, r9
 80004a0:	d354      	bcc.n	800054c <__udivmoddi4+0x298>
 80004a2:	d051      	beq.n	8000548 <__udivmoddi4+0x294>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d069      	beq.n	800057c <__udivmoddi4+0x2c8>
 80004a8:	ebb1 050a 	subs.w	r5, r1, sl
 80004ac:	eb64 0403 	sbc.w	r4, r4, r3
 80004b0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b4:	40fd      	lsrs	r5, r7
 80004b6:	40fc      	lsrs	r4, r7
 80004b8:	ea4c 0505 	orr.w	r5, ip, r5
 80004bc:	e9c6 5400 	strd	r5, r4, [r6]
 80004c0:	2700      	movs	r7, #0
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0xa0>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f703 	lsr.w	r7, r0, r3
 80004cc:	4095      	lsls	r5, r2
 80004ce:	fa01 f002 	lsl.w	r0, r1, r2
 80004d2:	fa21 f303 	lsr.w	r3, r1, r3
 80004d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004da:	4338      	orrs	r0, r7
 80004dc:	0c01      	lsrs	r1, r0, #16
 80004de:	fbb3 f7fe 	udiv	r7, r3, lr
 80004e2:	fa1f f885 	uxth.w	r8, r5
 80004e6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb07 f308 	mul.w	r3, r7, r8
 80004f2:	428b      	cmp	r3, r1
 80004f4:	fa04 f402 	lsl.w	r4, r4, r2
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x256>
 80004fa:	1869      	adds	r1, r5, r1
 80004fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000500:	d22f      	bcs.n	8000562 <__udivmoddi4+0x2ae>
 8000502:	428b      	cmp	r3, r1
 8000504:	d92d      	bls.n	8000562 <__udivmoddi4+0x2ae>
 8000506:	3f02      	subs	r7, #2
 8000508:	4429      	add	r1, r5
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	b281      	uxth	r1, r0
 800050e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000512:	fb0e 3310 	mls	r3, lr, r0, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb00 f308 	mul.w	r3, r0, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x27e>
 8000522:	1869      	adds	r1, r5, r1
 8000524:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000528:	d217      	bcs.n	800055a <__udivmoddi4+0x2a6>
 800052a:	428b      	cmp	r3, r1
 800052c:	d915      	bls.n	800055a <__udivmoddi4+0x2a6>
 800052e:	3802      	subs	r0, #2
 8000530:	4429      	add	r1, r5
 8000532:	1ac9      	subs	r1, r1, r3
 8000534:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000538:	e73b      	b.n	80003b2 <__udivmoddi4+0xfe>
 800053a:	4637      	mov	r7, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e709      	b.n	8000354 <__udivmoddi4+0xa0>
 8000540:	4607      	mov	r7, r0
 8000542:	e6e7      	b.n	8000314 <__udivmoddi4+0x60>
 8000544:	4618      	mov	r0, r3
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x8c>
 8000548:	4541      	cmp	r1, r8
 800054a:	d2ab      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 800054c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000550:	eb69 020e 	sbc.w	r2, r9, lr
 8000554:	3801      	subs	r0, #1
 8000556:	4613      	mov	r3, r2
 8000558:	e7a4      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055a:	4660      	mov	r0, ip
 800055c:	e7e9      	b.n	8000532 <__udivmoddi4+0x27e>
 800055e:	4618      	mov	r0, r3
 8000560:	e795      	b.n	800048e <__udivmoddi4+0x1da>
 8000562:	4667      	mov	r7, ip
 8000564:	e7d1      	b.n	800050a <__udivmoddi4+0x256>
 8000566:	4681      	mov	r9, r0
 8000568:	e77c      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056a:	3802      	subs	r0, #2
 800056c:	442c      	add	r4, r5
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0x14c>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	442b      	add	r3, r5
 8000576:	e72f      	b.n	80003d8 <__udivmoddi4+0x124>
 8000578:	4638      	mov	r0, r7
 800057a:	e708      	b.n	800038e <__udivmoddi4+0xda>
 800057c:	4637      	mov	r7, r6
 800057e:	e6e9      	b.n	8000354 <__udivmoddi4+0xa0>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fad1 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f84b 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8b1 	bl	80006f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //Cycle count enable
    DWT_CTRL |= (1 << 0);
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <main+0x90>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <main+0x90>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80005a2:	f002 ff5d 	bl	8003460 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80005a6:	f003 feab 	bl	8004300 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led1_handler, "LED_1_task", 200, NULL, 2, &task1_handle);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	22c8      	movs	r2, #200	; 0xc8
 80005b8:	4917      	ldr	r1, [pc, #92]	; (8000618 <main+0x94>)
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0x98>)
 80005bc:	f001 fcf1 	bl	8001fa2 <xTaskCreate>
 80005c0:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d009      	beq.n	80005dc <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	e7fe      	b.n	80005da <main+0x56>


	status = xTaskCreate(led2_handler, "LED_2_task", 200, NULL, 3, &task2_handle);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2303      	movs	r3, #3
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	490d      	ldr	r1, [pc, #52]	; (8000620 <main+0x9c>)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0xa0>)
 80005ec:	f001 fcd9 	bl	8001fa2 <xTaskCreate>
 80005f0:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d009      	beq.n	800060c <main+0x88>
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e7fe      	b.n	800060a <main+0x86>


	//start the freeRTOS scheduler
	 vTaskStartScheduler();
 800060c:	f001 ff06 	bl	800241c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x8c>
 8000612:	bf00      	nop
 8000614:	e0001000 	.word	0xe0001000
 8000618:	08004e7c 	.word	0x08004e7c
 800061c:	080008c5 	.word	0x080008c5
 8000620:	08004e88 	.word	0x08004e88
 8000624:	080008e9 	.word	0x080008e9

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fc0c 	bl	8004e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <SystemClock_Config+0xc8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xcc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd5f 	bl	8001170 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f948 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2103      	movs	r1, #3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 ffb9 	bl	8001650 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 f932 	bl	800094c <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <MX_GPIO_Init+0x128>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <MX_GPIO_Init+0x128>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <MX_GPIO_Init+0x128>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <MX_GPIO_Init+0x128>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <MX_GPIO_Init+0x128>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_GPIO_Init+0x128>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0x128>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <MX_GPIO_Init+0x128>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <MX_GPIO_Init+0x128>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2d      	ldr	r2, [pc, #180]	; (8000820 <MX_GPIO_Init+0x128>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_GPIO_Init+0x128>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <MX_GPIO_Init+0x12c>)
 8000784:	f000 fc9c 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <MX_GPIO_Init+0x130>)
 8000790:	f000 fc96 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_GPIO_Init+0x134>)
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_GPIO_Init+0x138>)
 80007aa:	f000 fb07 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	230c      	movs	r3, #12
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4816      	ldr	r0, [pc, #88]	; (8000824 <MX_GPIO_Init+0x12c>)
 80007ca:	f000 faf7 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <MX_GPIO_Init+0x12c>)
 80007e6:	f000 fae9 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_GPIO_Init+0x130>)
 8000804:	f000 fada 	bl	8000dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2106      	movs	r1, #6
 800080c:	2028      	movs	r0, #40	; 0x28
 800080e:	f000 faab 	bl	8000d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000812:	2028      	movs	r0, #40	; 0x28
 8000814:	f000 fac4 	bl	8000da0 <HAL_NVIC_EnableIRQ>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	10210000 	.word	0x10210000
 8000830:	40020800 	.word	0x40020800

08000834 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
	UBaseType_t p1, p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

	//interrupt handler and task try to change status_button, to guard
	//from the interrupt we use portENTER_CRITICAL and EXIT func
	portENTER_CRITICAL();
 800083e:	f002 fae7 	bl	8002e10 <vPortEnterCritical>
	if(status_button)
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <switch_priority+0x84>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <switch_priority+0x20>
	{
		status_button = 0;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <switch_priority+0x84>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000854:	f002 fb0a 	bl	8002e6c <vPortExitCritical>

	if(switch_priority)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d027      	beq.n	80008ae <switch_priority+0x7a>
	{
		t1 = xTaskGetHandle("LED_1_task");
 800085e:	4817      	ldr	r0, [pc, #92]	; (80008bc <switch_priority+0x88>)
 8000860:	f001 ff64 	bl	800272c <xTaskGetHandle>
 8000864:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("LED_2_task");
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <switch_priority+0x8c>)
 8000868:	f001 ff60 	bl	800272c <xTaskGetHandle>
 800086c:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f001 fcfa 	bl	8002268 <uxTaskPriorityGet>
 8000874:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f001 fcf6 	bl	8002268 <uxTaskPriorityGet>
 800087c:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 800087e:	f002 f98d 	bl	8002b9c <xTaskGetCurrentTaskHandle>
 8000882:	6038      	str	r0, [r7, #0]

			if(curr == t1)
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d108      	bne.n	800089e <switch_priority+0x6a>
			{
				vTaskPrioritySet(t1, p2);
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	6938      	ldr	r0, [r7, #16]
 8000890:	f001 fd04 	bl	800229c <vTaskPrioritySet>
				vTaskPrioritySet(t2, p1);
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f001 fd00 	bl	800229c <vTaskPrioritySet>
				vTaskPrioritySet(t2, p1);
				vTaskPrioritySet(t1, p2);
			}
	}

}
 800089c:	e007      	b.n	80008ae <switch_priority+0x7a>
				vTaskPrioritySet(t2, p1);
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f001 fcfb 	bl	800229c <vTaskPrioritySet>
				vTaskPrioritySet(t1, p2);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	6938      	ldr	r0, [r7, #16]
 80008aa:	f001 fcf7 	bl	800229c <vTaskPrioritySet>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000030 	.word	0x20000030
 80008bc:	08004e7c 	.word	0x08004e7c
 80008c0:	08004e88 	.word	0x08004e88

080008c4 <led1_handler>:



static void led1_handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80008cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <led1_handler+0x20>)
 80008d2:	f000 fc0e 	bl	80010f2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80008d6:	2064      	movs	r0, #100	; 0x64
 80008d8:	f000 f96c 	bl	8000bb4 <HAL_Delay>
		switch_priority();
 80008dc:	f7ff ffaa 	bl	8000834 <switch_priority>
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80008e0:	e7f4      	b.n	80008cc <led1_handler+0x8>
 80008e2:	bf00      	nop
 80008e4:	40020400 	.word	0x40020400

080008e8 <led2_handler>:
	}
}


static void led2_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <led2_handler+0x20>)
 80008f6:	f000 fbfc 	bl	80010f2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f000 f959 	bl	8000bb4 <HAL_Delay>
		switch_priority();
 8000902:	f7ff ff97 	bl	8000834 <switch_priority>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000906:	e7f3      	b.n	80008f0 <led2_handler+0x8>
 8000908:	40020400 	.word	0x40020400

0800090c <button_interrupt_handler>:
	}

}

void button_interrupt_handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

	traceISR_ENTER();
 8000910:	f003 ffbe 	bl	8004890 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <button_interrupt_handler+0x18>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 800091a:	f003 fffb 	bl	8004914 <SEGGER_SYSVIEW_RecordExitISR>

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000030 	.word	0x20000030

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f91b 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40000c00 	.word	0x40000c00

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2032      	movs	r0, #50	; 0x32
 80009c2:	f000 f9d1 	bl	8000d68 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80009c6:	2032      	movs	r0, #50	; 0x32
 80009c8:	f000 f9ea 	bl	8000da0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_InitTick+0xa4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_InitTick+0xa4>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_InitTick+0xa4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f80a 	bl	8001a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f8:	f000 fff4 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_InitTick+0xa8>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_InitTick+0xac>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_InitTick+0xac>)
 8000a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_InitTick+0xac>)
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_InitTick+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_InitTick+0xac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <HAL_InitTick+0xac>)
 8000a32:	f001 f81d 	bl	8001a70 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_InitTick+0xac>)
 8000a3e:	f001 f84c 	bl	8001ada <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	2001a738 	.word	0x2001a738
 8000a5c:	40000c00 	.word	0x40000c00

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000a8a:	f7ff ff3f 	bl	800090c <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a92:	f000 fb49 	bl	8001128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM5_IRQHandler+0x10>)
 8000aa2:	f001 f83e 	bl	8001b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2001a738 	.word	0x2001a738

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <SystemInit+0x28>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <SystemInit+0x28>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SystemInit+0x28>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]
#endif
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000afc:	f842 3b04 	str.w	r3, [r2], #4

08000b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b06:	f7ff ffd3 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f004 f965 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fd39 	bl	8000584 <main>
  bx  lr    
 8000b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b18:	08004fa0 	.word	0x08004fa0
  ldr  r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b20:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000b24:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000b28:	2001a824 	.word	0x2001a824

08000b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_Init+0x40>)
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_Init+0x40>)
 8000b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_Init+0x40>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f8fa 	bl	8000d52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ff24 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fefa 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023c00 	.word	0x40023c00

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	2001a778 	.word	0x2001a778

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2001a778 	.word	0x2001a778

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_Delay+0x40>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff4c 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7a:	f7ff ff61 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff ffb1 	bl	8000cec <NVIC_EncodePriority>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff80 	bl	8000c98 <__NVIC_SetPriority>
}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff54 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e159      	b.n	800108c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8148 	bne.w	8001086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00b      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0a:	2b11      	cmp	r3, #17
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d130      	bne.n	8000e78 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 0201 	and.w	r2, r3, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0xfc>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b12      	cmp	r3, #18
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a2 	beq.w	8001086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x2e4>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x202>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_GPIO_Init+0x2f0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1fe>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x2f4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x2f8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1f6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <HAL_GPIO_Init+0x2fc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1f2>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	4934      	ldr	r1, [pc, #208]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001002:	4a2e      	ldr	r2, [pc, #184]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <HAL_GPIO_Init+0x300>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_GPIO_Init+0x300>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_GPIO_Init+0x300>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_GPIO_Init+0x300>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f67f aea2 	bls.w	8000dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	; 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	401a      	ands	r2, r3
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	429a      	cmp	r2, r3
 800110a:	d104      	bne.n	8001116 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	041a      	lsls	r2, r3, #16
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f806 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e25b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4ba3      	ldr	r3, [pc, #652]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4ba0      	ldr	r3, [pc, #640]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b9d      	ldr	r3, [pc, #628]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b99      	ldr	r3, [pc, #612]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e236      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8a      	ldr	r2, [pc, #552]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a87      	ldr	r2, [pc, #540]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a83      	ldr	r2, [pc, #524]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcb8 	bl	8000b9c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcb4 	bl	8000b9c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1fb      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fca4 	bl	8000b9c <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fca0 	bl	8000b9c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1e7      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b65      	ldr	r3, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1bb      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4952      	ldr	r1, [pc, #328]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc59 	bl	8000b9c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc55 	bl	8000b9c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e19c      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4940      	ldr	r1, [pc, #256]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc38 	bl	8000b9c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc34 	bl	8000b9c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc18 	bl	8000b9c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc14 	bl	8000b9c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e15b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc01 	bl	8000b9c <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fbfd 	bl	8000b9c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e144      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a0 	beq.w	800150a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d121      	bne.n	800144a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbc3 	bl	8000b9c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e011      	b.n	800143e <HAL_RCC_OscConfig+0x2ce>
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
 8001428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff fbb6 	bl	8000b9c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0fd      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001468:	4b77      	ldr	r3, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a76      	ldr	r2, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	4b74      	ldr	r3, [pc, #464]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a70      	ldr	r2, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a6d      	ldr	r2, [pc, #436]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb7b 	bl	8000b9c <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fb77 	bl	8000b9c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0bc      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x33a>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb65 	bl	8000b9c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb61 	bl	8000b9c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0a6      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8092 	beq.w	8001638 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001514:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d05c      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d141      	bne.n	80015ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb35 	bl	8000b9c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb31 	bl	8000b9c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e078      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	061b      	lsls	r3, r3, #24
 8001578:	4933      	ldr	r1, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157e:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fb0a 	bl	8000b9c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fb06 	bl	8000b9c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04d      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x41c>
 80015aa:	e045      	b.n	8001638 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff faf3 	bl	8000b9c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff faef 	bl	8000b9c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e036      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x44a>
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e029      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d115      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001614:	4293      	cmp	r3, r2
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000
 8001648:	40023800 	.word	0x40023800
 800164c:	42470060 	.word	0x42470060

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d90c      	bls.n	800168c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d119      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7ff fa2c 	bl	8000b9c <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff fa28 	bl	8000b9c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e04f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20c      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f821 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017da:	4601      	mov	r1, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	fa21 f303 	lsr.w	r3, r1, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f8d8 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	08004f50 	.word	0x08004f50
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d007      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x32>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d008      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x38>
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 80b4 	bne.w	80019b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800184a:	60bb      	str	r3, [r7, #8]
       break;
 800184c:	e0b3      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001850:	60bb      	str	r3, [r7, #8]
      break;
 8001852:	e0b0      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04a      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	ea03 0501 	and.w	r5, r3, r1
 8001880:	ea04 0602 	and.w	r6, r4, r2
 8001884:	4629      	mov	r1, r5
 8001886:	4632      	mov	r2, r6
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	0154      	lsls	r4, r2, #5
 8001892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001896:	014b      	lsls	r3, r1, #5
 8001898:	4619      	mov	r1, r3
 800189a:	4622      	mov	r2, r4
 800189c:	1b49      	subs	r1, r1, r5
 800189e:	eb62 0206 	sbc.w	r2, r2, r6
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f04f 0400 	mov.w	r4, #0
 80018aa:	0194      	lsls	r4, r2, #6
 80018ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b0:	018b      	lsls	r3, r1, #6
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	eb64 0402 	sbc.w	r4, r4, r2
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	00e2      	lsls	r2, r4, #3
 80018c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018c6:	00d9      	lsls	r1, r3, #3
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	195b      	adds	r3, r3, r5
 80018ce:	eb44 0406 	adc.w	r4, r4, r6
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	0262      	lsls	r2, r4, #9
 80018dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018e0:	0259      	lsls	r1, r3, #9
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f04f 0400 	mov.w	r4, #0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	f7fe fcc6 	bl	8000284 <__aeabi_uldivmod>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e049      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	ea03 0501 	and.w	r5, r3, r1
 8001916:	ea04 0602 	and.w	r6, r4, r2
 800191a:	4629      	mov	r1, r5
 800191c:	4632      	mov	r2, r6
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	0154      	lsls	r4, r2, #5
 8001928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800192c:	014b      	lsls	r3, r1, #5
 800192e:	4619      	mov	r1, r3
 8001930:	4622      	mov	r2, r4
 8001932:	1b49      	subs	r1, r1, r5
 8001934:	eb62 0206 	sbc.w	r2, r2, r6
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	0194      	lsls	r4, r2, #6
 8001942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	eb64 0402 	sbc.w	r4, r4, r2
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800195c:	00d9      	lsls	r1, r3, #3
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	195b      	adds	r3, r3, r5
 8001964:	eb44 0406 	adc.w	r4, r4, r6
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	02a2      	lsls	r2, r4, #10
 8001972:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001976:	0299      	lsls	r1, r3, #10
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	461a      	mov	r2, r3
 8001988:	4623      	mov	r3, r4
 800198a:	f7fe fc7b 	bl	8000284 <__aeabi_uldivmod>
 800198e:	4603      	mov	r3, r0
 8001990:	460c      	mov	r4, r1
 8001992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	3301      	adds	r3, #1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	60bb      	str	r3, [r7, #8]
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019b2:	60bb      	str	r3, [r7, #8]
      break;
 80019b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b6:	68bb      	ldr	r3, [r7, #8]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff0 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019ec:	4601      	mov	r1, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08004f60 	.word	0x08004f60

08001a0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	220f      	movs	r2, #15
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_RCC_GetClockConfig+0x60>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 020f 	and.w	r2, r3, #15
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01d      	b.n	8001abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f815 	bl	8001ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f000 f968 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d007      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d122      	bne.n	8001b7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d11b      	bne.n	8001b7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0202 	mvn.w	r2, #2
 8001b4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8ee 	bl	8001d46 <HAL_TIM_IC_CaptureCallback>
 8001b6a:	e005      	b.n	8001b78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8e0 	bl	8001d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8f1 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d122      	bne.n	8001bd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d11b      	bne.n	8001bd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f06f 0204 	mvn.w	r2, #4
 8001ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8c4 	bl	8001d46 <HAL_TIM_IC_CaptureCallback>
 8001bbe:	e005      	b.n	8001bcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8b6 	bl	8001d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8c7 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d122      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11b      	bne.n	8001c26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f06f 0208 	mvn.w	r2, #8
 8001bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f89a 	bl	8001d46 <HAL_TIM_IC_CaptureCallback>
 8001c12:	e005      	b.n	8001c20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f88c 	bl	8001d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f89d 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d122      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d11b      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f06f 0210 	mvn.w	r2, #16
 8001c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f870 	bl	8001d46 <HAL_TIM_IC_CaptureCallback>
 8001c66:	e005      	b.n	8001c74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f862 	bl	8001d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f873 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10e      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0201 	mvn.w	r2, #1
 8001c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7fe fe41 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d10e      	bne.n	8001cd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8e3 	bl	8001e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d10e      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d107      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f838 	bl	8001d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d10e      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d107      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f06f 0220 	mvn.w	r2, #32
 8001d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f8ad 	bl	8001e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00f      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d00b      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <TIM_Base_SetConfig+0xe8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <TIM_Base_SetConfig+0xec>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <TIM_Base_SetConfig+0xf0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d108      	bne.n	8001dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01b      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d017      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <TIM_Base_SetConfig+0xe8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <TIM_Base_SetConfig+0xec>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00f      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <TIM_Base_SetConfig+0xf0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <TIM_Base_SetConfig+0xf4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <TIM_Base_SetConfig+0xf8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <TIM_Base_SetConfig+0xfc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d108      	bne.n	8001e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d103      	bne.n	8001e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	615a      	str	r2, [r3, #20]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40014400 	.word	0x40014400
 8001e80:	40014800 	.word	0x40014800

08001e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f103 0208 	add.w	r2, r3, #8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f103 0208 	add.w	r2, r3, #8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f103 0208 	add.w	r2, r3, #8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6892      	ldr	r2, [r2, #8]
 8001f64:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6852      	ldr	r2, [r2, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d103      	bne.n	8001f82 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b08c      	sub	sp, #48	; 0x30
 8001fa6:	af04      	add	r7, sp, #16
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f84c 	bl	8003054 <pvPortMalloc>
 8001fbc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001fc4:	2058      	movs	r0, #88	; 0x58
 8001fc6:	f001 f845 	bl	8003054 <pvPortMalloc>
 8001fca:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd8:	e005      	b.n	8001fe6 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f001 f916 	bl	800320c <vPortFree>
 8001fe0:	e001      	b.n	8001fe6 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f80e 	bl	8002024 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002008:	69f8      	ldr	r0, [r7, #28]
 800200a:	f000 f8a1 	bl	8002150 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e002      	b.n	800201a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002018:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800201a:	69bb      	ldr	r3, [r7, #24]
    }
 800201c:	4618      	mov	r0, r3
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	461a      	mov	r2, r3
 800203c:	21a5      	movs	r1, #165	; 0xa5
 800203e:	f002 ff09 	bl	8004e54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800204c:	3b01      	subs	r3, #1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f023 0307 	bic.w	r3, r3, #7
 800205a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <prvInitialiseNewTask+0x56>
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e7fe      	b.n	8002078 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01f      	beq.n	80020c0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e012      	b.n	80020ac <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	7819      	ldrb	r1, [r3, #0]
 800208e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	3334      	adds	r3, #52	; 0x34
 8002096:	460a      	mov	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b09      	cmp	r3, #9
 80020b0:	d9e9      	bls.n	8002086 <prvInitialiseNewTask+0x62>
 80020b2:	e000      	b.n	80020b6 <prvInitialiseNewTask+0x92>
            {
                break;
 80020b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80020be:	e003      	b.n	80020c8 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d901      	bls.n	80020d2 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80020ce:	2304      	movs	r3, #4
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020dc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	2200      	movs	r2, #0
 80020e2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	3304      	adds	r3, #4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff feff 	bl	8001eec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	3318      	adds	r3, #24
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fefa 	bl	8001eec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f1c3 0205 	rsb	r2, r3, #5
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	3350      	adds	r3, #80	; 0x50
 8002112:	2204      	movs	r2, #4
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fe9c 	bl	8004e54 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	3354      	adds	r3, #84	; 0x54
 8002120:	2201      	movs	r2, #1
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f002 fe95 	bl	8004e54 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	69b8      	ldr	r0, [r7, #24]
 8002130:	f000 fd44 	bl	8002bbc <pxPortInitialiseStack>
 8002134:	4602      	mov	r2, r0
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002144:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002158:	f000 fe5a 	bl	8002e10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800215c:	4b3b      	ldr	r3, [pc, #236]	; (800224c <prvAddNewTaskToReadyList+0xfc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a3a      	ldr	r2, [pc, #232]	; (800224c <prvAddNewTaskToReadyList+0xfc>)
 8002164:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <prvAddNewTaskToReadyList+0x100>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800216e:	4a38      	ldr	r2, [pc, #224]	; (8002250 <prvAddNewTaskToReadyList+0x100>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <prvAddNewTaskToReadyList+0xfc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d110      	bne.n	800219e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800217c:	f000 fc76 	bl	8002a6c <prvInitialiseTaskLists>
 8002180:	e00d      	b.n	800219e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <prvAddNewTaskToReadyList+0x104>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <prvAddNewTaskToReadyList+0x100>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	429a      	cmp	r2, r3
 8002196:	d802      	bhi.n	800219e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002198:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <prvAddNewTaskToReadyList+0x100>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <prvAddNewTaskToReadyList+0x108>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <prvAddNewTaskToReadyList+0x108>)
 80021a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <prvAddNewTaskToReadyList+0x108>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <prvAddNewTaskToReadyList+0x94>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fbff 	bl	80049bc <SEGGER_SYSVIEW_OnTaskCreate>
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	461d      	mov	r5, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461c      	mov	r4, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	1ae3      	subs	r3, r4, r3
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	462b      	mov	r3, r5
 80021e0:	f001 f9d8 	bl	8003594 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fc6c 	bl	8004ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <prvAddNewTaskToReadyList+0x10c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <prvAddNewTaskToReadyList+0x10c>)
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <prvAddNewTaskToReadyList+0x110>)
 800220c:	441a      	add	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7ff fe76 	bl	8001f06 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800221a:	f000 fe27 	bl	8002e6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <prvAddNewTaskToReadyList+0x104>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00e      	beq.n	8002244 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <prvAddNewTaskToReadyList+0x100>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <prvAddNewTaskToReadyList+0x114>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bdb0      	pop	{r4, r5, r7, pc}
 800224c:	2000010c 	.word	0x2000010c
 8002250:	20000034 	.word	0x20000034
 8002254:	20000118 	.word	0x20000118
 8002258:	20000128 	.word	0x20000128
 800225c:	20000114 	.word	0x20000114
 8002260:	20000038 	.word	0x20000038
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002270:	f000 fdce 	bl	8002e10 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <uxTaskPriorityGet+0x18>
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <uxTaskPriorityGet+0x30>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e000      	b.n	8002282 <uxTaskPriorityGet+0x1a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800228a:	f000 fdef 	bl	8002e6c <vPortExitCritical>

        return uxReturn;
 800228e:	68bb      	ldr	r3, [r7, #8]
    }
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000034 	.word	0x20000034

0800229c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d909      	bls.n	80022c4 <vTaskPrioritySet+0x28>
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e7fe      	b.n	80022c2 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d901      	bls.n	80022ce <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022ca:	2304      	movs	r3, #4
 80022cc:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80022ce:	f000 fd9f 	bl	8002e10 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <vTaskPrioritySet+0x42>
 80022d8:	4b4c      	ldr	r3, [pc, #304]	; (800240c <vTaskPrioritySet+0x170>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <vTaskPrioritySet+0x44>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fc2f 	bl	8004b48 <SEGGER_SYSVIEW_ShrinkId>
 80022ea:	4603      	mov	r3, r0
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	2028      	movs	r0, #40	; 0x28
 80022f2:	f001 ffab 	bl	800424c <SEGGER_SYSVIEW_RecordU32x2>
 80022f6:	69b8      	ldr	r0, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	461a      	mov	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	f001 f9aa 	bl	8003664 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002314:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d06f      	beq.n	80023fe <vTaskPrioritySet+0x162>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90d      	bls.n	8002342 <vTaskPrioritySet+0xa6>
                {
                    if( pxTCB != pxCurrentTCB )
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <vTaskPrioritySet+0x170>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	429a      	cmp	r2, r3
 800232e:	d00f      	beq.n	8002350 <vTaskPrioritySet+0xb4>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <vTaskPrioritySet+0x170>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d309      	bcc.n	8002350 <vTaskPrioritySet+0xb4>
                        {
                            xYieldRequired = pdTRUE;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	e006      	b.n	8002350 <vTaskPrioritySet+0xb4>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <vTaskPrioritySet+0x170>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	429a      	cmp	r2, r3
 800234a:	d101      	bne.n	8002350 <vTaskPrioritySet+0xb4>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	429a      	cmp	r2, r3
 8002360:	d102      	bne.n	8002368 <vTaskPrioritySet+0xcc>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db04      	blt.n	8002380 <vTaskPrioritySet+0xe4>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1c3 0205 	rsb	r2, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <vTaskPrioritySet+0x174>)
 8002390:	4413      	add	r3, r2
 8002392:	4299      	cmp	r1, r3
 8002394:	d128      	bne.n	80023e8 <vTaskPrioritySet+0x14c>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3304      	adds	r3, #4
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fdd7 	bl	8001f4e <uxListRemove>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <vTaskPrioritySet+0x11e>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80023a6:	2201      	movs	r2, #1
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <vTaskPrioritySet+0x178>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4013      	ands	r3, r2
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <vTaskPrioritySet+0x178>)
 80023b8:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <vTaskPrioritySet+0x178>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <vTaskPrioritySet+0x178>)
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <vTaskPrioritySet+0x174>)
 80023da:	441a      	add	r2, r3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f7ff fd8f 	bl	8001f06 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <vTaskPrioritySet+0x162>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <vTaskPrioritySet+0x17c>)
 80023f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80023fe:	f000 fd35 	bl	8002e6c <vPortExitCritical>
    }
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000034 	.word	0x20000034
 8002410:	20000038 	.word	0x20000038
 8002414:	20000114 	.word	0x20000114
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <vTaskStartScheduler+0x94>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2282      	movs	r2, #130	; 0x82
 800242e:	4921      	ldr	r1, [pc, #132]	; (80024b4 <vTaskStartScheduler+0x98>)
 8002430:	4821      	ldr	r0, [pc, #132]	; (80024b8 <vTaskStartScheduler+0x9c>)
 8002432:	f7ff fdb6 	bl	8001fa2 <xTaskCreate>
 8002436:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d123      	bne.n	8002486 <vTaskStartScheduler+0x6a>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <vTaskStartScheduler+0xa0>)
 8002452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002456:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <vTaskStartScheduler+0xa4>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <vTaskStartScheduler+0xa8>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <vTaskStartScheduler+0xac>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <vTaskStartScheduler+0x94>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d102      	bne.n	8002476 <vTaskStartScheduler+0x5a>
 8002470:	f002 fa88 	bl	8004984 <SEGGER_SYSVIEW_OnIdle>
 8002474:	e004      	b.n	8002480 <vTaskStartScheduler+0x64>
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <vTaskStartScheduler+0xac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fae0 	bl	8004a40 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002480:	f000 fc28 	bl	8002cd4 <xPortStartScheduler>
 8002484:	e00d      	b.n	80024a2 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248c:	d109      	bne.n	80024a2 <vTaskStartScheduler+0x86>
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	e7fe      	b.n	80024a0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <vTaskStartScheduler+0xb0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000130 	.word	0x20000130
 80024b4:	08004e94 	.word	0x08004e94
 80024b8:	08002a3d 	.word	0x08002a3d
 80024bc:	2000012c 	.word	0x2000012c
 80024c0:	20000118 	.word	0x20000118
 80024c4:	20000110 	.word	0x20000110
 80024c8:	20000034 	.word	0x20000034
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000134 	.word	0x20000134

080024ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <xTaskResumeAll+0x11c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <xTaskResumeAll+0x2a>
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	e7fe      	b.n	8002514 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002516:	f000 fc7b 	bl	8002e10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <xTaskResumeAll+0x11c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	4a39      	ldr	r2, [pc, #228]	; (8002608 <xTaskResumeAll+0x11c>)
 8002522:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002524:	4b38      	ldr	r3, [pc, #224]	; (8002608 <xTaskResumeAll+0x11c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d165      	bne.n	80025f8 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800252c:	4b37      	ldr	r3, [pc, #220]	; (800260c <xTaskResumeAll+0x120>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d061      	beq.n	80025f8 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002534:	e032      	b.n	800259c <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <xTaskResumeAll+0x124>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3318      	adds	r3, #24
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd03 	bl	8001f4e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3304      	adds	r3, #4
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fcfe 	bl	8001f4e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fab5 	bl	8004ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	2201      	movs	r2, #1
 8002560:	409a      	lsls	r2, r3
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <xTaskResumeAll+0x128>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <xTaskResumeAll+0x128>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a27      	ldr	r2, [pc, #156]	; (8002618 <xTaskResumeAll+0x12c>)
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fcbf 	bl	8001f06 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <xTaskResumeAll+0x130>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <xTaskResumeAll+0x134>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <xTaskResumeAll+0x124>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1c8      	bne.n	8002536 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025aa:	f000 fadb 	bl	8002b64 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <xTaskResumeAll+0x138>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025ba:	f000 f91b 	bl	80027f4 <xTaskIncrementTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <xTaskResumeAll+0x134>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f1      	bne.n	80025ba <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <xTaskResumeAll+0x138>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <xTaskResumeAll+0x134>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <xTaskResumeAll+0x13c>)
 80025ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025f8:	f000 fc38 	bl	8002e6c <vPortExitCritical>

    return xAlreadyYielded;
 80025fc:	68bb      	ldr	r3, [r7, #8]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000134 	.word	0x20000134
 800260c:	2000010c 	.word	0x2000010c
 8002610:	200000cc 	.word	0x200000cc
 8002614:	20000114 	.word	0x20000114
 8002618:	20000038 	.word	0x20000038
 800261c:	20000034 	.word	0x20000034
 8002620:	20000120 	.word	0x20000120
 8002624:	2000011c 	.word	0x2000011c
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002632:	f000 fcd1 	bl	8002fd8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <xTaskGetTickCountFromISR+0x20>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002640:	683b      	ldr	r3, [r7, #0]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000110 	.word	0x20000110

08002650 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002650:	b480      	push	{r7}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d05b      	beq.n	800271e <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	3308      	adds	r3, #8
 800267c:	429a      	cmp	r2, r3
 800267e:	d104      	bne.n	800268a <prvSearchForNameWithinSingleList+0x3a>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	3308      	adds	r3, #8
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d104      	bne.n	80026b6 <prvSearchForNameWithinSingleList+0x66>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	e01c      	b.n	8002702 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	4413      	add	r3, r2
 80026ce:	3334      	adds	r3, #52	; 0x34
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	7afa      	ldrb	r2, [r7, #11]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d002      	beq.n	80026e8 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e006      	b.n	80026f6 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	3301      	adds	r3, #1
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d9df      	bls.n	80026c8 <prvSearchForNameWithinSingleList+0x78>
 8002708:	e000      	b.n	800270c <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 800270a:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	429a      	cmp	r2, r3
 8002718:	d1bb      	bne.n	8002692 <prvSearchForNameWithinSingleList+0x42>
 800271a:	e000      	b.n	800271e <prvSearchForNameWithinSingleList+0xce>
                    break;
 800271c:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002720:	4618      	mov	r0, r3
 8002722:	372c      	adds	r7, #44	; 0x2c
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002734:	2305      	movs	r3, #5
 8002736:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fd fd9b 	bl	8000274 <strlen>
 800273e:	4603      	mov	r3, r0
 8002740:	2b09      	cmp	r3, #9
 8002742:	d909      	bls.n	8002758 <xTaskGetHandle+0x2c>
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e7fe      	b.n	8002756 <xTaskGetHandle+0x2a>

        vTaskSuspendAll();
 8002758:	f7ff feba 	bl	80024d0 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3b01      	subs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <xTaskGetHandle+0xb4>)
 800276e:	4413      	add	r3, r2
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff6c 	bl	8002650 <prvSearchForNameWithinSingleList>
 8002778:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <xTaskGetHandle+0x5c>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ea      	bne.n	800275c <xTaskGetHandle+0x30>
 8002786:	e000      	b.n	800278a <xTaskGetHandle+0x5e>
                    break;
 8002788:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <xTaskGetHandle+0x72>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <xTaskGetHandle+0xb8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff5a 	bl	8002650 <prvSearchForNameWithinSingleList>
 800279c:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d106      	bne.n	80027b2 <xTaskGetHandle+0x86>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <xTaskGetHandle+0xbc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff50 	bl	8002650 <prvSearchForNameWithinSingleList>
 80027b0:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <xTaskGetHandle+0x96>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	480c      	ldr	r0, [pc, #48]	; (80027ec <xTaskGetHandle+0xc0>)
 80027bc:	f7ff ff48 	bl	8002650 <prvSearchForNameWithinSingleList>
 80027c0:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <xTaskGetHandle+0xa6>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <xTaskGetHandle+0xc4>)
 80027cc:	f7ff ff40 	bl	8002650 <prvSearchForNameWithinSingleList>
 80027d0:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80027d2:	f7ff fe8b 	bl	80024ec <xTaskResumeAll>

        return pxTCB;
 80027d6:	693b      	ldr	r3, [r7, #16]
    }
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000038 	.word	0x20000038
 80027e4:	200000c4 	.word	0x200000c4
 80027e8:	200000c8 	.word	0x200000c8
 80027ec:	200000f8 	.word	0x200000f8
 80027f0:	200000e0 	.word	0x200000e0

080027f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <xTaskIncrementTick+0x14c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8091 	bne.w	800292a <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002808:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <xTaskIncrementTick+0x150>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <xTaskIncrementTick+0x150>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d11f      	bne.n	800285c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <xTaskIncrementTick+0x154>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <xTaskIncrementTick+0x46>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	e7fe      	b.n	8002838 <xTaskIncrementTick+0x44>
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <xTaskIncrementTick+0x154>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <xTaskIncrementTick+0x158>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <xTaskIncrementTick+0x154>)
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4a40      	ldr	r2, [pc, #256]	; (800294c <xTaskIncrementTick+0x158>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b40      	ldr	r3, [pc, #256]	; (8002950 <xTaskIncrementTick+0x15c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <xTaskIncrementTick+0x15c>)
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	f000 f984 	bl	8002b64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800285c:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <xTaskIncrementTick+0x160>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d34c      	bcc.n	8002900 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <xTaskIncrementTick+0x154>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <xTaskIncrementTick+0x160>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002876:	601a      	str	r2, [r3, #0]
                    break;
 8002878:	e042      	b.n	8002900 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <xTaskIncrementTick+0x154>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d203      	bcs.n	800289a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <xTaskIncrementTick+0x160>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002898:	e032      	b.n	8002900 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3304      	adds	r3, #4
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb55 	bl	8001f4e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3318      	adds	r3, #24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fb4c 	bl	8001f4e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 f903 	bl	8004ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <xTaskIncrementTick+0x164>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <xTaskIncrementTick+0x164>)
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4a1f      	ldr	r2, [pc, #124]	; (800295c <xTaskIncrementTick+0x168>)
 80028de:	441a      	add	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7ff fb0d 	bl	8001f06 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <xTaskIncrementTick+0x16c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3b5      	bcc.n	8002866 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028fe:	e7b2      	b.n	8002866 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <xTaskIncrementTick+0x16c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002906:	4915      	ldr	r1, [pc, #84]	; (800295c <xTaskIncrementTick+0x168>)
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d901      	bls.n	800291c <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <xTaskIncrementTick+0x170>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e004      	b.n	8002934 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <xTaskIncrementTick+0x174>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <xTaskIncrementTick+0x174>)
 8002932:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002934:	697b      	ldr	r3, [r7, #20]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000134 	.word	0x20000134
 8002944:	20000110 	.word	0x20000110
 8002948:	200000c4 	.word	0x200000c4
 800294c:	200000c8 	.word	0x200000c8
 8002950:	20000124 	.word	0x20000124
 8002954:	2000012c 	.word	0x2000012c
 8002958:	20000114 	.word	0x20000114
 800295c:	20000038 	.word	0x20000038
 8002960:	20000034 	.word	0x20000034
 8002964:	20000120 	.word	0x20000120
 8002968:	2000011c 	.word	0x2000011c

0800296c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <vTaskSwitchContext+0xb8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <vTaskSwitchContext+0xbc>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002980:	e04c      	b.n	8002a1c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <vTaskSwitchContext+0xbc>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <vTaskSwitchContext+0xc0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	f1c3 031f 	rsb	r3, r3, #31
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	4924      	ldr	r1, [pc, #144]	; (8002a30 <vTaskSwitchContext+0xc4>)
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	e7fe      	b.n	80029c4 <vTaskSwitchContext+0x58>
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <vTaskSwitchContext+0xc4>)
 80029d2:	4413      	add	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	3308      	adds	r3, #8
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d104      	bne.n	80029f6 <vTaskSwitchContext+0x8a>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <vTaskSwitchContext+0xc8>)
 80029fe:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <vTaskSwitchContext+0xc8>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <vTaskSwitchContext+0xcc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d102      	bne.n	8002a12 <vTaskSwitchContext+0xa6>
 8002a0c:	f001 ffba 	bl	8004984 <SEGGER_SYSVIEW_OnIdle>
}
 8002a10:	e004      	b.n	8002a1c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <vTaskSwitchContext+0xc8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f812 	bl	8004a40 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000134 	.word	0x20000134
 8002a28:	20000120 	.word	0x20000120
 8002a2c:	20000114 	.word	0x20000114
 8002a30:	20000038 	.word	0x20000038
 8002a34:	20000034 	.word	0x20000034
 8002a38:	20000130 	.word	0x20000130

08002a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a44:	f000 f852 	bl	8002aec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <prvIdleTask+0x28>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d9f9      	bls.n	8002a44 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <prvIdleTask+0x2c>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a60:	e7f0      	b.n	8002a44 <prvIdleTask+0x8>
 8002a62:	bf00      	nop
 8002a64:	20000038 	.word	0x20000038
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	e00c      	b.n	8002a92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <prvInitialiseTaskLists+0x60>)
 8002a84:	4413      	add	r3, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fa10 	bl	8001eac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d9ef      	bls.n	8002a78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002a9a:	f7ff fa07 	bl	8001eac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002aa0:	f7ff fa04 	bl	8001eac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <prvInitialiseTaskLists+0x6c>)
 8002aa6:	f7ff fa01 	bl	8001eac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <prvInitialiseTaskLists+0x70>)
 8002aac:	f7ff f9fe 	bl	8001eac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ab0:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <prvInitialiseTaskLists+0x74>)
 8002ab2:	f7ff f9fb 	bl	8001eac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <prvInitialiseTaskLists+0x78>)
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002aba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <prvInitialiseTaskLists+0x7c>)
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000038 	.word	0x20000038
 8002ad0:	2000009c 	.word	0x2000009c
 8002ad4:	200000b0 	.word	0x200000b0
 8002ad8:	200000cc 	.word	0x200000cc
 8002adc:	200000e0 	.word	0x200000e0
 8002ae0:	200000f8 	.word	0x200000f8
 8002ae4:	200000c4 	.word	0x200000c4
 8002ae8:	200000c8 	.word	0x200000c8

08002aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002af2:	e019      	b.n	8002b28 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002af4:	f000 f98c 	bl	8002e10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <prvCheckTasksWaitingTermination+0x4c>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fa22 	bl	8001f4e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <prvCheckTasksWaitingTermination+0x50>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <prvCheckTasksWaitingTermination+0x50>)
 8002b12:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b1c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b1e:	f000 f9a5 	bl	8002e6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f80e 	bl	8002b44 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e1      	bne.n	8002af4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200000e0 	.word	0x200000e0
 8002b3c:	2000010c 	.word	0x2000010c
 8002b40:	200000f4 	.word	0x200000f4

08002b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fb5b 	bl	800320c <vPortFree>
                vPortFree( pxTCB );
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fb58 	bl	800320c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <prvResetNextTaskUnblockTime+0x30>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <prvResetNextTaskUnblockTime+0x34>)
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b7a:	e005      	b.n	8002b88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <prvResetNextTaskUnblockTime+0x30>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <prvResetNextTaskUnblockTime+0x34>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200000c4 	.word	0x200000c4
 8002b98:	2000012c 	.word	0x2000012c

08002b9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002ba8:	687b      	ldr	r3, [r7, #4]
    }
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000034 	.word	0x20000034

08002bbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3b04      	subs	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b04      	subs	r3, #4
 8002bea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bec:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <pxPortInitialiseStack+0x64>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b14      	subs	r3, #20
 8002bf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3b04      	subs	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f06f 0202 	mvn.w	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3b20      	subs	r3, #32
 8002c10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	08002c25 	.word	0x08002c25

08002c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <prvTaskExitError+0x50>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c36:	d009      	beq.n	8002c4c <prvTaskExitError+0x28>
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e7fe      	b.n	8002c4a <prvTaskExitError+0x26>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c5e:	bf00      	nop
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0fc      	beq.n	8002c60 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000010 	.word	0x20000010
	...

08002c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <pxCurrentTCBConst2>)
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	6808      	ldr	r0, [r1, #0]
 8002c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8a:	f380 8809 	msr	PSP, r0
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f380 8811 	msr	BASEPRI, r0
 8002c9a:	4770      	bx	lr
 8002c9c:	f3af 8000 	nop.w

08002ca0 <pxCurrentTCBConst2>:
 8002ca0:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <prvPortStartFirstTask+0x24>)
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	6800      	ldr	r0, [r0, #0]
 8002cae:	f380 8808 	msr	MSP, r0
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f380 8814 	msr	CONTROL, r0
 8002cba:	b662      	cpsie	i
 8002cbc:	b661      	cpsie	f
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	df00      	svc	0
 8002cc8:	bf00      	nop
 8002cca:	0000      	.short	0x0000
 8002ccc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop

08002cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <xPortStartScheduler+0x118>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a44      	ldr	r2, [pc, #272]	; (8002df0 <xPortStartScheduler+0x11c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d109      	bne.n	8002cf8 <xPortStartScheduler+0x24>
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e7fe      	b.n	8002cf6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cf8:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <xPortStartScheduler+0x118>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3d      	ldr	r2, [pc, #244]	; (8002df4 <xPortStartScheduler+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d109      	bne.n	8002d16 <xPortStartScheduler+0x42>
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e7fe      	b.n	8002d14 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <xPortStartScheduler+0x124>)
 8002d18:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <xPortStartScheduler+0x128>)
 8002d3c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d44:	e009      	b.n	8002d5a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d4e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	2b80      	cmp	r3, #128	; 0x80
 8002d64:	d0ef      	beq.n	8002d46 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d009      	beq.n	8002d86 <xPortStartScheduler+0xb2>
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	e7fe      	b.n	8002d84 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d8e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d98:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <xPortStartScheduler+0x12c>)
 8002d9a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <xPortStartScheduler+0x130>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <xPortStartScheduler+0x130>)
 8002daa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <xPortStartScheduler+0x130>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <xPortStartScheduler+0x130>)
 8002db6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002dba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002dbc:	f000 f8dc 	bl	8002f78 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <xPortStartScheduler+0x134>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dc6:	f000 f8fb 	bl	8002fc0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <xPortStartScheduler+0x138>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <xPortStartScheduler+0x138>)
 8002dd0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002dd4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dd6:	f7ff ff67 	bl	8002ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002dda:	f7ff fdc7 	bl	800296c <vTaskSwitchContext>
    prvTaskExitError();
 8002dde:	f7ff ff21 	bl	8002c24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	410fc271 	.word	0x410fc271
 8002df4:	410fc270 	.word	0x410fc270
 8002df8:	e000e400 	.word	0xe000e400
 8002dfc:	20000138 	.word	0x20000138
 8002e00:	2000013c 	.word	0x2000013c
 8002e04:	e000ed20 	.word	0xe000ed20
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	e000ef34 	.word	0xe000ef34

08002e10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <vPortEnterCritical+0x54>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <vPortEnterCritical+0x54>)
 8002e30:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <vPortEnterCritical+0x54>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10e      	bne.n	8002e58 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <vPortEnterCritical+0x58>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <vPortEnterCritical+0x48>
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	e7fe      	b.n	8002e56 <vPortEnterCritical+0x46>
    }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	20000010 	.word	0x20000010
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <vPortExitCritical+0x4c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <vPortExitCritical+0x22>
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	e7fe      	b.n	8002e8c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <vPortExitCritical+0x4c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <vPortExitCritical+0x4c>)
 8002e96:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <vPortExitCritical+0x4c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <vPortExitCritical+0x3e>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000010 	.word	0x20000010
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ec0:	f3ef 8009 	mrs	r0, PSP
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <pxCurrentTCBConst>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f01e 0f10 	tst.w	lr, #16
 8002ed0:	bf08      	it	eq
 8002ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eda:	6010      	str	r0, [r2, #0]
 8002edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ee4:	f380 8811 	msr	BASEPRI, r0
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f7ff fd3c 	bl	800296c <vTaskSwitchContext>
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f380 8811 	msr	BASEPRI, r0
 8002efc:	bc09      	pop	{r0, r3}
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	6808      	ldr	r0, [r1, #0]
 8002f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f06:	f01e 0f10 	tst.w	lr, #16
 8002f0a:	bf08      	it	eq
 8002f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f10:	f380 8809 	msr	PSP, r0
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w

08002f20 <pxCurrentTCBConst>:
 8002f20:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop

08002f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f40:	f001 fca6 	bl	8004890 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f44:	f7ff fc56 	bl	80027f4 <xTaskIncrementTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f4e:	f001 fcfd 	bl	800494c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <SysTick_Handler+0x4c>)
 8002f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e001      	b.n	8002f60 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8002f5c:	f001 fcda 	bl	8004914 <SEGGER_SYSVIEW_RecordExitISR>
 8002f60:	2300      	movs	r3, #0
 8002f62:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <vPortSetupTimerInterrupt+0x34>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <vPortSetupTimerInterrupt+0x38>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <vPortSetupTimerInterrupt+0x3c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <vPortSetupTimerInterrupt+0x40>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <vPortSetupTimerInterrupt+0x44>)
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <vPortSetupTimerInterrupt+0x34>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e010 	.word	0xe000e010
 8002fb0:	e000e018 	.word	0xe000e018
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	10624dd3 	.word	0x10624dd3
 8002fbc:	e000e014 	.word	0xe000e014

08002fc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002fc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fd0 <vPortEnableVFP+0x10>
 8002fc4:	6801      	ldr	r1, [r0, #0]
 8002fc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002fca:	6001      	str	r1, [r0, #0]
 8002fcc:	4770      	bx	lr
 8002fce:	0000      	.short	0x0000
 8002fd0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002fde:	f3ef 8305 	mrs	r3, IPSR
 8002fe2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	d913      	bls.n	8003012 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <vPortValidateInterruptPriority+0x6c>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <vPortValidateInterruptPriority+0x70>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	7afa      	ldrb	r2, [r7, #11]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d209      	bcs.n	8003012 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	e7fe      	b.n	8003010 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <vPortValidateInterruptPriority+0x74>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <vPortValidateInterruptPriority+0x78>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d909      	bls.n	8003036 <vPortValidateInterruptPriority+0x5e>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	e7fe      	b.n	8003034 <vPortValidateInterruptPriority+0x5c>
    }
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e3f0 	.word	0xe000e3f0
 8003048:	20000138 	.word	0x20000138
 800304c:	e000ed0c 	.word	0xe000ed0c
 8003050:	2000013c 	.word	0x2000013c

08003054 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003060:	f7ff fa36 	bl	80024d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003064:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <pvPortMalloc+0x1a0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800306c:	f000 f92e 	bl	80032cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <pvPortMalloc+0x1a4>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 80a5 	bne.w	80031c8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02c      	beq.n	80030de <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003084:	2208      	movs	r2, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d226      	bcs.n	80030de <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003090:	2208      	movs	r2, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f023 0307 	bic.w	r3, r3, #7
 80030a8:	3308      	adds	r3, #8
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d213      	bcs.n	80030d8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	3308      	adds	r3, #8
 80030b8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00f      	beq.n	80030e4 <pvPortMalloc+0x90>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e7fe      	b.n	80030d6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030dc:	e002      	b.n	80030e4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	e000      	b.n	80030e6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d06d      	beq.n	80031c8 <pvPortMalloc+0x174>
 80030ec:	4b43      	ldr	r3, [pc, #268]	; (80031fc <pvPortMalloc+0x1a8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d868      	bhi.n	80031c8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <pvPortMalloc+0x1ac>)
 80030f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <pvPortMalloc+0x1ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003100:	e004      	b.n	800310c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d903      	bls.n	800311e <pvPortMalloc+0xca>
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f1      	bne.n	8003102 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <pvPortMalloc+0x1a0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	429a      	cmp	r2, r3
 8003126:	d04f      	beq.n	80031c8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	4413      	add	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad2      	subs	r2, r2, r3
 8003142:	2308      	movs	r3, #8
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	429a      	cmp	r2, r3
 8003148:	d91e      	bls.n	8003188 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <pvPortMalloc+0x11c>
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e7fe      	b.n	800316e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad2      	subs	r2, r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003182:	69b8      	ldr	r0, [r7, #24]
 8003184:	f000 f904 	bl	8003390 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <pvPortMalloc+0x1a8>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <pvPortMalloc+0x1a8>)
 8003194:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <pvPortMalloc+0x1a8>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <pvPortMalloc+0x1b0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d203      	bcs.n	80031aa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <pvPortMalloc+0x1a8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <pvPortMalloc+0x1b0>)
 80031a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <pvPortMalloc+0x1a4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <pvPortMalloc+0x1b4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a10      	ldr	r2, [pc, #64]	; (8003208 <pvPortMalloc+0x1b4>)
 80031c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031c8:	f7ff f990 	bl	80024ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <pvPortMalloc+0x196>
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e7fe      	b.n	80031e8 <pvPortMalloc+0x194>
    return pvReturn;
 80031ea:	69fb      	ldr	r3, [r7, #28]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20019148 	.word	0x20019148
 80031f8:	2001915c 	.word	0x2001915c
 80031fc:	2001914c 	.word	0x2001914c
 8003200:	20019140 	.word	0x20019140
 8003204:	20019150 	.word	0x20019150
 8003208:	20019154 	.word	0x20019154

0800320c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04b      	beq.n	80032b6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800321e:	2308      	movs	r3, #8
 8003220:	425b      	negs	r3, r3
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4413      	add	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <vPortFree+0xb4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <vPortFree+0x42>
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e7fe      	b.n	800324c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <vPortFree+0x5e>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e7fe      	b.n	8003268 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <vPortFree+0xb4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01e      	beq.n	80032b6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11a      	bne.n	80032b6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <vPortFree+0xb4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003290:	f7ff f91e 	bl	80024d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <vPortFree+0xb8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4413      	add	r3, r2
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <vPortFree+0xb8>)
 80032a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032a2:	6938      	ldr	r0, [r7, #16]
 80032a4:	f000 f874 	bl	8003390 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <vPortFree+0xbc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <vPortFree+0xbc>)
 80032b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80032b2:	f7ff f91b 	bl	80024ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2001915c 	.word	0x2001915c
 80032c4:	2001914c 	.word	0x2001914c
 80032c8:	20019158 	.word	0x20019158

080032cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032d2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <prvHeapInit+0xac>)
 80032da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3307      	adds	r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <prvHeapInit+0xac>)
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <prvHeapInit+0xb0>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <prvHeapInit+0xb0>)
 800330c:	2200      	movs	r2, #0
 800330e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003318:	2208      	movs	r2, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0307 	bic.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <prvHeapInit+0xb4>)
 800332c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <prvHeapInit+0xb4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <prvHeapInit+0xb4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <prvHeapInit+0xb4>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <prvHeapInit+0xb8>)
 800335a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <prvHeapInit+0xbc>)
 8003362:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <prvHeapInit+0xc0>)
 8003366:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000140 	.word	0x20000140
 800337c:	20019140 	.word	0x20019140
 8003380:	20019148 	.word	0x20019148
 8003384:	20019150 	.word	0x20019150
 8003388:	2001914c 	.word	0x2001914c
 800338c:	2001915c 	.word	0x2001915c

08003390 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <prvInsertBlockIntoFreeList+0xac>)
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e002      	b.n	80033a4 <prvInsertBlockIntoFreeList+0x14>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d8f7      	bhi.n	800339e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	4413      	add	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d108      	bne.n	80033d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	441a      	add	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d118      	bne.n	8003418 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <prvInsertBlockIntoFreeList+0xb0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d00d      	beq.n	800340e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e008      	b.n	8003420 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <prvInsertBlockIntoFreeList+0xb0>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e003      	b.n	8003420 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d002      	beq.n	800342e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20019140 	.word	0x20019140
 8003440:	20019148 	.word	0x20019148

08003444 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003448:	4803      	ldr	r0, [pc, #12]	; (8003458 <_cbSendSystemDesc+0x14>)
 800344a:	f001 f9cd 	bl	80047e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800344e:	4803      	ldr	r0, [pc, #12]	; (800345c <_cbSendSystemDesc+0x18>)
 8003450:	f001 f9ca 	bl	80047e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	08004e9c 	.word	0x08004e9c
 800345c:	08004ed4 	.word	0x08004ed4

08003460 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <SEGGER_SYSVIEW_Conf+0x20>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <SEGGER_SYSVIEW_Conf+0x20>)
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <SEGGER_SYSVIEW_Conf+0x24>)
 800346e:	4a06      	ldr	r2, [pc, #24]	; (8003488 <SEGGER_SYSVIEW_Conf+0x28>)
 8003470:	f000 fe3e 	bl	80040f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003474:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003478:	f000 fe7e 	bl	8004178 <SEGGER_SYSVIEW_SetRAMBase>
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000000 	.word	0x20000000
 8003484:	08003445 	.word	0x08003445
 8003488:	08004f68 	.word	0x08004f68

0800348c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	e034      	b.n	8003502 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003498:	491e      	ldr	r1, [pc, #120]	; (8003514 <_cbSendTaskList+0x88>)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	491a      	ldr	r1, [pc, #104]	; (8003514 <_cbSendTaskList+0x88>)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	3304      	adds	r3, #4
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <_cbSendTaskList+0x88>)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3308      	adds	r3, #8
 80034ca:	681d      	ldr	r5, [r3, #0]
 80034cc:	4911      	ldr	r1, [pc, #68]	; (8003514 <_cbSendTaskList+0x88>)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	330c      	adds	r3, #12
 80034dc:	681e      	ldr	r6, [r3, #0]
 80034de:	490d      	ldr	r1, [pc, #52]	; (8003514 <_cbSendTaskList+0x88>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3310      	adds	r3, #16
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4633      	mov	r3, r6
 80034f4:	462a      	mov	r2, r5
 80034f6:	4621      	mov	r1, r4
 80034f8:	f000 f924 	bl	8003744 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3301      	adds	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <_cbSendTaskList+0x8c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3c5      	bcc.n	8003498 <_cbSendTaskList+0xc>
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003514:	20019160 	.word	0x20019160
 8003518:	20019200 	.word	0x20019200

0800351c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800351c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003522:	f7ff f883 	bl	800262c <xTaskGetTickCountFromISR>
 8003526:	4603      	mov	r3, r0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003530:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003534:	462b      	mov	r3, r5
 8003536:	4634      	mov	r4, r6
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	0162      	lsls	r2, r4, #5
 8003542:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003546:	0159      	lsls	r1, r3, #5
 8003548:	460b      	mov	r3, r1
 800354a:	4614      	mov	r4, r2
 800354c:	1b5b      	subs	r3, r3, r5
 800354e:	eb64 0406 	sbc.w	r4, r4, r6
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	00a2      	lsls	r2, r4, #2
 800355c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003560:	0099      	lsls	r1, r3, #2
 8003562:	460b      	mov	r3, r1
 8003564:	4614      	mov	r4, r2
 8003566:	195b      	adds	r3, r3, r5
 8003568:	eb44 0406 	adc.w	r4, r4, r6
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	00e2      	lsls	r2, r4, #3
 8003576:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800357a:	00d9      	lsls	r1, r3, #3
 800357c:	460b      	mov	r3, r1
 800357e:	4614      	mov	r4, r2
 8003580:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003584:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003588:	4618      	mov	r0, r3
 800358a:	4621      	mov	r1, r4
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003594 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035a2:	2205      	movs	r2, #5
 80035a4:	492b      	ldr	r1, [pc, #172]	; (8003654 <SYSVIEW_AddTask+0xc0>)
 80035a6:	68b8      	ldr	r0, [r7, #8]
 80035a8:	f001 fc3a 	bl	8004e20 <memcmp>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d04b      	beq.n	800364a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d903      	bls.n	80035c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035ba:	4828      	ldr	r0, [pc, #160]	; (800365c <SYSVIEW_AddTask+0xc8>)
 80035bc:	f001 fbb0 	bl	8004d20 <SEGGER_SYSVIEW_Warn>
    return;
 80035c0:	e044      	b.n	800364c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035c2:	4b25      	ldr	r3, [pc, #148]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4926      	ldr	r1, [pc, #152]	; (8003660 <SYSVIEW_AddTask+0xcc>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4921      	ldr	r1, [pc, #132]	; (8003660 <SYSVIEW_AddTask+0xcc>)
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3304      	adds	r3, #4
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	491b      	ldr	r1, [pc, #108]	; (8003660 <SYSVIEW_AddTask+0xcc>)
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3308      	adds	r3, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4916      	ldr	r1, [pc, #88]	; (8003660 <SYSVIEW_AddTask+0xcc>)
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	330c      	adds	r3, #12
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4910      	ldr	r1, [pc, #64]	; (8003660 <SYSVIEW_AddTask+0xcc>)
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3310      	adds	r3, #16
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <SYSVIEW_AddTask+0xc4>)
 8003636:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f87e 	bl	8003744 <SYSVIEW_SendTaskInfo>
 8003648:	e000      	b.n	800364c <SYSVIEW_AddTask+0xb8>
    return;
 800364a:	bf00      	nop

}
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	08004ee4 	.word	0x08004ee4
 8003658:	20019200 	.word	0x20019200
 800365c:	08004eec 	.word	0x08004eec
 8003660:	20019160 	.word	0x20019160

08003664 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003672:	2205      	movs	r2, #5
 8003674:	4930      	ldr	r1, [pc, #192]	; (8003738 <SYSVIEW_UpdateTask+0xd4>)
 8003676:	68b8      	ldr	r0, [r7, #8]
 8003678:	f001 fbd2 	bl	8004e20 <memcmp>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d056      	beq.n	8003730 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e00d      	b.n	80036a4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003688:	492c      	ldr	r1, [pc, #176]	; (800373c <SYSVIEW_UpdateTask+0xd8>)
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	429a      	cmp	r2, r3
 800369c:	d008      	beq.n	80036b0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <SYSVIEW_UpdateTask+0xdc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3ec      	bcc.n	8003688 <SYSVIEW_UpdateTask+0x24>
 80036ae:	e000      	b.n	80036b2 <SYSVIEW_UpdateTask+0x4e>
      break;
 80036b0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <SYSVIEW_UpdateTask+0xdc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d230      	bcs.n	800371e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80036bc:	491f      	ldr	r1, [pc, #124]	; (800373c <SYSVIEW_UpdateTask+0xd8>)
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <SYSVIEW_UpdateTask+0xd8>)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3308      	adds	r3, #8
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 80036e4:	4915      	ldr	r1, [pc, #84]	; (800373c <SYSVIEW_UpdateTask+0xd8>)
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	330c      	adds	r3, #12
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 80036f8:	4910      	ldr	r1, [pc, #64]	; (800373c <SYSVIEW_UpdateTask+0xd8>)
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3310      	adds	r3, #16
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f814 	bl	8003744 <SYSVIEW_SendTaskInfo>
 800371c:	e009      	b.n	8003732 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff33 	bl	8003594 <SYSVIEW_AddTask>
 800372e:	e000      	b.n	8003732 <SYSVIEW_UpdateTask+0xce>
    return;
 8003730:	bf00      	nop
  }
}
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	08004ee4 	.word	0x08004ee4
 800373c:	20019160 	.word	0x20019160
 8003740:	20019200 	.word	0x20019200

08003744 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	2214      	movs	r2, #20
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fb7a 	bl	8004e54 <memset>
  TaskInfo.TaskID     = TaskID;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4618      	mov	r0, r3
 800377a:	f000 ff3d 	bl	80045f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800377e:	bf00      	nop
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <USART2_IRQHandler+0x80>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d011      	beq.n	80037c2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <USART2_IRQHandler+0x84>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 030b 	and.w	r3, r3, #11
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d108      	bne.n	80037c2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <USART2_IRQHandler+0x88>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <USART2_IRQHandler+0x88>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	4610      	mov	r0, r2
 80037c0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01a      	beq.n	8003802 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <USART2_IRQHandler+0x8c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d015      	beq.n	8003800 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <USART2_IRQHandler+0x8c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	1dfa      	adds	r2, r7, #7
 80037da:	4610      	mov	r0, r2
 80037dc:	4798      	blx	r3
 80037de:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <USART2_IRQHandler+0x90>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <USART2_IRQHandler+0x90>)
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e006      	b.n	8003802 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <USART2_IRQHandler+0x80>)
 80037f6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80037f8:	79fa      	ldrb	r2, [r7, #7]
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <USART2_IRQHandler+0x84>)
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e000      	b.n	8003802 <USART2_IRQHandler+0x7a>
      return;
 8003800:	bf00      	nop
    }
  }
}
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40004400 	.word	0x40004400
 800380c:	40004404 	.word	0x40004404
 8003810:	20019204 	.word	0x20019204
 8003814:	20019208 	.word	0x20019208
 8003818:	4000440c 	.word	0x4000440c

0800381c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	4000440c 	.word	0x4000440c

0800383c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <_DoInit+0xa0>)
 8003844:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003846:	22a8      	movs	r2, #168	; 0xa8
 8003848:	2100      	movs	r1, #0
 800384a:	6838      	ldr	r0, [r7, #0]
 800384c:	f001 fb02 	bl	8004e54 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2203      	movs	r2, #3
 8003854:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2203      	movs	r2, #3
 800385a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <_DoInit+0xa4>)
 8003860:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <_DoInit+0xa8>)
 8003866:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <_DoInit+0xa4>)
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <_DoInit+0xac>)
 800388c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80038a6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	e00c      	b.n	80038ca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1c3 030f 	rsb	r3, r3, #15
 80038b6:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <_DoInit+0xb0>)
 80038b8:	5cd1      	ldrb	r1, [r2, r3]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	460a      	mov	r2, r1
 80038c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d9ef      	bls.n	80038b0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80038d0:	f3bf 8f5f 	dmb	sy
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2001a77c 	.word	0x2001a77c
 80038e0:	08004f3c 	.word	0x08004f3c
 80038e4:	2001920c 	.word	0x2001920c
 80038e8:	2001960c 	.word	0x2001960c
 80038ec:	08004f70 	.word	0x08004f70

080038f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	; 0x30
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <SEGGER_RTT_ReadNoLock+0x1e>
 800390a:	f7ff ff97 	bl	800383c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	3360      	adds	r3, #96	; 0x60
 800391a:	4a37      	ldr	r2, [pc, #220]	; (80039f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003930:	2300      	movs	r3, #0
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	d92b      	bls.n	8003994 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4293      	cmp	r3, r2
 800394c:	bf28      	it	cs
 800394e:	4613      	movcs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	4413      	add	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	6939      	ldr	r1, [r7, #16]
 8003960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003962:	f001 fa6c 	bl	8004e3e <memcpy>
    NumBytesRead += NumBytesRem;
 8003966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4413      	add	r3, r2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800397e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4413      	add	r3, r2
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800398c:	429a      	cmp	r2, r3
 800398e:	d101      	bne.n	8003994 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bf28      	it	cs
 80039a4:	4613      	movcs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d019      	beq.n	80039e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	4413      	add	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6939      	ldr	r1, [r7, #16]
 80039bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039be:	f001 fa3e 	bl	8004e3e <memcpy>
    NumBytesRead += NumBytesRem;
 80039c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4413      	add	r3, r2
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4413      	add	r3, r2
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4413      	add	r3, r2
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3730      	adds	r7, #48	; 0x30
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2001a77c 	.word	0x2001a77c

080039fc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003a18:	f7ff ff10 	bl	800383c <_DoInit>
  SEGGER_RTT_LOCK();
 8003a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a20:	f04f 0120 	mov.w	r1, #32
 8003a24:	f381 8811 	msr	BASEPRI, r1
 8003a28:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a2a:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a2c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003a32:	6939      	ldr	r1, [r7, #16]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	440b      	add	r3, r1
 8003a42:	3304      	adds	r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbeb      	blt.n	8003a32 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003a5a:	e000      	b.n	8003a5e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003a5c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	da3f      	bge.n	8003ae8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a68:	6939      	ldr	r1, [r7, #16]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a92:	6939      	ldr	r1, [r7, #16]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3320      	adds	r3, #32
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3328      	adds	r3, #40	; 0x28
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003aba:	6939      	ldr	r1, [r7, #16]
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3324      	adds	r3, #36	; 0x24
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003ace:	6939      	ldr	r1, [r7, #16]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	440b      	add	r3, r1
 8003adc:	332c      	adds	r3, #44	; 0x2c
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ae2:	f3bf 8f5f 	dmb	sy
 8003ae6:	e002      	b.n	8003aee <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aec:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003af4:	69fb      	ldr	r3, [r7, #28]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2001a77c 	.word	0x2001a77c

08003b04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003b14:	623b      	str	r3, [r7, #32]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003b20:	f7ff fe8c 	bl	800383c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003b26:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d82c      	bhi.n	8003b88 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b32:	f04f 0120 	mov.w	r1, #32
 8003b36:	f381 8811 	msr	BASEPRI, r1
 8003b3a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	3360      	adds	r3, #96	; 0x60
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b76:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b78:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e002      	b.n	8003b8e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2001a77c 	.word	0x2001a77c

08003b9c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00f      	beq.n	8003bd2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003bb2:	e002      	b.n	8003bba <_EncodeStr+0x1e>
      Len++;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f6      	bne.n	8003bb4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d901      	bls.n	8003bd2 <_EncodeStr+0x36>
      Len = Limit;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2bfe      	cmp	r3, #254	; 0xfe
 8003bd6:	d806      	bhi.n	8003be6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60fa      	str	r2, [r7, #12]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e011      	b.n	8003c0a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	60fa      	str	r2, [r7, #12]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	0a19      	lsrs	r1, r3, #8
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	60fa      	str	r2, [r7, #12]
 8003c06:	b2ca      	uxtb	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c0e:	e00a      	b.n	8003c26 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	1c53      	adds	r3, r2, #1
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	60f9      	str	r1, [r7, #12]
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
    n++;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3f0      	bcc.n	8003c10 <_EncodeStr+0x74>
  }
  return pPayload;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3307      	adds	r3, #7
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <_HandleIncomingPacket+0xd0>)
 8003c5c:	7e1b      	ldrb	r3, [r3, #24]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	1cfb      	adds	r3, r7, #3
 8003c62:	2201      	movs	r2, #1
 8003c64:	4619      	mov	r1, r3
 8003c66:	f7ff fe43 	bl	80038f0 <SEGGER_RTT_ReadNoLock>
 8003c6a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04c      	beq.n	8003d0c <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d022      	beq.n	8003cbe <_HandleIncomingPacket+0x6a>
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	dc0b      	bgt.n	8003c94 <_HandleIncomingPacket+0x40>
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d015      	beq.n	8003cac <_HandleIncomingPacket+0x58>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	dc02      	bgt.n	8003c8a <_HandleIncomingPacket+0x36>
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d00e      	beq.n	8003ca6 <_HandleIncomingPacket+0x52>
 8003c88:	e033      	b.n	8003cf2 <_HandleIncomingPacket+0x9e>
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d011      	beq.n	8003cb2 <_HandleIncomingPacket+0x5e>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d012      	beq.n	8003cb8 <_HandleIncomingPacket+0x64>
 8003c92:	e02e      	b.n	8003cf2 <_HandleIncomingPacket+0x9e>
 8003c94:	2b07      	cmp	r3, #7
 8003c96:	d018      	beq.n	8003cca <_HandleIncomingPacket+0x76>
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	db13      	blt.n	8003cc4 <_HandleIncomingPacket+0x70>
 8003c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c9e:	d037      	beq.n	8003d10 <_HandleIncomingPacket+0xbc>
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d015      	beq.n	8003cd0 <_HandleIncomingPacket+0x7c>
 8003ca4:	e025      	b.n	8003cf2 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ca6:	f000 fb2b 	bl	8004300 <SEGGER_SYSVIEW_Start>
      break;
 8003caa:	e036      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003cac:	f000 fbe4 	bl	8004478 <SEGGER_SYSVIEW_Stop>
      break;
 8003cb0:	e033      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003cb2:	f000 fdbd 	bl	8004830 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003cb6:	e030      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003cb8:	f000 fd82 	bl	80047c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003cbc:	e02d      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003cbe:	f000 fc01 	bl	80044c4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003cc2:	e02a      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003cc4:	f000 ffee 	bl	8004ca4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003cc8:	e027      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003cca:	f000 ffcd 	bl	8004c68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cce:	e024      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <_HandleIncomingPacket+0xd0>)
 8003cd2:	7e1b      	ldrb	r3, [r3, #24]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	1cfb      	adds	r3, r7, #3
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f7ff fe08 	bl	80038f0 <SEGGER_RTT_ReadNoLock>
 8003ce0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 ff3c 	bl	8004b68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003cf0:	e010      	b.n	8003d14 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da0e      	bge.n	8003d18 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <_HandleIncomingPacket+0xd0>)
 8003cfc:	7e1b      	ldrb	r3, [r3, #24]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	1cfb      	adds	r3, r7, #3
 8003d02:	2201      	movs	r2, #1
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7ff fdf3 	bl	80038f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d0a:	e005      	b.n	8003d18 <_HandleIncomingPacket+0xc4>
    }
  }
 8003d0c:	bf00      	nop
 8003d0e:	e004      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
      break;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
      break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <_HandleIncomingPacket+0xc6>
      break;
 8003d18:	bf00      	nop
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2001a624 	.word	0x2001a624

08003d28 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d2e:	2301      	movs	r3, #1
 8003d30:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3c:	4b32      	ldr	r3, [pc, #200]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d42:	e00b      	b.n	8003d5c <_TrySendOverflowPacket+0x34>
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	09db      	lsrs	r3, r3, #7
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d60:	d8f0      	bhi.n	8003d44 <_TrySendOverflowPacket+0x1c>
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <_TrySendOverflowPacket+0xe4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	e00b      	b.n	8003da4 <_TrySendOverflowPacket+0x7c>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1c59      	adds	r1, r3, #1
 8003d94:	6279      	str	r1, [r7, #36]	; 0x24
 8003d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	09db      	lsrs	r3, r3, #7
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b7f      	cmp	r3, #127	; 0x7f
 8003da8:	d8f0      	bhi.n	8003d8c <_TrySendOverflowPacket+0x64>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	627a      	str	r2, [r7, #36]	; 0x24
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7fc fa08 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003dd4:	f7ff fd22 	bl	800381c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e004      	b.n	8003dfc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <_TrySendOverflowPacket+0xe0>)
 8003dfa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003dfc:	693b      	ldr	r3, [r7, #16]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3730      	adds	r7, #48	; 0x30
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2001a624 	.word	0x2001a624
 8003e0c:	e0001004 	.word	0xe0001004

08003e10 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e1c:	4b9b      	ldr	r3, [pc, #620]	; (800408c <_SendPacket+0x27c>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d010      	beq.n	8003e46 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e24:	4b99      	ldr	r3, [pc, #612]	; (800408c <_SendPacket+0x27c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 812b 	beq.w	8004084 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e2e:	4b97      	ldr	r3, [pc, #604]	; (800408c <_SendPacket+0x27c>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d109      	bne.n	8003e4a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e36:	f7ff ff77 	bl	8003d28 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e3a:	4b94      	ldr	r3, [pc, #592]	; (800408c <_SendPacket+0x27c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	f040 8122 	bne.w	8004088 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8003e44:	e001      	b.n	8003e4a <_SendPacket+0x3a>
    goto Send;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <_SendPacket+0x3c>
Send:
 8003e4a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b1f      	cmp	r3, #31
 8003e50:	d809      	bhi.n	8003e66 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e52:	4b8e      	ldr	r3, [pc, #568]	; (800408c <_SendPacket+0x27c>)
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8117 	bne.w	8004094 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b17      	cmp	r3, #23
 8003e6a:	d807      	bhi.n	8003e7c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e0c4      	b.n	8004006 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b7f      	cmp	r3, #127	; 0x7f
 8003e88:	d912      	bls.n	8003eb0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	09da      	lsrs	r2, r3, #7
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	60fa      	str	r2, [r7, #12]
 8003ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e006      	b.n	8003ebe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b7e      	cmp	r3, #126	; 0x7e
 8003ec2:	d807      	bhi.n	8003ed4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e098      	b.n	8004006 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eda:	d212      	bcs.n	8003f02 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	09da      	lsrs	r2, r3, #7
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	3a01      	subs	r2, #1
 8003ef4:	60fa      	str	r2, [r7, #12]
 8003ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e081      	b.n	8004006 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f08:	d21d      	bcs.n	8003f46 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0b9a      	lsrs	r2, r3, #14
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	09db      	lsrs	r3, r3, #7
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	3a01      	subs	r2, #1
 8003f24:	60fa      	str	r2, [r7, #12]
 8003f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	3a01      	subs	r2, #1
 8003f38:	60fa      	str	r2, [r7, #12]
 8003f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e05f      	b.n	8004006 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4c:	d228      	bcs.n	8003fa0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0d5a      	lsrs	r2, r3, #21
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0b9b      	lsrs	r3, r3, #14
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	3a01      	subs	r2, #1
 8003f68:	60fa      	str	r2, [r7, #12]
 8003f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	09db      	lsrs	r3, r3, #7
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	60fa      	str	r2, [r7, #12]
 8003f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	3a01      	subs	r2, #1
 8003f92:	60fa      	str	r2, [r7, #12]
 8003f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e032      	b.n	8004006 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0f1a      	lsrs	r2, r3, #28
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0d5b      	lsrs	r3, r3, #21
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	60fa      	str	r2, [r7, #12]
 8003fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0b9b      	lsrs	r3, r3, #14
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	3a01      	subs	r2, #1
 8003fd0:	60fa      	str	r2, [r7, #12]
 8003fd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	09db      	lsrs	r3, r3, #7
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	60fa      	str	r2, [r7, #12]
 8003fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	60fa      	str	r2, [r7, #12]
 8003ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <_SendPacket+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800400c:	4b1f      	ldr	r3, [pc, #124]	; (800408c <_SendPacket+0x27c>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	e00b      	b.n	8004038 <_SendPacket+0x228>
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	6279      	str	r1, [r7, #36]	; 0x24
 800402a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	09db      	lsrs	r3, r3, #7
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b7f      	cmp	r3, #127	; 0x7f
 800403c:	d8f0      	bhi.n	8004020 <_SendPacket+0x210>
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	627a      	str	r2, [r7, #36]	; 0x24
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <_SendPacket+0x27c>)
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	4618      	mov	r0, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	461a      	mov	r2, r3
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	f7fc f8bf 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004062:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004064:	f7ff fbda 	bl	800381c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <_SendPacket+0x27c>)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	60d3      	str	r3, [r2, #12]
 8004074:	e00f      	b.n	8004096 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <_SendPacket+0x27c>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b03      	ldr	r3, [pc, #12]	; (800408c <_SendPacket+0x27c>)
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e008      	b.n	8004096 <_SendPacket+0x286>
    goto SendDone;
 8004084:	bf00      	nop
 8004086:	e006      	b.n	8004096 <_SendPacket+0x286>
      goto SendDone;
 8004088:	bf00      	nop
 800408a:	e004      	b.n	8004096 <_SendPacket+0x286>
 800408c:	2001a624 	.word	0x2001a624
 8004090:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004094:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <_SendPacket+0x2d8>)
 8004098:	7e1b      	ldrb	r3, [r3, #24]
 800409a:	4619      	mov	r1, r3
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <_SendPacket+0x2dc>)
 800409e:	460b      	mov	r3, r1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	440b      	add	r3, r1
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	336c      	adds	r3, #108	; 0x6c
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <_SendPacket+0x2d8>)
 80040ae:	7e1b      	ldrb	r3, [r3, #24]
 80040b0:	4618      	mov	r0, r3
 80040b2:	490e      	ldr	r1, [pc, #56]	; (80040ec <_SendPacket+0x2dc>)
 80040b4:	4603      	mov	r3, r0
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4403      	add	r3, r0
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	3370      	adds	r3, #112	; 0x70
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d00b      	beq.n	80040de <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <_SendPacket+0x2d8>)
 80040c8:	789b      	ldrb	r3, [r3, #2]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <_SendPacket+0x2d8>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80040d4:	f7ff fdbe 	bl	8003c54 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <_SendPacket+0x2d8>)
 80040da:	2200      	movs	r2, #0
 80040dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2001a624 	.word	0x2001a624
 80040ec:	2001a77c 	.word	0x2001a77c

080040f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80040fe:	2300      	movs	r3, #0
 8004100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <SEGGER_SYSVIEW_Init+0x74>)
 8004106:	4818      	ldr	r0, [pc, #96]	; (8004168 <SEGGER_SYSVIEW_Init+0x78>)
 8004108:	f7ff fc78 	bl	80039fc <SEGGER_RTT_AllocUpBuffer>
 800410c:	4603      	mov	r3, r0
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004112:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004116:	785a      	ldrb	r2, [r3, #1]
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 800411a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 800411e:	7e1b      	ldrb	r3, [r3, #24]
 8004120:	4618      	mov	r0, r3
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2308      	movs	r3, #8
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <SEGGER_SYSVIEW_Init+0x80>)
 800412a:	490f      	ldr	r1, [pc, #60]	; (8004168 <SEGGER_SYSVIEW_Init+0x78>)
 800412c:	f7ff fcea 	bl	8003b04 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <SEGGER_SYSVIEW_Init+0x84>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 800413c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800413e:	4a0b      	ldr	r2, [pc, #44]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <SEGGER_SYSVIEW_Init+0x7c>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2001961c 	.word	0x2001961c
 8004168:	08004f48 	.word	0x08004f48
 800416c:	2001a624 	.word	0x2001a624
 8004170:	2001a61c 	.word	0x2001a61c
 8004174:	e0001004 	.word	0xe0001004

08004178 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6113      	str	r3, [r2, #16]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2001a624 	.word	0x2001a624

08004198 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041a0:	f3ef 8311 	mrs	r3, BASEPRI
 80041a4:	f04f 0120 	mov.w	r1, #32
 80041a8:	f381 8811 	msr	BASEPRI, r1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	4808      	ldr	r0, [pc, #32]	; (80041d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80041b0:	f7ff fd44 	bl	8003c3c <_PreparePacket>
 80041b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	f7ff fe28 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f383 8811 	msr	BASEPRI, r3
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2001a654 	.word	0x2001a654

080041d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041de:	f3ef 8311 	mrs	r3, BASEPRI
 80041e2:	f04f 0120 	mov.w	r1, #32
 80041e6:	f381 8811 	msr	BASEPRI, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	4816      	ldr	r0, [pc, #88]	; (8004248 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80041ee:	f7ff fd25 	bl	8003c3c <_PreparePacket>
 80041f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e00b      	b.n	800421a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	1c59      	adds	r1, r3, #1
 800420a:	61f9      	str	r1, [r7, #28]
 800420c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	09db      	lsrs	r3, r3, #7
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b7f      	cmp	r3, #127	; 0x7f
 800421e:	d8f0      	bhi.n	8004202 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	61fa      	str	r2, [r7, #28]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6938      	ldr	r0, [r7, #16]
 8004236:	f7ff fdeb 	bl	8003e10 <_SendPacket>
  RECORD_END();
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f383 8811 	msr	BASEPRI, r3
}
 8004240:	bf00      	nop
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2001a654 	.word	0x2001a654

0800424c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004258:	f3ef 8311 	mrs	r3, BASEPRI
 800425c:	f04f 0120 	mov.w	r1, #32
 8004260:	f381 8811 	msr	BASEPRI, r1
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	4825      	ldr	r0, [pc, #148]	; (80042fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004268:	f7ff fce8 	bl	8003c3c <_PreparePacket>
 800426c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	e00b      	b.n	8004294 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	b2da      	uxtb	r2, r3
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	09db      	lsrs	r3, r3, #7
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	2b7f      	cmp	r3, #127	; 0x7f
 8004298:	d8f0      	bhi.n	800427c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	e00b      	b.n	80042cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1c59      	adds	r1, r3, #1
 80042bc:	6279      	str	r1, [r7, #36]	; 0x24
 80042be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	09db      	lsrs	r3, r3, #7
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b7f      	cmp	r3, #127	; 0x7f
 80042d0:	d8f0      	bhi.n	80042b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	627a      	str	r2, [r7, #36]	; 0x24
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	69b8      	ldr	r0, [r7, #24]
 80042e8:	f7ff fd92 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f383 8811 	msr	BASEPRI, r3
}
 80042f2:	bf00      	nop
 80042f4:	3730      	adds	r7, #48	; 0x30
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2001a654 	.word	0x2001a654

08004300 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004306:	4b59      	ldr	r3, [pc, #356]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800430c:	f3ef 8311 	mrs	r3, BASEPRI
 8004310:	f04f 0120 	mov.w	r1, #32
 8004314:	f381 8811 	msr	BASEPRI, r1
 8004318:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800431a:	4b54      	ldr	r3, [pc, #336]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	220a      	movs	r2, #10
 8004320:	4953      	ldr	r1, [pc, #332]	; (8004470 <SEGGER_SYSVIEW_Start+0x170>)
 8004322:	4618      	mov	r0, r3
 8004324:	f7fb ff5c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800432e:	f7ff fa75 	bl	800381c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004332:	200a      	movs	r0, #10
 8004334:	f7ff ff30 	bl	8004198 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004338:	f3ef 8311 	mrs	r3, BASEPRI
 800433c:	f04f 0120 	mov.w	r1, #32
 8004340:	f381 8811 	msr	BASEPRI, r1
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	484b      	ldr	r0, [pc, #300]	; (8004474 <SEGGER_SYSVIEW_Start+0x174>)
 8004348:	f7ff fc78 	bl	8003c3c <_PreparePacket>
 800434c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	4b45      	ldr	r3, [pc, #276]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	e00b      	b.n	8004376 <SEGGER_SYSVIEW_Start+0x76>
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	1c59      	adds	r1, r3, #1
 8004366:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	09db      	lsrs	r3, r3, #7
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	2b7f      	cmp	r3, #127	; 0x7f
 800437a:	d8f0      	bhi.n	800435e <SEGGER_SYSVIEW_Start+0x5e>
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	e00b      	b.n	80043b0 <SEGGER_SYSVIEW_Start+0xb0>
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	6279      	str	r1, [r7, #36]	; 0x24
 80043a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	09db      	lsrs	r3, r3, #7
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	2b7f      	cmp	r3, #127	; 0x7f
 80043b4:	d8f0      	bhi.n	8004398 <SEGGER_SYSVIEW_Start+0x98>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	627a      	str	r2, [r7, #36]	; 0x24
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e00b      	b.n	80043ea <SEGGER_SYSVIEW_Start+0xea>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	61f9      	str	r1, [r7, #28]
 80043dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	09db      	lsrs	r3, r3, #7
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b7f      	cmp	r3, #127	; 0x7f
 80043ee:	d8f0      	bhi.n	80043d2 <SEGGER_SYSVIEW_Start+0xd2>
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	61fa      	str	r2, [r7, #28]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e00b      	b.n	8004422 <SEGGER_SYSVIEW_Start+0x122>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1c59      	adds	r1, r3, #1
 8004412:	6179      	str	r1, [r7, #20]
 8004414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	09db      	lsrs	r3, r3, #7
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b7f      	cmp	r3, #127	; 0x7f
 8004426:	d8f0      	bhi.n	800440a <SEGGER_SYSVIEW_Start+0x10a>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	617a      	str	r2, [r7, #20]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004438:	2218      	movs	r2, #24
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fce7 	bl	8003e10 <_SendPacket>
      RECORD_END();
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <SEGGER_SYSVIEW_Start+0x16c>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004456:	f000 f9eb 	bl	8004830 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800445a:	f000 f9b1 	bl	80047c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800445e:	f000 fc21 	bl	8004ca4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004462:	bf00      	nop
 8004464:	3730      	adds	r7, #48	; 0x30
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	2001a624 	.word	0x2001a624
 8004470:	08004f84 	.word	0x08004f84
 8004474:	2001a654 	.word	0x2001a654

08004478 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800447e:	f3ef 8311 	mrs	r3, BASEPRI
 8004482:	f04f 0120 	mov.w	r1, #32
 8004486:	f381 8811 	msr	BASEPRI, r1
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	480b      	ldr	r0, [pc, #44]	; (80044bc <SEGGER_SYSVIEW_Stop+0x44>)
 800448e:	f7ff fbd5 	bl	8003c3c <_PreparePacket>
 8004492:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800449c:	220b      	movs	r2, #11
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6838      	ldr	r0, [r7, #0]
 80044a2:	f7ff fcb5 	bl	8003e10 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <SEGGER_SYSVIEW_Stop+0x48>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f383 8811 	msr	BASEPRI, r3
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2001a654 	.word	0x2001a654
 80044c0:	2001a624 	.word	0x2001a624

080044c4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044ca:	f3ef 8311 	mrs	r3, BASEPRI
 80044ce:	f04f 0120 	mov.w	r1, #32
 80044d2:	f381 8811 	msr	BASEPRI, r1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	4845      	ldr	r0, [pc, #276]	; (80045f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80044da:	f7ff fbaf 	bl	8003c3c <_PreparePacket>
 80044de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e8:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ee:	e00b      	b.n	8004508 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	09db      	lsrs	r3, r3, #7
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b7f      	cmp	r3, #127	; 0x7f
 800450c:	d8f0      	bhi.n	80044f0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	e00b      	b.n	8004542 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	6279      	str	r1, [r7, #36]	; 0x24
 8004534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	09db      	lsrs	r3, r3, #7
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d8f0      	bhi.n	800452a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	627a      	str	r2, [r7, #36]	; 0x24
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e00b      	b.n	800457c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	61f9      	str	r1, [r7, #28]
 800456e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b7f      	cmp	r3, #127	; 0x7f
 8004580:	d8f0      	bhi.n	8004564 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	61fa      	str	r2, [r7, #28]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e00b      	b.n	80045b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	6179      	str	r1, [r7, #20]
 80045a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	09db      	lsrs	r3, r3, #7
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b7f      	cmp	r3, #127	; 0x7f
 80045b8:	d8f0      	bhi.n	800459c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	617a      	str	r2, [r7, #20]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80045ca:	2218      	movs	r2, #24
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	f7ff fc1e 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	4798      	blx	r3
  }
}
 80045e8:	bf00      	nop
 80045ea:	3730      	adds	r7, #48	; 0x30
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2001a654 	.word	0x2001a654
 80045f4:	2001a624 	.word	0x2001a624

080045f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b092      	sub	sp, #72	; 0x48
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004600:	f3ef 8311 	mrs	r3, BASEPRI
 8004604:	f04f 0120 	mov.w	r1, #32
 8004608:	f381 8811 	msr	BASEPRI, r1
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	486a      	ldr	r0, [pc, #424]	; (80047b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004610:	f7ff fb14 	bl	8003c3c <_PreparePacket>
 8004614:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b66      	ldr	r3, [pc, #408]	; (80047bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	643b      	str	r3, [r7, #64]	; 0x40
 800462a:	e00b      	b.n	8004644 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800462c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	6479      	str	r1, [r7, #68]	; 0x44
 8004636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
 8004644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d8f0      	bhi.n	800462c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800464a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	647a      	str	r2, [r7, #68]	; 0x44
 8004650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
 8004664:	e00b      	b.n	800467e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	b2da      	uxtb	r2, r3
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b7f      	cmp	r3, #127	; 0x7f
 8004682:	d8f0      	bhi.n	8004666 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	63fa      	str	r2, [r7, #60]	; 0x3c
 800468a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004692:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	4619      	mov	r1, r3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fa7d 	bl	8003b9c <_EncodeStr>
 80046a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80046a4:	2209      	movs	r2, #9
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f7ff fbb1 	bl	8003e10 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
 80046c2:	e00b      	b.n	80046dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	6379      	str	r1, [r7, #52]	; 0x34
 80046ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	09db      	lsrs	r3, r3, #7
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	2b7f      	cmp	r3, #127	; 0x7f
 80046e0:	d8f0      	bhi.n	80046c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	637a      	str	r2, [r7, #52]	; 0x34
 80046e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	e00b      	b.n	8004716 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	b2da      	uxtb	r2, r3
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	2b7f      	cmp	r3, #127	; 0x7f
 800471a:	d8f0      	bhi.n	80046fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	e00b      	b.n	8004750 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	6279      	str	r1, [r7, #36]	; 0x24
 8004742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	09db      	lsrs	r3, r3, #7
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	2b7f      	cmp	r3, #127	; 0x7f
 8004754:	d8f0      	bhi.n	8004738 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	627a      	str	r2, [r7, #36]	; 0x24
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e00b      	b.n	8004788 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	1c59      	adds	r1, r3, #1
 8004778:	61f9      	str	r1, [r7, #28]
 800477a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b7f      	cmp	r3, #127	; 0x7f
 800478c:	d8f0      	bhi.n	8004770 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	61fa      	str	r2, [r7, #28]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800479e:	2215      	movs	r2, #21
 80047a0:	68f9      	ldr	r1, [r7, #12]
 80047a2:	6938      	ldr	r0, [r7, #16]
 80047a4:	f7ff fb34 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f383 8811 	msr	BASEPRI, r3
}
 80047ae:	bf00      	nop
 80047b0:	3748      	adds	r7, #72	; 0x48
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2001a654 	.word	0x2001a654
 80047bc:	2001a624 	.word	0x2001a624

080047c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
  }
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2001a624 	.word	0x2001a624

080047e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047f0:	f3ef 8311 	mrs	r3, BASEPRI
 80047f4:	f04f 0120 	mov.w	r1, #32
 80047f8:	f381 8811 	msr	BASEPRI, r1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	480b      	ldr	r0, [pc, #44]	; (800482c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004800:	f7ff fa1c 	bl	8003c3c <_PreparePacket>
 8004804:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6938      	ldr	r0, [r7, #16]
 800480c:	f7ff f9c6 	bl	8003b9c <_EncodeStr>
 8004810:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004812:	220e      	movs	r2, #14
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f7ff fafa 	bl	8003e10 <_SendPacket>
  RECORD_END();
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f383 8811 	msr	BASEPRI, r3
}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2001a654 	.word	0x2001a654

08004830 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d019      	beq.n	8004872 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d014      	beq.n	8004872 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4798      	blx	r3
 8004850:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004854:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004856:	e9d7 1200 	ldrd	r1, r2, [r7]
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	0013      	movs	r3, r2
 8004864:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004866:	461a      	mov	r2, r3
 8004868:	4601      	mov	r1, r0
 800486a:	200d      	movs	r0, #13
 800486c:	f7ff fcee 	bl	800424c <SEGGER_SYSVIEW_RecordU32x2>
 8004870:	e005      	b.n	800487e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	200c      	movs	r0, #12
 800487a:	f7ff fcab 	bl	80041d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	2001a624 	.word	0x2001a624
 800488c:	e0001004 	.word	0xe0001004

08004890 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004896:	f3ef 8311 	mrs	r3, BASEPRI
 800489a:	f04f 0120 	mov.w	r1, #32
 800489e:	f381 8811 	msr	BASEPRI, r1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	4819      	ldr	r0, [pc, #100]	; (800490c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80048a6:	f7ff f9c9 	bl	8003c3c <_PreparePacket>
 80048aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e00b      	b.n	80048dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	6179      	str	r1, [r7, #20]
 80048ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b7f      	cmp	r3, #127	; 0x7f
 80048e0:	d8f0      	bhi.n	80048c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	617a      	str	r2, [r7, #20]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80048f2:	2202      	movs	r2, #2
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	68b8      	ldr	r0, [r7, #8]
 80048f8:	f7ff fa8a 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f383 8811 	msr	BASEPRI, r3
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2001a654 	.word	0x2001a654
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800491a:	f3ef 8311 	mrs	r3, BASEPRI
 800491e:	f04f 0120 	mov.w	r1, #32
 8004922:	f381 8811 	msr	BASEPRI, r1
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	4807      	ldr	r0, [pc, #28]	; (8004948 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800492a:	f7ff f987 	bl	8003c3c <_PreparePacket>
 800492e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004930:	2203      	movs	r2, #3
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f7ff fa6b 	bl	8003e10 <_SendPacket>
  RECORD_END();
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f383 8811 	msr	BASEPRI, r3
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	2001a654 	.word	0x2001a654

0800494c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004952:	f3ef 8311 	mrs	r3, BASEPRI
 8004956:	f04f 0120 	mov.w	r1, #32
 800495a:	f381 8811 	msr	BASEPRI, r1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004962:	f7ff f96b 	bl	8003c3c <_PreparePacket>
 8004966:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004968:	2212      	movs	r2, #18
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f7ff fa4f 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f383 8811 	msr	BASEPRI, r3
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2001a654 	.word	0x2001a654

08004984 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800498a:	f3ef 8311 	mrs	r3, BASEPRI
 800498e:	f04f 0120 	mov.w	r1, #32
 8004992:	f381 8811 	msr	BASEPRI, r1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	4807      	ldr	r0, [pc, #28]	; (80049b8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800499a:	f7ff f94f 	bl	8003c3c <_PreparePacket>
 800499e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80049a0:	2211      	movs	r2, #17
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6838      	ldr	r0, [r7, #0]
 80049a6:	f7ff fa33 	bl	8003e10 <_SendPacket>
  RECORD_END();
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f383 8811 	msr	BASEPRI, r3
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2001a654 	.word	0x2001a654

080049bc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80049c4:	f3ef 8311 	mrs	r3, BASEPRI
 80049c8:	f04f 0120 	mov.w	r1, #32
 80049cc:	f381 8811 	msr	BASEPRI, r1
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	4819      	ldr	r0, [pc, #100]	; (8004a38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80049d4:	f7ff f932 	bl	8003c3c <_PreparePacket>
 80049d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049de:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e00b      	b.n	8004a0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	1c59      	adds	r1, r3, #1
 80049fa:	61f9      	str	r1, [r7, #28]
 80049fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	09db      	lsrs	r3, r3, #7
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0e:	d8f0      	bhi.n	80049f2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	61fa      	str	r2, [r7, #28]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004a20:	2208      	movs	r2, #8
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	6938      	ldr	r0, [r7, #16]
 8004a26:	f7ff f9f3 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f383 8811 	msr	BASEPRI, r3
}
 8004a30:	bf00      	nop
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2001a654 	.word	0x2001a654
 8004a3c:	2001a624 	.word	0x2001a624

08004a40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a48:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4c:	f04f 0120 	mov.w	r1, #32
 8004a50:	f381 8811 	msr	BASEPRI, r1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	4819      	ldr	r0, [pc, #100]	; (8004abc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004a58:	f7ff f8f0 	bl	8003c3c <_PreparePacket>
 8004a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a62:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e00b      	b.n	8004a8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	1c59      	adds	r1, r3, #1
 8004a7e:	61f9      	str	r1, [r7, #28]
 8004a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	09db      	lsrs	r3, r3, #7
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b7f      	cmp	r3, #127	; 0x7f
 8004a92:	d8f0      	bhi.n	8004a76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	6938      	ldr	r0, [r7, #16]
 8004aaa:	f7ff f9b1 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f383 8811 	msr	BASEPRI, r3
}
 8004ab4:	bf00      	nop
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	2001a654 	.word	0x2001a654
 8004ac0:	2001a624 	.word	0x2001a624

08004ac4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004acc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad0:	f04f 0120 	mov.w	r1, #32
 8004ad4:	f381 8811 	msr	BASEPRI, r1
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	4819      	ldr	r0, [pc, #100]	; (8004b40 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004adc:	f7ff f8ae 	bl	8003c3c <_PreparePacket>
 8004ae0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	e00b      	b.n	8004b12 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	61f9      	str	r1, [r7, #28]
 8004b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	09db      	lsrs	r3, r3, #7
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b7f      	cmp	r3, #127	; 0x7f
 8004b16:	d8f0      	bhi.n	8004afa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	61fa      	str	r2, [r7, #28]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004b28:	2206      	movs	r2, #6
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	6938      	ldr	r0, [r7, #16]
 8004b2e:	f7ff f96f 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f383 8811 	msr	BASEPRI, r3
}
 8004b38:	bf00      	nop
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	2001a654 	.word	0x2001a654
 8004b44:	2001a624 	.word	0x2001a624

08004b48 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	1ad3      	subs	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	2001a624 	.word	0x2001a624

08004b68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	; 0x30
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d06d      	beq.n	8004c56 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004b80:	2300      	movs	r3, #0
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b84:	e008      	b.n	8004b98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	3301      	adds	r3, #1
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d3f2      	bcc.n	8004b86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ba0:	e000      	b.n	8004ba4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004ba2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d055      	beq.n	8004c56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004baa:	f3ef 8311 	mrs	r3, BASEPRI
 8004bae:	f04f 0120 	mov.w	r1, #32
 8004bb2:	f381 8811 	msr	BASEPRI, r1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	482a      	ldr	r0, [pc, #168]	; (8004c64 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004bba:	f7ff f83f 	bl	8003c3c <_PreparePacket>
 8004bbe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	e00b      	b.n	8004be6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8004bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	09db      	lsrs	r3, r3, #7
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	d8f0      	bhi.n	8004bce <SEGGER_SYSVIEW_SendModule+0x66>
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf2:	6a3a      	ldr	r2, [r7, #32]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	e00b      	b.n	8004c20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	1c59      	adds	r1, r3, #1
 8004c10:	61f9      	str	r1, [r7, #28]
 8004c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	09db      	lsrs	r3, r3, #7
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b7f      	cmp	r3, #127	; 0x7f
 8004c24:	d8f0      	bhi.n	8004c08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	61fa      	str	r2, [r7, #28]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7fe ffac 	bl	8003b9c <_EncodeStr>
 8004c44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004c46:	2216      	movs	r2, #22
 8004c48:	68f9      	ldr	r1, [r7, #12]
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f7ff f8e0 	bl	8003e10 <_SendPacket>
      RECORD_END();
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004c56:	bf00      	nop
 8004c58:	3730      	adds	r7, #48	; 0x30
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2001a64c 	.word	0x2001a64c
 8004c64:	2001a654 	.word	0x2001a654

08004c68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f2      	bne.n	8004c7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2001a64c 	.word	0x2001a64c

08004ca4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004caa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cae:	f04f 0120 	mov.w	r1, #32
 8004cb2:	f381 8811 	msr	BASEPRI, r1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	4817      	ldr	r0, [pc, #92]	; (8004d18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004cba:	f7fe ffbf 	bl	8003c3c <_PreparePacket>
 8004cbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e00b      	b.n	8004ce8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	6179      	str	r1, [r7, #20]
 8004cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b7f      	cmp	r3, #127	; 0x7f
 8004cec:	d8f0      	bhi.n	8004cd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	617a      	str	r2, [r7, #20]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004cfe:	221b      	movs	r2, #27
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	68b8      	ldr	r0, [r7, #8]
 8004d04:	f7ff f884 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2001a654 	.word	0x2001a654
 8004d1c:	2001a650 	.word	0x2001a650

08004d20 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d28:	f3ef 8311 	mrs	r3, BASEPRI
 8004d2c:	f04f 0120 	mov.w	r1, #32
 8004d30:	f381 8811 	msr	BASEPRI, r1
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	4827      	ldr	r0, [pc, #156]	; (8004dd4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004d38:	f7fe ff80 	bl	8003c3c <_PreparePacket>
 8004d3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f7fe ff2a 	bl	8003b9c <_EncodeStr>
 8004d48:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	2301      	movs	r3, #1
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	e00b      	b.n	8004d6c <SEGGER_SYSVIEW_Warn+0x4c>
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	09db      	lsrs	r3, r3, #7
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d70:	d8f0      	bhi.n	8004d54 <SEGGER_SYSVIEW_Warn+0x34>
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	627a      	str	r2, [r7, #36]	; 0x24
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	2300      	movs	r3, #0
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	e00b      	b.n	8004da4 <SEGGER_SYSVIEW_Warn+0x84>
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	61f9      	str	r1, [r7, #28]
 8004d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	09db      	lsrs	r3, r3, #7
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b7f      	cmp	r3, #127	; 0x7f
 8004da8:	d8f0      	bhi.n	8004d8c <SEGGER_SYSVIEW_Warn+0x6c>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	61fa      	str	r2, [r7, #28]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dba:	221a      	movs	r2, #26
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	6938      	ldr	r0, [r7, #16]
 8004dc0:	f7ff f826 	bl	8003e10 <_SendPacket>
  RECORD_END();
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f383 8811 	msr	BASEPRI, r3
}
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2001a654 	.word	0x2001a654

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4e0d      	ldr	r6, [pc, #52]	; (8004e10 <__libc_init_array+0x38>)
 8004ddc:	4c0d      	ldr	r4, [pc, #52]	; (8004e14 <__libc_init_array+0x3c>)
 8004dde:	1ba4      	subs	r4, r4, r6
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	2500      	movs	r5, #0
 8004de4:	42a5      	cmp	r5, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	4e0b      	ldr	r6, [pc, #44]	; (8004e18 <__libc_init_array+0x40>)
 8004dea:	4c0c      	ldr	r4, [pc, #48]	; (8004e1c <__libc_init_array+0x44>)
 8004dec:	f000 f83a 	bl	8004e64 <_init>
 8004df0:	1ba4      	subs	r4, r4, r6
 8004df2:	10a4      	asrs	r4, r4, #2
 8004df4:	2500      	movs	r5, #0
 8004df6:	42a5      	cmp	r5, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e00:	4798      	blx	r3
 8004e02:	3501      	adds	r5, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e0a:	4798      	blx	r3
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	08004f98 	.word	0x08004f98
 8004e14:	08004f98 	.word	0x08004f98
 8004e18:	08004f98 	.word	0x08004f98
 8004e1c:	08004f9c 	.word	0x08004f9c

08004e20 <memcmp>:
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	2400      	movs	r4, #0
 8004e24:	42a2      	cmp	r2, r4
 8004e26:	d101      	bne.n	8004e2c <memcmp+0xc>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e007      	b.n	8004e3c <memcmp+0x1c>
 8004e2c:	5d03      	ldrb	r3, [r0, r4]
 8004e2e:	3401      	adds	r4, #1
 8004e30:	190d      	adds	r5, r1, r4
 8004e32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004e36:	42ab      	cmp	r3, r5
 8004e38:	d0f4      	beq.n	8004e24 <memcmp+0x4>
 8004e3a:	1b58      	subs	r0, r3, r5
 8004e3c:	bd30      	pop	{r4, r5, pc}

08004e3e <memcpy>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	1e43      	subs	r3, r0, #1
 8004e42:	440a      	add	r2, r1
 8004e44:	4291      	cmp	r1, r2
 8004e46:	d100      	bne.n	8004e4a <memcpy+0xc>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e52:	e7f7      	b.n	8004e44 <memcpy+0x6>

08004e54 <memset>:
 8004e54:	4402      	add	r2, r0
 8004e56:	4603      	mov	r3, r0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d100      	bne.n	8004e5e <memset+0xa>
 8004e5c:	4770      	bx	lr
 8004e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e62:	e7f9      	b.n	8004e58 <memset+0x4>

08004e64 <_init>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr

08004e70 <_fini>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr
