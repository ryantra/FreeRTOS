
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dac  08005dac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a84c  20000014  08005dc8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a860  08005dc8  0002a860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166b1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ebe  00000000  00000000  000366f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001380  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018548  00000000  00000000  0003bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f47d  00000000  00000000  00054078  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099c11  00000000  00000000  000634f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000fd184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c2c 	.word	0x08005c2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005c2c 	.word	0x08005c2c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a7b8 	.word	0x2001a7b8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb17 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f869 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8fb 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8cd 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(250000);

  //Cycle count enable
    DWT_CTRL |= (1 << 0);
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <main+0xc4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <main+0xc4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000596:	f003 fafb 	bl	8003b90 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800059a:	f004 fd31 	bl	8005000 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(led1_handler, "LED_1_task", 200, NULL, 2, &task1_handle);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2302      	movs	r3, #2
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	22c8      	movs	r2, #200	; 0xc8
 80005ac:	4923      	ldr	r1, [pc, #140]	; (800063c <main+0xc8>)
 80005ae:	4824      	ldr	r0, [pc, #144]	; (8000640 <main+0xcc>)
 80005b0:	f002 f922 	bl	80027f8 <xTaskCreate>
 80005b4:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d009      	beq.n	80005d0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	e7fe      	b.n	80005ce <main+0x5a>

	status = xTaskCreate(led2_handler, "LED_2_task", 200, NULL, 2, &task2_handle);
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2302      	movs	r3, #2
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	4919      	ldr	r1, [pc, #100]	; (8000644 <main+0xd0>)
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <main+0xd4>)
 80005e2:	f002 f909 	bl	80027f8 <xTaskCreate>
 80005e6:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d009      	beq.n	8000602 <main+0x8e>
 80005ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f2:	f383 8811 	msr	BASEPRI, r3
 80005f6:	f3bf 8f6f 	isb	sy
 80005fa:	f3bf 8f4f 	dsb	sy
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e7fe      	b.n	8000600 <main+0x8c>

	status = xTaskCreate(led3_handler, "LED_3_task", 200, NULL, 2, &task3_handle);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	490f      	ldr	r1, [pc, #60]	; (800064c <main+0xd8>)
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0xdc>)
 8000612:	f002 f8f1 	bl	80027f8 <xTaskCreate>
 8000616:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d009      	beq.n	8000632 <main+0xbe>
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e7fe      	b.n	8000630 <main+0xbc>

	//start the freeRTOS scheduler
	 vTaskStartScheduler();
 8000632:	f002 fa7b 	bl	8002b2c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0xc2>
 8000638:	e0001000 	.word	0xe0001000
 800063c:	08005c44 	.word	0x08005c44
 8000640:	08000889 	.word	0x08000889
 8000644:	08005c50 	.word	0x08005c50
 8000648:	080008b5 	.word	0x080008b5
 800064c:	08005c5c 	.word	0x08005c5c
 8000650:	080008e1 	.word	0x080008e1

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fada 	bl	8005c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <SystemClock_Config+0xc8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xcc>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fd5d 	bl	8001198 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f92c 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2103      	movs	r1, #3
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ffb7 	bl	8001678 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 f916 	bl	8000940 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x54>)
 8000732:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f001 fbce 	bl	8001efc <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f8eb 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2001a734 	.word	0x2001a734
 8000774:	40004400 	.word	0x40004400
 8000778:	0003d090 	.word	0x0003d090

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0xf8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <MX_GPIO_Init+0xf8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_GPIO_Init+0xf8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <MX_GPIO_Init+0xfc>)
 8000808:	f000 fc76 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_GPIO_Init+0x100>)
 8000814:	f000 fc70 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0x104>)
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0x108>)
 800082e:	f000 fae1 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000832:	2320      	movs	r3, #32
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0xfc>)
 800084a:	f000 fad3 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800084e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x100>)
 8000868:	f000 fac4 	bl	8000df4 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	10210000 	.word	0x10210000
 8000884:	40020800 	.word	0x40020800

08000888 <led1_handler>:

/* USER CODE BEGIN 4 */

static void led1_handler(void* parameters)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <led1_handler+0x24>)
 8000892:	f005 f915 	bl	8005ac0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <led1_handler+0x28>)
 800089c:	f000 fc45 	bl	800112a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f002 f90a 	bl	8002abc <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 80008a8:	e7f2      	b.n	8000890 <led1_handler+0x8>
 80008aa:	bf00      	nop
 80008ac:	08005c68 	.word	0x08005c68
 80008b0:	40020400 	.word	0x40020400

080008b4 <led2_handler>:
	}
}


static void led2_handler(void* parameters)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <led2_handler+0x24>)
 80008be:	f005 f8ff 	bl	8005ac0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80008c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <led2_handler+0x28>)
 80008c8:	f000 fc2f 	bl	800112a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 80008cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008d0:	f002 f8f4 	bl	8002abc <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 80008d4:	e7f2      	b.n	80008bc <led2_handler+0x8>
 80008d6:	bf00      	nop
 80008d8:	08005c78 	.word	0x08005c78
 80008dc:	40020400 	.word	0x40020400

080008e0 <led3_handler>:
	}

}

static void led3_handler(void* parameters)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <led3_handler+0x24>)
 80008ea:	f005 f8e9 	bl	8005ac0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 80008ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <led3_handler+0x28>)
 80008f4:	f000 fc19 	bl	800112a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 80008f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008fc:	f002 f8de 	bl	8002abc <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 8000900:	e7f2      	b.n	80008e8 <led3_handler+0x8>
 8000902:	bf00      	nop
 8000904:	08005c88 	.word	0x08005c88
 8000908:	40020400 	.word	0x40020400

0800090c <vApplicationIdleHook>:
	}

}

void vApplicationIdleHook( void )
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000910:	2101      	movs	r1, #1
 8000912:	2000      	movs	r0, #0
 8000914:	f000 fc24 	bl	8001160 <HAL_PWR_EnterSLEEPMode>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f95f 	bl	8000bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000c00 	.word	0x40000c00

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800098e:	f002 fd5f 	bl	8003450 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a16:	f000 f9ed 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	2032      	movs	r0, #50	; 0x32
 8000a46:	f000 f9ab 	bl	8000da0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f000 f9c4 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_InitTick+0xa4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_InitTick+0xa4>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_InitTick+0xa4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fff0 	bl	8001a5c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a7c:	f000 ffc6 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8000a80:	4603      	mov	r3, r0
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_InitTick+0xa8>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	0c9b      	lsrs	r3, r3, #18
 8000a90:	3b01      	subs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_InitTick+0xac>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_InitTick+0xb0>)
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_InitTick+0xac>)
 8000a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_InitTick+0xac>)
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_InitTick+0xac>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_InitTick+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_InitTick+0xac>)
 8000ab6:	f001 f803 	bl	8001ac0 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_InitTick+0xac>)
 8000ac2:	f001 f832 	bl	8001b2a <HAL_TIM_Base_Start_IT>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	2001a774 	.word	0x2001a774
 8000ae0:	40000c00 	.word	0x40000c00

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM5_IRQHandler+0x10>)
 8000b1e:	f001 f828 	bl	8001b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2001a774 	.word	0x2001a774

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SystemInit+0x28>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <SystemInit+0x28>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SystemInit+0x28>)
 8000b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b46:	609a      	str	r2, [r3, #8]
#endif
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr  r2, =_sbss
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b78:	f842 3b04 	str.w	r3, [r2], #4

08000b7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b82:	f7ff ffd3 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f005 f80b 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8a:	f7ff fcf3 	bl	8000574 <main>
  bx  lr    
 8000b8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b94:	08005db4 	.word	0x08005db4
  ldr  r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b9c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ba0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ba4:	2001a860 	.word	0x2001a860

08000ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f8d8 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ff28 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff feb6 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	2001a7b4 	.word	0x2001a7b4

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2001a7b4 	.word	0x2001a7b4

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff61 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb1 	bl	8000d24 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff80 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff54 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e159      	b.n	80010c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8148 	bne.w	80010be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d00b      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	2b11      	cmp	r3, #17
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0xfc>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a2 	beq.w	80010be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a51      	ldr	r2, [pc, #324]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x202>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1fe>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2f4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x2f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1f6>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a44      	ldr	r2, [pc, #272]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1f2>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4934      	ldr	r1, [pc, #208]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103a:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <HAL_GPIO_Init+0x300>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x300>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_GPIO_Init+0x300>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f aea2 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	3724      	adds	r7, #36	; 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	401a      	ands	r2, r3
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	429a      	cmp	r2, r3
 8001142:	d104      	bne.n	800114e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_PWR_EnterSLEEPMode+0x34>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001172:	f023 0304 	bic.w	r3, r3, #4
 8001176:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800117e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001180:	e002      	b.n	8001188 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001182:	bf40      	sev
    __WFE();
 8001184:	bf20      	wfe
    __WFE();
 8001186:	bf20      	wfe
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e25b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d075      	beq.n	80012a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4b9d      	ldr	r3, [pc, #628]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x108>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d157      	bne.n	80012a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e236      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x74>
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a90      	ldr	r2, [pc, #576]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x98>
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a87      	ldr	r2, [pc, #540]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 8001230:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a83      	ldr	r2, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a80      	ldr	r2, [pc, #512]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fce2 	bl	8000c18 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcde 	bl	8000c18 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1fb      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xc0>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fcce 	bl	8000c18 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcca 	bl	8000c18 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1e7      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0xe8>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1bb      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4952      	ldr	r1, [pc, #328]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fc83 	bl	8000c18 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fc7f 	bl	8000c18 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e19c      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4940      	ldr	r1, [pc, #256]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fc62 	bl	8000c18 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc5e 	bl	8000c18 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e17b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d030      	beq.n	80013e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fc42 	bl	8000c18 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc3e 	bl	8000c18 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e15b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x200>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fc2b 	bl	8000c18 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc27 	bl	8000c18 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e144      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a0 	beq.w	8001532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d121      	bne.n	8001472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbed 	bl	8000c18 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e011      	b.n	8001466 <HAL_RCC_OscConfig+0x2ce>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
 8001450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fbe0 	bl	8000c18 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0fd      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x4d4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	e01c      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x312>
 8001490:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a76      	ldr	r2, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a73      	ldr	r2, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	e00b      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 80014aa:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a70      	ldr	r2, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d015      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fba5 	bl	8000c18 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fba1 	bl	8000c18 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0bc      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	4b61      	ldr	r3, [pc, #388]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ee      	beq.n	80014d2 <HAL_RCC_OscConfig+0x33a>
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb8f 	bl	8000c18 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb8b 	bl	8000c18 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0a6      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d105      	bne.n	8001532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001526:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8092 	beq.w	8001660 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d05c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d141      	bne.n	80015d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fb5f 	bl	8000c18 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff fb5b 	bl	8000c18 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e078      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	019b      	lsls	r3, r3, #6
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	3b01      	subs	r3, #1
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4933      	ldr	r1, [pc, #204]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb34 	bl	8000c18 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb30 	bl	8000c18 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e04d      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x41c>
 80015d2:	e045      	b.n	8001660 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fb1d 	bl	8000c18 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb19 	bl	8000c18 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e036      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x44a>
 8001600:	e02e      	b.n	8001660 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e029      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	429a      	cmp	r2, r3
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d115      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800163c:	4293      	cmp	r3, r2
 800163e:	d10d      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d106      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000
 8001670:	40023800 	.word	0x40023800
 8001674:	42470060 	.word	0x42470060

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff fa56 	bl	8000c18 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff fa52 	bl	8000c18 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4601      	mov	r1, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	fa21 f303 	lsr.w	r3, r1, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f906 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	08005d54 	.word	0x08005d54
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d007      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x32>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d008      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x38>
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80b4 	bne.w	80019d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001872:	60bb      	str	r3, [r7, #8]
       break;
 8001874:	e0b3      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001878:	60bb      	str	r3, [r7, #8]
      break;
 800187a:	e0b0      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d04a      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	f04f 0400 	mov.w	r4, #0
 800189c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	ea03 0501 	and.w	r5, r3, r1
 80018a8:	ea04 0602 	and.w	r6, r4, r2
 80018ac:	4629      	mov	r1, r5
 80018ae:	4632      	mov	r2, r6
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f04f 0400 	mov.w	r4, #0
 80018b8:	0154      	lsls	r4, r2, #5
 80018ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018be:	014b      	lsls	r3, r1, #5
 80018c0:	4619      	mov	r1, r3
 80018c2:	4622      	mov	r2, r4
 80018c4:	1b49      	subs	r1, r1, r5
 80018c6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	f04f 0400 	mov.w	r4, #0
 80018d2:	0194      	lsls	r4, r2, #6
 80018d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018d8:	018b      	lsls	r3, r1, #6
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	eb64 0402 	sbc.w	r4, r4, r2
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	195b      	adds	r3, r3, r5
 80018f6:	eb44 0406 	adc.w	r4, r4, r6
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	0262      	lsls	r2, r4, #9
 8001904:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001908:	0259      	lsls	r1, r3, #9
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	f7fe fcaa 	bl	8000274 <__aeabi_uldivmod>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e049      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	ea03 0501 	and.w	r5, r3, r1
 800193e:	ea04 0602 	and.w	r6, r4, r2
 8001942:	4629      	mov	r1, r5
 8001944:	4632      	mov	r2, r6
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	0154      	lsls	r4, r2, #5
 8001950:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001954:	014b      	lsls	r3, r1, #5
 8001956:	4619      	mov	r1, r3
 8001958:	4622      	mov	r2, r4
 800195a:	1b49      	subs	r1, r1, r5
 800195c:	eb62 0206 	sbc.w	r2, r2, r6
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	0194      	lsls	r4, r2, #6
 800196a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	1a5b      	subs	r3, r3, r1
 8001972:	eb64 0402 	sbc.w	r4, r4, r2
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	00e2      	lsls	r2, r4, #3
 8001980:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001984:	00d9      	lsls	r1, r3, #3
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	195b      	adds	r3, r3, r5
 800198c:	eb44 0406 	adc.w	r4, r4, r6
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	02a2      	lsls	r2, r4, #10
 800199a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800199e:	0299      	lsls	r1, r3, #10
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0400 	mov.w	r4, #0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	f7fe fc5f 	bl	8000274 <__aeabi_uldivmod>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	60bb      	str	r3, [r7, #8]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019da:	60bb      	str	r3, [r7, #8]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	68bb      	ldr	r3, [r7, #8]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff0 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08005d64 	.word	0x08005d64

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffdc 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0b5b      	lsrs	r3, r3, #13
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08005d64 	.word	0x08005d64

08001a5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	220f      	movs	r2, #15
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_RCC_GetClockConfig+0x60>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e01d      	b.n	8001b0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f815 	bl	8001b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 f968 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d007      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d122      	bne.n	8001bce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d11b      	bne.n	8001bce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0202 	mvn.w	r2, #2
 8001b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8ee 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001bba:	e005      	b.n	8001bc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8e0 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8f1 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d122      	bne.n	8001c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d11b      	bne.n	8001c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0204 	mvn.w	r2, #4
 8001bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8c4 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001c0e:	e005      	b.n	8001c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8b6 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8c7 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d122      	bne.n	8001c76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11b      	bne.n	8001c76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0208 	mvn.w	r2, #8
 8001c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f89a 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001c62:	e005      	b.n	8001c70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f88c 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f89d 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d122      	bne.n	8001cca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0210 	mvn.w	r2, #16
 8001c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f870 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001cb6:	e005      	b.n	8001cc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f862 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f873 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0201 	mvn.w	r2, #1
 8001cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe fe13 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d10e      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b80      	cmp	r3, #128	; 0x80
 8001d10:	d107      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8e3 	bl	8001ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d10e      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f838 	bl	8001dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d10e      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d107      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0220 	mvn.w	r2, #32
 8001d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8ad 	bl	8001ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <TIM_Base_SetConfig+0xe4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00f      	beq.n	8001e0c <TIM_Base_SetConfig+0x38>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d00b      	beq.n	8001e0c <TIM_Base_SetConfig+0x38>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a31      	ldr	r2, [pc, #196]	; (8001ebc <TIM_Base_SetConfig+0xe8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d007      	beq.n	8001e0c <TIM_Base_SetConfig+0x38>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <TIM_Base_SetConfig+0xec>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <TIM_Base_SetConfig+0x38>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <TIM_Base_SetConfig+0xf0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d108      	bne.n	8001e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a25      	ldr	r2, [pc, #148]	; (8001eb8 <TIM_Base_SetConfig+0xe4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01b      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d017      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <TIM_Base_SetConfig+0xe8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <TIM_Base_SetConfig+0xec>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00f      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <TIM_Base_SetConfig+0xf0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <TIM_Base_SetConfig+0xf4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <TIM_Base_SetConfig+0xf8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0x8a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <TIM_Base_SetConfig+0xfc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d108      	bne.n	8001e70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <TIM_Base_SetConfig+0xe4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d103      	bne.n	8001ea4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	615a      	str	r2, [r3, #20]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800

08001ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e03f      	b.n	8001f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fd3c 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f829 	bl	8001f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fda:	f023 030c 	bic.w	r3, r3, #12
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002006:	f040 818b 	bne.w	8002320 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4ac1      	ldr	r2, [pc, #772]	; (8002314 <UART_SetConfig+0x37c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d005      	beq.n	8002020 <UART_SetConfig+0x88>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4abf      	ldr	r2, [pc, #764]	; (8002318 <UART_SetConfig+0x380>)
 800201a:	4293      	cmp	r3, r2
 800201c:	f040 80bd 	bne.w	800219a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002020:	f7ff fd08 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002024:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	461d      	mov	r5, r3
 800202a:	f04f 0600 	mov.w	r6, #0
 800202e:	46a8      	mov	r8, r5
 8002030:	46b1      	mov	r9, r6
 8002032:	eb18 0308 	adds.w	r3, r8, r8
 8002036:	eb49 0409 	adc.w	r4, r9, r9
 800203a:	4698      	mov	r8, r3
 800203c:	46a1      	mov	r9, r4
 800203e:	eb18 0805 	adds.w	r8, r8, r5
 8002042:	eb49 0906 	adc.w	r9, r9, r6
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002052:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002056:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800205a:	4688      	mov	r8, r1
 800205c:	4691      	mov	r9, r2
 800205e:	eb18 0005 	adds.w	r0, r8, r5
 8002062:	eb49 0106 	adc.w	r1, r9, r6
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	461d      	mov	r5, r3
 800206c:	f04f 0600 	mov.w	r6, #0
 8002070:	196b      	adds	r3, r5, r5
 8002072:	eb46 0406 	adc.w	r4, r6, r6
 8002076:	461a      	mov	r2, r3
 8002078:	4623      	mov	r3, r4
 800207a:	f7fe f8fb 	bl	8000274 <__aeabi_uldivmod>
 800207e:	4603      	mov	r3, r0
 8002080:	460c      	mov	r4, r1
 8002082:	461a      	mov	r2, r3
 8002084:	4ba5      	ldr	r3, [pc, #660]	; (800231c <UART_SetConfig+0x384>)
 8002086:	fba3 2302 	umull	r2, r3, r3, r2
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	461d      	mov	r5, r3
 8002094:	f04f 0600 	mov.w	r6, #0
 8002098:	46a9      	mov	r9, r5
 800209a:	46b2      	mov	sl, r6
 800209c:	eb19 0309 	adds.w	r3, r9, r9
 80020a0:	eb4a 040a 	adc.w	r4, sl, sl
 80020a4:	4699      	mov	r9, r3
 80020a6:	46a2      	mov	sl, r4
 80020a8:	eb19 0905 	adds.w	r9, r9, r5
 80020ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020c4:	4689      	mov	r9, r1
 80020c6:	4692      	mov	sl, r2
 80020c8:	eb19 0005 	adds.w	r0, r9, r5
 80020cc:	eb4a 0106 	adc.w	r1, sl, r6
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	461d      	mov	r5, r3
 80020d6:	f04f 0600 	mov.w	r6, #0
 80020da:	196b      	adds	r3, r5, r5
 80020dc:	eb46 0406 	adc.w	r4, r6, r6
 80020e0:	461a      	mov	r2, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7fe f8c6 	bl	8000274 <__aeabi_uldivmod>
 80020e8:	4603      	mov	r3, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <UART_SetConfig+0x384>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2164      	movs	r1, #100	; 0x64
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	3332      	adds	r3, #50	; 0x32
 8002102:	4a86      	ldr	r2, [pc, #536]	; (800231c <UART_SetConfig+0x384>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002110:	4498      	add	r8, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	461d      	mov	r5, r3
 8002116:	f04f 0600 	mov.w	r6, #0
 800211a:	46a9      	mov	r9, r5
 800211c:	46b2      	mov	sl, r6
 800211e:	eb19 0309 	adds.w	r3, r9, r9
 8002122:	eb4a 040a 	adc.w	r4, sl, sl
 8002126:	4699      	mov	r9, r3
 8002128:	46a2      	mov	sl, r4
 800212a:	eb19 0905 	adds.w	r9, r9, r5
 800212e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800213e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002146:	4689      	mov	r9, r1
 8002148:	4692      	mov	sl, r2
 800214a:	eb19 0005 	adds.w	r0, r9, r5
 800214e:	eb4a 0106 	adc.w	r1, sl, r6
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	461d      	mov	r5, r3
 8002158:	f04f 0600 	mov.w	r6, #0
 800215c:	196b      	adds	r3, r5, r5
 800215e:	eb46 0406 	adc.w	r4, r6, r6
 8002162:	461a      	mov	r2, r3
 8002164:	4623      	mov	r3, r4
 8002166:	f7fe f885 	bl	8000274 <__aeabi_uldivmod>
 800216a:	4603      	mov	r3, r0
 800216c:	460c      	mov	r4, r1
 800216e:	461a      	mov	r2, r3
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <UART_SetConfig+0x384>)
 8002172:	fba3 1302 	umull	r1, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2164      	movs	r1, #100	; 0x64
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	3332      	adds	r3, #50	; 0x32
 8002184:	4a65      	ldr	r2, [pc, #404]	; (800231c <UART_SetConfig+0x384>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 0207 	and.w	r2, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4442      	add	r2, r8
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e26f      	b.n	800267a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800219a:	f7ff fc37 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 800219e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	461d      	mov	r5, r3
 80021a4:	f04f 0600 	mov.w	r6, #0
 80021a8:	46a8      	mov	r8, r5
 80021aa:	46b1      	mov	r9, r6
 80021ac:	eb18 0308 	adds.w	r3, r8, r8
 80021b0:	eb49 0409 	adc.w	r4, r9, r9
 80021b4:	4698      	mov	r8, r3
 80021b6:	46a1      	mov	r9, r4
 80021b8:	eb18 0805 	adds.w	r8, r8, r5
 80021bc:	eb49 0906 	adc.w	r9, r9, r6
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021d4:	4688      	mov	r8, r1
 80021d6:	4691      	mov	r9, r2
 80021d8:	eb18 0005 	adds.w	r0, r8, r5
 80021dc:	eb49 0106 	adc.w	r1, r9, r6
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	461d      	mov	r5, r3
 80021e6:	f04f 0600 	mov.w	r6, #0
 80021ea:	196b      	adds	r3, r5, r5
 80021ec:	eb46 0406 	adc.w	r4, r6, r6
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	f7fe f83e 	bl	8000274 <__aeabi_uldivmod>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <UART_SetConfig+0x384>)
 8002200:	fba3 2302 	umull	r2, r3, r3, r2
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	461d      	mov	r5, r3
 800220e:	f04f 0600 	mov.w	r6, #0
 8002212:	46a9      	mov	r9, r5
 8002214:	46b2      	mov	sl, r6
 8002216:	eb19 0309 	adds.w	r3, r9, r9
 800221a:	eb4a 040a 	adc.w	r4, sl, sl
 800221e:	4699      	mov	r9, r3
 8002220:	46a2      	mov	sl, r4
 8002222:	eb19 0905 	adds.w	r9, r9, r5
 8002226:	eb4a 0a06 	adc.w	sl, sl, r6
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800223a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800223e:	4689      	mov	r9, r1
 8002240:	4692      	mov	sl, r2
 8002242:	eb19 0005 	adds.w	r0, r9, r5
 8002246:	eb4a 0106 	adc.w	r1, sl, r6
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	461d      	mov	r5, r3
 8002250:	f04f 0600 	mov.w	r6, #0
 8002254:	196b      	adds	r3, r5, r5
 8002256:	eb46 0406 	adc.w	r4, r6, r6
 800225a:	461a      	mov	r2, r3
 800225c:	4623      	mov	r3, r4
 800225e:	f7fe f809 	bl	8000274 <__aeabi_uldivmod>
 8002262:	4603      	mov	r3, r0
 8002264:	460c      	mov	r4, r1
 8002266:	461a      	mov	r2, r3
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <UART_SetConfig+0x384>)
 800226a:	fba3 1302 	umull	r1, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2164      	movs	r1, #100	; 0x64
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <UART_SetConfig+0x384>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800228a:	4498      	add	r8, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	461d      	mov	r5, r3
 8002290:	f04f 0600 	mov.w	r6, #0
 8002294:	46a9      	mov	r9, r5
 8002296:	46b2      	mov	sl, r6
 8002298:	eb19 0309 	adds.w	r3, r9, r9
 800229c:	eb4a 040a 	adc.w	r4, sl, sl
 80022a0:	4699      	mov	r9, r3
 80022a2:	46a2      	mov	sl, r4
 80022a4:	eb19 0905 	adds.w	r9, r9, r5
 80022a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c0:	4689      	mov	r9, r1
 80022c2:	4692      	mov	sl, r2
 80022c4:	eb19 0005 	adds.w	r0, r9, r5
 80022c8:	eb4a 0106 	adc.w	r1, sl, r6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	461d      	mov	r5, r3
 80022d2:	f04f 0600 	mov.w	r6, #0
 80022d6:	196b      	adds	r3, r5, r5
 80022d8:	eb46 0406 	adc.w	r4, r6, r6
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	f7fd ffc8 	bl	8000274 <__aeabi_uldivmod>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <UART_SetConfig+0x384>)
 80022ec:	fba3 1302 	umull	r1, r3, r3, r2
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	2164      	movs	r1, #100	; 0x64
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	3332      	adds	r3, #50	; 0x32
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <UART_SetConfig+0x384>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4442      	add	r2, r8
 8002310:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002312:	e1b2      	b.n	800267a <UART_SetConfig+0x6e2>
 8002314:	40011000 	.word	0x40011000
 8002318:	40011400 	.word	0x40011400
 800231c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4ad7      	ldr	r2, [pc, #860]	; (8002684 <UART_SetConfig+0x6ec>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d005      	beq.n	8002336 <UART_SetConfig+0x39e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4ad6      	ldr	r2, [pc, #856]	; (8002688 <UART_SetConfig+0x6f0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	f040 80d1 	bne.w	80024d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002336:	f7ff fb7d 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 800233a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	469a      	mov	sl, r3
 8002340:	f04f 0b00 	mov.w	fp, #0
 8002344:	46d0      	mov	r8, sl
 8002346:	46d9      	mov	r9, fp
 8002348:	eb18 0308 	adds.w	r3, r8, r8
 800234c:	eb49 0409 	adc.w	r4, r9, r9
 8002350:	4698      	mov	r8, r3
 8002352:	46a1      	mov	r9, r4
 8002354:	eb18 080a 	adds.w	r8, r8, sl
 8002358:	eb49 090b 	adc.w	r9, r9, fp
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002368:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800236c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002370:	4688      	mov	r8, r1
 8002372:	4691      	mov	r9, r2
 8002374:	eb1a 0508 	adds.w	r5, sl, r8
 8002378:	eb4b 0609 	adc.w	r6, fp, r9
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	0094      	lsls	r4, r2, #2
 8002390:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002394:	008b      	lsls	r3, r1, #2
 8002396:	461a      	mov	r2, r3
 8002398:	4623      	mov	r3, r4
 800239a:	4628      	mov	r0, r5
 800239c:	4631      	mov	r1, r6
 800239e:	f7fd ff69 	bl	8000274 <__aeabi_uldivmod>
 80023a2:	4603      	mov	r3, r0
 80023a4:	460c      	mov	r4, r1
 80023a6:	461a      	mov	r2, r3
 80023a8:	4bb8      	ldr	r3, [pc, #736]	; (800268c <UART_SetConfig+0x6f4>)
 80023aa:	fba3 2302 	umull	r2, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	469b      	mov	fp, r3
 80023b8:	f04f 0c00 	mov.w	ip, #0
 80023bc:	46d9      	mov	r9, fp
 80023be:	46e2      	mov	sl, ip
 80023c0:	eb19 0309 	adds.w	r3, r9, r9
 80023c4:	eb4a 040a 	adc.w	r4, sl, sl
 80023c8:	4699      	mov	r9, r3
 80023ca:	46a2      	mov	sl, r4
 80023cc:	eb19 090b 	adds.w	r9, r9, fp
 80023d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023e8:	4689      	mov	r9, r1
 80023ea:	4692      	mov	sl, r2
 80023ec:	eb1b 0509 	adds.w	r5, fp, r9
 80023f0:	eb4c 060a 	adc.w	r6, ip, sl
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	f04f 0400 	mov.w	r4, #0
 8002406:	0094      	lsls	r4, r2, #2
 8002408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800240c:	008b      	lsls	r3, r1, #2
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	4628      	mov	r0, r5
 8002414:	4631      	mov	r1, r6
 8002416:	f7fd ff2d 	bl	8000274 <__aeabi_uldivmod>
 800241a:	4603      	mov	r3, r0
 800241c:	460c      	mov	r4, r1
 800241e:	461a      	mov	r2, r3
 8002420:	4b9a      	ldr	r3, [pc, #616]	; (800268c <UART_SetConfig+0x6f4>)
 8002422:	fba3 1302 	umull	r1, r3, r3, r2
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2164      	movs	r1, #100	; 0x64
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	3332      	adds	r3, #50	; 0x32
 8002434:	4a95      	ldr	r2, [pc, #596]	; (800268c <UART_SetConfig+0x6f4>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002440:	4498      	add	r8, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	469b      	mov	fp, r3
 8002446:	f04f 0c00 	mov.w	ip, #0
 800244a:	46d9      	mov	r9, fp
 800244c:	46e2      	mov	sl, ip
 800244e:	eb19 0309 	adds.w	r3, r9, r9
 8002452:	eb4a 040a 	adc.w	r4, sl, sl
 8002456:	4699      	mov	r9, r3
 8002458:	46a2      	mov	sl, r4
 800245a:	eb19 090b 	adds.w	r9, r9, fp
 800245e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002476:	4689      	mov	r9, r1
 8002478:	4692      	mov	sl, r2
 800247a:	eb1b 0509 	adds.w	r5, fp, r9
 800247e:	eb4c 060a 	adc.w	r6, ip, sl
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f04f 0400 	mov.w	r4, #0
 8002494:	0094      	lsls	r4, r2, #2
 8002496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800249a:	008b      	lsls	r3, r1, #2
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	4628      	mov	r0, r5
 80024a2:	4631      	mov	r1, r6
 80024a4:	f7fd fee6 	bl	8000274 <__aeabi_uldivmod>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b77      	ldr	r3, [pc, #476]	; (800268c <UART_SetConfig+0x6f4>)
 80024b0:	fba3 1302 	umull	r1, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	2164      	movs	r1, #100	; 0x64
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	3332      	adds	r3, #50	; 0x32
 80024c2:	4a72      	ldr	r2, [pc, #456]	; (800268c <UART_SetConfig+0x6f4>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4442      	add	r2, r8
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	e0d0      	b.n	800267a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024d8:	f7ff fa98 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80024dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	469a      	mov	sl, r3
 80024e2:	f04f 0b00 	mov.w	fp, #0
 80024e6:	46d0      	mov	r8, sl
 80024e8:	46d9      	mov	r9, fp
 80024ea:	eb18 0308 	adds.w	r3, r8, r8
 80024ee:	eb49 0409 	adc.w	r4, r9, r9
 80024f2:	4698      	mov	r8, r3
 80024f4:	46a1      	mov	r9, r4
 80024f6:	eb18 080a 	adds.w	r8, r8, sl
 80024fa:	eb49 090b 	adc.w	r9, r9, fp
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800250a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800250e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002512:	4688      	mov	r8, r1
 8002514:	4691      	mov	r9, r2
 8002516:	eb1a 0508 	adds.w	r5, sl, r8
 800251a:	eb4b 0609 	adc.w	r6, fp, r9
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4619      	mov	r1, r3
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	0094      	lsls	r4, r2, #2
 8002532:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002536:	008b      	lsls	r3, r1, #2
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	4628      	mov	r0, r5
 800253e:	4631      	mov	r1, r6
 8002540:	f7fd fe98 	bl	8000274 <__aeabi_uldivmod>
 8002544:	4603      	mov	r3, r0
 8002546:	460c      	mov	r4, r1
 8002548:	461a      	mov	r2, r3
 800254a:	4b50      	ldr	r3, [pc, #320]	; (800268c <UART_SetConfig+0x6f4>)
 800254c:	fba3 2302 	umull	r2, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	469b      	mov	fp, r3
 800255a:	f04f 0c00 	mov.w	ip, #0
 800255e:	46d9      	mov	r9, fp
 8002560:	46e2      	mov	sl, ip
 8002562:	eb19 0309 	adds.w	r3, r9, r9
 8002566:	eb4a 040a 	adc.w	r4, sl, sl
 800256a:	4699      	mov	r9, r3
 800256c:	46a2      	mov	sl, r4
 800256e:	eb19 090b 	adds.w	r9, r9, fp
 8002572:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800258a:	4689      	mov	r9, r1
 800258c:	4692      	mov	sl, r2
 800258e:	eb1b 0509 	adds.w	r5, fp, r9
 8002592:	eb4c 060a 	adc.w	r6, ip, sl
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f04f 0400 	mov.w	r4, #0
 80025a8:	0094      	lsls	r4, r2, #2
 80025aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ae:	008b      	lsls	r3, r1, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	4631      	mov	r1, r6
 80025b8:	f7fd fe5c 	bl	8000274 <__aeabi_uldivmod>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <UART_SetConfig+0x6f4>)
 80025c4:	fba3 1302 	umull	r1, r3, r3, r2
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	2164      	movs	r1, #100	; 0x64
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	3332      	adds	r3, #50	; 0x32
 80025d6:	4a2d      	ldr	r2, [pc, #180]	; (800268c <UART_SetConfig+0x6f4>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e2:	4498      	add	r8, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	469b      	mov	fp, r3
 80025e8:	f04f 0c00 	mov.w	ip, #0
 80025ec:	46d9      	mov	r9, fp
 80025ee:	46e2      	mov	sl, ip
 80025f0:	eb19 0309 	adds.w	r3, r9, r9
 80025f4:	eb4a 040a 	adc.w	r4, sl, sl
 80025f8:	4699      	mov	r9, r3
 80025fa:	46a2      	mov	sl, r4
 80025fc:	eb19 090b 	adds.w	r9, r9, fp
 8002600:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002618:	4689      	mov	r9, r1
 800261a:	4692      	mov	sl, r2
 800261c:	eb1b 0509 	adds.w	r5, fp, r9
 8002620:	eb4c 060a 	adc.w	r6, ip, sl
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f04f 0400 	mov.w	r4, #0
 8002636:	0094      	lsls	r4, r2, #2
 8002638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800263c:	008b      	lsls	r3, r1, #2
 800263e:	461a      	mov	r2, r3
 8002640:	4623      	mov	r3, r4
 8002642:	4628      	mov	r0, r5
 8002644:	4631      	mov	r1, r6
 8002646:	f7fd fe15 	bl	8000274 <__aeabi_uldivmod>
 800264a:	4603      	mov	r3, r0
 800264c:	460c      	mov	r4, r1
 800264e:	461a      	mov	r2, r3
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <UART_SetConfig+0x6f4>)
 8002652:	fba3 1302 	umull	r1, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2164      	movs	r1, #100	; 0x64
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <UART_SetConfig+0x6f4>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4442      	add	r2, r8
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	e7ff      	b.n	800267a <UART_SetConfig+0x6e2>
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	40011000 	.word	0x40011000
 8002688:	40011400 	.word	0x40011400
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0208 	add.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0208 	add.w	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0208 	add.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d103      	bne.n	8002752 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00c      	b.n	800276c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3308      	adds	r3, #8
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <vListInsert+0x2e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d2f6      	bcs.n	800275a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ffb9 	bl	8003784 <pvPortMalloc>
 8002812:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800281a:	2058      	movs	r0, #88	; 0x58
 800281c:	f000 ffb2 	bl	8003784 <pvPortMalloc>
 8002820:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
 800282e:	e005      	b.n	800283c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f001 f883 	bl	800393c <vPortFree>
 8002836:	e001      	b.n	800283c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	2300      	movs	r3, #0
 8002846:	9303      	str	r3, [sp, #12]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f80e 	bl	800287a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800285e:	69f8      	ldr	r0, [r7, #28]
 8002860:	f000 f8a0 	bl	80029a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e002      	b.n	8002870 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800286e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002870:	69bb      	ldr	r3, [r7, #24]
    }
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b088      	sub	sp, #32
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	461a      	mov	r2, r3
 8002892:	21a5      	movs	r1, #165	; 0xa5
 8002894:	f003 f9c2 	bl	8005c1c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a2:	3b01      	subs	r3, #1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <prvInitialiseNewTask+0x56>
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e7fe      	b.n	80028ce <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01f      	beq.n	8002916 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e012      	b.n	8002902 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	7819      	ldrb	r1, [r3, #0]
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	3334      	adds	r3, #52	; 0x34
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d9e9      	bls.n	80028dc <prvInitialiseNewTask+0x62>
 8002908:	e000      	b.n	800290c <prvInitialiseNewTask+0x92>
            {
                break;
 800290a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002914:	e003      	b.n	800291e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	2b04      	cmp	r3, #4
 8002922:	d901      	bls.n	8002928 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002924:	2304      	movs	r3, #4
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002932:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3304      	adds	r3, #4
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fec6 	bl	80026d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	3318      	adds	r3, #24
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fec1 	bl	80026d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002952:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	f1c3 0205 	rsb	r2, r3, #5
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	3350      	adds	r3, #80	; 0x50
 8002968:	2204      	movs	r2, #4
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f003 f955 	bl	8005c1c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	3354      	adds	r3, #84	; 0x54
 8002976:	2201      	movs	r2, #1
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f94e 	bl	8005c1c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	69b8      	ldr	r0, [r7, #24]
 8002986:	f000 fc39 	bl	80031fc <pxPortInitialiseStack>
 800298a:	4602      	mov	r2, r0
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800299c:	bf00      	nop
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029ac:	f000 fdca 	bl	8003544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029b0:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <prvAddNewTaskToReadyList+0xfc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <prvAddNewTaskToReadyList+0xfc>)
 80029b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <prvAddNewTaskToReadyList+0x100>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029c2:	4a38      	ldr	r2, [pc, #224]	; (8002aa4 <prvAddNewTaskToReadyList+0x100>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <prvAddNewTaskToReadyList+0xfc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d110      	bne.n	80029f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029d0:	f000 fb04 	bl	8002fdc <prvInitialiseTaskLists>
 80029d4:	e00d      	b.n	80029f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029d6:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <prvAddNewTaskToReadyList+0x104>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <prvAddNewTaskToReadyList+0x100>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d802      	bhi.n	80029f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <prvAddNewTaskToReadyList+0x100>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <prvAddNewTaskToReadyList+0x108>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <prvAddNewTaskToReadyList+0x108>)
 80029fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <prvAddNewTaskToReadyList+0x108>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <prvAddNewTaskToReadyList+0x94>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fe55 	bl	80056bc <SEGGER_SYSVIEW_OnTaskCreate>
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	461d      	mov	r5, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461c      	mov	r4, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	1ae3      	subs	r3, r4, r3
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	462b      	mov	r3, r5
 8002a34:	f001 f946 	bl	8003cc4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fec2 	bl	80057c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	2201      	movs	r2, #1
 8002a46:	409a      	lsls	r2, r3
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <prvAddNewTaskToReadyList+0x10c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <prvAddNewTaskToReadyList+0x10c>)
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <prvAddNewTaskToReadyList+0x110>)
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7ff fe3e 	bl	80026ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a6e:	f000 fd97 	bl	80035a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <prvAddNewTaskToReadyList+0x104>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <prvAddNewTaskToReadyList+0x100>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <prvAddNewTaskToReadyList+0x114>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa0:	20000108 	.word	0x20000108
 8002aa4:	20000030 	.word	0x20000030
 8002aa8:	20000114 	.word	0x20000114
 8002aac:	20000124 	.word	0x20000124
 8002ab0:	20000110 	.word	0x20000110
 8002ab4:	20000034 	.word	0x20000034
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01a      	beq.n	8002b04 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <vTaskDelay+0x68>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <vTaskDelay+0x2e>
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	e7fe      	b.n	8002ae8 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8002aea:	f000 f879 	bl	8002be0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	2023      	movs	r0, #35	; 0x23
 8002af2:	f002 f9ef 	bl	8004ed4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002af6:	2100      	movs	r1, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fb07 	bl	800310c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002afe:	f000 f87d 	bl	8002bfc <xTaskResumeAll>
 8002b02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <vTaskDelay+0x6c>)
 8002b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000130 	.word	0x20000130
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <vTaskStartScheduler+0x94>)
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2282      	movs	r2, #130	; 0x82
 8002b3e:	4921      	ldr	r1, [pc, #132]	; (8002bc4 <vTaskStartScheduler+0x98>)
 8002b40:	4821      	ldr	r0, [pc, #132]	; (8002bc8 <vTaskStartScheduler+0x9c>)
 8002b42:	f7ff fe59 	bl	80027f8 <xTaskCreate>
 8002b46:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d123      	bne.n	8002b96 <vTaskStartScheduler+0x6a>
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <vTaskStartScheduler+0xa0>)
 8002b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b66:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <vTaskStartScheduler+0xa4>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <vTaskStartScheduler+0xa8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <vTaskStartScheduler+0xac>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <vTaskStartScheduler+0x94>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d102      	bne.n	8002b86 <vTaskStartScheduler+0x5a>
 8002b80:	f002 fd80 	bl	8005684 <SEGGER_SYSVIEW_OnIdle>
 8002b84:	e004      	b.n	8002b90 <vTaskStartScheduler+0x64>
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <vTaskStartScheduler+0xac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fdd8 	bl	8005740 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b90:	f000 fbc0 	bl	8003314 <xPortStartScheduler>
 8002b94:	e00d      	b.n	8002bb2 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9c:	d109      	bne.n	8002bb2 <vTaskStartScheduler+0x86>
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	e7fe      	b.n	8002bb0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <vTaskStartScheduler+0xb0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000012c 	.word	0x2000012c
 8002bc4:	08005c98 	.word	0x08005c98
 8002bc8:	08002fa9 	.word	0x08002fa9
 8002bcc:	20000128 	.word	0x20000128
 8002bd0:	20000114 	.word	0x20000114
 8002bd4:	2000010c 	.word	0x2000010c
 8002bd8:	20000030 	.word	0x20000030
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <vTaskSuspendAll+0x18>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <vTaskSuspendAll+0x18>)
 8002bec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	20000130 	.word	0x20000130

08002bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <xTaskResumeAll+0x11c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <xTaskResumeAll+0x2a>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	e7fe      	b.n	8002c24 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c26:	f000 fc8d 	bl	8003544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <xTaskResumeAll+0x11c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <xTaskResumeAll+0x11c>)
 8002c32:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c34:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <xTaskResumeAll+0x11c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d165      	bne.n	8002d08 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <xTaskResumeAll+0x120>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d061      	beq.n	8002d08 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c44:	e032      	b.n	8002cac <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <xTaskResumeAll+0x124>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3318      	adds	r3, #24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fda6 	bl	80027a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fda1 	bl	80027a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fdad 	bl	80057c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <xTaskResumeAll+0x128>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <xTaskResumeAll+0x128>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <xTaskResumeAll+0x12c>)
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f7ff fd29 	bl	80026ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <xTaskResumeAll+0x130>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <xTaskResumeAll+0x134>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <xTaskResumeAll+0x124>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1c8      	bne.n	8002c46 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cba:	f000 fa0b 	bl	80030d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <xTaskResumeAll+0x138>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cca:	f000 f849 	bl	8002d60 <xTaskIncrementTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <xTaskResumeAll+0x134>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f1      	bne.n	8002cca <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <xTaskResumeAll+0x138>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <xTaskResumeAll+0x134>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <xTaskResumeAll+0x13c>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d08:	f000 fc4a 	bl	80035a0 <vPortExitCritical>

    return xAlreadyYielded;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000130 	.word	0x20000130
 8002d1c:	20000108 	.word	0x20000108
 8002d20:	200000c8 	.word	0x200000c8
 8002d24:	20000110 	.word	0x20000110
 8002d28:	20000034 	.word	0x20000034
 8002d2c:	20000030 	.word	0x20000030
 8002d30:	2000011c 	.word	0x2000011c
 8002d34:	20000118 	.word	0x20000118
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f000 fce1 	bl	8003708 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <xTaskGetTickCountFromISR+0x20>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d50:	683b      	ldr	r3, [r7, #0]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000010c 	.word	0x2000010c

08002d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6a:	4b50      	ldr	r3, [pc, #320]	; (8002eac <xTaskIncrementTick+0x14c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8091 	bne.w	8002e96 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <xTaskIncrementTick+0x150>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <xTaskIncrementTick+0x150>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11f      	bne.n	8002dc8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <xTaskIncrementTick+0x46>
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	e7fe      	b.n	8002da4 <xTaskIncrementTick+0x44>
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <xTaskIncrementTick+0x158>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <xTaskIncrementTick+0x158>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <xTaskIncrementTick+0x15c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4a3e      	ldr	r2, [pc, #248]	; (8002ebc <xTaskIncrementTick+0x15c>)
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	f000 f986 	bl	80030d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d34c      	bcc.n	8002e6c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de2:	601a      	str	r2, [r3, #0]
                    break;
 8002de4:	e042      	b.n	8002e6c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002dfe:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e04:	e032      	b.n	8002e6c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fcca 	bl	80027a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fcc1 	bl	80027a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f002 fccd 	bl	80057c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <xTaskIncrementTick+0x164>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <xTaskIncrementTick+0x164>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <xTaskIncrementTick+0x168>)
 8002e4a:	441a      	add	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7ff fc49 	bl	80026ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <xTaskIncrementTick+0x16c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3b5      	bcc.n	8002dd2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e6a:	e7b2      	b.n	8002dd2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <xTaskIncrementTick+0x16c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4915      	ldr	r1, [pc, #84]	; (8002ec8 <xTaskIncrementTick+0x168>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d901      	bls.n	8002e88 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <xTaskIncrementTick+0x170>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e004      	b.n	8002ea0 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <xTaskIncrementTick+0x174>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <xTaskIncrementTick+0x174>)
 8002e9e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002ea0:	697b      	ldr	r3, [r7, #20]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000130 	.word	0x20000130
 8002eb0:	2000010c 	.word	0x2000010c
 8002eb4:	200000c0 	.word	0x200000c0
 8002eb8:	200000c4 	.word	0x200000c4
 8002ebc:	20000120 	.word	0x20000120
 8002ec0:	20000128 	.word	0x20000128
 8002ec4:	20000110 	.word	0x20000110
 8002ec8:	20000034 	.word	0x20000034
 8002ecc:	20000030 	.word	0x20000030
 8002ed0:	2000011c 	.word	0x2000011c
 8002ed4:	20000118 	.word	0x20000118

08002ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <vTaskSwitchContext+0xb8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ee6:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <vTaskSwitchContext+0xbc>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002eec:	e04c      	b.n	8002f88 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <vTaskSwitchContext+0xbc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <vTaskSwitchContext+0xc0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	f1c3 031f 	rsb	r3, r3, #31
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	4924      	ldr	r1, [pc, #144]	; (8002f9c <vTaskSwitchContext+0xc4>)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	e7fe      	b.n	8002f30 <vTaskSwitchContext+0x58>
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <vTaskSwitchContext+0xc4>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	3308      	adds	r3, #8
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d104      	bne.n	8002f62 <vTaskSwitchContext+0x8a>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <vTaskSwitchContext+0xc8>)
 8002f6a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <vTaskSwitchContext+0xc8>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <vTaskSwitchContext+0xcc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d102      	bne.n	8002f7e <vTaskSwitchContext+0xa6>
 8002f78:	f002 fb84 	bl	8005684 <SEGGER_SYSVIEW_OnIdle>
}
 8002f7c:	e004      	b.n	8002f88 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <vTaskSwitchContext+0xc8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fbdc 	bl	8005740 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f88:	bf00      	nop
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000130 	.word	0x20000130
 8002f94:	2000011c 	.word	0x2000011c
 8002f98:	20000110 	.word	0x20000110
 8002f9c:	20000034 	.word	0x20000034
 8002fa0:	20000030 	.word	0x20000030
 8002fa4:	2000012c 	.word	0x2000012c

08002fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002fb0:	f000 f854 	bl	800305c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <prvIdleTask+0x2c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d907      	bls.n	8002fcc <prvIdleTask+0x24>
                {
                    taskYIELD();
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <prvIdleTask+0x30>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8002fcc:	f7fd fc9e 	bl	800090c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002fd0:	e7ee      	b.n	8002fb0 <prvIdleTask+0x8>
 8002fd2:	bf00      	nop
 8002fd4:	20000034 	.word	0x20000034
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	e00c      	b.n	8003002 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <prvInitialiseTaskLists+0x60>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb4a 	bl	8002690 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d9ef      	bls.n	8002fe8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <prvInitialiseTaskLists+0x64>)
 800300a:	f7ff fb41 	bl	8002690 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800300e:	480d      	ldr	r0, [pc, #52]	; (8003044 <prvInitialiseTaskLists+0x68>)
 8003010:	f7ff fb3e 	bl	8002690 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <prvInitialiseTaskLists+0x6c>)
 8003016:	f7ff fb3b 	bl	8002690 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800301a:	480c      	ldr	r0, [pc, #48]	; (800304c <prvInitialiseTaskLists+0x70>)
 800301c:	f7ff fb38 	bl	8002690 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <prvInitialiseTaskLists+0x74>)
 8003022:	f7ff fb35 	bl	8002690 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <prvInitialiseTaskLists+0x78>)
 8003028:	4a05      	ldr	r2, [pc, #20]	; (8003040 <prvInitialiseTaskLists+0x64>)
 800302a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <prvInitialiseTaskLists+0x7c>)
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <prvInitialiseTaskLists+0x68>)
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000034 	.word	0x20000034
 8003040:	20000098 	.word	0x20000098
 8003044:	200000ac 	.word	0x200000ac
 8003048:	200000c8 	.word	0x200000c8
 800304c:	200000dc 	.word	0x200000dc
 8003050:	200000f4 	.word	0x200000f4
 8003054:	200000c0 	.word	0x200000c0
 8003058:	200000c4 	.word	0x200000c4

0800305c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003062:	e019      	b.n	8003098 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003064:	f000 fa6e 	bl	8003544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <prvCheckTasksWaitingTermination+0x4c>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb95 	bl	80027a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <prvCheckTasksWaitingTermination+0x50>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <prvCheckTasksWaitingTermination+0x50>)
 8003082:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvCheckTasksWaitingTermination+0x54>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <prvCheckTasksWaitingTermination+0x54>)
 800308c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800308e:	f000 fa87 	bl	80035a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f80e 	bl	80030b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <prvCheckTasksWaitingTermination+0x54>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e1      	bne.n	8003064 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200000dc 	.word	0x200000dc
 80030ac:	20000108 	.word	0x20000108
 80030b0:	200000f0 	.word	0x200000f0

080030b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc3b 	bl	800393c <vPortFree>
                vPortFree( pxTCB );
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fc38 	bl	800393c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <prvResetNextTaskUnblockTime+0x30>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <prvResetNextTaskUnblockTime+0x34>)
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030ea:	e005      	b.n	80030f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <prvResetNextTaskUnblockTime+0x30>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <prvResetNextTaskUnblockTime+0x34>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	200000c0 	.word	0x200000c0
 8003108:	20000128 	.word	0x20000128

0800310c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003116:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3304      	adds	r3, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fb3e 	bl	80027a4 <uxListRemove>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2201      	movs	r2, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4013      	ands	r3, r2
 8003142:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003144:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314c:	d110      	bne.n	8003170 <prvAddCurrentTaskToDelayedList+0x64>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	211b      	movs	r1, #27
 800315a:	4618      	mov	r0, r3
 800315c:	f002 fb74 	bl	8005848 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4820      	ldr	r0, [pc, #128]	; (80031ec <prvAddCurrentTaskToDelayedList+0xe0>)
 800316a:	f7ff fabe 	bl	80026ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800316e:	e032      	b.n	80031d6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d20f      	bcs.n	80031a8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2104      	movs	r1, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fb5a 	bl	8005848 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7ff fac6 	bl	8002732 <vListInsert>
}
 80031a6:	e016      	b.n	80031d6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2104      	movs	r1, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fb4a 	bl	8005848 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7ff fab6 	bl	8002732 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d202      	bcs.n	80031d6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000010c 	.word	0x2000010c
 80031e4:	20000030 	.word	0x20000030
 80031e8:	20000110 	.word	0x20000110
 80031ec:	200000f4 	.word	0x200000f4
 80031f0:	200000c4 	.word	0x200000c4
 80031f4:	200000c0 	.word	0x200000c0
 80031f8:	20000128 	.word	0x20000128

080031fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b04      	subs	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003214:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b04      	subs	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3b04      	subs	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800322c:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <pxPortInitialiseStack+0x64>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3b14      	subs	r3, #20
 8003236:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b04      	subs	r3, #4
 8003242:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f06f 0202 	mvn.w	r2, #2
 800324a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b20      	subs	r3, #32
 8003250:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	08003265 	.word	0x08003265

08003264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <prvTaskExitError+0x50>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003276:	d009      	beq.n	800328c <prvTaskExitError+0x28>
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e7fe      	b.n	800328a <prvTaskExitError+0x26>
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800329e:	bf00      	nop
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0fc      	beq.n	80032a0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010
	...

080032c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <pxCurrentTCBConst2>)
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	6808      	ldr	r0, [r1, #0]
 80032c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	f380 8809 	msr	PSP, r0
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f380 8811 	msr	BASEPRI, r0
 80032da:	4770      	bx	lr
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst2>:
 80032e0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <prvPortStartFirstTask+0x24>)
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f380 8808 	msr	MSP, r0
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f380 8814 	msr	CONTROL, r0
 80032fa:	b662      	cpsie	i
 80032fc:	b661      	cpsie	f
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	df00      	svc	0
 8003308:	bf00      	nop
 800330a:	0000      	.short	0x0000
 800330c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop

08003314 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <xPortStartScheduler+0x118>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a44      	ldr	r2, [pc, #272]	; (8003430 <xPortStartScheduler+0x11c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d109      	bne.n	8003338 <xPortStartScheduler+0x24>
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	e7fe      	b.n	8003336 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <xPortStartScheduler+0x118>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <xPortStartScheduler+0x120>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d109      	bne.n	8003356 <xPortStartScheduler+0x42>
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e7fe      	b.n	8003354 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <xPortStartScheduler+0x124>)
 8003358:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b30      	ldr	r3, [pc, #192]	; (800343c <xPortStartScheduler+0x128>)
 800337c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <xPortStartScheduler+0x12c>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003384:	e009      	b.n	800339a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <xPortStartScheduler+0x12c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <xPortStartScheduler+0x12c>)
 800338e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d0ef      	beq.n	8003386 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <xPortStartScheduler+0x12c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d009      	beq.n	80033c6 <xPortStartScheduler+0xb2>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e7fe      	b.n	80033c4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <xPortStartScheduler+0x12c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <xPortStartScheduler+0x12c>)
 80033ce:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <xPortStartScheduler+0x12c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <xPortStartScheduler+0x12c>)
 80033da:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <xPortStartScheduler+0x130>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a16      	ldr	r2, [pc, #88]	; (8003444 <xPortStartScheduler+0x130>)
 80033ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <xPortStartScheduler+0x130>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <xPortStartScheduler+0x130>)
 80033f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80033fc:	f000 f954 	bl	80036a8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <xPortStartScheduler+0x134>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003406:	f000 f973 	bl	80036f0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <xPortStartScheduler+0x138>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <xPortStartScheduler+0x138>)
 8003410:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003414:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003416:	f7ff ff67 	bl	80032e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800341a:	f7ff fd5d 	bl	8002ed8 <vTaskSwitchContext>
    prvTaskExitError();
 800341e:	f7ff ff21 	bl	8003264 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	410fc271 	.word	0x410fc271
 8003434:	410fc270 	.word	0x410fc270
 8003438:	e000e400 	.word	0xe000e400
 800343c:	20000134 	.word	0x20000134
 8003440:	20000138 	.word	0x20000138
 8003444:	e000ed20 	.word	0xe000ed20
 8003448:	20000010 	.word	0x20000010
 800344c:	e000ef34 	.word	0xe000ef34

08003450 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <vInitPrioGroupValue+0xdc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a35      	ldr	r2, [pc, #212]	; (8003530 <vInitPrioGroupValue+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d109      	bne.n	8003474 <vInitPrioGroupValue+0x24>
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e7fe      	b.n	8003472 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003474:	4b2d      	ldr	r3, [pc, #180]	; (800352c <vInitPrioGroupValue+0xdc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <vInitPrioGroupValue+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d109      	bne.n	8003492 <vInitPrioGroupValue+0x42>
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e7fe      	b.n	8003490 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003492:	4b29      	ldr	r3, [pc, #164]	; (8003538 <vInitPrioGroupValue+0xe8>)
 8003494:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <vInitPrioGroupValue+0xec>)
 80034b8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <vInitPrioGroupValue+0xf0>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034c0:	e009      	b.n	80034d6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <vInitPrioGroupValue+0xf0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <vInitPrioGroupValue+0xf0>)
 80034ca:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d0ef      	beq.n	80034c2 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <vInitPrioGroupValue+0xf0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d009      	beq.n	8003502 <vInitPrioGroupValue+0xb2>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	e7fe      	b.n	8003500 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <vInitPrioGroupValue+0xf0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <vInitPrioGroupValue+0xf0>)
 800350a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <vInitPrioGroupValue+0xf0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003514:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <vInitPrioGroupValue+0xf0>)
 8003516:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	410fc271 	.word	0x410fc271
 8003534:	410fc270 	.word	0x410fc270
 8003538:	e000e400 	.word	0xe000e400
 800353c:	20000134 	.word	0x20000134
 8003540:	20000138 	.word	0x20000138

08003544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <vPortEnterCritical+0x54>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <vPortEnterCritical+0x54>)
 8003564:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <vPortEnterCritical+0x54>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <vPortEnterCritical+0x58>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <vPortEnterCritical+0x48>
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	e7fe      	b.n	800358a <vPortEnterCritical+0x46>
    }
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	20000010 	.word	0x20000010
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <vPortExitCritical+0x4c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <vPortExitCritical+0x22>
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	e7fe      	b.n	80035c0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <vPortExitCritical+0x4c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <vPortExitCritical+0x4c>)
 80035ca:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <vPortExitCritical+0x4c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <vPortExitCritical+0x3e>
 80035d4:	2300      	movs	r3, #0
 80035d6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010

080035f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80035f0:	f3ef 8009 	mrs	r0, PSP
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <pxCurrentTCBConst>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f01e 0f10 	tst.w	lr, #16
 8003600:	bf08      	it	eq
 8003602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	6010      	str	r0, [r2, #0]
 800360c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003614:	f380 8811 	msr	BASEPRI, r0
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f7ff fc5a 	bl	8002ed8 <vTaskSwitchContext>
 8003624:	f04f 0000 	mov.w	r0, #0
 8003628:	f380 8811 	msr	BASEPRI, r0
 800362c:	bc09      	pop	{r0, r3}
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003636:	f01e 0f10 	tst.w	lr, #16
 800363a:	bf08      	it	eq
 800363c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003640:	f380 8809 	msr	PSP, r0
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	f3af 8000 	nop.w

08003650 <pxCurrentTCBConst>:
 8003650:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003670:	f001 ff8e 	bl	8005590 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003674:	f7ff fb74 	bl	8002d60 <xTaskIncrementTick>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800367e:	f001 ffe5 	bl	800564c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <SysTick_Handler+0x4c>)
 8003684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e001      	b.n	8003690 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800368c:	f001 ffc2 	bl	8005614 <SEGGER_SYSVIEW_RecordExitISR>
 8003690:	2300      	movs	r3, #0
 8003692:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <vPortSetupTimerInterrupt+0x34>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <vPortSetupTimerInterrupt+0x38>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <vPortSetupTimerInterrupt+0x3c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <vPortSetupTimerInterrupt+0x40>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	4a09      	ldr	r2, [pc, #36]	; (80036ec <vPortSetupTimerInterrupt+0x44>)
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <vPortSetupTimerInterrupt+0x34>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010
 80036e0:	e000e018 	.word	0xe000e018
 80036e4:	20000000 	.word	0x20000000
 80036e8:	10624dd3 	.word	0x10624dd3
 80036ec:	e000e014 	.word	0xe000e014

080036f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003700 <vPortEnableVFP+0x10>
 80036f4:	6801      	ldr	r1, [r0, #0]
 80036f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036fa:	6001      	str	r1, [r0, #0]
 80036fc:	4770      	bx	lr
 80036fe:	0000      	.short	0x0000
 8003700:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800370e:	f3ef 8305 	mrs	r3, IPSR
 8003712:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	d913      	bls.n	8003742 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <vPortValidateInterruptPriority+0x6c>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <vPortValidateInterruptPriority+0x70>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	7afa      	ldrb	r2, [r7, #11]
 800372a:	429a      	cmp	r2, r3
 800372c:	d209      	bcs.n	8003742 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e7fe      	b.n	8003740 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <vPortValidateInterruptPriority+0x74>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <vPortValidateInterruptPriority+0x78>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d909      	bls.n	8003766 <vPortValidateInterruptPriority+0x5e>
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	e7fe      	b.n	8003764 <vPortValidateInterruptPriority+0x5c>
    }
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e3f0 	.word	0xe000e3f0
 8003778:	20000134 	.word	0x20000134
 800377c:	e000ed0c 	.word	0xe000ed0c
 8003780:	20000138 	.word	0x20000138

08003784 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003790:	f7ff fa26 	bl	8002be0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003794:	4b63      	ldr	r3, [pc, #396]	; (8003924 <pvPortMalloc+0x1a0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800379c:	f000 f92e 	bl	80039fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <pvPortMalloc+0x1a4>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 80a5 	bne.w	80038f8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02c      	beq.n	800380e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037b4:	2208      	movs	r2, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d226      	bcs.n	800380e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80037c0:	2208      	movs	r2, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d020      	beq.n	8003814 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	3308      	adds	r3, #8
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d213      	bcs.n	8003808 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	3308      	adds	r3, #8
 80037e8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <pvPortMalloc+0x90>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e7fe      	b.n	8003806 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800380c:	e002      	b.n	8003814 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	e000      	b.n	8003816 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003814:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d06d      	beq.n	80038f8 <pvPortMalloc+0x174>
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <pvPortMalloc+0x1a8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d868      	bhi.n	80038f8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003826:	4b42      	ldr	r3, [pc, #264]	; (8003930 <pvPortMalloc+0x1ac>)
 8003828:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <pvPortMalloc+0x1ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003830:	e004      	b.n	800383c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d903      	bls.n	800384e <pvPortMalloc+0xca>
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f1      	bne.n	8003832 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <pvPortMalloc+0x1a0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	429a      	cmp	r2, r3
 8003856:	d04f      	beq.n	80038f8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	4413      	add	r3, r2
 8003860:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	2308      	movs	r3, #8
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	429a      	cmp	r2, r3
 8003878:	d91e      	bls.n	80038b8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <pvPortMalloc+0x11c>
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e7fe      	b.n	800389e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038b2:	69b8      	ldr	r0, [r7, #24]
 80038b4:	f000 f904 	bl	8003ac0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <pvPortMalloc+0x1a8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <pvPortMalloc+0x1a8>)
 80038c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <pvPortMalloc+0x1a8>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <pvPortMalloc+0x1b0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d203      	bcs.n	80038da <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <pvPortMalloc+0x1a8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <pvPortMalloc+0x1b0>)
 80038d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <pvPortMalloc+0x1a4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <pvPortMalloc+0x1b4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a10      	ldr	r2, [pc, #64]	; (8003938 <pvPortMalloc+0x1b4>)
 80038f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038f8:	f7ff f980 	bl	8002bfc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <pvPortMalloc+0x196>
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e7fe      	b.n	8003918 <pvPortMalloc+0x194>
    return pvReturn;
 800391a:	69fb      	ldr	r3, [r7, #28]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3728      	adds	r7, #40	; 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20019144 	.word	0x20019144
 8003928:	20019158 	.word	0x20019158
 800392c:	20019148 	.word	0x20019148
 8003930:	2001913c 	.word	0x2001913c
 8003934:	2001914c 	.word	0x2001914c
 8003938:	20019150 	.word	0x20019150

0800393c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04b      	beq.n	80039e6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800394e:	2308      	movs	r3, #8
 8003950:	425b      	negs	r3, r3
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4413      	add	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <vPortFree+0xb4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <vPortFree+0x42>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e7fe      	b.n	800397c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <vPortFree+0x5e>
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	e7fe      	b.n	8003998 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <vPortFree+0xb4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01e      	beq.n	80039e6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11a      	bne.n	80039e6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <vPortFree+0xb4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	401a      	ands	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039c0:	f7ff f90e 	bl	8002be0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <vPortFree+0xb8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <vPortFree+0xb8>)
 80039d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039d2:	6938      	ldr	r0, [r7, #16]
 80039d4:	f000 f874 	bl	8003ac0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <vPortFree+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <vPortFree+0xbc>)
 80039e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039e2:	f7ff f90b 	bl	8002bfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20019158 	.word	0x20019158
 80039f4:	20019148 	.word	0x20019148
 80039f8:	20019154 	.word	0x20019154

080039fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a02:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003a06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <prvHeapInit+0xac>)
 8003a0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3307      	adds	r3, #7
 8003a1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0307 	bic.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <prvHeapInit+0xac>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a34:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <prvHeapInit+0xb0>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <prvHeapInit+0xb0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a48:	2208      	movs	r2, #8
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <prvHeapInit+0xb4>)
 8003a5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <prvHeapInit+0xb4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <prvHeapInit+0xb4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <prvHeapInit+0xb4>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <prvHeapInit+0xb8>)
 8003a8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <prvHeapInit+0xbc>)
 8003a92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <prvHeapInit+0xc0>)
 8003a96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a9a:	601a      	str	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	2000013c 	.word	0x2000013c
 8003aac:	2001913c 	.word	0x2001913c
 8003ab0:	20019144 	.word	0x20019144
 8003ab4:	2001914c 	.word	0x2001914c
 8003ab8:	20019148 	.word	0x20019148
 8003abc:	20019158 	.word	0x20019158

08003ac0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <prvInsertBlockIntoFreeList+0xac>)
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e002      	b.n	8003ad4 <prvInsertBlockIntoFreeList+0x14>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d8f7      	bhi.n	8003ace <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4413      	add	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d108      	bne.n	8003b02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d118      	bne.n	8003b48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <prvInsertBlockIntoFreeList+0xb0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d00d      	beq.n	8003b3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e008      	b.n	8003b50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <prvInsertBlockIntoFreeList+0xb0>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e003      	b.n	8003b50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d002      	beq.n	8003b5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2001913c 	.word	0x2001913c
 8003b70:	20019144 	.word	0x20019144

08003b74 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b78:	4803      	ldr	r0, [pc, #12]	; (8003b88 <_cbSendSystemDesc+0x14>)
 8003b7a:	f001 fcb5 	bl	80054e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b7e:	4803      	ldr	r0, [pc, #12]	; (8003b8c <_cbSendSystemDesc+0x18>)
 8003b80:	f001 fcb2 	bl	80054e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08005ca0 	.word	0x08005ca0
 8003b8c:	08005cd8 	.word	0x08005cd8

08003b90 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b9e:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003ba0:	f001 f926 	bl	8004df0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ba4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003ba8:	f001 f966 	bl	8004e78 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	08003b75 	.word	0x08003b75
 8003bb8:	08005d6c 	.word	0x08005d6c

08003bbc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	e034      	b.n	8003c32 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003bc8:	491e      	ldr	r1, [pc, #120]	; (8003c44 <_cbSendTaskList+0x88>)
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	491a      	ldr	r1, [pc, #104]	; (8003c44 <_cbSendTaskList+0x88>)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3304      	adds	r3, #4
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	4916      	ldr	r1, [pc, #88]	; (8003c44 <_cbSendTaskList+0x88>)
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	681d      	ldr	r5, [r3, #0]
 8003bfc:	4911      	ldr	r1, [pc, #68]	; (8003c44 <_cbSendTaskList+0x88>)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	681e      	ldr	r6, [r3, #0]
 8003c0e:	490d      	ldr	r1, [pc, #52]	; (8003c44 <_cbSendTaskList+0x88>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4633      	mov	r3, r6
 8003c24:	462a      	mov	r2, r5
 8003c26:	4621      	mov	r1, r4
 8003c28:	f000 f8b4 	bl	8003d94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <_cbSendTaskList+0x8c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3c5      	bcc.n	8003bc8 <_cbSendTaskList+0xc>
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c44:	2001915c 	.word	0x2001915c
 8003c48:	200191fc 	.word	0x200191fc

08003c4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c52:	f7ff f873 	bl	8002d3c <xTaskGetTickCountFromISR>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c60:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003c64:	462b      	mov	r3, r5
 8003c66:	4634      	mov	r4, r6
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	0162      	lsls	r2, r4, #5
 8003c72:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	1b5b      	subs	r3, r3, r5
 8003c7e:	eb64 0406 	sbc.w	r4, r4, r6
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	00a2      	lsls	r2, r4, #2
 8003c8c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003c90:	0099      	lsls	r1, r3, #2
 8003c92:	460b      	mov	r3, r1
 8003c94:	4614      	mov	r4, r2
 8003c96:	195b      	adds	r3, r3, r5
 8003c98:	eb44 0406 	adc.w	r4, r4, r6
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	00e2      	lsls	r2, r4, #3
 8003ca6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003caa:	00d9      	lsls	r1, r3, #3
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003cb4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	4621      	mov	r1, r4
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cc4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	492b      	ldr	r1, [pc, #172]	; (8003d84 <SYSVIEW_AddTask+0xc0>)
 8003cd6:	68b8      	ldr	r0, [r7, #8]
 8003cd8:	f001 ff86 	bl	8005be8 <memcmp>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04b      	beq.n	8003d7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b07      	cmp	r3, #7
 8003ce8:	d903      	bls.n	8003cf2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cea:	4828      	ldr	r0, [pc, #160]	; (8003d8c <SYSVIEW_AddTask+0xc8>)
 8003cec:	f001 fefc 	bl	8005ae8 <SEGGER_SYSVIEW_Warn>
    return;
 8003cf0:	e044      	b.n	8003d7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4926      	ldr	r1, [pc, #152]	; (8003d90 <SYSVIEW_AddTask+0xcc>)
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4921      	ldr	r1, [pc, #132]	; (8003d90 <SYSVIEW_AddTask+0xcc>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3304      	adds	r3, #4
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	491b      	ldr	r1, [pc, #108]	; (8003d90 <SYSVIEW_AddTask+0xcc>)
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4916      	ldr	r1, [pc, #88]	; (8003d90 <SYSVIEW_AddTask+0xcc>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	330c      	adds	r3, #12
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4910      	ldr	r1, [pc, #64]	; (8003d90 <SYSVIEW_AddTask+0xcc>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3310      	adds	r3, #16
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <SYSVIEW_AddTask+0xc4>)
 8003d66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f80e 	bl	8003d94 <SYSVIEW_SendTaskInfo>
 8003d78:	e000      	b.n	8003d7c <SYSVIEW_AddTask+0xb8>
    return;
 8003d7a:	bf00      	nop

}
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	08005ce8 	.word	0x08005ce8
 8003d88:	200191fc 	.word	0x200191fc
 8003d8c:	08005cf0 	.word	0x08005cf0
 8003d90:	2001915c 	.word	0x2001915c

08003d94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	2214      	movs	r2, #20
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 ff36 	bl	8005c1c <memset>
  TaskInfo.TaskID     = TaskID;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fa95 	bl	80052f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003dce:	bf00      	nop
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <USART2_IRQHandler+0x80>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <USART2_IRQHandler+0x84>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 030b 	and.w	r3, r3, #11
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <USART2_IRQHandler+0x88>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <USART2_IRQHandler+0x88>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01a      	beq.n	8003e52 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <USART2_IRQHandler+0x8c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <USART2_IRQHandler+0x8c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	1dfa      	adds	r2, r7, #7
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4798      	blx	r3
 8003e2e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <USART2_IRQHandler+0x90>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <USART2_IRQHandler+0x90>)
 8003e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e006      	b.n	8003e52 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <USART2_IRQHandler+0x80>)
 8003e46:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003e48:	79fa      	ldrb	r2, [r7, #7]
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <USART2_IRQHandler+0x84>)
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e000      	b.n	8003e52 <USART2_IRQHandler+0x7a>
      return;
 8003e50:	bf00      	nop
    }
  }
}
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40004400 	.word	0x40004400
 8003e5c:	40004404 	.word	0x40004404
 8003e60:	20019200 	.word	0x20019200
 8003e64:	20019204 	.word	0x20019204
 8003e68:	4000440c 	.word	0x4000440c

08003e6c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	4000440c 	.word	0x4000440c

08003e8c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <_DoInit+0xa0>)
 8003e94:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e96:	22a8      	movs	r2, #168	; 0xa8
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	f001 febe 	bl	8005c1c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <_DoInit+0xa4>)
 8003eb0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <_DoInit+0xa8>)
 8003eb6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ebe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <_DoInit+0xa4>)
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <_DoInit+0xac>)
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ef6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	e00c      	b.n	8003f1a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1c3 030f 	rsb	r3, r3, #15
 8003f06:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <_DoInit+0xb0>)
 8003f08:	5cd1      	ldrb	r1, [r2, r3]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	460a      	mov	r2, r1
 8003f12:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3301      	adds	r3, #1
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d9ef      	bls.n	8003f00 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f20:	f3bf 8f5f 	dmb	sy
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	2001a7b8 	.word	0x2001a7b8
 8003f30:	08005d40 	.word	0x08005d40
 8003f34:	20019208 	.word	0x20019208
 8003f38:	20019608 	.word	0x20019608
 8003f3c:	08005d74 	.word	0x08005d74

08003f40 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <SEGGER_RTT_ReadNoLock+0x1e>
 8003f5a:	f7ff ff97 	bl	8003e8c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	3360      	adds	r3, #96	; 0x60
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d92b      	bls.n	8003fe4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bf28      	it	cs
 8003f9e:	4613      	movcs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	4413      	add	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6939      	ldr	r1, [r7, #16]
 8003fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb2:	f001 fe28 	bl	8005c06 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d101      	bne.n	8003fe4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf28      	it	cs
 8003ff4:	4613      	movcs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d019      	beq.n	8004032 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	4413      	add	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	6939      	ldr	r1, [r7, #16]
 800400c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400e:	f001 fdfa 	bl	8005c06 <memcpy>
    NumBytesRead += NumBytesRem;
 8004012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800402a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2001a7b8 	.word	0x2001a7b8

0800404c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800405a:	4b3d      	ldr	r3, [pc, #244]	; (8004150 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004068:	f7ff ff10 	bl	8003e8c <_DoInit>
  SEGGER_RTT_LOCK();
 800406c:	f3ef 8311 	mrs	r3, BASEPRI
 8004070:	f04f 0120 	mov.w	r1, #32
 8004074:	f381 8811 	msr	BASEPRI, r1
 8004078:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800407a:	4b35      	ldr	r3, [pc, #212]	; (8004150 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800407c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004082:	6939      	ldr	r1, [r7, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	3304      	adds	r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	dbeb      	blt.n	8004082 <SEGGER_RTT_AllocUpBuffer+0x36>
 80040aa:	e000      	b.n	80040ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80040ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	da3f      	bge.n	8004138 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040b8:	6939      	ldr	r1, [r7, #16]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	440b      	add	r3, r1
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040cc:	6939      	ldr	r1, [r7, #16]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	440b      	add	r3, r1
 80040dc:	3304      	adds	r3, #4
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	3320      	adds	r3, #32
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	3328      	adds	r3, #40	; 0x28
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800410a:	6939      	ldr	r1, [r7, #16]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	3324      	adds	r3, #36	; 0x24
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800411e:	6939      	ldr	r1, [r7, #16]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	440b      	add	r3, r1
 800412c:	332c      	adds	r3, #44	; 0x2c
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004132:	f3bf 8f5f 	dmb	sy
 8004136:	e002      	b.n	800413e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800413c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004144:	69fb      	ldr	r3, [r7, #28]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2001a7b8 	.word	0x2001a7b8

08004154 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004170:	f7ff fe8c 	bl	8003e8c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004176:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d82c      	bhi.n	80041d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800417e:	f3ef 8311 	mrs	r3, BASEPRI
 8004182:	f04f 0120 	mov.w	r1, #32
 8004186:	f381 8811 	msr	BASEPRI, r1
 800418a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	3360      	adds	r3, #96	; 0x60
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e002      	b.n	80041de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	; 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2001a7b8 	.word	0x2001a7b8

080041ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00f      	beq.n	8004222 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004202:	e002      	b.n	800420a <_EncodeStr+0x1e>
      Len++;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3301      	adds	r3, #1
 8004208:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f6      	bne.n	8004204 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d901      	bls.n	8004222 <_EncodeStr+0x36>
      Len = Limit;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2bfe      	cmp	r3, #254	; 0xfe
 8004226:	d806      	bhi.n	8004236 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	60fa      	str	r2, [r7, #12]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e011      	b.n	800425a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	60fa      	str	r2, [r7, #12]
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	60fa      	str	r2, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	0a19      	lsrs	r1, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	b2ca      	uxtb	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800425e:	e00a      	b.n	8004276 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	1c53      	adds	r3, r2, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	60f9      	str	r1, [r7, #12]
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	701a      	strb	r2, [r3, #0]
    n++;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3301      	adds	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d3f0      	bcc.n	8004260 <_EncodeStr+0x74>
  }
  return pPayload;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	4618      	mov	r0, r3
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3307      	adds	r3, #7
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042aa:	4b32      	ldr	r3, [pc, #200]	; (8004374 <_HandleIncomingPacket+0xd0>)
 80042ac:	7e1b      	ldrb	r3, [r3, #24]
 80042ae:	4618      	mov	r0, r3
 80042b0:	1cfb      	adds	r3, r7, #3
 80042b2:	2201      	movs	r2, #1
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7ff fe43 	bl	8003f40 <SEGGER_RTT_ReadNoLock>
 80042ba:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d04c      	beq.n	800435c <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d022      	beq.n	800430e <_HandleIncomingPacket+0x6a>
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	dc0b      	bgt.n	80042e4 <_HandleIncomingPacket+0x40>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d015      	beq.n	80042fc <_HandleIncomingPacket+0x58>
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	dc02      	bgt.n	80042da <_HandleIncomingPacket+0x36>
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00e      	beq.n	80042f6 <_HandleIncomingPacket+0x52>
 80042d8:	e033      	b.n	8004342 <_HandleIncomingPacket+0x9e>
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d011      	beq.n	8004302 <_HandleIncomingPacket+0x5e>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d012      	beq.n	8004308 <_HandleIncomingPacket+0x64>
 80042e2:	e02e      	b.n	8004342 <_HandleIncomingPacket+0x9e>
 80042e4:	2b07      	cmp	r3, #7
 80042e6:	d018      	beq.n	800431a <_HandleIncomingPacket+0x76>
 80042e8:	2b07      	cmp	r3, #7
 80042ea:	db13      	blt.n	8004314 <_HandleIncomingPacket+0x70>
 80042ec:	2b7f      	cmp	r3, #127	; 0x7f
 80042ee:	d037      	beq.n	8004360 <_HandleIncomingPacket+0xbc>
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d015      	beq.n	8004320 <_HandleIncomingPacket+0x7c>
 80042f4:	e025      	b.n	8004342 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042f6:	f000 fe83 	bl	8005000 <SEGGER_SYSVIEW_Start>
      break;
 80042fa:	e036      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042fc:	f000 ff3c 	bl	8005178 <SEGGER_SYSVIEW_Stop>
      break;
 8004300:	e033      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004302:	f001 f915 	bl	8005530 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004306:	e030      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004308:	f001 f8da 	bl	80054c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800430c:	e02d      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800430e:	f000 ff59 	bl	80051c4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004312:	e02a      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004314:	f001 fb96 	bl	8005a44 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004318:	e027      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800431a:	f001 fb75 	bl	8005a08 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800431e:	e024      	b.n	800436a <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <_HandleIncomingPacket+0xd0>)
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	4618      	mov	r0, r3
 8004326:	1cfb      	adds	r3, r7, #3
 8004328:	2201      	movs	r2, #1
 800432a:	4619      	mov	r1, r3
 800432c:	f7ff fe08 	bl	8003f40 <SEGGER_RTT_ReadNoLock>
 8004330:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fae4 	bl	8005908 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004340:	e010      	b.n	8004364 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	b25b      	sxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	da0e      	bge.n	8004368 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <_HandleIncomingPacket+0xd0>)
 800434c:	7e1b      	ldrb	r3, [r3, #24]
 800434e:	4618      	mov	r0, r3
 8004350:	1cfb      	adds	r3, r7, #3
 8004352:	2201      	movs	r2, #1
 8004354:	4619      	mov	r1, r3
 8004356:	f7ff fdf3 	bl	8003f40 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800435a:	e005      	b.n	8004368 <_HandleIncomingPacket+0xc4>
    }
  }
 800435c:	bf00      	nop
 800435e:	e004      	b.n	800436a <_HandleIncomingPacket+0xc6>
      break;
 8004360:	bf00      	nop
 8004362:	e002      	b.n	800436a <_HandleIncomingPacket+0xc6>
      break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <_HandleIncomingPacket+0xc6>
      break;
 8004368:	bf00      	nop
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2001a620 	.word	0x2001a620

08004378 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800437e:	2301      	movs	r3, #1
 8004380:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	e00b      	b.n	80043ac <_TrySendOverflowPacket+0x34>
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800439e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	09db      	lsrs	r3, r3, #7
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b7f      	cmp	r3, #127	; 0x7f
 80043b0:	d8f0      	bhi.n	8004394 <_TrySendOverflowPacket+0x1c>
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <_TrySendOverflowPacket+0xe4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e00b      	b.n	80043f4 <_TrySendOverflowPacket+0x7c>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	6279      	str	r1, [r7, #36]	; 0x24
 80043e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	09db      	lsrs	r3, r3, #7
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b7f      	cmp	r3, #127	; 0x7f
 80043f8:	d8f0      	bhi.n	80043dc <_TrySendOverflowPacket+0x64>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	4618      	mov	r0, r3
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	461a      	mov	r2, r3
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	4619      	mov	r1, r3
 800441c:	f7fb fee0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004420:	4603      	mov	r3, r0
 8004422:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004424:	f7ff fd22 	bl	8003e6c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e004      	b.n	800444c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	3301      	adds	r3, #1
 8004448:	4a03      	ldr	r2, [pc, #12]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800444a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	; 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2001a620 	.word	0x2001a620
 800445c:	e0001004 	.word	0xe0001004

08004460 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800446c:	4b9b      	ldr	r3, [pc, #620]	; (80046dc <_SendPacket+0x27c>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d010      	beq.n	8004496 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004474:	4b99      	ldr	r3, [pc, #612]	; (80046dc <_SendPacket+0x27c>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 812b 	beq.w	80046d4 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800447e:	4b97      	ldr	r3, [pc, #604]	; (80046dc <_SendPacket+0x27c>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d109      	bne.n	800449a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004486:	f7ff ff77 	bl	8004378 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800448a:	4b94      	ldr	r3, [pc, #592]	; (80046dc <_SendPacket+0x27c>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 8122 	bne.w	80046d8 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004494:	e001      	b.n	800449a <_SendPacket+0x3a>
    goto Send;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <_SendPacket+0x3c>
Send:
 800449a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b1f      	cmp	r3, #31
 80044a0:	d809      	bhi.n	80044b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80044a2:	4b8e      	ldr	r3, [pc, #568]	; (80046dc <_SendPacket+0x27c>)
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 8117 	bne.w	80046e4 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b17      	cmp	r3, #23
 80044ba:	d807      	bhi.n	80044cc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e0c4      	b.n	8004656 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b7f      	cmp	r3, #127	; 0x7f
 80044d8:	d912      	bls.n	8004500 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	09da      	lsrs	r2, r3, #7
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e006      	b.n	800450e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b7e      	cmp	r3, #126	; 0x7e
 8004512:	d807      	bhi.n	8004524 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e098      	b.n	8004656 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452a:	d212      	bcs.n	8004552 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	09da      	lsrs	r2, r3, #7
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b01      	subs	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	3a01      	subs	r2, #1
 8004544:	60fa      	str	r2, [r7, #12]
 8004546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e081      	b.n	8004656 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004558:	d21d      	bcs.n	8004596 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0b9a      	lsrs	r2, r3, #14
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b01      	subs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	09db      	lsrs	r3, r3, #7
 800456e:	b2db      	uxtb	r3, r3
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	3a01      	subs	r2, #1
 8004574:	60fa      	str	r2, [r7, #12]
 8004576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	3a01      	subs	r2, #1
 8004588:	60fa      	str	r2, [r7, #12]
 800458a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e05f      	b.n	8004656 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459c:	d228      	bcs.n	80045f0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0d5a      	lsrs	r2, r3, #21
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0b9b      	lsrs	r3, r3, #14
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	3a01      	subs	r2, #1
 80045b8:	60fa      	str	r2, [r7, #12]
 80045ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	09db      	lsrs	r3, r3, #7
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	3a01      	subs	r2, #1
 80045ce:	60fa      	str	r2, [r7, #12]
 80045d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	3a01      	subs	r2, #1
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e032      	b.n	8004656 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0f1a      	lsrs	r2, r3, #28
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0d5b      	lsrs	r3, r3, #21
 8004604:	b2db      	uxtb	r3, r3
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	3a01      	subs	r2, #1
 800460a:	60fa      	str	r2, [r7, #12]
 800460c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0b9b      	lsrs	r3, r3, #14
 800461a:	b2db      	uxtb	r3, r3
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	3a01      	subs	r2, #1
 8004620:	60fa      	str	r2, [r7, #12]
 8004622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	b2db      	uxtb	r3, r3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	3a01      	subs	r2, #1
 8004636:	60fa      	str	r2, [r7, #12]
 8004638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	3a01      	subs	r2, #1
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <_SendPacket+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <_SendPacket+0x27c>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	e00b      	b.n	8004688 <_SendPacket+0x228>
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	6279      	str	r1, [r7, #36]	; 0x24
 800467a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	09db      	lsrs	r3, r3, #7
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2b7f      	cmp	r3, #127	; 0x7f
 800468c:	d8f0      	bhi.n	8004670 <_SendPacket+0x210>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	627a      	str	r2, [r7, #36]	; 0x24
 8004694:	6a3a      	ldr	r2, [r7, #32]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <_SendPacket+0x27c>)
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	4618      	mov	r0, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	f7fb fd97 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80046b2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80046b4:	f7ff fbda 	bl	8003e6c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80046be:	4a07      	ldr	r2, [pc, #28]	; (80046dc <_SendPacket+0x27c>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	60d3      	str	r3, [r2, #12]
 80046c4:	e00f      	b.n	80046e6 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <_SendPacket+0x27c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b03      	ldr	r3, [pc, #12]	; (80046dc <_SendPacket+0x27c>)
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e008      	b.n	80046e6 <_SendPacket+0x286>
    goto SendDone;
 80046d4:	bf00      	nop
 80046d6:	e006      	b.n	80046e6 <_SendPacket+0x286>
      goto SendDone;
 80046d8:	bf00      	nop
 80046da:	e004      	b.n	80046e6 <_SendPacket+0x286>
 80046dc:	2001a620 	.word	0x2001a620
 80046e0:	e0001004 	.word	0xe0001004
      goto SendDone;
 80046e4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <_SendPacket+0x2d8>)
 80046e8:	7e1b      	ldrb	r3, [r3, #24]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <_SendPacket+0x2dc>)
 80046ee:	460b      	mov	r3, r1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	440b      	add	r3, r1
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	336c      	adds	r3, #108	; 0x6c
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <_SendPacket+0x2d8>)
 80046fe:	7e1b      	ldrb	r3, [r3, #24]
 8004700:	4618      	mov	r0, r3
 8004702:	490e      	ldr	r1, [pc, #56]	; (800473c <_SendPacket+0x2dc>)
 8004704:	4603      	mov	r3, r0
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4403      	add	r3, r0
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	440b      	add	r3, r1
 800470e:	3370      	adds	r3, #112	; 0x70
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d00b      	beq.n	800472e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <_SendPacket+0x2d8>)
 8004718:	789b      	ldrb	r3, [r3, #2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <_SendPacket+0x2d8>)
 8004720:	2201      	movs	r2, #1
 8004722:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004724:	f7ff fdbe 	bl	80042a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <_SendPacket+0x2d8>)
 800472a:	2200      	movs	r2, #0
 800472c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800472e:	bf00      	nop
 8004730:	3728      	adds	r7, #40	; 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2001a620 	.word	0x2001a620
 800473c:	2001a7b8 	.word	0x2001a7b8

08004740 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3301      	adds	r3, #1
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d80a      	bhi.n	8004770 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6051      	str	r1, [r2, #4]
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d15a      	bne.n	800482e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	e00b      	b.n	80047b2 <_StoreChar+0x72>
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	6279      	str	r1, [r7, #36]	; 0x24
 80047a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2b7f      	cmp	r3, #127	; 0x7f
 80047b6:	d8f0      	bhi.n	800479a <_StoreChar+0x5a>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	627a      	str	r2, [r7, #36]	; 0x24
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e00b      	b.n	80047ea <_StoreChar+0xaa>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	61f9      	str	r1, [r7, #28]
 80047dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	09db      	lsrs	r3, r3, #7
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b7f      	cmp	r3, #127	; 0x7f
 80047ee:	d8f0      	bhi.n	80047d2 <_StoreChar+0x92>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	61fa      	str	r2, [r7, #28]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	221a      	movs	r2, #26
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fe29 	bl	8004460 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fd3a 	bl	800428c <_PreparePacket>
 8004818:	4602      	mov	r2, r0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  }
}
 800482e:	bf00      	nop
 8004830:	3728      	adds	r7, #40	; 0x28
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800484a:	2301      	movs	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800484e:	2301      	movs	r3, #1
 8004850:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004852:	e007      	b.n	8004864 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	623b      	str	r3, [r7, #32]
    Width++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d2f3      	bcs.n	8004854 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	d901      	bls.n	8004878 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11f      	bne.n	80048c2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01c      	beq.n	80048c2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <_PrintUnsigned+0x66>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <_PrintUnsigned+0x66>
        c = '0';
 8004898:	2330      	movs	r3, #48	; 0x30
 800489a:	76fb      	strb	r3, [r7, #27]
 800489c:	e001      	b.n	80048a2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800489e:	2320      	movs	r3, #32
 80048a0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048a2:	e007      	b.n	80048b4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	3b01      	subs	r3, #1
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80048aa:	7efb      	ldrb	r3, [r7, #27]
 80048ac:	4619      	mov	r1, r3
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff ff46 	bl	8004740 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <_PrintUnsigned+0x8a>
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3f0      	bcc.n	80048a4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d903      	bls.n	80048d0 <_PrintUnsigned+0x98>
      NumDigits--;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	e009      	b.n	80048e4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d200      	bcs.n	80048e4 <_PrintUnsigned+0xac>
        break;
 80048e2:	e005      	b.n	80048f0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80048ee:	e7e8      	b.n	80048c2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <_PrintUnsigned+0x128>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	4619      	mov	r1, r3
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff14 	bl	8004740 <_StoreChar>
    Digit /= Base;
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e3      	bne.n	80048f0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d011      	beq.n	8004956 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004938:	e006      	b.n	8004948 <_PrintUnsigned+0x110>
        FieldWidth--;
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	3b01      	subs	r3, #1
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004940:	2120      	movs	r1, #32
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fefc 	bl	8004740 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <_PrintUnsigned+0x11e>
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	429a      	cmp	r2, r3
 8004954:	d3f1      	bcc.n	800493a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004956:	bf00      	nop
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	08005d94 	.word	0x08005d94

08004964 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfb8      	it	lt
 8004978:	425b      	neglt	r3, r3
 800497a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800497c:	2301      	movs	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004980:	e007      	b.n	8004992 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	fb92 f3f3 	sdiv	r3, r2, r3
 800498a:	613b      	str	r3, [r7, #16]
    Width++;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3301      	adds	r3, #1
 8004990:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	daf3      	bge.n	8004982 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d901      	bls.n	80049a6 <_PrintInt+0x42>
    Width = NumDigits;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <_PrintInt+0x5e>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	db04      	blt.n	80049bc <_PrintInt+0x58>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <_PrintInt+0x5e>
    FieldWidth--;
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	3b01      	subs	r3, #1
 80049c0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <_PrintInt+0x6e>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <_PrintInt+0x9c>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d111      	bne.n	8004a00 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049e2:	e006      	b.n	80049f2 <_PrintInt+0x8e>
        FieldWidth--;
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80049ea:	2120      	movs	r1, #32
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff fea7 	bl	8004740 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <_PrintInt+0x9c>
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3f1      	bcc.n	80049e4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da07      	bge.n	8004a16 <_PrintInt+0xb2>
    v = -v;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	425b      	negs	r3, r3
 8004a0a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004a0c:	212d      	movs	r1, #45	; 0x2d
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff fe96 	bl	8004740 <_StoreChar>
 8004a14:	e008      	b.n	8004a28 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004a20:	212b      	movs	r1, #43	; 0x2b
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff fe8c 	bl	8004740 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d019      	beq.n	8004a66 <_PrintInt+0x102>
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d114      	bne.n	8004a66 <_PrintInt+0x102>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a48:	e006      	b.n	8004a58 <_PrintInt+0xf4>
        FieldWidth--;
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004a50:	2130      	movs	r1, #48	; 0x30
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fe74 	bl	8004740 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <_PrintInt+0x102>
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3f1      	bcc.n	8004a4a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fedf 	bl	8004838 <_PrintUnsigned>
}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b098      	sub	sp, #96	; 0x60
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a90:	f3ef 8311 	mrs	r3, BASEPRI
 8004a94:	f04f 0120 	mov.w	r1, #32
 8004a98:	f381 8811 	msr	BASEPRI, r1
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9e:	48ac      	ldr	r0, [pc, #688]	; (8004d50 <_VPrintTarget+0x2cc>)
 8004aa0:	f7ff fbf4 	bl	800428c <_PreparePacket>
 8004aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004aa6:	4baa      	ldr	r3, [pc, #680]	; (8004d50 <_VPrintTarget+0x2cc>)
 8004aa8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004aca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8140 	beq.w	8004d54 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8004ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ad8:	2b25      	cmp	r3, #37	; 0x25
 8004ada:	f040 812a 	bne.w	8004d32 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004af2:	3b23      	subs	r3, #35	; 0x23
 8004af4:	2b0d      	cmp	r3, #13
 8004af6:	d83f      	bhi.n	8004b78 <_VPrintTarget+0xf4>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <_VPrintTarget+0x7c>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004b79 	.word	0x08004b79
 8004b08:	08004b79 	.word	0x08004b79
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004b79 	.word	0x08004b79
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004b79 	.word	0x08004b79
 8004b1c:	08004b79 	.word	0x08004b79
 8004b20:	08004b59 	.word	0x08004b59
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b79 	.word	0x08004b79
 8004b30:	08004b79 	.word	0x08004b79
 8004b34:	08004b49 	.word	0x08004b49
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e01a      	b.n	8004b7e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e012      	b.n	8004b7e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e00a      	b.n	8004b7e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6a:	f043 0308 	orr.w	r3, r3, #8
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e002      	b.n	8004b7e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7c:	bf00      	nop
        }
      } while (v);
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1b0      	bne.n	8004ae6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004b84:	2300      	movs	r3, #0
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b94:	2b2f      	cmp	r3, #47	; 0x2f
 8004b96:	d912      	bls.n	8004bbe <_VPrintTarget+0x13a>
 8004b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9c:	2b39      	cmp	r3, #57	; 0x39
 8004b9e:	d80e      	bhi.n	8004bbe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b30      	subs	r3, #48	; 0x30
 8004bba:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004bbc:	e7e4      	b.n	8004b88 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004bca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bce:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd0:	d11d      	bne.n	8004c0e <_VPrintTarget+0x18a>
        sFormat++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004be4:	2b2f      	cmp	r3, #47	; 0x2f
 8004be6:	d912      	bls.n	8004c0e <_VPrintTarget+0x18a>
 8004be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bec:	2b39      	cmp	r3, #57	; 0x39
 8004bee:	d80e      	bhi.n	8004c0e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c06:	4413      	add	r3, r2
 8004c08:	3b30      	subs	r3, #48	; 0x30
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004c0c:	e7e4      	b.n	8004bd8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004c16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c1a:	2b6c      	cmp	r3, #108	; 0x6c
 8004c1c:	d003      	beq.n	8004c26 <_VPrintTarget+0x1a2>
 8004c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c22:	2b68      	cmp	r3, #104	; 0x68
 8004c24:	d107      	bne.n	8004c36 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004c34:	e7ef      	b.n	8004c16 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d022      	beq.n	8004c84 <_VPrintTarget+0x200>
 8004c3e:	2b64      	cmp	r3, #100	; 0x64
 8004c40:	dc06      	bgt.n	8004c50 <_VPrintTarget+0x1cc>
 8004c42:	2b58      	cmp	r3, #88	; 0x58
 8004c44:	d044      	beq.n	8004cd0 <_VPrintTarget+0x24c>
 8004c46:	2b63      	cmp	r3, #99	; 0x63
 8004c48:	d009      	beq.n	8004c5e <_VPrintTarget+0x1da>
 8004c4a:	2b25      	cmp	r3, #37	; 0x25
 8004c4c:	d066      	beq.n	8004d1c <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004c4e:	e06c      	b.n	8004d2a <_VPrintTarget+0x2a6>
      switch (c) {
 8004c50:	2b75      	cmp	r3, #117	; 0x75
 8004c52:	d02a      	beq.n	8004caa <_VPrintTarget+0x226>
 8004c54:	2b78      	cmp	r3, #120	; 0x78
 8004c56:	d03b      	beq.n	8004cd0 <_VPrintTarget+0x24c>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d04c      	beq.n	8004cf6 <_VPrintTarget+0x272>
        break;
 8004c5c:	e065      	b.n	8004d2a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1d19      	adds	r1, r3, #4
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6011      	str	r1, [r2, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004c72:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fd5f 	bl	8004740 <_StoreChar>
        break;
 8004c82:	e052      	b.n	8004d2a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c92:	f107 0014 	add.w	r0, r7, #20
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	220a      	movs	r2, #10
 8004ca2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ca4:	f7ff fe5e 	bl	8004964 <_PrintInt>
        break;
 8004ca8:	e03f      	b.n	8004d2a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1d19      	adds	r1, r3, #4
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6011      	str	r1, [r2, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cba:	f107 0014 	add.w	r0, r7, #20
 8004cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	220a      	movs	r2, #10
 8004cca:	f7ff fdb5 	bl	8004838 <_PrintUnsigned>
        break;
 8004cce:	e02c      	b.n	8004d2a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6011      	str	r1, [r2, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004cde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ce0:	f107 0014 	add.w	r0, r7, #20
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	2210      	movs	r2, #16
 8004cf0:	f7ff fda2 	bl	8004838 <_PrintUnsigned>
        break;
 8004cf4:	e019      	b.n	8004d2a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6011      	str	r1, [r2, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d06:	f107 0014 	add.w	r0, r7, #20
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	2308      	movs	r3, #8
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	2308      	movs	r3, #8
 8004d14:	2210      	movs	r2, #16
 8004d16:	f7ff fd8f 	bl	8004838 <_PrintUnsigned>
        break;
 8004d1a:	e006      	b.n	8004d2a <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	2125      	movs	r1, #37	; 0x25
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fd0c 	bl	8004740 <_StoreChar>
        break;
 8004d28:	bf00      	nop
      }
      sFormat++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e007      	b.n	8004d42 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fcff 	bl	8004740 <_StoreChar>
    }
  } while (*sFormat);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f47f aeb8 	bne.w	8004abc <_VPrintTarget+0x38>
 8004d4c:	e003      	b.n	8004d56 <_VPrintTarget+0x2d2>
 8004d4e:	bf00      	nop
 8004d50:	2001a650 	.word	0x2001a650
      break;
 8004d54:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d041      	beq.n	8004de0 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6c:	e00b      	b.n	8004d86 <_VPrintTarget+0x302>
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	1c59      	adds	r1, r3, #1
 8004d76:	6439      	str	r1, [r7, #64]	; 0x40
 8004d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	09db      	lsrs	r3, r3, #7
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	2b7f      	cmp	r3, #127	; 0x7f
 8004d8a:	d8f0      	bhi.n	8004d6e <_VPrintTarget+0x2ea>
 8004d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	643a      	str	r2, [r7, #64]	; 0x40
 8004d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da0:	2300      	movs	r3, #0
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
 8004da4:	e00b      	b.n	8004dbe <_VPrintTarget+0x33a>
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dba:	09db      	lsrs	r3, r3, #7
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc2:	d8f0      	bhi.n	8004da6 <_VPrintTarget+0x322>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	69b9      	ldr	r1, [r7, #24]
 8004dd8:	221a      	movs	r2, #26
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fb40 	bl	8004460 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004de6:	bf00      	nop
 8004de8:	3758      	adds	r7, #88	; 0x58
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop

08004df0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e04:	4917      	ldr	r1, [pc, #92]	; (8004e64 <SEGGER_SYSVIEW_Init+0x74>)
 8004e06:	4818      	ldr	r0, [pc, #96]	; (8004e68 <SEGGER_SYSVIEW_Init+0x78>)
 8004e08:	f7ff f920 	bl	800404c <SEGGER_RTT_AllocUpBuffer>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e12:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e14:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e16:	785a      	ldrb	r2, [r3, #1]
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1e:	7e1b      	ldrb	r3, [r3, #24]
 8004e20:	4618      	mov	r0, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2308      	movs	r3, #8
 8004e28:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <SEGGER_SYSVIEW_Init+0x80>)
 8004e2a:	490f      	ldr	r1, [pc, #60]	; (8004e68 <SEGGER_SYSVIEW_Init+0x78>)
 8004e2c:	f7ff f992 	bl	8004154 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <SEGGER_SYSVIEW_Init+0x84>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e44:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e50:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20019618 	.word	0x20019618
 8004e68:	08005d4c 	.word	0x08005d4c
 8004e6c:	2001a620 	.word	0x2001a620
 8004e70:	2001a618 	.word	0x2001a618
 8004e74:	e0001004 	.word	0xe0001004

08004e78 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6113      	str	r3, [r2, #16]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2001a620 	.word	0x2001a620

08004e98 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea4:	f04f 0120 	mov.w	r1, #32
 8004ea8:	f381 8811 	msr	BASEPRI, r1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4808      	ldr	r0, [pc, #32]	; (8004ed0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004eb0:	f7ff f9ec 	bl	800428c <_PreparePacket>
 8004eb4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68b8      	ldr	r0, [r7, #8]
 8004ebc:	f7ff fad0 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f383 8811 	msr	BASEPRI, r3
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	2001a650 	.word	0x2001a650

08004ed4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ede:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee2:	f04f 0120 	mov.w	r1, #32
 8004ee6:	f381 8811 	msr	BASEPRI, r1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	4816      	ldr	r0, [pc, #88]	; (8004f48 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004eee:	f7ff f9cd 	bl	800428c <_PreparePacket>
 8004ef2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e00b      	b.n	8004f1a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	61f9      	str	r1, [r7, #28]
 8004f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	09db      	lsrs	r3, r3, #7
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1e:	d8f0      	bhi.n	8004f02 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	61fa      	str	r2, [r7, #28]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6938      	ldr	r0, [r7, #16]
 8004f36:	f7ff fa93 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f383 8811 	msr	BASEPRI, r3
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	2001a650 	.word	0x2001a650

08004f4c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f58:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5c:	f04f 0120 	mov.w	r1, #32
 8004f60:	f381 8811 	msr	BASEPRI, r1
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	4825      	ldr	r0, [pc, #148]	; (8004ffc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f68:	f7ff f990 	bl	800428c <_PreparePacket>
 8004f6c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7a:	e00b      	b.n	8004f94 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	1c59      	adds	r1, r3, #1
 8004f84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	09db      	lsrs	r3, r3, #7
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b7f      	cmp	r3, #127	; 0x7f
 8004f98:	d8f0      	bhi.n	8004f7c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	e00b      	b.n	8004fcc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8004fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	09db      	lsrs	r3, r3, #7
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd0:	d8f0      	bhi.n	8004fb4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	69b8      	ldr	r0, [r7, #24]
 8004fe8:	f7ff fa3a 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f383 8811 	msr	BASEPRI, r3
}
 8004ff2:	bf00      	nop
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2001a650 	.word	0x2001a650

08005000 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	; 0x30
 8005004:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005006:	4b59      	ldr	r3, [pc, #356]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800500c:	f3ef 8311 	mrs	r3, BASEPRI
 8005010:	f04f 0120 	mov.w	r1, #32
 8005014:	f381 8811 	msr	BASEPRI, r1
 8005018:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	220a      	movs	r2, #10
 8005020:	4953      	ldr	r1, [pc, #332]	; (8005170 <SEGGER_SYSVIEW_Start+0x170>)
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb f8dc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800502e:	f7fe ff1d 	bl	8003e6c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005032:	200a      	movs	r0, #10
 8005034:	f7ff ff30 	bl	8004e98 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005038:	f3ef 8311 	mrs	r3, BASEPRI
 800503c:	f04f 0120 	mov.w	r1, #32
 8005040:	f381 8811 	msr	BASEPRI, r1
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	484b      	ldr	r0, [pc, #300]	; (8005174 <SEGGER_SYSVIEW_Start+0x174>)
 8005048:	f7ff f920 	bl	800428c <_PreparePacket>
 800504c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005056:	4b45      	ldr	r3, [pc, #276]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
 800505c:	e00b      	b.n	8005076 <SEGGER_SYSVIEW_Start+0x76>
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	b2da      	uxtb	r2, r3
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	2b7f      	cmp	r3, #127	; 0x7f
 800507a:	d8f0      	bhi.n	800505e <SEGGER_SYSVIEW_Start+0x5e>
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	4b36      	ldr	r3, [pc, #216]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	e00b      	b.n	80050b0 <SEGGER_SYSVIEW_Start+0xb0>
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	6279      	str	r1, [r7, #36]	; 0x24
 80050a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b7f      	cmp	r3, #127	; 0x7f
 80050b4:	d8f0      	bhi.n	8005098 <SEGGER_SYSVIEW_Start+0x98>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	627a      	str	r2, [r7, #36]	; 0x24
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e00b      	b.n	80050ea <SEGGER_SYSVIEW_Start+0xea>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1c59      	adds	r1, r3, #1
 80050da:	61f9      	str	r1, [r7, #28]
 80050dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	09db      	lsrs	r3, r3, #7
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b7f      	cmp	r3, #127	; 0x7f
 80050ee:	d8f0      	bhi.n	80050d2 <SEGGER_SYSVIEW_Start+0xd2>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	61fa      	str	r2, [r7, #28]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	e00b      	b.n	8005122 <SEGGER_SYSVIEW_Start+0x122>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	1c59      	adds	r1, r3, #1
 8005112:	6179      	str	r1, [r7, #20]
 8005114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	09db      	lsrs	r3, r3, #7
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b7f      	cmp	r3, #127	; 0x7f
 8005126:	d8f0      	bhi.n	800510a <SEGGER_SYSVIEW_Start+0x10a>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	617a      	str	r2, [r7, #20]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005138:	2218      	movs	r2, #24
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff f98f 	bl	8004460 <_SendPacket>
      RECORD_END();
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005148:	4b08      	ldr	r3, [pc, #32]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <SEGGER_SYSVIEW_Start+0x16c>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005156:	f000 f9eb 	bl	8005530 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800515a:	f000 f9b1 	bl	80054c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800515e:	f000 fc71 	bl	8005a44 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005162:	bf00      	nop
 8005164:	3730      	adds	r7, #48	; 0x30
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2001a620 	.word	0x2001a620
 8005170:	08005d88 	.word	0x08005d88
 8005174:	2001a650 	.word	0x2001a650

08005178 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800517e:	f3ef 8311 	mrs	r3, BASEPRI
 8005182:	f04f 0120 	mov.w	r1, #32
 8005186:	f381 8811 	msr	BASEPRI, r1
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	480b      	ldr	r0, [pc, #44]	; (80051bc <SEGGER_SYSVIEW_Stop+0x44>)
 800518e:	f7ff f87d 	bl	800428c <_PreparePacket>
 8005192:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800519c:	220b      	movs	r2, #11
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6838      	ldr	r0, [r7, #0]
 80051a2:	f7ff f95d 	bl	8004460 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <SEGGER_SYSVIEW_Stop+0x48>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f383 8811 	msr	BASEPRI, r3
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	2001a650 	.word	0x2001a650
 80051c0:	2001a620 	.word	0x2001a620

080051c4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08c      	sub	sp, #48	; 0x30
 80051c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051ca:	f3ef 8311 	mrs	r3, BASEPRI
 80051ce:	f04f 0120 	mov.w	r1, #32
 80051d2:	f381 8811 	msr	BASEPRI, r1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	4845      	ldr	r0, [pc, #276]	; (80052f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051da:	f7ff f857 	bl	800428c <_PreparePacket>
 80051de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	e00b      	b.n	8005208 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	09db      	lsrs	r3, r3, #7
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2b7f      	cmp	r3, #127	; 0x7f
 800520c:	d8f0      	bhi.n	80051f0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	e00b      	b.n	8005242 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	1c59      	adds	r1, r3, #1
 8005232:	6279      	str	r1, [r7, #36]	; 0x24
 8005234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	09db      	lsrs	r3, r3, #7
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2b7f      	cmp	r3, #127	; 0x7f
 8005246:	d8f0      	bhi.n	800522a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	627a      	str	r2, [r7, #36]	; 0x24
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e00b      	b.n	800527c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1c59      	adds	r1, r3, #1
 800526c:	61f9      	str	r1, [r7, #28]
 800526e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	09db      	lsrs	r3, r3, #7
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b7f      	cmp	r3, #127	; 0x7f
 8005280:	d8f0      	bhi.n	8005264 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	61fa      	str	r2, [r7, #28]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e00b      	b.n	80052b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	6179      	str	r1, [r7, #20]
 80052a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	09db      	lsrs	r3, r3, #7
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b7f      	cmp	r3, #127	; 0x7f
 80052b8:	d8f0      	bhi.n	800529c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	617a      	str	r2, [r7, #20]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052ca:	2218      	movs	r2, #24
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	68b8      	ldr	r0, [r7, #8]
 80052d0:	f7ff f8c6 	bl	8004460 <_SendPacket>
  RECORD_END();
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052e2:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	4798      	blx	r3
  }
}
 80052e8:	bf00      	nop
 80052ea:	3730      	adds	r7, #48	; 0x30
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	2001a650 	.word	0x2001a650
 80052f4:	2001a620 	.word	0x2001a620

080052f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b092      	sub	sp, #72	; 0x48
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005300:	f3ef 8311 	mrs	r3, BASEPRI
 8005304:	f04f 0120 	mov.w	r1, #32
 8005308:	f381 8811 	msr	BASEPRI, r1
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	486a      	ldr	r0, [pc, #424]	; (80054b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005310:	f7fe ffbc 	bl	800428c <_PreparePacket>
 8005314:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b66      	ldr	r3, [pc, #408]	; (80054bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	643b      	str	r3, [r7, #64]	; 0x40
 800532a:	e00b      	b.n	8005344 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6479      	str	r1, [r7, #68]	; 0x44
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	643b      	str	r3, [r7, #64]	; 0x40
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800534a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	647a      	str	r2, [r7, #68]	; 0x44
 8005350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005358:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
 8005364:	e00b      	b.n	800537e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	b2da      	uxtb	r2, r3
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b7f      	cmp	r3, #127	; 0x7f
 8005382:	d8f0      	bhi.n	8005366 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	63fa      	str	r2, [r7, #60]	; 0x3c
 800538a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7fe ff25 	bl	80041ec <_EncodeStr>
 80053a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053a4:	2209      	movs	r2, #9
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	6938      	ldr	r0, [r7, #16]
 80053aa:	f7ff f859 	bl	8004460 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b40      	ldr	r3, [pc, #256]	; (80054bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	e00b      	b.n	80053dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	6379      	str	r1, [r7, #52]	; 0x34
 80053ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	09db      	lsrs	r3, r3, #7
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b7f      	cmp	r3, #127	; 0x7f
 80053e0:	d8f0      	bhi.n	80053c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	637a      	str	r2, [r7, #52]	; 0x34
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fc:	e00b      	b.n	8005416 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d8f0      	bhi.n	80053fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e00b      	b.n	8005450 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1c59      	adds	r1, r3, #1
 8005440:	6279      	str	r1, [r7, #36]	; 0x24
 8005442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	09db      	lsrs	r3, r3, #7
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2b7f      	cmp	r3, #127	; 0x7f
 8005454:	d8f0      	bhi.n	8005438 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	627a      	str	r2, [r7, #36]	; 0x24
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e00b      	b.n	8005488 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	61f9      	str	r1, [r7, #28]
 800547a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	09db      	lsrs	r3, r3, #7
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b7f      	cmp	r3, #127	; 0x7f
 800548c:	d8f0      	bhi.n	8005470 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	61fa      	str	r2, [r7, #28]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800549e:	2215      	movs	r2, #21
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	6938      	ldr	r0, [r7, #16]
 80054a4:	f7fe ffdc 	bl	8004460 <_SendPacket>
  RECORD_END();
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f383 8811 	msr	BASEPRI, r3
}
 80054ae:	bf00      	nop
 80054b0:	3748      	adds	r7, #72	; 0x48
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2001a650 	.word	0x2001a650
 80054bc:	2001a620 	.word	0x2001a620

080054c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054d6:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4798      	blx	r3
  }
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2001a620 	.word	0x2001a620

080054e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054f0:	f3ef 8311 	mrs	r3, BASEPRI
 80054f4:	f04f 0120 	mov.w	r1, #32
 80054f8:	f381 8811 	msr	BASEPRI, r1
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	480b      	ldr	r0, [pc, #44]	; (800552c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005500:	f7fe fec4 	bl	800428c <_PreparePacket>
 8005504:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005506:	2280      	movs	r2, #128	; 0x80
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f7fe fe6e 	bl	80041ec <_EncodeStr>
 8005510:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005512:	220e      	movs	r2, #14
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f7fe ffa2 	bl	8004460 <_SendPacket>
  RECORD_END();
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f383 8811 	msr	BASEPRI, r3
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2001a650 	.word	0x2001a650

08005530 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d019      	beq.n	8005572 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d014      	beq.n	8005572 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4798      	blx	r3
 8005550:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005554:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005556:	e9d7 1200 	ldrd	r1, r2, [r7]
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	0013      	movs	r3, r2
 8005564:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005566:	461a      	mov	r2, r3
 8005568:	4601      	mov	r1, r0
 800556a:	200d      	movs	r0, #13
 800556c:	f7ff fcee 	bl	8004f4c <SEGGER_SYSVIEW_RecordU32x2>
 8005570:	e005      	b.n	800557e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	200c      	movs	r0, #12
 800557a:	f7ff fcab 	bl	8004ed4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bd90      	pop	{r4, r7, pc}
 8005586:	bf00      	nop
 8005588:	2001a620 	.word	0x2001a620
 800558c:	e0001004 	.word	0xe0001004

08005590 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005596:	f3ef 8311 	mrs	r3, BASEPRI
 800559a:	f04f 0120 	mov.w	r1, #32
 800559e:	f381 8811 	msr	BASEPRI, r1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	4819      	ldr	r0, [pc, #100]	; (800560c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055a6:	f7fe fe71 	bl	800428c <_PreparePacket>
 80055aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e00b      	b.n	80055dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6179      	str	r1, [r7, #20]
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	617a      	str	r2, [r7, #20]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055f2:	2202      	movs	r2, #2
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7fe ff32 	bl	8004460 <_SendPacket>
  RECORD_END();
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f383 8811 	msr	BASEPRI, r3
}
 8005602:	bf00      	nop
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	2001a650 	.word	0x2001a650
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800561a:	f3ef 8311 	mrs	r3, BASEPRI
 800561e:	f04f 0120 	mov.w	r1, #32
 8005622:	f381 8811 	msr	BASEPRI, r1
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	4807      	ldr	r0, [pc, #28]	; (8005648 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800562a:	f7fe fe2f 	bl	800428c <_PreparePacket>
 800562e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005630:	2203      	movs	r2, #3
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6838      	ldr	r0, [r7, #0]
 8005636:	f7fe ff13 	bl	8004460 <_SendPacket>
  RECORD_END();
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f383 8811 	msr	BASEPRI, r3
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	2001a650 	.word	0x2001a650

0800564c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005652:	f3ef 8311 	mrs	r3, BASEPRI
 8005656:	f04f 0120 	mov.w	r1, #32
 800565a:	f381 8811 	msr	BASEPRI, r1
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	4807      	ldr	r0, [pc, #28]	; (8005680 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005662:	f7fe fe13 	bl	800428c <_PreparePacket>
 8005666:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005668:	2212      	movs	r2, #18
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6838      	ldr	r0, [r7, #0]
 800566e:	f7fe fef7 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f383 8811 	msr	BASEPRI, r3
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2001a650 	.word	0x2001a650

08005684 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800568a:	f3ef 8311 	mrs	r3, BASEPRI
 800568e:	f04f 0120 	mov.w	r1, #32
 8005692:	f381 8811 	msr	BASEPRI, r1
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	4807      	ldr	r0, [pc, #28]	; (80056b8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800569a:	f7fe fdf7 	bl	800428c <_PreparePacket>
 800569e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056a0:	2211      	movs	r2, #17
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6838      	ldr	r0, [r7, #0]
 80056a6:	f7fe fedb 	bl	8004460 <_SendPacket>
  RECORD_END();
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f383 8811 	msr	BASEPRI, r3
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	2001a650 	.word	0x2001a650

080056bc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c4:	f3ef 8311 	mrs	r3, BASEPRI
 80056c8:	f04f 0120 	mov.w	r1, #32
 80056cc:	f381 8811 	msr	BASEPRI, r1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	4819      	ldr	r0, [pc, #100]	; (8005738 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80056d4:	f7fe fdda 	bl	800428c <_PreparePacket>
 80056d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056de:	4b17      	ldr	r3, [pc, #92]	; (800573c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e00b      	b.n	800570a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	61f9      	str	r1, [r7, #28]
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	61fa      	str	r2, [r7, #28]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005720:	2208      	movs	r2, #8
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6938      	ldr	r0, [r7, #16]
 8005726:	f7fe fe9b 	bl	8004460 <_SendPacket>
  RECORD_END();
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f383 8811 	msr	BASEPRI, r3
}
 8005730:	bf00      	nop
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2001a650 	.word	0x2001a650
 800573c:	2001a620 	.word	0x2001a620

08005740 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005748:	f3ef 8311 	mrs	r3, BASEPRI
 800574c:	f04f 0120 	mov.w	r1, #32
 8005750:	f381 8811 	msr	BASEPRI, r1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	4819      	ldr	r0, [pc, #100]	; (80057bc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005758:	f7fe fd98 	bl	800428c <_PreparePacket>
 800575c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e00b      	b.n	800578e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	1c59      	adds	r1, r3, #1
 800577e:	61f9      	str	r1, [r7, #28]
 8005780:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b7f      	cmp	r3, #127	; 0x7f
 8005792:	d8f0      	bhi.n	8005776 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	61fa      	str	r2, [r7, #28]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057a4:	2204      	movs	r2, #4
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	6938      	ldr	r0, [r7, #16]
 80057aa:	f7fe fe59 	bl	8004460 <_SendPacket>
  RECORD_END();
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f383 8811 	msr	BASEPRI, r3
}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	2001a650 	.word	0x2001a650
 80057c0:	2001a620 	.word	0x2001a620

080057c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057cc:	f3ef 8311 	mrs	r3, BASEPRI
 80057d0:	f04f 0120 	mov.w	r1, #32
 80057d4:	f381 8811 	msr	BASEPRI, r1
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	4819      	ldr	r0, [pc, #100]	; (8005840 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80057dc:	f7fe fd56 	bl	800428c <_PreparePacket>
 80057e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e00b      	b.n	8005812 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	1c59      	adds	r1, r3, #1
 8005802:	61f9      	str	r1, [r7, #28]
 8005804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	09db      	lsrs	r3, r3, #7
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b7f      	cmp	r3, #127	; 0x7f
 8005816:	d8f0      	bhi.n	80057fa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	61fa      	str	r2, [r7, #28]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005828:	2206      	movs	r2, #6
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	6938      	ldr	r0, [r7, #16]
 800582e:	f7fe fe17 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f383 8811 	msr	BASEPRI, r3
}
 8005838:	bf00      	nop
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2001a650 	.word	0x2001a650
 8005844:	2001a620 	.word	0x2001a620

08005848 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005852:	f3ef 8311 	mrs	r3, BASEPRI
 8005856:	f04f 0120 	mov.w	r1, #32
 800585a:	f381 8811 	msr	BASEPRI, r1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	4827      	ldr	r0, [pc, #156]	; (8005900 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005862:	f7fe fd13 	bl	800428c <_PreparePacket>
 8005866:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	e00b      	b.n	8005898 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	6279      	str	r1, [r7, #36]	; 0x24
 800588a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b7f      	cmp	r3, #127	; 0x7f
 800589c:	d8f0      	bhi.n	8005880 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	627a      	str	r2, [r7, #36]	; 0x24
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e00b      	b.n	80058d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	61f9      	str	r1, [r7, #28]
 80058c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	09db      	lsrs	r3, r3, #7
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b7f      	cmp	r3, #127	; 0x7f
 80058d4:	d8f0      	bhi.n	80058b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	61fa      	str	r2, [r7, #28]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80058e6:	2207      	movs	r2, #7
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	6938      	ldr	r0, [r7, #16]
 80058ec:	f7fe fdb8 	bl	8004460 <_SendPacket>
  RECORD_END();
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f383 8811 	msr	BASEPRI, r3
}
 80058f6:	bf00      	nop
 80058f8:	3728      	adds	r7, #40	; 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	2001a650 	.word	0x2001a650
 8005904:	2001a620 	.word	0x2001a620

08005908 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d06d      	beq.n	80059f6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800591a:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005920:	2300      	movs	r3, #0
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
 8005924:	e008      	b.n	8005938 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	3301      	adds	r3, #1
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593c:	429a      	cmp	r2, r3
 800593e:	d3f2      	bcc.n	8005926 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005940:	e000      	b.n	8005944 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005942:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d055      	beq.n	80059f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	f04f 0120 	mov.w	r1, #32
 8005952:	f381 8811 	msr	BASEPRI, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	482a      	ldr	r0, [pc, #168]	; (8005a04 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800595a:	f7fe fc97 	bl	800428c <_PreparePacket>
 800595e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_SendModule+0x7e>
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	6279      	str	r1, [r7, #36]	; 0x24
 8005978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b7f      	cmp	r3, #127	; 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_SendModule+0x66>
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	627a      	str	r2, [r7, #36]	; 0x24
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e00b      	b.n	80059c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	61f9      	str	r1, [r7, #28]
 80059b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b7f      	cmp	r3, #127	; 0x7f
 80059c4:	d8f0      	bhi.n	80059a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	61fa      	str	r2, [r7, #28]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7fe fc04 	bl	80041ec <_EncodeStr>
 80059e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80059e6:	2216      	movs	r2, #22
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f7fe fd38 	bl	8004460 <_SendPacket>
      RECORD_END();
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80059f6:	bf00      	nop
 80059f8:	3730      	adds	r7, #48	; 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	2001a648 	.word	0x2001a648
 8005a04:	2001a650 	.word	0x2001a650

08005a08 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00f      	beq.n	8005a36 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f2      	bne.n	8005a1c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2001a648 	.word	0x2001a648

08005a44 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a4e:	f04f 0120 	mov.w	r1, #32
 8005a52:	f381 8811 	msr	BASEPRI, r1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	4817      	ldr	r0, [pc, #92]	; (8005ab8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a5a:	f7fe fc17 	bl	800428c <_PreparePacket>
 8005a5e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e00b      	b.n	8005a88 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	6179      	str	r1, [r7, #20]
 8005a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	09db      	lsrs	r3, r3, #7
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8c:	d8f0      	bhi.n	8005a70 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	617a      	str	r2, [r7, #20]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a9e:	221b      	movs	r2, #27
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	f7fe fcdc 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2001a650 	.word	0x2001a650
 8005abc:	2001a64c 	.word	0x2001a64c

08005ac0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005ac0:	b40f      	push	{r0, r1, r2, r3}
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6938      	ldr	r0, [r7, #16]
 8005ad6:	f7fe ffd5 	bl	8004a84 <_VPrintTarget>
  va_end(ParamList);
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ae4:	b004      	add	sp, #16
 8005ae6:	4770      	bx	lr

08005ae8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005af0:	f3ef 8311 	mrs	r3, BASEPRI
 8005af4:	f04f 0120 	mov.w	r1, #32
 8005af8:	f381 8811 	msr	BASEPRI, r1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	4827      	ldr	r0, [pc, #156]	; (8005b9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b00:	f7fe fbc4 	bl	800428c <_PreparePacket>
 8005b04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f7fe fb6e 	bl	80041ec <_EncodeStr>
 8005b10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	2301      	movs	r3, #1
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	e00b      	b.n	8005b34 <SEGGER_SYSVIEW_Warn+0x4c>
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	6279      	str	r1, [r7, #36]	; 0x24
 8005b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	09db      	lsrs	r3, r3, #7
 8005b32:	623b      	str	r3, [r7, #32]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d8f0      	bhi.n	8005b1c <SEGGER_SYSVIEW_Warn+0x34>
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b40:	6a3a      	ldr	r2, [r7, #32]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	e00b      	b.n	8005b6c <SEGGER_SYSVIEW_Warn+0x84>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	61f9      	str	r1, [r7, #28]
 8005b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d8f0      	bhi.n	8005b54 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	61fa      	str	r2, [r7, #28]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b82:	221a      	movs	r2, #26
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	6938      	ldr	r0, [r7, #16]
 8005b88:	f7fe fc6a 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f383 8811 	msr	BASEPRI, r3
}
 8005b92:	bf00      	nop
 8005b94:	3728      	adds	r7, #40	; 0x28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2001a650 	.word	0x2001a650

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4e0d      	ldr	r6, [pc, #52]	; (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	; (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1ba4      	subs	r4, r4, r6
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2500      	movs	r5, #0
 8005bac:	42a5      	cmp	r5, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4e0b      	ldr	r6, [pc, #44]	; (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	; (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f000 f83a 	bl	8005c2c <_init>
 8005bb8:	1ba4      	subs	r4, r4, r6
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	42a5      	cmp	r5, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bc8:	4798      	blx	r3
 8005bca:	3501      	adds	r5, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd2:	4798      	blx	r3
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	08005dac 	.word	0x08005dac
 8005bdc:	08005dac 	.word	0x08005dac
 8005be0:	08005dac 	.word	0x08005dac
 8005be4:	08005db0 	.word	0x08005db0

08005be8 <memcmp>:
 8005be8:	b530      	push	{r4, r5, lr}
 8005bea:	2400      	movs	r4, #0
 8005bec:	42a2      	cmp	r2, r4
 8005bee:	d101      	bne.n	8005bf4 <memcmp+0xc>
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e007      	b.n	8005c04 <memcmp+0x1c>
 8005bf4:	5d03      	ldrb	r3, [r0, r4]
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	190d      	adds	r5, r1, r4
 8005bfa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005bfe:	42ab      	cmp	r3, r5
 8005c00:	d0f4      	beq.n	8005bec <memcmp+0x4>
 8005c02:	1b58      	subs	r0, r3, r5
 8005c04:	bd30      	pop	{r4, r5, pc}

08005c06 <memcpy>:
 8005c06:	b510      	push	{r4, lr}
 8005c08:	1e43      	subs	r3, r0, #1
 8005c0a:	440a      	add	r2, r1
 8005c0c:	4291      	cmp	r1, r2
 8005c0e:	d100      	bne.n	8005c12 <memcpy+0xc>
 8005c10:	bd10      	pop	{r4, pc}
 8005c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c1a:	e7f7      	b.n	8005c0c <memcpy+0x6>

08005c1c <memset>:
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
