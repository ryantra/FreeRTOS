
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d4  080058d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058dc  080058dc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080058e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a80c  2000001c  08005900  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a828  08005900  0002a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144c2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a04  00000000  00000000  0003450e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00038008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e76  00000000  00000000  00038f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db68  00000000  00000000  00050e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009752d  00000000  00000000  0005e96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  000f5f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005758 	.word	0x08005758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08005758 	.word	0x08005758

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a780 	.word	0x2001a780

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 faad 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d1 	bl	8000728 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000586:	482c      	ldr	r0, [pc, #176]	; (8000638 <main+0xc4>)
 8000588:	f002 ffa0 	bl	80034cc <SEGGER_UART_init>

  //Cycle count enable
    DWT_CTRL |= (1 << 0);
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <main+0xc8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a2a      	ldr	r2, [pc, #168]	; (800063c <main+0xc8>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 8000598:	f002 fdca 	bl	8003130 <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();

	status = xTaskCreate(led1_handler, "LED_1_task", 200, NULL, 2, &task1_handle);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2302      	movs	r3, #2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	22c8      	movs	r2, #200	; 0xc8
 80005aa:	4925      	ldr	r1, [pc, #148]	; (8000640 <main+0xcc>)
 80005ac:	4825      	ldr	r0, [pc, #148]	; (8000644 <main+0xd0>)
 80005ae:	f001 fca8 	bl	8001f02 <xTaskCreate>
 80005b2:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d009      	beq.n	80005ce <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e7fe      	b.n	80005cc <main+0x58>

	status = xTaskCreate(led2_handler, "LED_2_task", 200, NULL, 2, &task2_handle);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	491a      	ldr	r1, [pc, #104]	; (8000648 <main+0xd4>)
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <main+0xd8>)
 80005e0:	f001 fc8f 	bl	8001f02 <xTaskCreate>
 80005e4:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d009      	beq.n	8000600 <main+0x8c>
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e7fe      	b.n	80005fe <main+0x8a>

	status = xTaskCreate(led3_handler, "LED_3_task", 200, NULL, 2, &task3_handle);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	4910      	ldr	r1, [pc, #64]	; (8000650 <main+0xdc>)
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <main+0xe0>)
 8000610:	f001 fc77 	bl	8001f02 <xTaskCreate>
 8000614:	61f8      	str	r0, [r7, #28]

	configASSERT(status == pdPASS);
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d009      	beq.n	8000630 <main+0xbc>
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	e7fe      	b.n	800062e <main+0xba>

	//start the freeRTOS scheduler
	 vTaskStartScheduler();
 8000630:	f001 fdca 	bl	80021c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0xc0>
 8000636:	bf00      	nop
 8000638:	0007a120 	.word	0x0007a120
 800063c:	e0001000 	.word	0xe0001000
 8000640:	08005770 	.word	0x08005770
 8000644:	08000855 	.word	0x08000855
 8000648:	0800577c 	.word	0x0800577c
 800064c:	08000881 	.word	0x08000881
 8000650:	08005788 	.word	0x08005788
 8000654:	080008ad 	.word	0x080008ad

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 f86e 	bl	8005748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <SystemClock_Config+0xc8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xcc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fcf7 	bl	80010d0 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f908 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2103      	movs	r1, #3
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff51 	bl	80015b0 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000714:	f000 f8f2 	bl	80008fc <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <MX_GPIO_Init+0x118>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <MX_GPIO_Init+0x118>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <MX_GPIO_Init+0x118>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <MX_GPIO_Init+0x118>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a37      	ldr	r2, [pc, #220]	; (8000840 <MX_GPIO_Init+0x118>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x118>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_GPIO_Init+0x118>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a30      	ldr	r2, [pc, #192]	; (8000840 <MX_GPIO_Init+0x118>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x118>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_GPIO_Init+0x118>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a29      	ldr	r2, [pc, #164]	; (8000840 <MX_GPIO_Init+0x118>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_GPIO_Init+0x118>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4824      	ldr	r0, [pc, #144]	; (8000844 <MX_GPIO_Init+0x11c>)
 80007b4:	f000 fc58 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x120>)
 80007c0:	f000 fc52 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0x124>)
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_GPIO_Init+0x128>)
 80007da:	f000 fac3 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ee:	2307      	movs	r3, #7
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x11c>)
 80007fa:	f000 fab3 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fe:	2320      	movs	r3, #32
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0x11c>)
 8000816:	f000 faa5 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_PIN_Pin LED2_PIN_Pin LED3_PIN_Pin */
  GPIO_InitStruct.Pin = LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin;
 800081a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x120>)
 8000834:	f000 fa96 	bl	8000d64 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020400 	.word	0x40020400
 800084c:	10210000 	.word	0x10210000
 8000850:	40020800 	.word	0x40020800

08000854 <led1_handler>:

/* USER CODE BEGIN 4 */

static void led1_handler(void* parameters)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <led1_handler+0x24>)
 800085e:	f004 fe97 	bl	8005590 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN_Pin);
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <led1_handler+0x28>)
 8000868:	f000 fc17 	bl	800109a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000870:	f000 f974 	bl	8000b5c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED1");
 8000874:	e7f2      	b.n	800085c <led1_handler+0x8>
 8000876:	bf00      	nop
 8000878:	08005794 	.word	0x08005794
 800087c:	40020400 	.word	0x40020400

08000880 <led2_handler>:
	}
}


static void led2_handler(void* parameters)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <led2_handler+0x24>)
 800088a:	f004 fe81 	bl	8005590 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED2_PIN_Pin);
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <led2_handler+0x28>)
 8000894:	f000 fc01 	bl	800109a <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000898:	f44f 7048 	mov.w	r0, #800	; 0x320
 800089c:	f000 f95e 	bl	8000b5c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED2");
 80008a0:	e7f2      	b.n	8000888 <led2_handler+0x8>
 80008a2:	bf00      	nop
 80008a4:	080057a4 	.word	0x080057a4
 80008a8:	40020400 	.word	0x40020400

080008ac <led3_handler>:
	}

}

static void led3_handler(void* parameters)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <led3_handler+0x24>)
 80008b6:	f004 fe6b 	bl	8005590 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, LED3_PIN_Pin);
 80008ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <led3_handler+0x28>)
 80008c0:	f000 fbeb 	bl	800109a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 80008c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008c8:	f000 f948 	bl	8000b5c <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling LED3");
 80008cc:	e7f2      	b.n	80008b4 <led3_handler+0x8>
 80008ce:	bf00      	nop
 80008d0:	080057b4 	.word	0x080057b4
 80008d4:	40020400 	.word	0x40020400

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f917 	bl	8000b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40000c00 	.word	0x40000c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800094a:	f002 f851 	bl	80029f0 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2032      	movs	r0, #50	; 0x32
 8000972:	f000 f9cd 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000976:	2032      	movs	r0, #50	; 0x32
 8000978:	f000 f9e6 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_InitTick+0xa4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_InitTick+0xa4>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_InitTick+0xa4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 ffe2 	bl	800196c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009a8:	f000 ffcc 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <HAL_InitTick+0xa8>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3b01      	subs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_InitTick+0xac>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_InitTick+0xb0>)
 80009c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_InitTick+0xac>)
 80009c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009cc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_InitTick+0xac>)
 80009d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_InitTick+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_InitTick+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_InitTick+0xac>)
 80009e2:	f000 fff5 	bl	80019d0 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	4806      	ldr	r0, [pc, #24]	; (8000a08 <HAL_InitTick+0xac>)
 80009ee:	f001 f824 	bl	8001a3a <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3730      	adds	r7, #48	; 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	2001a73c 	.word	0x2001a73c
 8000a0c:	40000c00 	.word	0x40000c00

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM5_IRQHandler+0x10>)
 8000a4a:	f001 f81a 	bl	8001a82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2001a73c 	.word	0x2001a73c

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <SystemInit+0x28>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <SystemInit+0x28>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SystemInit+0x28>)
 8000a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a72:	609a      	str	r2, [r3, #8]
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a8a:	e003      	b.n	8000a94 <LoopCopyDataInit>

08000a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a92:	3104      	adds	r1, #4

08000a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a9c:	d3f6      	bcc.n	8000a8c <CopyDataInit>
  ldr  r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aa0:	e002      	b.n	8000aa8 <LoopFillZerobss>

08000aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa4:	f842 3b04 	str.w	r3, [r2], #4

08000aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aac:	d3f9      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd3 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f004 fe0b 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd5d 	bl	8000574 <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ac0:	080058e4 	.word	0x080058e4
  ldr  r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000acc:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000ad0:	2001a828 	.word	0x2001a828

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f8fa 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ff28 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fefe 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2001a77c 	.word	0x2001a77c

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2001a77c 	.word	0x2001a77c

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_Delay+0x40>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e159      	b.n	8001034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8148 	bne.w	800102e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d00b      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db2:	2b11      	cmp	r3, #17
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0xfc>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80a2 	beq.w	800102e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b56      	ldr	r3, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x2e4>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a55      	ldr	r2, [pc, #340]	; (8001048 <HAL_GPIO_Init+0x2e4>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_GPIO_Init+0x2e4>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a51      	ldr	r2, [pc, #324]	; (800104c <HAL_GPIO_Init+0x2e8>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_GPIO_Init+0x2ec>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x202>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a47      	ldr	r2, [pc, #284]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x1fe>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x1fa>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x1f6>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x1f2>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e008      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e004      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f66:	2300      	movs	r3, #0
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	f002 0203 	and.w	r2, r2, #3
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	4093      	lsls	r3, r2
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f78:	4934      	ldr	r1, [pc, #208]	; (800104c <HAL_GPIO_Init+0x2e8>)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000faa:	4a2e      	ldr	r2, [pc, #184]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_GPIO_Init+0x300>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_GPIO_Init+0x300>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_GPIO_Init+0x300>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3301      	adds	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	f67f aea2 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800103c:	bf00      	nop
 800103e:	3724      	adds	r7, #36	; 0x24
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	619a      	str	r2, [r3, #24]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	401a      	ands	r2, r3
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d104      	bne.n	80010be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	041a      	lsls	r2, r3, #16
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e25b      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d075      	beq.n	80011da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ee:	4ba3      	ldr	r3, [pc, #652]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d00c      	beq.n	8001114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	4ba0      	ldr	r3, [pc, #640]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001102:	2b08      	cmp	r3, #8
 8001104:	d112      	bne.n	800112c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001106:	4b9d      	ldr	r3, [pc, #628]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001112:	d10b      	bne.n	800112c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	4b99      	ldr	r3, [pc, #612]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d05b      	beq.n	80011d8 <HAL_RCC_OscConfig+0x108>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d157      	bne.n	80011d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e236      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001134:	d106      	bne.n	8001144 <HAL_RCC_OscConfig+0x74>
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e01d      	b.n	8001180 <HAL_RCC_OscConfig+0xb0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x98>
 800114e:	4b8b      	ldr	r3, [pc, #556]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a8a      	ldr	r2, [pc, #552]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b88      	ldr	r3, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a87      	ldr	r2, [pc, #540]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xb0>
 8001168:	4b84      	ldr	r3, [pc, #528]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a83      	ldr	r2, [pc, #524]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b81      	ldr	r3, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a80      	ldr	r2, [pc, #512]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fcdc 	bl	8000b44 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fcd8 	bl	8000b44 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1fb      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0xc0>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fcc8 	bl	8000b44 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fcc4 	bl	8000b44 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1e7      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0xe8>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d11c      	bne.n	8001238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x152>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e1bb      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b56      	ldr	r3, [pc, #344]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4952      	ldr	r1, [pc, #328]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	e03a      	b.n	80012ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <HAL_RCC_OscConfig+0x2b0>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff fc7d 	bl	8000b44 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fc79 	bl	8000b44 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e19c      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4940      	ldr	r1, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_RCC_OscConfig+0x2b0>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fc5c 	bl	8000b44 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fc58 	bl	8000b44 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e17b      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d030      	beq.n	800131c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d016      	beq.n	80012f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x2b4>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff fc3c 	bl	8000b44 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc38 	bl	8000b44 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e15b      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x200>
 80012ee:	e015      	b.n	800131c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_RCC_OscConfig+0x2b4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fc25 	bl	8000b44 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc21 	bl	8000b44 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e144      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a0 	beq.w	800146a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x2b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d121      	bne.n	80013aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_RCC_OscConfig+0x2b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_RCC_OscConfig+0x2b8>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fbe7 	bl	8000b44 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e011      	b.n	800139e <HAL_RCC_OscConfig+0x2ce>
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	42470000 	.word	0x42470000
 8001384:	42470e80 	.word	0x42470e80
 8001388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138c:	f7ff fbda 	bl	8000b44 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0fd      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d106      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	e01c      	b.n	80013fa <HAL_RCC_OscConfig+0x32a>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x312>
 80013c8:	4b77      	ldr	r3, [pc, #476]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	4a76      	ldr	r2, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6713      	str	r3, [r2, #112]	; 0x70
 80013d4:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a73      	ldr	r2, [pc, #460]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x32a>
 80013e2:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a70      	ldr	r2, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b6e      	ldr	r3, [pc, #440]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a6d      	ldr	r2, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d015      	beq.n	800142e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fb9f 	bl	8000b44 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fb9b 	bl	8000b44 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e0bc      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ee      	beq.n	800140a <HAL_RCC_OscConfig+0x33a>
 800142c:	e014      	b.n	8001458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb89 	bl	8000b44 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fb85 	bl	8000b44 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0a6      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ee      	bne.n	8001436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d105      	bne.n	800146a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8092 	beq.w	8001598 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b08      	cmp	r3, #8
 800147e:	d05c      	beq.n	800153a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d141      	bne.n	800150c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <HAL_RCC_OscConfig+0x4dc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb59 	bl	8000b44 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fb55 	bl	8000b44 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e078      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a8:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69da      	ldr	r2, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	019b      	lsls	r3, r3, #6
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	061b      	lsls	r3, r3, #24
 80014d8:	4933      	ldr	r1, [pc, #204]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_RCC_OscConfig+0x4dc>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb2e 	bl	8000b44 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb2a 	bl	8000b44 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e04d      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x41c>
 800150a:	e045      	b.n	8001598 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_OscConfig+0x4dc>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb17 	bl	8000b44 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb13 	bl	8000b44 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e036      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x44a>
 8001538:	e02e      	b.n	8001598 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e029      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x4d8>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	429a      	cmp	r2, r3
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d115      	bne.n	8001594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800156e:	4013      	ands	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001574:	4293      	cmp	r3, r2
 8001576:	d10d      	bne.n	8001594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470060 	.word	0x42470060

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa50 	bl	8000b44 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa4c 	bl	8000b44 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4601      	mov	r1, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	fa21 f303 	lsr.w	r3, r1, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f900 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08005880 	.word	0x08005880
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d007      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0x32>
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d008      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x38>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 80b4 	bne.w	8001910 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a8:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017aa:	60bb      	str	r3, [r7, #8]
       break;
 80017ac:	e0b3      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ae:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017b0:	60bb      	str	r3, [r7, #8]
      break;
 80017b2:	e0b0      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b4:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d04a      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	ea03 0501 	and.w	r5, r3, r1
 80017e0:	ea04 0602 	and.w	r6, r4, r2
 80017e4:	4629      	mov	r1, r5
 80017e6:	4632      	mov	r2, r6
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f04f 0400 	mov.w	r4, #0
 80017f0:	0154      	lsls	r4, r2, #5
 80017f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017f6:	014b      	lsls	r3, r1, #5
 80017f8:	4619      	mov	r1, r3
 80017fa:	4622      	mov	r2, r4
 80017fc:	1b49      	subs	r1, r1, r5
 80017fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	0194      	lsls	r4, r2, #6
 800180c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001810:	018b      	lsls	r3, r1, #6
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	eb64 0402 	sbc.w	r4, r4, r2
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	00e2      	lsls	r2, r4, #3
 8001822:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001826:	00d9      	lsls	r1, r3, #3
 8001828:	460b      	mov	r3, r1
 800182a:	4614      	mov	r4, r2
 800182c:	195b      	adds	r3, r3, r5
 800182e:	eb44 0406 	adc.w	r4, r4, r6
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	0262      	lsls	r2, r4, #9
 800183c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001840:	0259      	lsls	r1, r3, #9
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	f7fe fd0e 	bl	8000274 <__aeabi_uldivmod>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e049      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	ea03 0501 	and.w	r5, r3, r1
 8001876:	ea04 0602 	and.w	r6, r4, r2
 800187a:	4629      	mov	r1, r5
 800187c:	4632      	mov	r2, r6
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	f04f 0400 	mov.w	r4, #0
 8001886:	0154      	lsls	r4, r2, #5
 8001888:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800188c:	014b      	lsls	r3, r1, #5
 800188e:	4619      	mov	r1, r3
 8001890:	4622      	mov	r2, r4
 8001892:	1b49      	subs	r1, r1, r5
 8001894:	eb62 0206 	sbc.w	r2, r2, r6
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	0194      	lsls	r4, r2, #6
 80018a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	1a5b      	subs	r3, r3, r1
 80018aa:	eb64 0402 	sbc.w	r4, r4, r2
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	00e2      	lsls	r2, r4, #3
 80018b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018bc:	00d9      	lsls	r1, r3, #3
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	195b      	adds	r3, r3, r5
 80018c4:	eb44 0406 	adc.w	r4, r4, r6
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	02a2      	lsls	r2, r4, #10
 80018d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018d6:	0299      	lsls	r1, r3, #10
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f04f 0400 	mov.w	r4, #0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7fe fcc3 	bl	8000274 <__aeabi_uldivmod>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	60bb      	str	r3, [r7, #8]
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001912:	60bb      	str	r3, [r7, #8]
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	68bb      	ldr	r3, [r7, #8]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_GetHCLKFreq+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001948:	f7ff fff0 	bl	800192c <HAL_RCC_GetHCLKFreq>
 800194c:	4601      	mov	r1, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0a9b      	lsrs	r3, r3, #10
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	08005890 	.word	0x08005890

0800196c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 020f 	and.w	r2, r3, #15
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e01d      	b.n	8001a1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f815 	bl	8001a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 f968 	bl	8001ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d007      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d122      	bne.n	8001ade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d11b      	bne.n	8001ade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f06f 0202 	mvn.w	r2, #2
 8001aae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8ee 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
 8001aca:	e005      	b.n	8001ad8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8e0 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8f1 	bl	8001cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d122      	bne.n	8001b32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d11b      	bne.n	8001b32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0204 	mvn.w	r2, #4
 8001b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8c4 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
 8001b1e:	e005      	b.n	8001b2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8b6 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8c7 	bl	8001cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d122      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11b      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0208 	mvn.w	r2, #8
 8001b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f89a 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
 8001b72:	e005      	b.n	8001b80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f88c 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f89d 	bl	8001cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d122      	bne.n	8001bda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d11b      	bne.n	8001bda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0210 	mvn.w	r2, #16
 8001baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f870 	bl	8001ca6 <HAL_TIM_IC_CaptureCallback>
 8001bc6:	e005      	b.n	8001bd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f862 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f873 	bl	8001cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10e      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0201 	mvn.w	r2, #1
 8001bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fe69 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b80      	cmp	r3, #128	; 0x80
 8001c12:	d10e      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b80      	cmp	r3, #128	; 0x80
 8001c20:	d107      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8e3 	bl	8001df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	d10e      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d107      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f838 	bl	8001cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d10e      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d107      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0220 	mvn.w	r2, #32
 8001c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8ad 	bl	8001de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <TIM_Base_SetConfig+0xe4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00f      	beq.n	8001d1c <TIM_Base_SetConfig+0x38>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0x38>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <TIM_Base_SetConfig+0xe8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0x38>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <TIM_Base_SetConfig+0xec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0x38>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <TIM_Base_SetConfig+0xf0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <TIM_Base_SetConfig+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01b      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d017      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <TIM_Base_SetConfig+0xe8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <TIM_Base_SetConfig+0xec>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <TIM_Base_SetConfig+0xf0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <TIM_Base_SetConfig+0xf4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <TIM_Base_SetConfig+0xf8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0x8a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <TIM_Base_SetConfig+0xfc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <TIM_Base_SetConfig+0xe4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d103      	bne.n	8001db4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40014400 	.word	0x40014400
 8001de0:	40014800 	.word	0x40014800

08001de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0208 	add.w	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f103 0208 	add.w	r2, r3, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0208 	add.w	r2, r3, #8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6892      	ldr	r2, [r2, #8]
 8001ec4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6852      	ldr	r2, [r2, #4]
 8001ece:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08c      	sub	sp, #48	; 0x30
 8001f06:	af04      	add	r7, sp, #16
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 ff04 	bl	8002d24 <pvPortMalloc>
 8001f1c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f24:	2058      	movs	r0, #88	; 0x58
 8001f26:	f000 fefd 	bl	8002d24 <pvPortMalloc>
 8001f2a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	e005      	b.n	8001f46 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f000 ffce 	bl	8002edc <vPortFree>
 8001f40:	e001      	b.n	8001f46 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9303      	str	r3, [sp, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f80e 	bl	8001f84 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f68:	69f8      	ldr	r0, [r7, #28]
 8001f6a:	f000 f8a1 	bl	80020b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e002      	b.n	8001f7a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f78:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
    }
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	21a5      	movs	r1, #165	; 0xa5
 8001f9e:	f003 fbd3 	bl	8005748 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fac:	3b01      	subs	r3, #1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <prvInitialiseNewTask+0x56>
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e7fe      	b.n	8001fd8 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01f      	beq.n	8002020 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	e012      	b.n	800200c <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	7819      	ldrb	r1, [r3, #0]
 8001fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3334      	adds	r3, #52	; 0x34
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b09      	cmp	r3, #9
 8002010:	d9e9      	bls.n	8001fe6 <prvInitialiseNewTask+0x62>
 8002012:	e000      	b.n	8002016 <prvInitialiseNewTask+0x92>
            {
                break;
 8002014:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800201e:	e003      	b.n	8002028 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	2b04      	cmp	r3, #4
 800202c:	d901      	bls.n	8002032 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800202e:	2304      	movs	r3, #4
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002040:	2200      	movs	r2, #0
 8002042:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	3304      	adds	r3, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff feff 	bl	8001e4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	3318      	adds	r3, #24
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fefa 	bl	8001e4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	f1c3 0205 	rsb	r2, r3, #5
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	3350      	adds	r3, #80	; 0x50
 8002072:	2204      	movs	r2, #4
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fb66 	bl	8005748 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	3354      	adds	r3, #84	; 0x54
 8002080:	2201      	movs	r2, #1
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fb5f 	bl	8005748 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	69b8      	ldr	r0, [r7, #24]
 8002090:	f000 fb88 	bl	80027a4 <pxPortInitialiseStack>
 8002094:	4602      	mov	r2, r0
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020a6:	bf00      	nop
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020b8:	f000 fd14 	bl	8002ae4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <prvAddNewTaskToReadyList+0xfc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <prvAddNewTaskToReadyList+0xfc>)
 80020c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <prvAddNewTaskToReadyList+0x100>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020ce:	4a38      	ldr	r2, [pc, #224]	; (80021b0 <prvAddNewTaskToReadyList+0x100>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <prvAddNewTaskToReadyList+0xfc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d110      	bne.n	80020fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80020dc:	f000 faca 	bl	8002674 <prvInitialiseTaskLists>
 80020e0:	e00d      	b.n	80020fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <prvAddNewTaskToReadyList+0x104>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <prvAddNewTaskToReadyList+0x100>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d802      	bhi.n	80020fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80020f8:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <prvAddNewTaskToReadyList+0x100>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <prvAddNewTaskToReadyList+0x108>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <prvAddNewTaskToReadyList+0x108>)
 8002106:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <prvAddNewTaskToReadyList+0x108>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <prvAddNewTaskToReadyList+0x94>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 f897 	bl	800524c <SEGGER_SYSVIEW_OnTaskCreate>
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	461d      	mov	r5, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461c      	mov	r4, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	1ae3      	subs	r3, r4, r3
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	462b      	mov	r3, r5
 8002140:	f001 f890 	bl	8003264 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f904 	bl	8005354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <prvAddNewTaskToReadyList+0x10c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <prvAddNewTaskToReadyList+0x10c>)
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <prvAddNewTaskToReadyList+0x110>)
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7ff fe76 	bl	8001e66 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800217a:	f000 fce1 	bl	8002b40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <prvAddNewTaskToReadyList+0x104>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <prvAddNewTaskToReadyList+0x100>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <prvAddNewTaskToReadyList+0x114>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bdb0      	pop	{r4, r5, r7, pc}
 80021ac:	20000110 	.word	0x20000110
 80021b0:	20000038 	.word	0x20000038
 80021b4:	2000011c 	.word	0x2000011c
 80021b8:	2000012c 	.word	0x2000012c
 80021bc:	20000118 	.word	0x20000118
 80021c0:	2000003c 	.word	0x2000003c
 80021c4:	e000ed04 	.word	0xe000ed04

080021c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <vTaskStartScheduler+0x94>)
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2282      	movs	r2, #130	; 0x82
 80021da:	4921      	ldr	r1, [pc, #132]	; (8002260 <vTaskStartScheduler+0x98>)
 80021dc:	4821      	ldr	r0, [pc, #132]	; (8002264 <vTaskStartScheduler+0x9c>)
 80021de:	f7ff fe90 	bl	8001f02 <xTaskCreate>
 80021e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d123      	bne.n	8002232 <vTaskStartScheduler+0x6a>
 80021ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <vTaskStartScheduler+0xa0>)
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002202:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <vTaskStartScheduler+0xa4>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <vTaskStartScheduler+0xa8>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <vTaskStartScheduler+0xac>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <vTaskStartScheduler+0x94>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d102      	bne.n	8002222 <vTaskStartScheduler+0x5a>
 800221c:	f002 fffa 	bl	8005214 <SEGGER_SYSVIEW_OnIdle>
 8002220:	e004      	b.n	800222c <vTaskStartScheduler+0x64>
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <vTaskStartScheduler+0xac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 f852 	bl	80052d0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800222c:	f000 fb42 	bl	80028b4 <xPortStartScheduler>
 8002230:	e00d      	b.n	800224e <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002238:	d109      	bne.n	800224e <vTaskStartScheduler+0x86>
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	e7fe      	b.n	800224c <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <vTaskStartScheduler+0xb0>)
 8002250:	681b      	ldr	r3, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000134 	.word	0x20000134
 8002260:	080057c4 	.word	0x080057c4
 8002264:	08002645 	.word	0x08002645
 8002268:	20000130 	.word	0x20000130
 800226c:	2000011c 	.word	0x2000011c
 8002270:	20000114 	.word	0x20000114
 8002274:	20000038 	.word	0x20000038
 8002278:	2000000c 	.word	0x2000000c

0800227c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <vTaskSuspendAll+0x18>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a03      	ldr	r2, [pc, #12]	; (8002294 <vTaskSuspendAll+0x18>)
 8002288:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	20000138 	.word	0x20000138

08002298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <xTaskResumeAll+0x11c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <xTaskResumeAll+0x2a>
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	e7fe      	b.n	80022c0 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80022c2:	f000 fc0f 	bl	8002ae4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <xTaskResumeAll+0x11c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <xTaskResumeAll+0x11c>)
 80022ce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d0:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <xTaskResumeAll+0x11c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d165      	bne.n	80023a4 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022d8:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <xTaskResumeAll+0x120>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d061      	beq.n	80023a4 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022e0:	e032      	b.n	8002348 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <xTaskResumeAll+0x124>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3318      	adds	r3, #24
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fddd 	bl	8001eae <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fdd8 	bl	8001eae <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f827 	bl	8005354 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	2201      	movs	r2, #1
 800230c:	409a      	lsls	r2, r3
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <xTaskResumeAll+0x128>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <xTaskResumeAll+0x128>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <xTaskResumeAll+0x12c>)
 8002326:	441a      	add	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f7ff fd99 	bl	8001e66 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <xTaskResumeAll+0x130>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <xTaskResumeAll+0x134>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <xTaskResumeAll+0x124>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1c8      	bne.n	80022e2 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002356:	f000 fa09 	bl	800276c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <xTaskResumeAll+0x138>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002366:	f000 f849 	bl	80023fc <xTaskIncrementTick>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <xTaskResumeAll+0x134>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3b01      	subs	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f1      	bne.n	8002366 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <xTaskResumeAll+0x138>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <xTaskResumeAll+0x134>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002390:	2301      	movs	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <xTaskResumeAll+0x13c>)
 8002396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80023a4:	f000 fbcc 	bl	8002b40 <vPortExitCritical>

    return xAlreadyYielded;
 80023a8:	68bb      	ldr	r3, [r7, #8]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000138 	.word	0x20000138
 80023b8:	20000110 	.word	0x20000110
 80023bc:	200000d0 	.word	0x200000d0
 80023c0:	20000118 	.word	0x20000118
 80023c4:	2000003c 	.word	0x2000003c
 80023c8:	20000038 	.word	0x20000038
 80023cc:	20000124 	.word	0x20000124
 80023d0:	20000120 	.word	0x20000120
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023de:	f000 fc63 	bl	8002ca8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <xTaskGetTickCountFromISR+0x20>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80023ec:	683b      	ldr	r3, [r7, #0]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000114 	.word	0x20000114

080023fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002406:	4b50      	ldr	r3, [pc, #320]	; (8002548 <xTaskIncrementTick+0x14c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8091 	bne.w	8002532 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <xTaskIncrementTick+0x150>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <xTaskIncrementTick+0x150>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002424:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <xTaskIncrementTick+0x154>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <xTaskIncrementTick+0x46>
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	e7fe      	b.n	8002440 <xTaskIncrementTick+0x44>
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <xTaskIncrementTick+0x154>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <xTaskIncrementTick+0x158>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <xTaskIncrementTick+0x154>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4a40      	ldr	r2, [pc, #256]	; (8002554 <xTaskIncrementTick+0x158>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b40      	ldr	r3, [pc, #256]	; (8002558 <xTaskIncrementTick+0x15c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <xTaskIncrementTick+0x15c>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	f000 f984 	bl	800276c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <xTaskIncrementTick+0x160>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	429a      	cmp	r2, r3
 800246c:	d34c      	bcc.n	8002508 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <xTaskIncrementTick+0x154>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002478:	4b38      	ldr	r3, [pc, #224]	; (800255c <xTaskIncrementTick+0x160>)
 800247a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800247e:	601a      	str	r2, [r3, #0]
                    break;
 8002480:	e042      	b.n	8002508 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <xTaskIncrementTick+0x154>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d203      	bcs.n	80024a2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <xTaskIncrementTick+0x160>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80024a0:	e032      	b.n	8002508 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3304      	adds	r3, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd01 	bl	8001eae <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3318      	adds	r3, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fcf8 	bl	8001eae <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 ff47 	bl	8005354 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	2201      	movs	r2, #1
 80024cc:	409a      	lsls	r2, r3
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <xTaskIncrementTick+0x164>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <xTaskIncrementTick+0x164>)
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <xTaskIncrementTick+0x168>)
 80024e6:	441a      	add	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3304      	adds	r3, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7ff fcb9 	bl	8001e66 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <xTaskIncrementTick+0x16c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3b5      	bcc.n	800246e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002502:	2301      	movs	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002506:	e7b2      	b.n	800246e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <xTaskIncrementTick+0x16c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4915      	ldr	r1, [pc, #84]	; (8002564 <xTaskIncrementTick+0x168>)
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d901      	bls.n	8002524 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002520:	2301      	movs	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <xTaskIncrementTick+0x170>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 800252c:	2301      	movs	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e004      	b.n	800253c <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <xTaskIncrementTick+0x174>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <xTaskIncrementTick+0x174>)
 800253a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800253c:	697b      	ldr	r3, [r7, #20]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000138 	.word	0x20000138
 800254c:	20000114 	.word	0x20000114
 8002550:	200000c8 	.word	0x200000c8
 8002554:	200000cc 	.word	0x200000cc
 8002558:	20000128 	.word	0x20000128
 800255c:	20000130 	.word	0x20000130
 8002560:	20000118 	.word	0x20000118
 8002564:	2000003c 	.word	0x2000003c
 8002568:	20000038 	.word	0x20000038
 800256c:	20000124 	.word	0x20000124
 8002570:	20000120 	.word	0x20000120

08002574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <vTaskSwitchContext+0xb8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <vTaskSwitchContext+0xbc>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002588:	e04c      	b.n	8002624 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <vTaskSwitchContext+0xbc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <vTaskSwitchContext+0xc0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	f1c3 031f 	rsb	r3, r3, #31
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	4924      	ldr	r1, [pc, #144]	; (8002638 <vTaskSwitchContext+0xc4>)
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <vTaskSwitchContext+0x5a>
        __asm volatile
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e7fe      	b.n	80025cc <vTaskSwitchContext+0x58>
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4a17      	ldr	r2, [pc, #92]	; (8002638 <vTaskSwitchContext+0xc4>)
 80025da:	4413      	add	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3308      	adds	r3, #8
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d104      	bne.n	80025fe <vTaskSwitchContext+0x8a>
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <vTaskSwitchContext+0xc8>)
 8002606:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <vTaskSwitchContext+0xc8>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <vTaskSwitchContext+0xcc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d102      	bne.n	800261a <vTaskSwitchContext+0xa6>
 8002614:	f002 fdfe 	bl	8005214 <SEGGER_SYSVIEW_OnIdle>
}
 8002618:	e004      	b.n	8002624 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <vTaskSwitchContext+0xc8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fe56 	bl	80052d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000138 	.word	0x20000138
 8002630:	20000124 	.word	0x20000124
 8002634:	20000118 	.word	0x20000118
 8002638:	2000003c 	.word	0x2000003c
 800263c:	20000038 	.word	0x20000038
 8002640:	20000134 	.word	0x20000134

08002644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800264c:	f000 f852 	bl	80026f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <prvIdleTask+0x28>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d9f9      	bls.n	800264c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <prvIdleTask+0x2c>)
 800265a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002668:	e7f0      	b.n	800264c <prvIdleTask+0x8>
 800266a:	bf00      	nop
 800266c:	2000003c 	.word	0x2000003c
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	e00c      	b.n	800269a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <prvInitialiseTaskLists+0x60>)
 800268c:	4413      	add	r3, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fbbc 	bl	8001e0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3301      	adds	r3, #1
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d9ef      	bls.n	8002680 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <prvInitialiseTaskLists+0x64>)
 80026a2:	f7ff fbb3 	bl	8001e0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <prvInitialiseTaskLists+0x68>)
 80026a8:	f7ff fbb0 	bl	8001e0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <prvInitialiseTaskLists+0x6c>)
 80026ae:	f7ff fbad 	bl	8001e0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <prvInitialiseTaskLists+0x70>)
 80026b4:	f7ff fbaa 	bl	8001e0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <prvInitialiseTaskLists+0x74>)
 80026ba:	f7ff fba7 	bl	8001e0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <prvInitialiseTaskLists+0x78>)
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <prvInitialiseTaskLists+0x64>)
 80026c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <prvInitialiseTaskLists+0x7c>)
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <prvInitialiseTaskLists+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	200000a0 	.word	0x200000a0
 80026dc:	200000b4 	.word	0x200000b4
 80026e0:	200000d0 	.word	0x200000d0
 80026e4:	200000e4 	.word	0x200000e4
 80026e8:	200000fc 	.word	0x200000fc
 80026ec:	200000c8 	.word	0x200000c8
 80026f0:	200000cc 	.word	0x200000cc

080026f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026fa:	e019      	b.n	8002730 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80026fc:	f000 f9f2 	bl	8002ae4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <prvCheckTasksWaitingTermination+0x4c>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fbce 	bl	8001eae <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <prvCheckTasksWaitingTermination+0x50>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3b01      	subs	r3, #1
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <prvCheckTasksWaitingTermination+0x50>)
 800271a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <prvCheckTasksWaitingTermination+0x54>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <prvCheckTasksWaitingTermination+0x54>)
 8002724:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002726:	f000 fa0b 	bl	8002b40 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f80e 	bl	800274c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <prvCheckTasksWaitingTermination+0x54>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e1      	bne.n	80026fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200000e4 	.word	0x200000e4
 8002744:	20000110 	.word	0x20000110
 8002748:	200000f8 	.word	0x200000f8

0800274c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fbbf 	bl	8002edc <vPortFree>
                vPortFree( pxTCB );
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fbbc 	bl	8002edc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <prvResetNextTaskUnblockTime+0x30>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <prvResetNextTaskUnblockTime+0x34>)
 800277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002780:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002782:	e005      	b.n	8002790 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <prvResetNextTaskUnblockTime+0x30>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <prvResetNextTaskUnblockTime+0x34>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200000c8 	.word	0x200000c8
 80027a0:	20000130 	.word	0x20000130

080027a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b04      	subs	r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b04      	subs	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3b04      	subs	r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <pxPortInitialiseStack+0x64>)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3b14      	subs	r3, #20
 80027de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3b04      	subs	r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f06f 0202 	mvn.w	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b20      	subs	r3, #32
 80027f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	0800280d 	.word	0x0800280d

0800280c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <prvTaskExitError+0x50>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281e:	d009      	beq.n	8002834 <prvTaskExitError+0x28>
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e7fe      	b.n	8002832 <prvTaskExitError+0x26>
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002846:	bf00      	nop
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0fc      	beq.n	8002848 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000010 	.word	0x20000010

08002860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <pxCurrentTCBConst2>)
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	6808      	ldr	r0, [r1, #0]
 8002866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286a:	f380 8809 	msr	PSP, r0
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f380 8811 	msr	BASEPRI, r0
 800287a:	4770      	bx	lr
 800287c:	f3af 8000 	nop.w

08002880 <pxCurrentTCBConst2>:
 8002880:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop

08002888 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002888:	4808      	ldr	r0, [pc, #32]	; (80028ac <prvPortStartFirstTask+0x24>)
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	6800      	ldr	r0, [r0, #0]
 800288e:	f380 8808 	msr	MSP, r0
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f380 8814 	msr	CONTROL, r0
 800289a:	b662      	cpsie	i
 800289c:	b661      	cpsie	f
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	df00      	svc	0
 80028a8:	bf00      	nop
 80028aa:	0000      	.short	0x0000
 80028ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop

080028b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028ba:	4b44      	ldr	r3, [pc, #272]	; (80029cc <xPortStartScheduler+0x118>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a44      	ldr	r2, [pc, #272]	; (80029d0 <xPortStartScheduler+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d109      	bne.n	80028d8 <xPortStartScheduler+0x24>
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e7fe      	b.n	80028d6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028d8:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <xPortStartScheduler+0x118>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <xPortStartScheduler+0x120>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d109      	bne.n	80028f6 <xPortStartScheduler+0x42>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e7fe      	b.n	80028f4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <xPortStartScheduler+0x124>)
 80028f8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	22ff      	movs	r2, #255	; 0xff
 8002906:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <xPortStartScheduler+0x128>)
 800291c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <xPortStartScheduler+0x12c>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002924:	e009      	b.n	800293a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <xPortStartScheduler+0x12c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3b01      	subs	r3, #1
 800292c:	4a2c      	ldr	r2, [pc, #176]	; (80029e0 <xPortStartScheduler+0x12c>)
 800292e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d0ef      	beq.n	8002926 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <xPortStartScheduler+0x12c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	d009      	beq.n	8002966 <xPortStartScheduler+0xb2>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	e7fe      	b.n	8002964 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <xPortStartScheduler+0x12c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <xPortStartScheduler+0x12c>)
 800296e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <xPortStartScheduler+0x12c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <xPortStartScheduler+0x12c>)
 800297a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <xPortStartScheduler+0x130>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <xPortStartScheduler+0x130>)
 800298a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <xPortStartScheduler+0x130>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <xPortStartScheduler+0x130>)
 8002996:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800299a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800299c:	f000 f954 	bl	8002c48 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <xPortStartScheduler+0x134>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029a6:	f000 f973 	bl	8002c90 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <xPortStartScheduler+0x138>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <xPortStartScheduler+0x138>)
 80029b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80029b4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029b6:	f7ff ff67 	bl	8002888 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029ba:	f7ff fddb 	bl	8002574 <vTaskSwitchContext>
    prvTaskExitError();
 80029be:	f7ff ff25 	bl	800280c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	e000ed00 	.word	0xe000ed00
 80029d0:	410fc271 	.word	0x410fc271
 80029d4:	410fc270 	.word	0x410fc270
 80029d8:	e000e400 	.word	0xe000e400
 80029dc:	2000013c 	.word	0x2000013c
 80029e0:	20000140 	.word	0x20000140
 80029e4:	e000ed20 	.word	0xe000ed20
 80029e8:	20000010 	.word	0x20000010
 80029ec:	e000ef34 	.word	0xe000ef34

080029f0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <vInitPrioGroupValue+0xdc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <vInitPrioGroupValue+0xe0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d109      	bne.n	8002a14 <vInitPrioGroupValue+0x24>
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e7fe      	b.n	8002a12 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <vInitPrioGroupValue+0xdc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	; (8002ad4 <vInitPrioGroupValue+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d109      	bne.n	8002a32 <vInitPrioGroupValue+0x42>
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e7fe      	b.n	8002a30 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <vInitPrioGroupValue+0xe8>)
 8002a34:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <vInitPrioGroupValue+0xec>)
 8002a58:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a60:	e009      	b.n	8002a76 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002a6a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d0ef      	beq.n	8002a62 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1c3 0307 	rsb	r3, r3, #7
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d009      	beq.n	8002aa2 <vInitPrioGroupValue+0xb2>
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	e7fe      	b.n	8002aa0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002aaa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <vInitPrioGroupValue+0xf0>)
 8002ab6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	410fc271 	.word	0x410fc271
 8002ad4:	410fc270 	.word	0x410fc270
 8002ad8:	e000e400 	.word	0xe000e400
 8002adc:	2000013c 	.word	0x2000013c
 8002ae0:	20000140 	.word	0x20000140

08002ae4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <vPortEnterCritical+0x54>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <vPortEnterCritical+0x54>)
 8002b04:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <vPortEnterCritical+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <vPortEnterCritical+0x58>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <vPortEnterCritical+0x48>
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	e7fe      	b.n	8002b2a <vPortEnterCritical+0x46>
    }
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <vPortExitCritical+0x4c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <vPortExitCritical+0x22>
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	e7fe      	b.n	8002b60 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <vPortExitCritical+0x4c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <vPortExitCritical+0x4c>)
 8002b6a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <vPortExitCritical+0x4c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <vPortExitCritical+0x3e>
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010

08002b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b90:	f3ef 8009 	mrs	r0, PSP
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <pxCurrentTCBConst>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f01e 0f10 	tst.w	lr, #16
 8002ba0:	bf08      	it	eq
 8002ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bb4:	f380 8811 	msr	BASEPRI, r0
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f7ff fcd8 	bl	8002574 <vTaskSwitchContext>
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f380 8811 	msr	BASEPRI, r0
 8002bcc:	bc09      	pop	{r0, r3}
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	6808      	ldr	r0, [r1, #0]
 8002bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd6:	f01e 0f10 	tst.w	lr, #16
 8002bda:	bf08      	it	eq
 8002bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002be0:	f380 8809 	msr	PSP, r0
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w

08002bf0 <pxCurrentTCBConst>:
 8002bf0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop

08002bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002c10:	f002 fa86 	bl	8005120 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c14:	f7ff fbf2 	bl	80023fc <xTaskIncrementTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002c1e:	f002 fadd 	bl	80051dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <SysTick_Handler+0x4c>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e001      	b.n	8002c30 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8002c2c:	f002 faba 	bl	80051a4 <SEGGER_SYSVIEW_RecordExitISR>
 8002c30:	2300      	movs	r3, #0
 8002c32:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <vPortSetupTimerInterrupt+0x34>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <vPortSetupTimerInterrupt+0x38>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <vPortSetupTimerInterrupt+0x3c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <vPortSetupTimerInterrupt+0x40>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <vPortSetupTimerInterrupt+0x44>)
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <vPortSetupTimerInterrupt+0x34>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010
 8002c80:	e000e018 	.word	0xe000e018
 8002c84:	20000000 	.word	0x20000000
 8002c88:	10624dd3 	.word	0x10624dd3
 8002c8c:	e000e014 	.word	0xe000e014

08002c90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ca0 <vPortEnableVFP+0x10>
 8002c94:	6801      	ldr	r1, [r0, #0]
 8002c96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c9a:	6001      	str	r1, [r0, #0]
 8002c9c:	4770      	bx	lr
 8002c9e:	0000      	.short	0x0000
 8002ca0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002cae:	f3ef 8305 	mrs	r3, IPSR
 8002cb2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d913      	bls.n	8002ce2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <vPortValidateInterruptPriority+0x6c>)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <vPortValidateInterruptPriority+0x70>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	7afa      	ldrb	r2, [r7, #11]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d209      	bcs.n	8002ce2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	e7fe      	b.n	8002ce0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <vPortValidateInterruptPriority+0x74>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <vPortValidateInterruptPriority+0x78>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d909      	bls.n	8002d06 <vPortValidateInterruptPriority+0x5e>
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	e7fe      	b.n	8002d04 <vPortValidateInterruptPriority+0x5c>
    }
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e3f0 	.word	0xe000e3f0
 8002d18:	2000013c 	.word	0x2000013c
 8002d1c:	e000ed0c 	.word	0xe000ed0c
 8002d20:	20000140 	.word	0x20000140

08002d24 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002d30:	f7ff faa4 	bl	800227c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <pvPortMalloc+0x1a0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002d3c:	f000 f92e 	bl	8002f9c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <pvPortMalloc+0x1a4>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 80a5 	bne.w	8002e98 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02c      	beq.n	8002dae <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002d54:	2208      	movs	r2, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d226      	bcs.n	8002dae <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002d60:	2208      	movs	r2, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f023 0307 	bic.w	r3, r3, #7
 8002d78:	3308      	adds	r3, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d213      	bcs.n	8002da8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f023 0307 	bic.w	r3, r3, #7
 8002d86:	3308      	adds	r3, #8
 8002d88:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00f      	beq.n	8002db4 <pvPortMalloc+0x90>
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e7fe      	b.n	8002da6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dac:	e002      	b.n	8002db4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e000      	b.n	8002db6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002db4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d06d      	beq.n	8002e98 <pvPortMalloc+0x174>
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <pvPortMalloc+0x1a8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d868      	bhi.n	8002e98 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002dc6:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <pvPortMalloc+0x1ac>)
 8002dc8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <pvPortMalloc+0x1ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dd0:	e004      	b.n	8002ddc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d903      	bls.n	8002dee <pvPortMalloc+0xca>
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f1      	bne.n	8002dd2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <pvPortMalloc+0x1a0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d04f      	beq.n	8002e98 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4413      	add	r3, r2
 8002e00:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	2308      	movs	r3, #8
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d91e      	bls.n	8002e58 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <pvPortMalloc+0x11c>
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e7fe      	b.n	8002e3e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e52:	69b8      	ldr	r0, [r7, #24]
 8002e54:	f000 f904 	bl	8003060 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <pvPortMalloc+0x1a8>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <pvPortMalloc+0x1a8>)
 8002e64:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <pvPortMalloc+0x1a8>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <pvPortMalloc+0x1b0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d203      	bcs.n	8002e7a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <pvPortMalloc+0x1a8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <pvPortMalloc+0x1b0>)
 8002e78:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <pvPortMalloc+0x1a4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <pvPortMalloc+0x1b4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <pvPortMalloc+0x1b4>)
 8002e96:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e98:	f7ff f9fe 	bl	8002298 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <pvPortMalloc+0x196>
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e7fe      	b.n	8002eb8 <pvPortMalloc+0x194>
    return pvReturn;
 8002eba:	69fb      	ldr	r3, [r7, #28]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2001914c 	.word	0x2001914c
 8002ec8:	20019160 	.word	0x20019160
 8002ecc:	20019150 	.word	0x20019150
 8002ed0:	20019144 	.word	0x20019144
 8002ed4:	20019154 	.word	0x20019154
 8002ed8:	20019158 	.word	0x20019158

08002edc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04b      	beq.n	8002f86 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002eee:	2308      	movs	r3, #8
 8002ef0:	425b      	negs	r3, r3
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <vPortFree+0xb4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <vPortFree+0x42>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e7fe      	b.n	8002f1c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <vPortFree+0x5e>
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	e7fe      	b.n	8002f38 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <vPortFree+0xb4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01e      	beq.n	8002f86 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11a      	bne.n	8002f86 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <vPortFree+0xb4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002f60:	f7ff f98c 	bl	800227c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <vPortFree+0xb8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <vPortFree+0xb8>)
 8002f70:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f72:	6938      	ldr	r0, [r7, #16]
 8002f74:	f000 f874 	bl	8003060 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <vPortFree+0xbc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <vPortFree+0xbc>)
 8002f80:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f82:	f7ff f989 	bl	8002298 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20019160 	.word	0x20019160
 8002f94:	20019150 	.word	0x20019150
 8002f98:	2001915c 	.word	0x2001915c

08002f9c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fa2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8002fa6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <prvHeapInit+0xac>)
 8002faa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3307      	adds	r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <prvHeapInit+0xac>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <prvHeapInit+0xb0>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <prvHeapInit+0xb0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002fe8:	2208      	movs	r2, #8
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <prvHeapInit+0xb4>)
 8002ffc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <prvHeapInit+0xb4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <prvHeapInit+0xb4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <prvHeapInit+0xb4>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <prvHeapInit+0xb8>)
 800302a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a09      	ldr	r2, [pc, #36]	; (8003058 <prvHeapInit+0xbc>)
 8003032:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <prvHeapInit+0xc0>)
 8003036:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	20000144 	.word	0x20000144
 800304c:	20019144 	.word	0x20019144
 8003050:	2001914c 	.word	0x2001914c
 8003054:	20019154 	.word	0x20019154
 8003058:	20019150 	.word	0x20019150
 800305c:	20019160 	.word	0x20019160

08003060 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003068:	4b28      	ldr	r3, [pc, #160]	; (800310c <prvInsertBlockIntoFreeList+0xac>)
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e002      	b.n	8003074 <prvInsertBlockIntoFreeList+0x14>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d8f7      	bhi.n	800306e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4413      	add	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d108      	bne.n	80030a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	441a      	add	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d118      	bne.n	80030e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <prvInsertBlockIntoFreeList+0xb0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d00d      	beq.n	80030de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e008      	b.n	80030f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <prvInsertBlockIntoFreeList+0xb0>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e003      	b.n	80030f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d002      	beq.n	80030fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20019144 	.word	0x20019144
 8003110:	2001914c 	.word	0x2001914c

08003114 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <_cbSendSystemDesc+0x14>)
 800311a:	f001 ffad 	bl	8005078 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800311e:	4803      	ldr	r0, [pc, #12]	; (800312c <_cbSendSystemDesc+0x18>)
 8003120:	f001 ffaa 	bl	8005078 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	080057cc 	.word	0x080057cc
 800312c:	08005804 	.word	0x08005804

08003130 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <SEGGER_SYSVIEW_Conf+0x20>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SEGGER_SYSVIEW_Conf+0x20>)
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SEGGER_SYSVIEW_Conf+0x24>)
 800313e:	4a06      	ldr	r2, [pc, #24]	; (8003158 <SEGGER_SYSVIEW_Conf+0x28>)
 8003140:	f001 fc1e 	bl	8004980 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003144:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003148:	f001 fc5e 	bl	8004a08 <SEGGER_SYSVIEW_SetRAMBase>
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000000 	.word	0x20000000
 8003154:	08003115 	.word	0x08003115
 8003158:	08005898 	.word	0x08005898

0800315c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	e034      	b.n	80031d2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003168:	491e      	ldr	r1, [pc, #120]	; (80031e4 <_cbSendTaskList+0x88>)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	491a      	ldr	r1, [pc, #104]	; (80031e4 <_cbSendTaskList+0x88>)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3304      	adds	r3, #4
 8003188:	681c      	ldr	r4, [r3, #0]
 800318a:	4916      	ldr	r1, [pc, #88]	; (80031e4 <_cbSendTaskList+0x88>)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3308      	adds	r3, #8
 800319a:	681d      	ldr	r5, [r3, #0]
 800319c:	4911      	ldr	r1, [pc, #68]	; (80031e4 <_cbSendTaskList+0x88>)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	330c      	adds	r3, #12
 80031ac:	681e      	ldr	r6, [r3, #0]
 80031ae:	490d      	ldr	r1, [pc, #52]	; (80031e4 <_cbSendTaskList+0x88>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3310      	adds	r3, #16
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4633      	mov	r3, r6
 80031c4:	462a      	mov	r2, r5
 80031c6:	4621      	mov	r1, r4
 80031c8:	f000 f8b4 	bl	8003334 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3301      	adds	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <_cbSendTaskList+0x8c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d3c5      	bcc.n	8003168 <_cbSendTaskList+0xc>
  }
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e4:	20019164 	.word	0x20019164
 80031e8:	20019204 	.word	0x20019204

080031ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80031f2:	f7ff f8f1 	bl	80023d8 <xTaskGetTickCountFromISR>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003200:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003204:	462b      	mov	r3, r5
 8003206:	4634      	mov	r4, r6
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	0162      	lsls	r2, r4, #5
 8003212:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	460b      	mov	r3, r1
 800321a:	4614      	mov	r4, r2
 800321c:	1b5b      	subs	r3, r3, r5
 800321e:	eb64 0406 	sbc.w	r4, r4, r6
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	00a2      	lsls	r2, r4, #2
 800322c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003230:	0099      	lsls	r1, r3, #2
 8003232:	460b      	mov	r3, r1
 8003234:	4614      	mov	r4, r2
 8003236:	195b      	adds	r3, r3, r5
 8003238:	eb44 0406 	adc.w	r4, r4, r6
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	00e2      	lsls	r2, r4, #3
 8003246:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800324a:	00d9      	lsls	r1, r3, #3
 800324c:	460b      	mov	r3, r1
 800324e:	4614      	mov	r4, r2
 8003250:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003254:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003258:	4618      	mov	r0, r3
 800325a:	4621      	mov	r1, r4
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003264 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003272:	2205      	movs	r2, #5
 8003274:	492b      	ldr	r1, [pc, #172]	; (8003324 <SYSVIEW_AddTask+0xc0>)
 8003276:	68b8      	ldr	r0, [r7, #8]
 8003278:	f002 fa4c 	bl	8005714 <memcmp>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d04b      	beq.n	800331a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b07      	cmp	r3, #7
 8003288:	d903      	bls.n	8003292 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800328a:	4828      	ldr	r0, [pc, #160]	; (800332c <SYSVIEW_AddTask+0xc8>)
 800328c:	f002 f994 	bl	80055b8 <SEGGER_SYSVIEW_Warn>
    return;
 8003290:	e044      	b.n	800331c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4926      	ldr	r1, [pc, #152]	; (8003330 <SYSVIEW_AddTask+0xcc>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4921      	ldr	r1, [pc, #132]	; (8003330 <SYSVIEW_AddTask+0xcc>)
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3304      	adds	r3, #4
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	491b      	ldr	r1, [pc, #108]	; (8003330 <SYSVIEW_AddTask+0xcc>)
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3308      	adds	r3, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <SYSVIEW_AddTask+0xcc>)
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	330c      	adds	r3, #12
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4910      	ldr	r1, [pc, #64]	; (8003330 <SYSVIEW_AddTask+0xcc>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3310      	adds	r3, #16
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	4a08      	ldr	r2, [pc, #32]	; (8003328 <SYSVIEW_AddTask+0xc4>)
 8003306:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f80e 	bl	8003334 <SYSVIEW_SendTaskInfo>
 8003318:	e000      	b.n	800331c <SYSVIEW_AddTask+0xb8>
    return;
 800331a:	bf00      	nop

}
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08005814 	.word	0x08005814
 8003328:	20019204 	.word	0x20019204
 800332c:	0800581c 	.word	0x0800581c
 8003330:	20019164 	.word	0x20019164

08003334 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	2214      	movs	r2, #20
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f002 f9fc 	bl	8005748 <memset>
  TaskInfo.TaskID     = TaskID;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fd8d 	bl	8004e88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800336e:	bf00      	nop
 8003370:	3728      	adds	r7, #40	; 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <__NVIC_EnableIRQ>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800340e:	f002 f92f 	bl	8005670 <SEGGER_SYSVIEW_IsStarted>
 8003412:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800341a:	f001 fbb9 	bl	8004b90 <SEGGER_SYSVIEW_Start>
  }
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <_cbOnUARTRx+0x3c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d806      	bhi.n	8003448 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <_cbOnUARTRx+0x3c>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <_cbOnUARTRx+0x3c>)
 8003444:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003446:	e009      	b.n	800345c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003448:	f7ff ffde 	bl	8003408 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <_cbOnUARTRx+0x3c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	2201      	movs	r2, #1
 8003456:	4619      	mov	r1, r3
 8003458:	f000 fb9a 	bl	8003b90 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800345c:	bf00      	nop
}
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000014 	.word	0x20000014

08003468 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <_cbOnUARTTx+0x5c>)
 8003472:	785b      	ldrb	r3, [r3, #1]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d80f      	bhi.n	8003498 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <_cbOnUARTTx+0x5c>)
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	461a      	mov	r2, r3
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <_cbOnUARTTx+0x60>)
 8003480:	5c9a      	ldrb	r2, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <_cbOnUARTTx+0x5c>)
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	3301      	adds	r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <_cbOnUARTTx+0x5c>)
 8003490:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003492:	2301      	movs	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003496:	e00f      	b.n	80034b8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <_cbOnUARTTx+0x5c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fa1b 	bl	80038dc <SEGGER_RTT_ReadUpBufferNoLock>
 80034a6:	4603      	mov	r3, r0
 80034a8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	da02      	bge.n	80034b6 <_cbOnUARTTx+0x4e>
    r = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e000      	b.n	80034b8 <_cbOnUARTTx+0x50>
  }
Done:
 80034b6:	bf00      	nop
  return r;
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000014 	.word	0x20000014
 80034c8:	080058a0 	.word	0x080058a0

080034cc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <SEGGER_UART_init+0x1c>)
 80034d6:	4905      	ldr	r1, [pc, #20]	; (80034ec <SEGGER_UART_init+0x20>)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f863 	bl	80035a4 <HIF_UART_Init>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08003429 	.word	0x08003429
 80034ec:	08003469 	.word	0x08003469

080034f0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <USART2_IRQHandler+0x80>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d011      	beq.n	800352a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <USART2_IRQHandler+0x84>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 030b 	and.w	r3, r3, #11
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <USART2_IRQHandler+0x88>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <USART2_IRQHandler+0x88>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	79fa      	ldrb	r2, [r7, #7]
 8003526:	4610      	mov	r0, r2
 8003528:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01a      	beq.n	800356a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <USART2_IRQHandler+0x8c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <USART2_IRQHandler+0x8c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1dfa      	adds	r2, r7, #7
 8003542:	4610      	mov	r0, r2
 8003544:	4798      	blx	r3
 8003546:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <USART2_IRQHandler+0x90>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <USART2_IRQHandler+0x90>)
 8003554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e006      	b.n	800356a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <USART2_IRQHandler+0x80>)
 800355e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003560:	79fa      	ldrb	r2, [r7, #7]
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <USART2_IRQHandler+0x84>)
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e000      	b.n	800356a <USART2_IRQHandler+0x7a>
      return;
 8003568:	bf00      	nop
    }
  }
}
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40004400 	.word	0x40004400
 8003574:	40004404 	.word	0x40004404
 8003578:	20019208 	.word	0x20019208
 800357c:	2001920c 	.word	0x2001920c
 8003580:	4000440c 	.word	0x4000440c

08003584 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800358e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003592:	6013      	str	r3, [r2, #0]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	4000440c 	.word	0x4000440c

080035a4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <HIF_UART_Init+0xc8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	; (800366c <HIF_UART_Init+0xc8>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80035bc:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HIF_UART_Init+0xcc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <HIF_UART_Init+0xcc>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HIF_UART_Init+0xd0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80035dc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80035de:	4a25      	ldr	r2, [pc, #148]	; (8003674 <HIF_UART_Init+0xd0>)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HIF_UART_Init+0xd4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80035f8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HIF_UART_Init+0xd4>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HIF_UART_Init+0xd8>)
 8003602:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003606:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HIF_UART_Init+0xdc>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HIF_UART_Init+0xe0>)
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HIF_UART_Init+0xe4>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	3301      	adds	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d302      	bcc.n	800363a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003634:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003638:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4a11      	ldr	r2, [pc, #68]	; (800368c <HIF_UART_Init+0xe8>)
 8003646:	b29b      	uxth	r3, r3
 8003648:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HIF_UART_Init+0xec>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HIF_UART_Init+0xf0>)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003656:	2106      	movs	r1, #6
 8003658:	2026      	movs	r0, #38	; 0x26
 800365a:	f7ff feab 	bl	80033b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800365e:	2026      	movs	r0, #38	; 0x26
 8003660:	f7ff fe8a 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023840 	.word	0x40023840
 8003670:	40023830 	.word	0x40023830
 8003674:	40020020 	.word	0x40020020
 8003678:	40020000 	.word	0x40020000
 800367c:	4000440c 	.word	0x4000440c
 8003680:	40004410 	.word	0x40004410
 8003684:	40004414 	.word	0x40004414
 8003688:	0501bd00 	.word	0x0501bd00
 800368c:	40004408 	.word	0x40004408
 8003690:	20019208 	.word	0x20019208
 8003694:	2001920c 	.word	0x2001920c

08003698 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <_DoInit+0xa0>)
 80036a0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80036a2:	22a8      	movs	r2, #168	; 0xa8
 80036a4:	2100      	movs	r1, #0
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f002 f84e 	bl	8005748 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2203      	movs	r2, #3
 80036b0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2203      	movs	r2, #3
 80036b6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <_DoInit+0xa4>)
 80036bc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <_DoInit+0xa8>)
 80036c2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <_DoInit+0xa4>)
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	; (8003744 <_DoInit+0xac>)
 80036e8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2210      	movs	r2, #16
 80036ee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003702:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	e00c      	b.n	8003726 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1c3 030f 	rsb	r3, r3, #15
 8003712:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <_DoInit+0xb0>)
 8003714:	5cd1      	ldrb	r1, [r2, r3]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	460a      	mov	r2, r1
 800371e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d9ef      	bls.n	800370c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800372c:	f3bf 8f5f 	dmb	sy
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	2001a780 	.word	0x2001a780
 800373c:	0800586c 	.word	0x0800586c
 8003740:	20019210 	.word	0x20019210
 8003744:	20019610 	.word	0x20019610
 8003748:	080058a4 	.word	0x080058a4

0800374c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003758:	2300      	movs	r3, #0
 800375a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	429a      	cmp	r2, r3
 800376e:	d905      	bls.n	800377c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	e007      	b.n	800378c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	1acb      	subs	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3b01      	subs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003796:	4293      	cmp	r3, r2
 8003798:	bf28      	it	cs
 800379a:	4613      	movcs	r3, r2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bf28      	it	cs
 80037a6:	4613      	movcs	r3, r2
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6978      	ldr	r0, [r7, #20]
 80037ba:	f001 ffba 	bl	8005732 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	4413      	add	r3, r2
 80037c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	4413      	add	r3, r2
 80037cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	4413      	add	r3, r2
 80037dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d101      	bne.n	80037ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1b2      	bne.n	8003762 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003806:	b580      	push	{r7, lr}
 8003808:	b088      	sub	sp, #32
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d911      	bls.n	800384e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6938      	ldr	r0, [r7, #16]
 800383a:	f001 ff7a 	bl	8005732 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800383e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800384c:	e01f      	b.n	800388e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	6938      	ldr	r0, [r7, #16]
 8003862:	f001 ff66 	bl	8005732 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4619      	mov	r1, r3
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	f001 ff57 	bl	8005732 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003884:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	60da      	str	r2, [r3, #12]
}
 800388e:	bf00      	nop
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d808      	bhi.n	80038c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e004      	b.n	80038ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80038ce:	697b      	ldr	r3, [r7, #20]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80038e8:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80038f6:	f7ff fecf 	bl	8003698 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003908:	4413      	add	r3, r2
 800390a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800391c:	2300      	movs	r3, #0
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	d92b      	bls.n	8003980 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4293      	cmp	r3, r2
 8003938:	bf28      	it	cs
 800393a:	4613      	movcs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	4413      	add	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	6939      	ldr	r1, [r7, #16]
 800394c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800394e:	f001 fef0 	bl	8005732 <memcpy>
    NumBytesRead += NumBytesRem;
 8003952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4413      	add	r3, r2
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800396a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003978:	429a      	cmp	r2, r3
 800397a:	d101      	bne.n	8003980 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4293      	cmp	r3, r2
 800398e:	bf28      	it	cs
 8003990:	4613      	movcs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	4413      	add	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039aa:	f001 fec2 	bl	8005732 <memcpy>
    NumBytesRead += NumBytesRem;
 80039ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4413      	add	r3, r2
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3730      	adds	r7, #48	; 0x30
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2001a780 	.word	0x2001a780

080039e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <SEGGER_RTT_ReadNoLock+0x108>)
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003a02:	f7ff fe49 	bl	8003698 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	3360      	adds	r3, #96	; 0x60
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d92b      	bls.n	8003a8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf28      	it	cs
 8003a46:	4613      	movcs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	4413      	add	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	6939      	ldr	r1, [r7, #16]
 8003a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a5a:	f001 fe6a 	bl	8005732 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4413      	add	r3, r2
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d101      	bne.n	8003a8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf28      	it	cs
 8003a9c:	4613      	movcs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	4413      	add	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6939      	ldr	r1, [r7, #16]
 8003ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab6:	f001 fe3c 	bl	8005732 <memcpy>
    NumBytesRead += NumBytesRem;
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3730      	adds	r7, #48	; 0x30
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2001a780 	.word	0x2001a780

08003af4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	3360      	adds	r3, #96	; 0x60
 8003b10:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d017      	beq.n	8003b4e <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d302      	bcc.n	8003b28 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d023      	beq.n	8003b6e <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8003b26:	e029      	b.n	8003b7c <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f7ff feb4 	bl	8003896 <_GetAvailWriteSpace>
 8003b2e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d202      	bcs.n	8003b3e <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003b3c:	e021      	b.n	8003b82 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7ff fe5d 	bl	8003806 <_WriteNoCheck>
    break;
 8003b4c:	e019      	b.n	8003b82 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7ff fea1 	bl	8003896 <_GetAvailWriteSpace>
 8003b54:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	bf28      	it	cs
 8003b5e:	4613      	movcs	r3, r2
 8003b60:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff fe4d 	bl	8003806 <_WriteNoCheck>
    break;
 8003b6c:	e009      	b.n	8003b82 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f7ff fdea 	bl	800374c <_WriteBlocking>
 8003b78:	61f8      	str	r0, [r7, #28]
    break;
 8003b7a:	e002      	b.n	8003b82 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
    break;
 8003b80:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	2001a780 	.word	0x2001a780

08003b90 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003baa:	f7ff fd75 	bl	8003698 <_DoInit>
  SEGGER_RTT_LOCK();
 8003bae:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb2:	f04f 0120 	mov.w	r1, #32
 8003bb6:	f381 8811 	msr	BASEPRI, r1
 8003bba:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff ff97 	bl	8003af4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003bc6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	2001a780 	.word	0x2001a780

08003bdc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003bea:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <SEGGER_RTT_AllocUpBuffer+0x20>
 8003bf8:	f7ff fd4e 	bl	8003698 <_DoInit>
  SEGGER_RTT_LOCK();
 8003bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8003c00:	f04f 0120 	mov.w	r1, #32
 8003c04:	f381 8811 	msr	BASEPRI, r1
 8003c08:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c0a:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c0c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003c12:	6939      	ldr	r1, [r7, #16]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3304      	adds	r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	dbeb      	blt.n	8003c12 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003c3a:	e000      	b.n	8003c3e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003c3c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	da3f      	bge.n	8003cc8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003c48:	6939      	ldr	r1, [r7, #16]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003c5c:	6939      	ldr	r1, [r7, #16]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3320      	adds	r3, #32
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003c86:	6939      	ldr	r1, [r7, #16]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003c9a:	6939      	ldr	r1, [r7, #16]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003cae:	6939      	ldr	r1, [r7, #16]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	332c      	adds	r3, #44	; 0x2c
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cc2:	f3bf 8f5f 	dmb	sy
 8003cc6:	e002      	b.n	8003cce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ccc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2001a780 	.word	0x2001a780

08003ce4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d00:	f7ff fcca 	bl	8003698 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003d06:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d82c      	bhi.n	8003d68 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d12:	f04f 0120 	mov.w	r1, #32
 8003d16:	f381 8811 	msr	BASEPRI, r1
 8003d1a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	3360      	adds	r3, #96	; 0x60
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d56:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e002      	b.n	8003d6e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3728      	adds	r7, #40	; 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2001a780 	.word	0x2001a780

08003d7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00f      	beq.n	8003db2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003d92:	e002      	b.n	8003d9a <_EncodeStr+0x1e>
      Len++;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3301      	adds	r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f6      	bne.n	8003d94 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d901      	bls.n	8003db2 <_EncodeStr+0x36>
      Len = Limit;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2bfe      	cmp	r3, #254	; 0xfe
 8003db6:	d806      	bhi.n	8003dc6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	60fa      	str	r2, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e011      	b.n	8003dea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	60fa      	str	r2, [r7, #12]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	0a19      	lsrs	r1, r3, #8
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	60fa      	str	r2, [r7, #12]
 8003de6:	b2ca      	uxtb	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003dee:	e00a      	b.n	8003e06 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	1c53      	adds	r3, r2, #1
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1c59      	adds	r1, r3, #1
 8003dfa:	60f9      	str	r1, [r7, #12]
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
    n++;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3f0      	bcc.n	8003df0 <_EncodeStr+0x74>
  }
  return pPayload;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3307      	adds	r3, #7
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e3a:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <_HandleIncomingPacket+0xd0>)
 8003e3c:	7e1b      	ldrb	r3, [r3, #24]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	1cfb      	adds	r3, r7, #3
 8003e42:	2201      	movs	r2, #1
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7ff fdcf 	bl	80039e8 <SEGGER_RTT_ReadNoLock>
 8003e4a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04c      	beq.n	8003eec <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d022      	beq.n	8003e9e <_HandleIncomingPacket+0x6a>
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	dc0b      	bgt.n	8003e74 <_HandleIncomingPacket+0x40>
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d015      	beq.n	8003e8c <_HandleIncomingPacket+0x58>
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	dc02      	bgt.n	8003e6a <_HandleIncomingPacket+0x36>
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d00e      	beq.n	8003e86 <_HandleIncomingPacket+0x52>
 8003e68:	e033      	b.n	8003ed2 <_HandleIncomingPacket+0x9e>
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d011      	beq.n	8003e92 <_HandleIncomingPacket+0x5e>
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d012      	beq.n	8003e98 <_HandleIncomingPacket+0x64>
 8003e72:	e02e      	b.n	8003ed2 <_HandleIncomingPacket+0x9e>
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	d018      	beq.n	8003eaa <_HandleIncomingPacket+0x76>
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	db13      	blt.n	8003ea4 <_HandleIncomingPacket+0x70>
 8003e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7e:	d037      	beq.n	8003ef0 <_HandleIncomingPacket+0xbc>
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d015      	beq.n	8003eb0 <_HandleIncomingPacket+0x7c>
 8003e84:	e025      	b.n	8003ed2 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003e86:	f000 fe83 	bl	8004b90 <SEGGER_SYSVIEW_Start>
      break;
 8003e8a:	e036      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003e8c:	f000 ff3c 	bl	8004d08 <SEGGER_SYSVIEW_Stop>
      break;
 8003e90:	e033      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e92:	f001 f915 	bl	80050c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e96:	e030      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e98:	f001 f8da 	bl	8005050 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e9c:	e02d      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e9e:	f000 ff59 	bl	8004d54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ea2:	e02a      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ea4:	f001 fb36 	bl	8005514 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ea8:	e027      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003eaa:	f001 fb15 	bl	80054d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003eae:	e024      	b.n	8003efa <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <_HandleIncomingPacket+0xd0>)
 8003eb2:	7e1b      	ldrb	r3, [r3, #24]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	1cfb      	adds	r3, r7, #3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7ff fd94 	bl	80039e8 <SEGGER_RTT_ReadNoLock>
 8003ec0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fa84 	bl	80053d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003ed0:	e010      	b.n	8003ef4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0e      	bge.n	8003ef8 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <_HandleIncomingPacket+0xd0>)
 8003edc:	7e1b      	ldrb	r3, [r3, #24]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	1cfb      	adds	r3, r7, #3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7ff fd7f 	bl	80039e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003eea:	e005      	b.n	8003ef8 <_HandleIncomingPacket+0xc4>
    }
  }
 8003eec:	bf00      	nop
 8003eee:	e004      	b.n	8003efa <_HandleIncomingPacket+0xc6>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <_HandleIncomingPacket+0xc6>
      break;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <_HandleIncomingPacket+0xc6>
      break;
 8003ef8:	bf00      	nop
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	2001a628 	.word	0x2001a628

08003f08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	; 0x30
 8003f0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f0e:	2301      	movs	r3, #1
 8003f10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f22:	e00b      	b.n	8003f3c <_TrySendOverflowPacket+0x34>
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	09db      	lsrs	r3, r3, #7
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f40:	d8f0      	bhi.n	8003f24 <_TrySendOverflowPacket+0x1c>
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <_TrySendOverflowPacket+0xe4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f58:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	e00b      	b.n	8003f84 <_TrySendOverflowPacket+0x7c>
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	6279      	str	r1, [r7, #36]	; 0x24
 8003f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	09db      	lsrs	r3, r3, #7
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d8f0      	bhi.n	8003f6c <_TrySendOverflowPacket+0x64>
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7fc f918 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003fb4:	f7ff fae6 	bl	8003584 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e004      	b.n	8003fdc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	4a03      	ldr	r2, [pc, #12]	; (8003fe8 <_TrySendOverflowPacket+0xe0>)
 8003fda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003fdc:	693b      	ldr	r3, [r7, #16]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	; 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2001a628 	.word	0x2001a628
 8003fec:	e0001004 	.word	0xe0001004

08003ff0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003ffc:	4b9b      	ldr	r3, [pc, #620]	; (800426c <_SendPacket+0x27c>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d010      	beq.n	8004026 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004004:	4b99      	ldr	r3, [pc, #612]	; (800426c <_SendPacket+0x27c>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 812b 	beq.w	8004264 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800400e:	4b97      	ldr	r3, [pc, #604]	; (800426c <_SendPacket+0x27c>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d109      	bne.n	800402a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004016:	f7ff ff77 	bl	8003f08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800401a:	4b94      	ldr	r3, [pc, #592]	; (800426c <_SendPacket+0x27c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 8122 	bne.w	8004268 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004024:	e001      	b.n	800402a <_SendPacket+0x3a>
    goto Send;
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <_SendPacket+0x3c>
Send:
 800402a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b1f      	cmp	r3, #31
 8004030:	d809      	bhi.n	8004046 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004032:	4b8e      	ldr	r3, [pc, #568]	; (800426c <_SendPacket+0x27c>)
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 8117 	bne.w	8004274 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b17      	cmp	r3, #23
 800404a:	d807      	bhi.n	800405c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e0c4      	b.n	80041e6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b7f      	cmp	r3, #127	; 0x7f
 8004068:	d912      	bls.n	8004090 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	09da      	lsrs	r2, r3, #7
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	3a01      	subs	r2, #1
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e006      	b.n	800409e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b7e      	cmp	r3, #126	; 0x7e
 80040a2:	d807      	bhi.n	80040b4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e098      	b.n	80041e6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ba:	d212      	bcs.n	80040e2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	09da      	lsrs	r2, r3, #7
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	3a01      	subs	r2, #1
 80040d4:	60fa      	str	r2, [r7, #12]
 80040d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e081      	b.n	80041e6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e8:	d21d      	bcs.n	8004126 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0b9a      	lsrs	r2, r3, #14
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	09db      	lsrs	r3, r3, #7
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	3a01      	subs	r2, #1
 8004104:	60fa      	str	r2, [r7, #12]
 8004106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	3a01      	subs	r2, #1
 8004118:	60fa      	str	r2, [r7, #12]
 800411a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e05f      	b.n	80041e6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412c:	d228      	bcs.n	8004180 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0d5a      	lsrs	r2, r3, #21
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0b9b      	lsrs	r3, r3, #14
 8004142:	b2db      	uxtb	r3, r3
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	3a01      	subs	r2, #1
 8004148:	60fa      	str	r2, [r7, #12]
 800414a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	09db      	lsrs	r3, r3, #7
 8004158:	b2db      	uxtb	r3, r3
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	3a01      	subs	r2, #1
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	3a01      	subs	r2, #1
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e032      	b.n	80041e6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0f1a      	lsrs	r2, r3, #28
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0d5b      	lsrs	r3, r3, #21
 8004194:	b2db      	uxtb	r3, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	3a01      	subs	r2, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0b9b      	lsrs	r3, r3, #14
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	3a01      	subs	r2, #1
 80041b0:	60fa      	str	r2, [r7, #12]
 80041b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	09db      	lsrs	r3, r3, #7
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	3a01      	subs	r2, #1
 80041c6:	60fa      	str	r2, [r7, #12]
 80041c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	3a01      	subs	r2, #1
 80041da:	60fa      	str	r2, [r7, #12]
 80041dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <_SendPacket+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <_SendPacket+0x27c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	e00b      	b.n	8004218 <_SendPacket+0x228>
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	6279      	str	r1, [r7, #36]	; 0x24
 800420a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	09db      	lsrs	r3, r3, #7
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2b7f      	cmp	r3, #127	; 0x7f
 800421c:	d8f0      	bhi.n	8004200 <_SendPacket+0x210>
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	627a      	str	r2, [r7, #36]	; 0x24
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <_SendPacket+0x27c>)
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	4618      	mov	r0, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	461a      	mov	r2, r3
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	f7fb ffcf 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004242:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004244:	f7ff f99e 	bl	8003584 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <_SendPacket+0x27c>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e00f      	b.n	8004276 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <_SendPacket+0x27c>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <_SendPacket+0x27c>)
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e008      	b.n	8004276 <_SendPacket+0x286>
    goto SendDone;
 8004264:	bf00      	nop
 8004266:	e006      	b.n	8004276 <_SendPacket+0x286>
      goto SendDone;
 8004268:	bf00      	nop
 800426a:	e004      	b.n	8004276 <_SendPacket+0x286>
 800426c:	2001a628 	.word	0x2001a628
 8004270:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004274:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <_SendPacket+0x2d8>)
 8004278:	7e1b      	ldrb	r3, [r3, #24]
 800427a:	4619      	mov	r1, r3
 800427c:	4a13      	ldr	r2, [pc, #76]	; (80042cc <_SendPacket+0x2dc>)
 800427e:	460b      	mov	r3, r1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	440b      	add	r3, r1
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	336c      	adds	r3, #108	; 0x6c
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <_SendPacket+0x2d8>)
 800428e:	7e1b      	ldrb	r3, [r3, #24]
 8004290:	4618      	mov	r0, r3
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <_SendPacket+0x2dc>)
 8004294:	4603      	mov	r3, r0
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4403      	add	r3, r0
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	440b      	add	r3, r1
 800429e:	3370      	adds	r3, #112	; 0x70
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d00b      	beq.n	80042be <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <_SendPacket+0x2d8>)
 80042a8:	789b      	ldrb	r3, [r3, #2]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <_SendPacket+0x2d8>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80042b4:	f7ff fdbe 	bl	8003e34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <_SendPacket+0x2d8>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80042be:	bf00      	nop
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2001a628 	.word	0x2001a628
 80042cc:	2001a780 	.word	0x2001a780

080042d0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d80a      	bhi.n	8004300 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	1c59      	adds	r1, r3, #1
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6051      	str	r1, [r2, #4]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d15a      	bne.n	80043be <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	e00b      	b.n	8004342 <_StoreChar+0x72>
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	1c59      	adds	r1, r3, #1
 8004332:	6279      	str	r1, [r7, #36]	; 0x24
 8004334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	09db      	lsrs	r3, r3, #7
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2b7f      	cmp	r3, #127	; 0x7f
 8004346:	d8f0      	bhi.n	800432a <_StoreChar+0x5a>
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	627a      	str	r2, [r7, #36]	; 0x24
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e00b      	b.n	800437a <_StoreChar+0xaa>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	61f9      	str	r1, [r7, #28]
 800436c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	09db      	lsrs	r3, r3, #7
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b7f      	cmp	r3, #127	; 0x7f
 800437e:	d8f0      	bhi.n	8004362 <_StoreChar+0x92>
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	221a      	movs	r2, #26
 8004396:	6939      	ldr	r1, [r7, #16]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fe29 	bl	8003ff0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fd3a 	bl	8003e1c <_PreparePacket>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
  }
}
 80043be:	bf00      	nop
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80043da:	2301      	movs	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80043e2:	e007      	b.n	80043f4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	623b      	str	r3, [r7, #32]
    Width++;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3301      	adds	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d2f3      	bcs.n	80043e4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	d901      	bls.n	8004408 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01c      	beq.n	8004452 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <_PrintUnsigned+0x66>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <_PrintUnsigned+0x66>
        c = '0';
 8004428:	2330      	movs	r3, #48	; 0x30
 800442a:	76fb      	strb	r3, [r7, #27]
 800442c:	e001      	b.n	8004432 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800442e:	2320      	movs	r3, #32
 8004430:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004432:	e007      	b.n	8004444 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	3b01      	subs	r3, #1
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800443a:	7efb      	ldrb	r3, [r7, #27]
 800443c:	4619      	mov	r1, r3
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff ff46 	bl	80042d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <_PrintUnsigned+0x8a>
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	429a      	cmp	r2, r3
 8004450:	d3f0      	bcc.n	8004434 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d903      	bls.n	8004460 <_PrintUnsigned+0x98>
      NumDigits--;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	3b01      	subs	r3, #1
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	e009      	b.n	8004474 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d200      	bcs.n	8004474 <_PrintUnsigned+0xac>
        break;
 8004472:	e005      	b.n	8004480 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800447e:	e7e8      	b.n	8004452 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <_PrintUnsigned+0x128>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff ff14 	bl	80042d0 <_StoreChar>
    Digit /= Base;
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e3      	bne.n	8004480 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c8:	e006      	b.n	80044d8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	3b01      	subs	r3, #1
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80044d0:	2120      	movs	r1, #32
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fefc 	bl	80042d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <_PrintUnsigned+0x11e>
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3f1      	bcc.n	80044ca <_PrintUnsigned+0x102>
      }
    }
  }
}
 80044e6:	bf00      	nop
 80044e8:	3728      	adds	r7, #40	; 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	080058c4 	.word	0x080058c4

080044f4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfb8      	it	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004510:	e007      	b.n	8004522 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	fb92 f3f3 	sdiv	r3, r2, r3
 800451a:	613b      	str	r3, [r7, #16]
    Width++;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	3301      	adds	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	429a      	cmp	r2, r3
 8004528:	daf3      	bge.n	8004512 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	429a      	cmp	r2, r3
 8004530:	d901      	bls.n	8004536 <_PrintInt+0x42>
    Width = NumDigits;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <_PrintInt+0x5e>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	db04      	blt.n	800454c <_PrintInt+0x58>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <_PrintInt+0x5e>
    FieldWidth--;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	3b01      	subs	r3, #1
 8004550:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <_PrintInt+0x6e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <_PrintInt+0x9c>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d111      	bne.n	8004590 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004572:	e006      	b.n	8004582 <_PrintInt+0x8e>
        FieldWidth--;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	3b01      	subs	r3, #1
 8004578:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800457a:	2120      	movs	r1, #32
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fea7 	bl	80042d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <_PrintInt+0x9c>
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	429a      	cmp	r2, r3
 800458e:	d3f1      	bcc.n	8004574 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	da07      	bge.n	80045a6 <_PrintInt+0xb2>
    v = -v;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	425b      	negs	r3, r3
 800459a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800459c:	212d      	movs	r1, #45	; 0x2d
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fe96 	bl	80042d0 <_StoreChar>
 80045a4:	e008      	b.n	80045b8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80045b0:	212b      	movs	r1, #43	; 0x2b
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fe8c 	bl	80042d0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d019      	beq.n	80045f6 <_PrintInt+0x102>
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d114      	bne.n	80045f6 <_PrintInt+0x102>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d111      	bne.n	80045f6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045d8:	e006      	b.n	80045e8 <_PrintInt+0xf4>
        FieldWidth--;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	3b01      	subs	r3, #1
 80045de:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80045e0:	2130      	movs	r1, #48	; 0x30
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fe74 	bl	80042d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <_PrintInt+0x102>
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3f1      	bcc.n	80045da <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fedf 	bl	80043c8 <_PrintUnsigned>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b098      	sub	sp, #96	; 0x60
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004620:	f3ef 8311 	mrs	r3, BASEPRI
 8004624:	f04f 0120 	mov.w	r1, #32
 8004628:	f381 8811 	msr	BASEPRI, r1
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
 800462e:	48ac      	ldr	r0, [pc, #688]	; (80048e0 <_VPrintTarget+0x2cc>)
 8004630:	f7ff fbf4 	bl	8003e1c <_PreparePacket>
 8004634:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004636:	4baa      	ldr	r3, [pc, #680]	; (80048e0 <_VPrintTarget+0x2cc>)
 8004638:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800465a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8140 	beq.w	80048e4 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8004664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004668:	2b25      	cmp	r3, #37	; 0x25
 800466a:	f040 812a 	bne.w	80048c2 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800466e:	2300      	movs	r3, #0
 8004670:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800467e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004682:	3b23      	subs	r3, #35	; 0x23
 8004684:	2b0d      	cmp	r3, #13
 8004686:	d83f      	bhi.n	8004708 <_VPrintTarget+0xf4>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <_VPrintTarget+0x7c>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004709 	.word	0x08004709
 8004698:	08004709 	.word	0x08004709
 800469c:	08004709 	.word	0x08004709
 80046a0:	08004709 	.word	0x08004709
 80046a4:	08004709 	.word	0x08004709
 80046a8:	08004709 	.word	0x08004709
 80046ac:	08004709 	.word	0x08004709
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	08004709 	.word	0x08004709
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004709 	.word	0x08004709
 80046c4:	080046d9 	.word	0x080046d9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80046c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e01a      	b.n	800470e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80046d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046da:	f043 0302 	orr.w	r3, r3, #2
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e012      	b.n	800470e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80046e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e00a      	b.n	800470e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	f043 0308 	orr.w	r3, r3, #8
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e002      	b.n	800470e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004708:	2300      	movs	r3, #0
 800470a:	653b      	str	r3, [r7, #80]	; 0x50
 800470c:	bf00      	nop
        }
      } while (v);
 800470e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1b0      	bne.n	8004676 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004714:	2300      	movs	r3, #0
 8004716:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004724:	2b2f      	cmp	r3, #47	; 0x2f
 8004726:	d912      	bls.n	800474e <_VPrintTarget+0x13a>
 8004728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800472c:	2b39      	cmp	r3, #57	; 0x39
 800472e:	d80e      	bhi.n	800474e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	461a      	mov	r2, r3
 8004742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004746:	4413      	add	r3, r2
 8004748:	3b30      	subs	r3, #48	; 0x30
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800474c:	e7e4      	b.n	8004718 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800474e:	2300      	movs	r3, #0
 8004750:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800475a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800475e:	2b2e      	cmp	r3, #46	; 0x2e
 8004760:	d11d      	bne.n	800479e <_VPrintTarget+0x18a>
        sFormat++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004774:	2b2f      	cmp	r3, #47	; 0x2f
 8004776:	d912      	bls.n	800479e <_VPrintTarget+0x18a>
 8004778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800477c:	2b39      	cmp	r3, #57	; 0x39
 800477e:	d80e      	bhi.n	800479e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	461a      	mov	r2, r3
 8004792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004796:	4413      	add	r3, r2
 8004798:	3b30      	subs	r3, #48	; 0x30
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800479c:	e7e4      	b.n	8004768 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80047a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047aa:	2b6c      	cmp	r3, #108	; 0x6c
 80047ac:	d003      	beq.n	80047b6 <_VPrintTarget+0x1a2>
 80047ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047b2:	2b68      	cmp	r3, #104	; 0x68
 80047b4:	d107      	bne.n	80047c6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80047c4:	e7ef      	b.n	80047a6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80047c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d022      	beq.n	8004814 <_VPrintTarget+0x200>
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	dc06      	bgt.n	80047e0 <_VPrintTarget+0x1cc>
 80047d2:	2b58      	cmp	r3, #88	; 0x58
 80047d4:	d044      	beq.n	8004860 <_VPrintTarget+0x24c>
 80047d6:	2b63      	cmp	r3, #99	; 0x63
 80047d8:	d009      	beq.n	80047ee <_VPrintTarget+0x1da>
 80047da:	2b25      	cmp	r3, #37	; 0x25
 80047dc:	d066      	beq.n	80048ac <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 80047de:	e06c      	b.n	80048ba <_VPrintTarget+0x2a6>
      switch (c) {
 80047e0:	2b75      	cmp	r3, #117	; 0x75
 80047e2:	d02a      	beq.n	800483a <_VPrintTarget+0x226>
 80047e4:	2b78      	cmp	r3, #120	; 0x78
 80047e6:	d03b      	beq.n	8004860 <_VPrintTarget+0x24c>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d04c      	beq.n	8004886 <_VPrintTarget+0x272>
        break;
 80047ec:	e065      	b.n	80048ba <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1d19      	adds	r1, r3, #4
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6011      	str	r1, [r2, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80047fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004802:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fd5f 	bl	80042d0 <_StoreChar>
        break;
 8004812:	e052      	b.n	80048ba <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	1d19      	adds	r1, r3, #4
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004822:	f107 0014 	add.w	r0, r7, #20
 8004826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	220a      	movs	r2, #10
 8004832:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004834:	f7ff fe5e 	bl	80044f4 <_PrintInt>
        break;
 8004838:	e03f      	b.n	80048ba <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	1d19      	adds	r1, r3, #4
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6011      	str	r1, [r2, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004848:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800484a:	f107 0014 	add.w	r0, r7, #20
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	220a      	movs	r2, #10
 800485a:	f7ff fdb5 	bl	80043c8 <_PrintUnsigned>
        break;
 800485e:	e02c      	b.n	80048ba <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1d19      	adds	r1, r3, #4
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6011      	str	r1, [r2, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800486e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004870:	f107 0014 	add.w	r0, r7, #20
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487e:	2210      	movs	r2, #16
 8004880:	f7ff fda2 	bl	80043c8 <_PrintUnsigned>
        break;
 8004884:	e019      	b.n	80048ba <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	1d19      	adds	r1, r3, #4
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6011      	str	r1, [r2, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004894:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004896:	f107 0014 	add.w	r0, r7, #20
 800489a:	2300      	movs	r3, #0
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	2308      	movs	r3, #8
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2308      	movs	r3, #8
 80048a4:	2210      	movs	r2, #16
 80048a6:	f7ff fd8f 	bl	80043c8 <_PrintUnsigned>
        break;
 80048aa:	e006      	b.n	80048ba <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	2125      	movs	r1, #37	; 0x25
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fd0c 	bl	80042d0 <_StoreChar>
        break;
 80048b8:	bf00      	nop
      }
      sFormat++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e007      	b.n	80048d2 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 80048c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fcff 	bl	80042d0 <_StoreChar>
    }
  } while (*sFormat);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f47f aeb8 	bne.w	800464c <_VPrintTarget+0x38>
 80048dc:	e003      	b.n	80048e6 <_VPrintTarget+0x2d2>
 80048de:	bf00      	nop
 80048e0:	2001a658 	.word	0x2001a658
      break;
 80048e4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d041      	beq.n	8004970 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fc:	e00b      	b.n	8004916 <_VPrintTarget+0x302>
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	6439      	str	r1, [r7, #64]	; 0x40
 8004908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	2b7f      	cmp	r3, #127	; 0x7f
 800491a:	d8f0      	bhi.n	80048fe <_VPrintTarget+0x2ea>
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	643a      	str	r2, [r7, #64]	; 0x40
 8004922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492a:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004930:	2300      	movs	r3, #0
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
 8004934:	e00b      	b.n	800494e <_VPrintTarget+0x33a>
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	b2da      	uxtb	r2, r3
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494a:	09db      	lsrs	r3, r3, #7
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	2b7f      	cmp	r3, #127	; 0x7f
 8004952:	d8f0      	bhi.n	8004936 <_VPrintTarget+0x322>
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	63ba      	str	r2, [r7, #56]	; 0x38
 800495a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	69b9      	ldr	r1, [r7, #24]
 8004968:	221a      	movs	r2, #26
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fb40 	bl	8003ff0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004976:	bf00      	nop
 8004978:	3758      	adds	r7, #88	; 0x58
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop

08004980 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800498e:	2300      	movs	r3, #0
 8004990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004994:	4917      	ldr	r1, [pc, #92]	; (80049f4 <SEGGER_SYSVIEW_Init+0x74>)
 8004996:	4818      	ldr	r0, [pc, #96]	; (80049f8 <SEGGER_SYSVIEW_Init+0x78>)
 8004998:	f7ff f920 	bl	8003bdc <SEGGER_RTT_AllocUpBuffer>
 800499c:	4603      	mov	r3, r0
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b16      	ldr	r3, [pc, #88]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049a6:	785a      	ldrb	r2, [r3, #1]
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
 80049b0:	4618      	mov	r0, r3
 80049b2:	2300      	movs	r3, #0
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2308      	movs	r3, #8
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <SEGGER_SYSVIEW_Init+0x80>)
 80049ba:	490f      	ldr	r1, [pc, #60]	; (80049f8 <SEGGER_SYSVIEW_Init+0x78>)
 80049bc:	f7ff f992 	bl	8003ce4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <SEGGER_SYSVIEW_Init+0x84>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80049ce:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80049d4:	4a09      	ldr	r2, [pc, #36]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80049e0:	4a06      	ldr	r2, [pc, #24]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <SEGGER_SYSVIEW_Init+0x7c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20019620 	.word	0x20019620
 80049f8:	08005878 	.word	0x08005878
 80049fc:	2001a628 	.word	0x2001a628
 8004a00:	2001a620 	.word	0x2001a620
 8004a04:	e0001004 	.word	0xe0001004

08004a08 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004a10:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6113      	str	r3, [r2, #16]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	2001a628 	.word	0x2001a628

08004a28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a30:	f3ef 8311 	mrs	r3, BASEPRI
 8004a34:	f04f 0120 	mov.w	r1, #32
 8004a38:	f381 8811 	msr	BASEPRI, r1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4808      	ldr	r0, [pc, #32]	; (8004a60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a40:	f7ff f9ec 	bl	8003e1c <_PreparePacket>
 8004a44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f7ff fad0 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f383 8811 	msr	BASEPRI, r3
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	2001a658 	.word	0x2001a658

08004a64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a72:	f04f 0120 	mov.w	r1, #32
 8004a76:	f381 8811 	msr	BASEPRI, r1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	4816      	ldr	r0, [pc, #88]	; (8004ad8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a7e:	f7ff f9cd 	bl	8003e1c <_PreparePacket>
 8004a82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	e00b      	b.n	8004aaa <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1c59      	adds	r1, r3, #1
 8004a9a:	61f9      	str	r1, [r7, #28]
 8004a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	09db      	lsrs	r3, r3, #7
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b7f      	cmp	r3, #127	; 0x7f
 8004aae:	d8f0      	bhi.n	8004a92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	61fa      	str	r2, [r7, #28]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	6938      	ldr	r0, [r7, #16]
 8004ac6:	f7ff fa93 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f383 8811 	msr	BASEPRI, r3
}
 8004ad0:	bf00      	nop
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2001a658 	.word	0x2001a658

08004adc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aec:	f04f 0120 	mov.w	r1, #32
 8004af0:	f381 8811 	msr	BASEPRI, r1
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	4825      	ldr	r0, [pc, #148]	; (8004b8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004af8:	f7ff f990 	bl	8003e1c <_PreparePacket>
 8004afc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	e00b      	b.n	8004b24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	09db      	lsrs	r3, r3, #7
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b7f      	cmp	r3, #127	; 0x7f
 8004b28:	d8f0      	bhi.n	8004b0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	e00b      	b.n	8004b5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	09db      	lsrs	r3, r3, #7
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b60:	d8f0      	bhi.n	8004b44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	627a      	str	r2, [r7, #36]	; 0x24
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	f7ff fa3a 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f383 8811 	msr	BASEPRI, r3
}
 8004b82:	bf00      	nop
 8004b84:	3730      	adds	r7, #48	; 0x30
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	2001a658 	.word	0x2001a658

08004b90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	; 0x30
 8004b94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004b96:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba0:	f04f 0120 	mov.w	r1, #32
 8004ba4:	f381 8811 	msr	BASEPRI, r1
 8004ba8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004baa:	4b54      	ldr	r3, [pc, #336]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	220a      	movs	r2, #10
 8004bb0:	4953      	ldr	r1, [pc, #332]	; (8004d00 <SEGGER_SYSVIEW_Start+0x170>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fb14 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004bbe:	f7fe fce1 	bl	8003584 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	f7ff ff30 	bl	8004a28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bcc:	f04f 0120 	mov.w	r1, #32
 8004bd0:	f381 8811 	msr	BASEPRI, r1
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	484b      	ldr	r0, [pc, #300]	; (8004d04 <SEGGER_SYSVIEW_Start+0x174>)
 8004bd8:	f7ff f920 	bl	8003e1c <_PreparePacket>
 8004bdc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bec:	e00b      	b.n	8004c06 <SEGGER_SYSVIEW_Start+0x76>
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	09db      	lsrs	r3, r3, #7
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0a:	d8f0      	bhi.n	8004bee <SEGGER_SYSVIEW_Start+0x5e>
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e00b      	b.n	8004c40 <SEGGER_SYSVIEW_Start+0xb0>
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	6279      	str	r1, [r7, #36]	; 0x24
 8004c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	09db      	lsrs	r3, r3, #7
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b7f      	cmp	r3, #127	; 0x7f
 8004c44:	d8f0      	bhi.n	8004c28 <SEGGER_SYSVIEW_Start+0x98>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e00b      	b.n	8004c7a <SEGGER_SYSVIEW_Start+0xea>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1c59      	adds	r1, r3, #1
 8004c6a:	61f9      	str	r1, [r7, #28]
 8004c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	09db      	lsrs	r3, r3, #7
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7e:	d8f0      	bhi.n	8004c62 <SEGGER_SYSVIEW_Start+0xd2>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	61fa      	str	r2, [r7, #28]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e00b      	b.n	8004cb2 <SEGGER_SYSVIEW_Start+0x122>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1c59      	adds	r1, r3, #1
 8004ca2:	6179      	str	r1, [r7, #20]
 8004ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb6:	d8f0      	bhi.n	8004c9a <SEGGER_SYSVIEW_Start+0x10a>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	617a      	str	r2, [r7, #20]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004cc8:	2218      	movs	r2, #24
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff f98f 	bl	8003ff0 <_SendPacket>
      RECORD_END();
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004ce6:	f000 f9eb 	bl	80050c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004cea:	f000 f9b1 	bl	8005050 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004cee:	f000 fc11 	bl	8005514 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004cf2:	bf00      	nop
 8004cf4:	3730      	adds	r7, #48	; 0x30
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2001a628 	.word	0x2001a628
 8004d00:	080058b8 	.word	0x080058b8
 8004d04:	2001a658 	.word	0x2001a658

08004d08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d12:	f04f 0120 	mov.w	r1, #32
 8004d16:	f381 8811 	msr	BASEPRI, r1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	480b      	ldr	r0, [pc, #44]	; (8004d4c <SEGGER_SYSVIEW_Stop+0x44>)
 8004d1e:	f7ff f87d 	bl	8003e1c <_PreparePacket>
 8004d22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004d2c:	220b      	movs	r2, #11
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f7ff f95d 	bl	8003ff0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f383 8811 	msr	BASEPRI, r3
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2001a658 	.word	0x2001a658
 8004d50:	2001a628 	.word	0x2001a628

08004d54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5e:	f04f 0120 	mov.w	r1, #32
 8004d62:	f381 8811 	msr	BASEPRI, r1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	4845      	ldr	r0, [pc, #276]	; (8004e80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004d6a:	f7ff f857 	bl	8003e1c <_PreparePacket>
 8004d6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d78:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	61f9      	str	r1, [r7, #28]
 8004dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	61fa      	str	r2, [r7, #28]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e00b      	b.n	8004e44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	6179      	str	r1, [r7, #20]
 8004e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	09db      	lsrs	r3, r3, #7
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b7f      	cmp	r3, #127	; 0x7f
 8004e48:	d8f0      	bhi.n	8004e2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	617a      	str	r2, [r7, #20]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e5a:	2218      	movs	r2, #24
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	68b8      	ldr	r0, [r7, #8]
 8004e60:	f7ff f8c6 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	4798      	blx	r3
  }
}
 8004e78:	bf00      	nop
 8004e7a:	3730      	adds	r7, #48	; 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	2001a658 	.word	0x2001a658
 8004e84:	2001a628 	.word	0x2001a628

08004e88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b092      	sub	sp, #72	; 0x48
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004e90:	f3ef 8311 	mrs	r3, BASEPRI
 8004e94:	f04f 0120 	mov.w	r1, #32
 8004e98:	f381 8811 	msr	BASEPRI, r1
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	486a      	ldr	r0, [pc, #424]	; (8005048 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ea0:	f7fe ffbc 	bl	8003e1c <_PreparePacket>
 8004ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b66      	ldr	r3, [pc, #408]	; (800504c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eba:	e00b      	b.n	8004ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	6479      	str	r1, [r7, #68]	; 0x44
 8004ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed0:	09db      	lsrs	r3, r3, #7
 8004ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed8:	d8f0      	bhi.n	8004ebc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	647a      	str	r2, [r7, #68]	; 0x44
 8004ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	2b7f      	cmp	r3, #127	; 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fe ff25 	bl	8003d7c <_EncodeStr>
 8004f32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004f34:	2209      	movs	r2, #9
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6938      	ldr	r0, [r7, #16]
 8004f3a:	f7ff f859 	bl	8003ff0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b40      	ldr	r3, [pc, #256]	; (800504c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
 8004f52:	e00b      	b.n	8004f6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	6379      	str	r1, [r7, #52]	; 0x34
 8004f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f70:	d8f0      	bhi.n	8004f54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	637a      	str	r2, [r7, #52]	; 0x34
 8004f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8c:	e00b      	b.n	8004fa6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	09db      	lsrs	r3, r3, #7
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004faa:	d8f0      	bhi.n	8004f8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	e00b      	b.n	8004fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	09db      	lsrs	r3, r3, #7
 8004fde:	623b      	str	r3, [r7, #32]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe4:	d8f0      	bhi.n	8004fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	627a      	str	r2, [r7, #36]	; 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	e00b      	b.n	8005018 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	61f9      	str	r1, [r7, #28]
 800500a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	09db      	lsrs	r3, r3, #7
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b7f      	cmp	r3, #127	; 0x7f
 800501c:	d8f0      	bhi.n	8005000 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800502e:	2215      	movs	r2, #21
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	6938      	ldr	r0, [r7, #16]
 8005034:	f7fe ffdc 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f383 8811 	msr	BASEPRI, r3
}
 800503e:	bf00      	nop
 8005040:	3748      	adds	r7, #72	; 0x48
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2001a658 	.word	0x2001a658
 800504c:	2001a628 	.word	0x2001a628

08005050 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4798      	blx	r3
  }
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	2001a628 	.word	0x2001a628

08005078 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005080:	f3ef 8311 	mrs	r3, BASEPRI
 8005084:	f04f 0120 	mov.w	r1, #32
 8005088:	f381 8811 	msr	BASEPRI, r1
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	480b      	ldr	r0, [pc, #44]	; (80050bc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005090:	f7fe fec4 	bl	8003e1c <_PreparePacket>
 8005094:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	6938      	ldr	r0, [r7, #16]
 800509c:	f7fe fe6e 	bl	8003d7c <_EncodeStr>
 80050a0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80050a2:	220e      	movs	r2, #14
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	6938      	ldr	r0, [r7, #16]
 80050a8:	f7fe ffa2 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f383 8811 	msr	BASEPRI, r3
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	2001a658 	.word	0x2001a658

080050c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d014      	beq.n	8005102 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4798      	blx	r3
 80050e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050e4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80050e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	0013      	movs	r3, r2
 80050f4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050f6:	461a      	mov	r2, r3
 80050f8:	4601      	mov	r1, r0
 80050fa:	200d      	movs	r0, #13
 80050fc:	f7ff fcee 	bl	8004adc <SEGGER_SYSVIEW_RecordU32x2>
 8005100:	e005      	b.n	800510e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	200c      	movs	r0, #12
 800510a:	f7ff fcab 	bl	8004a64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bd90      	pop	{r4, r7, pc}
 8005116:	bf00      	nop
 8005118:	2001a628 	.word	0x2001a628
 800511c:	e0001004 	.word	0xe0001004

08005120 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005126:	f3ef 8311 	mrs	r3, BASEPRI
 800512a:	f04f 0120 	mov.w	r1, #32
 800512e:	f381 8811 	msr	BASEPRI, r1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4819      	ldr	r0, [pc, #100]	; (800519c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005136:	f7fe fe71 	bl	8003e1c <_PreparePacket>
 800513a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005148:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e00b      	b.n	800516c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	6179      	str	r1, [r7, #20]
 800515e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b7f      	cmp	r3, #127	; 0x7f
 8005170:	d8f0      	bhi.n	8005154 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	617a      	str	r2, [r7, #20]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005182:	2202      	movs	r2, #2
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	68b8      	ldr	r0, [r7, #8]
 8005188:	f7fe ff32 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f383 8811 	msr	BASEPRI, r3
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2001a658 	.word	0x2001a658
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051aa:	f3ef 8311 	mrs	r3, BASEPRI
 80051ae:	f04f 0120 	mov.w	r1, #32
 80051b2:	f381 8811 	msr	BASEPRI, r1
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80051ba:	f7fe fe2f 	bl	8003e1c <_PreparePacket>
 80051be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80051c0:	2203      	movs	r2, #3
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6838      	ldr	r0, [r7, #0]
 80051c6:	f7fe ff13 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f383 8811 	msr	BASEPRI, r3
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2001a658 	.word	0x2001a658

080051dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051e2:	f3ef 8311 	mrs	r3, BASEPRI
 80051e6:	f04f 0120 	mov.w	r1, #32
 80051ea:	f381 8811 	msr	BASEPRI, r1
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	4807      	ldr	r0, [pc, #28]	; (8005210 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80051f2:	f7fe fe13 	bl	8003e1c <_PreparePacket>
 80051f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80051f8:	2212      	movs	r2, #18
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6838      	ldr	r0, [r7, #0]
 80051fe:	f7fe fef7 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f383 8811 	msr	BASEPRI, r3
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	2001a658 	.word	0x2001a658

08005214 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800521a:	f3ef 8311 	mrs	r3, BASEPRI
 800521e:	f04f 0120 	mov.w	r1, #32
 8005222:	f381 8811 	msr	BASEPRI, r1
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	4807      	ldr	r0, [pc, #28]	; (8005248 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800522a:	f7fe fdf7 	bl	8003e1c <_PreparePacket>
 800522e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005230:	2211      	movs	r2, #17
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6838      	ldr	r0, [r7, #0]
 8005236:	f7fe fedb 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f383 8811 	msr	BASEPRI, r3
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2001a658 	.word	0x2001a658

0800524c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005254:	f3ef 8311 	mrs	r3, BASEPRI
 8005258:	f04f 0120 	mov.w	r1, #32
 800525c:	f381 8811 	msr	BASEPRI, r1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	4819      	ldr	r0, [pc, #100]	; (80052c8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005264:	f7fe fdda 	bl	8003e1c <_PreparePacket>
 8005268:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e00b      	b.n	800529a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	61f9      	str	r1, [r7, #28]
 800528c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	09db      	lsrs	r3, r3, #7
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b7f      	cmp	r3, #127	; 0x7f
 800529e:	d8f0      	bhi.n	8005282 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80052b0:	2208      	movs	r2, #8
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6938      	ldr	r0, [r7, #16]
 80052b6:	f7fe fe9b 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f383 8811 	msr	BASEPRI, r3
}
 80052c0:	bf00      	nop
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	2001a658 	.word	0x2001a658
 80052cc:	2001a628 	.word	0x2001a628

080052d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052d8:	f3ef 8311 	mrs	r3, BASEPRI
 80052dc:	f04f 0120 	mov.w	r1, #32
 80052e0:	f381 8811 	msr	BASEPRI, r1
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	4819      	ldr	r0, [pc, #100]	; (800534c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80052e8:	f7fe fd98 	bl	8003e1c <_PreparePacket>
 80052ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e00b      	b.n	800531e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	61f9      	str	r1, [r7, #28]
 8005310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	09db      	lsrs	r3, r3, #7
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b7f      	cmp	r3, #127	; 0x7f
 8005322:	d8f0      	bhi.n	8005306 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	61fa      	str	r2, [r7, #28]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005334:	2204      	movs	r2, #4
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	6938      	ldr	r0, [r7, #16]
 800533a:	f7fe fe59 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f383 8811 	msr	BASEPRI, r3
}
 8005344:	bf00      	nop
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	2001a658 	.word	0x2001a658
 8005350:	2001a628 	.word	0x2001a628

08005354 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800535c:	f3ef 8311 	mrs	r3, BASEPRI
 8005360:	f04f 0120 	mov.w	r1, #32
 8005364:	f381 8811 	msr	BASEPRI, r1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	4819      	ldr	r0, [pc, #100]	; (80053d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800536c:	f7fe fd56 	bl	8003e1c <_PreparePacket>
 8005370:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005376:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e00b      	b.n	80053a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	61f9      	str	r1, [r7, #28]
 8005394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	09db      	lsrs	r3, r3, #7
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b7f      	cmp	r3, #127	; 0x7f
 80053a6:	d8f0      	bhi.n	800538a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	61fa      	str	r2, [r7, #28]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80053b8:	2206      	movs	r2, #6
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	6938      	ldr	r0, [r7, #16]
 80053be:	f7fe fe17 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f383 8811 	msr	BASEPRI, r3
}
 80053c8:	bf00      	nop
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2001a658 	.word	0x2001a658
 80053d4:	2001a628 	.word	0x2001a628

080053d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08c      	sub	sp, #48	; 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d06d      	beq.n	80054c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80053ea:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80053f0:	2300      	movs	r3, #0
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f4:	e008      	b.n	8005408 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	3301      	adds	r3, #1
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540c:	429a      	cmp	r2, r3
 800540e:	d3f2      	bcc.n	80053f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005410:	e000      	b.n	8005414 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005412:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d055      	beq.n	80054c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800541a:	f3ef 8311 	mrs	r3, BASEPRI
 800541e:	f04f 0120 	mov.w	r1, #32
 8005422:	f381 8811 	msr	BASEPRI, r1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	482a      	ldr	r0, [pc, #168]	; (80054d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800542a:	f7fe fcf7 	bl	8003e1c <_PreparePacket>
 800542e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	623b      	str	r3, [r7, #32]
 800543c:	e00b      	b.n	8005456 <SEGGER_SYSVIEW_SendModule+0x7e>
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1c59      	adds	r1, r3, #1
 8005446:	6279      	str	r1, [r7, #36]	; 0x24
 8005448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	09db      	lsrs	r3, r3, #7
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b7f      	cmp	r3, #127	; 0x7f
 800545a:	d8f0      	bhi.n	800543e <SEGGER_SYSVIEW_SendModule+0x66>
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	627a      	str	r2, [r7, #36]	; 0x24
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e00b      	b.n	8005490 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	61f9      	str	r1, [r7, #28]
 8005482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b7f      	cmp	r3, #127	; 0x7f
 8005494:	d8f0      	bhi.n	8005478 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	61fa      	str	r2, [r7, #28]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	4619      	mov	r1, r3
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7fe fc64 	bl	8003d7c <_EncodeStr>
 80054b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80054b6:	2216      	movs	r2, #22
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	6938      	ldr	r0, [r7, #16]
 80054bc:	f7fe fd98 	bl	8003ff0 <_SendPacket>
      RECORD_END();
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80054c6:	bf00      	nop
 80054c8:	3730      	adds	r7, #48	; 0x30
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2001a650 	.word	0x2001a650
 80054d4:	2001a658 	.word	0x2001a658

080054d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00f      	beq.n	8005506 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f2      	bne.n	80054ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	2001a650 	.word	0x2001a650

08005514 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800551a:	f3ef 8311 	mrs	r3, BASEPRI
 800551e:	f04f 0120 	mov.w	r1, #32
 8005522:	f381 8811 	msr	BASEPRI, r1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	4817      	ldr	r0, [pc, #92]	; (8005588 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800552a:	f7fe fc77 	bl	8003e1c <_PreparePacket>
 800552e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e00b      	b.n	8005558 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	b2da      	uxtb	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1c59      	adds	r1, r3, #1
 8005548:	6179      	str	r1, [r7, #20]
 800554a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	09db      	lsrs	r3, r3, #7
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b7f      	cmp	r3, #127	; 0x7f
 800555c:	d8f0      	bhi.n	8005540 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	617a      	str	r2, [r7, #20]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800556e:	221b      	movs	r2, #27
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	68b8      	ldr	r0, [r7, #8]
 8005574:	f7fe fd3c 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f383 8811 	msr	BASEPRI, r3
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	2001a658 	.word	0x2001a658
 800558c:	2001a654 	.word	0x2001a654

08005590 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005590:	b40f      	push	{r0, r1, r2, r3}
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	461a      	mov	r2, r3
 80055a2:	2100      	movs	r1, #0
 80055a4:	6938      	ldr	r0, [r7, #16]
 80055a6:	f7ff f835 	bl	8004614 <_VPrintTarget>
  va_end(ParamList);
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr

080055b8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055c0:	f3ef 8311 	mrs	r3, BASEPRI
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f381 8811 	msr	BASEPRI, r1
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4827      	ldr	r0, [pc, #156]	; (800566c <SEGGER_SYSVIEW_Warn+0xb4>)
 80055d0:	f7fe fc24 	bl	8003e1c <_PreparePacket>
 80055d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	6938      	ldr	r0, [r7, #16]
 80055dc:	f7fe fbce 	bl	8003d7c <_EncodeStr>
 80055e0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	2301      	movs	r3, #1
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	e00b      	b.n	8005604 <SEGGER_SYSVIEW_Warn+0x4c>
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	6279      	str	r1, [r7, #36]	; 0x24
 80055f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	09db      	lsrs	r3, r3, #7
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d8f0      	bhi.n	80055ec <SEGGER_SYSVIEW_Warn+0x34>
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	627a      	str	r2, [r7, #36]	; 0x24
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e00b      	b.n	800563c <SEGGER_SYSVIEW_Warn+0x84>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	61f9      	str	r1, [r7, #28]
 800562e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	09db      	lsrs	r3, r3, #7
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b7f      	cmp	r3, #127	; 0x7f
 8005640:	d8f0      	bhi.n	8005624 <SEGGER_SYSVIEW_Warn+0x6c>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	61fa      	str	r2, [r7, #28]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005652:	221a      	movs	r2, #26
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	6938      	ldr	r0, [r7, #16]
 8005658:	f7fe fcca 	bl	8003ff0 <_SendPacket>
  RECORD_END();
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f383 8811 	msr	BASEPRI, r3
}
 8005662:	bf00      	nop
 8005664:	3728      	adds	r7, #40	; 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	2001a658 	.word	0x2001a658

08005670 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005676:	7e1b      	ldrb	r3, [r3, #24]
 8005678:	4619      	mov	r1, r3
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800567c:	460b      	mov	r3, r1
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	440b      	add	r3, r1
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	336c      	adds	r3, #108	; 0x6c
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800568c:	7e1b      	ldrb	r3, [r3, #24]
 800568e:	4618      	mov	r0, r3
 8005690:	490d      	ldr	r1, [pc, #52]	; (80056c8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005692:	4603      	mov	r3, r0
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4403      	add	r3, r0
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	440b      	add	r3, r1
 800569c:	3370      	adds	r3, #112	; 0x70
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d00b      	beq.n	80056bc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056a6:	789b      	ldrb	r3, [r3, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056b2:	f7fe fbbf 	bl	8003e34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056b6:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056be:	781b      	ldrb	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	2001a628 	.word	0x2001a628
 80056c8:	2001a780 	.word	0x2001a780

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4e0d      	ldr	r6, [pc, #52]	; (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d2:	1ba4      	subs	r4, r4, r6
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2500      	movs	r5, #0
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4e0b      	ldr	r6, [pc, #44]	; (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	; (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 f83a 	bl	8005758 <_init>
 80056e4:	1ba4      	subs	r4, r4, r6
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2500      	movs	r5, #0
 80056ea:	42a5      	cmp	r5, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056f4:	4798      	blx	r3
 80056f6:	3501      	adds	r5, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056fe:	4798      	blx	r3
 8005700:	3501      	adds	r5, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	080058dc 	.word	0x080058dc
 8005708:	080058dc 	.word	0x080058dc
 800570c:	080058dc 	.word	0x080058dc
 8005710:	080058e0 	.word	0x080058e0

08005714 <memcmp>:
 8005714:	b530      	push	{r4, r5, lr}
 8005716:	2400      	movs	r4, #0
 8005718:	42a2      	cmp	r2, r4
 800571a:	d101      	bne.n	8005720 <memcmp+0xc>
 800571c:	2000      	movs	r0, #0
 800571e:	e007      	b.n	8005730 <memcmp+0x1c>
 8005720:	5d03      	ldrb	r3, [r0, r4]
 8005722:	3401      	adds	r4, #1
 8005724:	190d      	adds	r5, r1, r4
 8005726:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800572a:	42ab      	cmp	r3, r5
 800572c:	d0f4      	beq.n	8005718 <memcmp+0x4>
 800572e:	1b58      	subs	r0, r3, r5
 8005730:	bd30      	pop	{r4, r5, pc}

08005732 <memcpy>:
 8005732:	b510      	push	{r4, lr}
 8005734:	1e43      	subs	r3, r0, #1
 8005736:	440a      	add	r2, r1
 8005738:	4291      	cmp	r1, r2
 800573a:	d100      	bne.n	800573e <memcpy+0xc>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005746:	e7f7      	b.n	8005738 <memcpy+0x6>

08005748 <memset>:
 8005748:	4402      	add	r2, r0
 800574a:	4603      	mov	r3, r0
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	f803 1b01 	strb.w	r1, [r3], #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <_init>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr

08005764 <_fini>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr
