
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068fc  080068fc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006904  08006904  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800690c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a85c  20000080  0800698c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a8dc  0800698c  0002a8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166e8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d8e  00000000  00000000  00036798  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00039528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f37  00000000  00000000  0003b950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef1f  00000000  00000000  00054887  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a89f  00000000  00000000  000637a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c4  00000000  00000000  000fe0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006754 	.word	0x08006754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006754 	.word	0x08006754

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001a830 	.word	0x2001a830
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fadb 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f853 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f8e3 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f8b7 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enabling the CYCCNT counter
  DWT_CTRL |= ( 1 << 0);
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <main+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <main+0x94>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <main+0x98>)
 8000644:	f003 fb22 	bl	8003c8c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000648:	f003 f952 	bl	80038f0 <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2302      	movs	r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <main+0x9c>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	4919      	ldr	r1, [pc, #100]	; (80006c0 <main+0xa0>)
 800065c:	4819      	ldr	r0, [pc, #100]	; (80006c4 <main+0xa4>)
 800065e:	f002 f876 	bl	800274e <xTaskCreate>
 8000662:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d009      	beq.n	800067e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800066e:	f383 8811 	msr	BASEPRI, r3
 8000672:	f3bf 8f6f 	isb	sy
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	e7fe      	b.n	800067c <main+0x5c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2302      	movs	r3, #2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <main+0xa8>)
 8000688:	22c8      	movs	r2, #200	; 0xc8
 800068a:	4910      	ldr	r1, [pc, #64]	; (80006cc <main+0xac>)
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0xb0>)
 800068e:	f002 f85e 	bl	800274e <xTaskCreate>
 8000692:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d009      	beq.n	80006ae <main+0x8e>
 800069a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069e:	f383 8811 	msr	BASEPRI, r3
 80006a2:	f3bf 8f6f 	isb	sy
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e7fe      	b.n	80006ac <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006ae:	f002 f9a3 	bl	80029f8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x92>
 80006b4:	e0001000 	.word	0xe0001000
 80006b8:	0003d090 	.word	0x0003d090
 80006bc:	0800676c 	.word	0x0800676c
 80006c0:	08006784 	.word	0x08006784
 80006c4:	080008d9 	.word	0x080008d9
 80006c8:	0800678c 	.word	0x0800678c
 80006cc:	080067a4 	.word	0x080067a4
 80006d0:	08000915 	.word	0x08000915

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fc10 	bl	8005f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemClock_Config+0xc8>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemClock_Config+0xcc>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fd01 	bl	8001160 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 f906 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2103      	movs	r1, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ff5b 	bl	8001640 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000790:	f000 f8f0 	bl	8000974 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f001 fb72 	bl	8001ec4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f8c5 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2001a7ac 	.word	0x2001a7ac
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000884:	f000 fc52 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_GPIO_Init+0xd8>)
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_GPIO_Init+0xdc>)
 800089e:	f000 fac3 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	2320      	movs	r3, #32
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xd4>)
 80008ba:	f000 fab5 	bl	8000e28 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	10210000 	.word	0x10210000
 80008d4:	40020800 	.word	0x40020800

080008d8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	; 0x70
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008e0:	f107 000c 	add.w	r0, r7, #12
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <task1_handler+0x34>)
 80008e8:	2164      	movs	r1, #100	; 0x64
 80008ea:	f005 fb15 	bl	8005f18 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fa2c 	bl	8005d50 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <task1_handler+0x38>)
 80008fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000908:	e7ea      	b.n	80008e0 <task1_handler+0x8>
 800090a:	bf00      	nop
 800090c:	080067ac 	.word	0x080067ac
 8000910:	e000ed04 	.word	0xe000ed04

08000914 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n",(char*)parameters);
 800091c:	f107 000c 	add.w	r0, r7, #12
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <task2_handler+0x34>)
 8000924:	2164      	movs	r1, #100	; 0x64
 8000926:	f005 faf7 	bl	8005f18 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fa0e 	bl	8005d50 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <task2_handler+0x38>)
 8000936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000944:	e7ea      	b.n	800091c <task2_handler+0x8>
 8000946:	bf00      	nop
 8000948:	080067ac 	.word	0x080067ac
 800094c:	e000ed04 	.word	0xe000ed04

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 f95f 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40000c00 	.word	0x40000c00

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009c2:	f002 fbf5 	bl	80031b0 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a4a:	f000 f9ed 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	2032      	movs	r0, #50	; 0x32
 8000a7a:	f000 f9ab 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	f000 f9c4 	bl	8000e0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_InitTick+0xa4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_InitTick+0xa4>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_InitTick+0xa4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 ffba 	bl	8001a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ab0:	f000 ff90 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <HAL_InitTick+0xa8>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_InitTick+0xac>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <HAL_InitTick+0xb0>)
 8000acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_InitTick+0xac>)
 8000ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_InitTick+0xac>)
 8000ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ada:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_InitTick+0xac>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_InitTick+0xac>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_InitTick+0xac>)
 8000aea:	f000 ffcd 	bl	8001a88 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <HAL_InitTick+0xac>)
 8000af6:	f000 fffc 	bl	8001af2 <HAL_TIM_Base_Start_IT>
 8000afa:	4603      	mov	r3, r0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	2001a7ec 	.word	0x2001a7ec
 8000b14:	40000c00 	.word	0x40000c00

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM5_IRQHandler+0x10>)
 8000b52:	f000 fff2 	bl	8001b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2001a7ec 	.word	0x2001a7ec

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <SystemInit+0x28>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <SystemInit+0x28>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SystemInit+0x28>)
 8000b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b92:	e003      	b.n	8000b9c <LoopCopyDataInit>

08000b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b9a:	3104      	adds	r1, #4

08000b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ba4:	d3f6      	bcc.n	8000b94 <CopyDataInit>
  ldr  r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ba8:	e002      	b.n	8000bb0 <LoopFillZerobss>

08000baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bac:	f842 3b04 	str.w	r3, [r2], #4

08000bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bb4:	d3f9      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd3 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f005 f967 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd2f 	bl	8000620 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bc8:	0800690c 	.word	0x0800690c
  ldr  r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bd0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000bd4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000bd8:	2001a8dc 	.word	0x2001a8dc

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8d8 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ff28 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff feb6 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	2001a82c 	.word	0x2001a82c

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2001a82c 	.word	0x2001a82c

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ffb1 	bl	8000d58 <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff80 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff54 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e159      	b.n	80010f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8148 	bne.w	80010f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d00b      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	2b11      	cmp	r3, #17
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0xfc>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80a2 	beq.w	80010f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <HAL_GPIO_Init+0x2e4>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_GPIO_Init+0x2e4>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <HAL_GPIO_Init+0x2e4>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x202>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a47      	ldr	r2, [pc, #284]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x1fe>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_GPIO_Init+0x2f4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x1fa>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2f8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x1f6>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a44      	ldr	r2, [pc, #272]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x1f2>
 8001016:	2304      	movs	r3, #4
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101a:	2307      	movs	r3, #7
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x204>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4934      	ldr	r1, [pc, #208]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x300>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x300>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x300>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x300>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x300>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x300>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_GPIO_Init+0x300>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_GPIO_Init+0x300>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f aea2 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	3724      	adds	r7, #36	; 0x24
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800
 8001110:	40013800 	.word	0x40013800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40013c00 	.word	0x40013c00

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e25b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d075      	beq.n	800126a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117e:	4ba3      	ldr	r3, [pc, #652]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4ba0      	ldr	r3, [pc, #640]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4b9d      	ldr	r3, [pc, #628]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b99      	ldr	r3, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d05b      	beq.n	8001268 <HAL_RCC_OscConfig+0x108>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d157      	bne.n	8001268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e236      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x74>
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a90      	ldr	r2, [pc, #576]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a83      	ldr	r2, [pc, #524]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a80      	ldr	r2, [pc, #512]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fd18 	bl	8000c4c <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fd14 	bl	8000c4c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1fb      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xc0>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fd04 	bl	8000c4c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fd00 	bl	8000c4c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1e7      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0xe8>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1bb      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4952      	ldr	r1, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fcb9 	bl	8000c4c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fcb5 	bl	8000c4c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e19c      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4940      	ldr	r1, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc98 	bl	8000c4c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fc94 	bl	8000c4c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e17b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d030      	beq.n	80013ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fc78 	bl	8000c4c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fc74 	bl	8000c4c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e15b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x200>
 800137e:	e015      	b.n	80013ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fc61 	bl	8000c4c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fc5d 	bl	8000c4c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e144      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a0 	beq.w	80014fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d121      	bne.n	800143a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fc23 	bl	8000c4c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e011      	b.n	800142e <HAL_RCC_OscConfig+0x2ce>
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	42470000 	.word	0x42470000
 8001414:	42470e80 	.word	0x42470e80
 8001418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fc16 	bl	8000c4c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0fd      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x4d4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x2f0>
 8001442:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001458:	4b77      	ldr	r3, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a76      	ldr	r2, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	4b74      	ldr	r3, [pc, #464]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a73      	ldr	r2, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a70      	ldr	r2, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fbdb 	bl	8000c4c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fbd7 	bl	8000c4c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0bc      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b61      	ldr	r3, [pc, #388]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x33a>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fbc5 	bl	8000c4c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fbc1 	bl	8000c4c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0a6      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8092 	beq.w	8001628 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001504:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d05c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d141      	bne.n	800159c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b48      	ldr	r3, [pc, #288]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb95 	bl	8000c4c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb91 	bl	8000c4c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e078      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69da      	ldr	r2, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	019b      	lsls	r3, r3, #6
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	4933      	ldr	r1, [pc, #204]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fb6a 	bl	8000c4c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fb66 	bl	8000c4c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04d      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x41c>
 800159a:	e045      	b.n	8001628 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb53 	bl	8000c4c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb4f 	bl	8000c4c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e036      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x44a>
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e029      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d115      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fe:	4013      	ands	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d10d      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000
 8001638:	40023800 	.word	0x40023800
 800163c:	42470060 	.word	0x42470060

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa8c 	bl	8000c4c <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa88 	bl	8000c4c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4601      	mov	r1, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	fa21 f303 	lsr.w	r3, r1, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f93c 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08006874 	.word	0x08006874
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d007      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x32>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d008      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x38>
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80b4 	bne.w	80019a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800183a:	60bb      	str	r3, [r7, #8]
       break;
 800183c:	e0b3      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001840:	60bb      	str	r3, [r7, #8]
      break;
 8001842:	e0b0      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b5a      	ldr	r3, [pc, #360]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184e:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d04a      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	f04f 0400 	mov.w	r4, #0
 8001864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	ea03 0501 	and.w	r5, r3, r1
 8001870:	ea04 0602 	and.w	r6, r4, r2
 8001874:	4629      	mov	r1, r5
 8001876:	4632      	mov	r2, r6
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	0154      	lsls	r4, r2, #5
 8001882:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001886:	014b      	lsls	r3, r1, #5
 8001888:	4619      	mov	r1, r3
 800188a:	4622      	mov	r2, r4
 800188c:	1b49      	subs	r1, r1, r5
 800188e:	eb62 0206 	sbc.w	r2, r2, r6
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	f04f 0400 	mov.w	r4, #0
 800189a:	0194      	lsls	r4, r2, #6
 800189c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018a0:	018b      	lsls	r3, r1, #6
 80018a2:	1a5b      	subs	r3, r3, r1
 80018a4:	eb64 0402 	sbc.w	r4, r4, r2
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	00e2      	lsls	r2, r4, #3
 80018b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018b6:	00d9      	lsls	r1, r3, #3
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	195b      	adds	r3, r3, r5
 80018be:	eb44 0406 	adc.w	r4, r4, r6
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	0262      	lsls	r2, r4, #9
 80018cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018d0:	0259      	lsls	r1, r3, #9
 80018d2:	460b      	mov	r3, r1
 80018d4:	4614      	mov	r4, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	f7fe fd1c 	bl	8000320 <__aeabi_uldivmod>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e049      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	ea03 0501 	and.w	r5, r3, r1
 8001906:	ea04 0602 	and.w	r6, r4, r2
 800190a:	4629      	mov	r1, r5
 800190c:	4632      	mov	r2, r6
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f04f 0400 	mov.w	r4, #0
 8001916:	0154      	lsls	r4, r2, #5
 8001918:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800191c:	014b      	lsls	r3, r1, #5
 800191e:	4619      	mov	r1, r3
 8001920:	4622      	mov	r2, r4
 8001922:	1b49      	subs	r1, r1, r5
 8001924:	eb62 0206 	sbc.w	r2, r2, r6
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f04f 0400 	mov.w	r4, #0
 8001930:	0194      	lsls	r4, r2, #6
 8001932:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	1a5b      	subs	r3, r3, r1
 800193a:	eb64 0402 	sbc.w	r4, r4, r2
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800194c:	00d9      	lsls	r1, r3, #3
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	195b      	adds	r3, r3, r5
 8001954:	eb44 0406 	adc.w	r4, r4, r6
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	02a2      	lsls	r2, r4, #10
 8001962:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001966:	0299      	lsls	r1, r3, #10
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	4618      	mov	r0, r3
 800196e:	4621      	mov	r1, r4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f04f 0400 	mov.w	r4, #0
 8001976:	461a      	mov	r2, r3
 8001978:	4623      	mov	r3, r4
 800197a:	f7fe fcd1 	bl	8000320 <__aeabi_uldivmod>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	60bb      	str	r3, [r7, #8]
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019a2:	60bb      	str	r3, [r7, #8]
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	68bb      	ldr	r3, [r7, #8]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	007a1200 	.word	0x007a1200

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d8:	f7ff fff0 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019dc:	4601      	mov	r1, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08006884 	.word	0x08006884

080019fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a00:	f7ff ffdc 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 8001a04:	4601      	mov	r1, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08006884 	.word	0x08006884

08001a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	220f      	movs	r2, #15
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_RCC_GetClockConfig+0x60>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e01d      	b.n	8001ad6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f815 	bl	8001ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f000 f968 	bl	8001d9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d122      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d11b      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0202 	mvn.w	r2, #2
 8001b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8ee 	bl	8001d5e <HAL_TIM_IC_CaptureCallback>
 8001b82:	e005      	b.n	8001b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8e0 	bl	8001d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8f1 	bl	8001d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d122      	bne.n	8001bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d11b      	bne.n	8001bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0204 	mvn.w	r2, #4
 8001bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8c4 	bl	8001d5e <HAL_TIM_IC_CaptureCallback>
 8001bd6:	e005      	b.n	8001be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8b6 	bl	8001d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8c7 	bl	8001d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d122      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11b      	bne.n	8001c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f06f 0208 	mvn.w	r2, #8
 8001c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f89a 	bl	8001d5e <HAL_TIM_IC_CaptureCallback>
 8001c2a:	e005      	b.n	8001c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f88c 	bl	8001d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f89d 	bl	8001d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d122      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d11b      	bne.n	8001c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0210 	mvn.w	r2, #16
 8001c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2208      	movs	r2, #8
 8001c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f870 	bl	8001d5e <HAL_TIM_IC_CaptureCallback>
 8001c7e:	e005      	b.n	8001c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f862 	bl	8001d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f873 	bl	8001d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10e      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0201 	mvn.w	r2, #1
 8001cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fe49 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b80      	cmp	r3, #128	; 0x80
 8001cca:	d10e      	bne.n	8001cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b80      	cmp	r3, #128	; 0x80
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f8e3 	bl	8001eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d10e      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d107      	bne.n	8001d16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f838 	bl	8001d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d10e      	bne.n	8001d42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d107      	bne.n	8001d42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0220 	mvn.w	r2, #32
 8001d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8ad 	bl	8001e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <TIM_Base_SetConfig+0xe4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00f      	beq.n	8001dd4 <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d00b      	beq.n	8001dd4 <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <TIM_Base_SetConfig+0xe8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <TIM_Base_SetConfig+0xec>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_Base_SetConfig+0x38>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <TIM_Base_SetConfig+0xf0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d108      	bne.n	8001de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <TIM_Base_SetConfig+0xe4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01b      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df4:	d017      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <TIM_Base_SetConfig+0xe8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <TIM_Base_SetConfig+0xec>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00f      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <TIM_Base_SetConfig+0xf0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00b      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <TIM_Base_SetConfig+0xf4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <TIM_Base_SetConfig+0xf8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d003      	beq.n	8001e26 <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <TIM_Base_SetConfig+0xfc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d108      	bne.n	8001e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <TIM_Base_SetConfig+0xe4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d103      	bne.n	8001e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	615a      	str	r2, [r3, #20]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800

08001e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e03f      	b.n	8001f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fd72 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f829 	bl	8001f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fa2:	f023 030c 	bic.w	r3, r3, #12
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fce:	f040 818b 	bne.w	80022e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4ac1      	ldr	r2, [pc, #772]	; (80022dc <UART_SetConfig+0x37c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d005      	beq.n	8001fe8 <UART_SetConfig+0x88>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4abf      	ldr	r2, [pc, #764]	; (80022e0 <UART_SetConfig+0x380>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	f040 80bd 	bne.w	8002162 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe8:	f7ff fd08 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8001fec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	f04f 0600 	mov.w	r6, #0
 8001ff6:	46a8      	mov	r8, r5
 8001ff8:	46b1      	mov	r9, r6
 8001ffa:	eb18 0308 	adds.w	r3, r8, r8
 8001ffe:	eb49 0409 	adc.w	r4, r9, r9
 8002002:	4698      	mov	r8, r3
 8002004:	46a1      	mov	r9, r4
 8002006:	eb18 0805 	adds.w	r8, r8, r5
 800200a:	eb49 0906 	adc.w	r9, r9, r6
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800201a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800201e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002022:	4688      	mov	r8, r1
 8002024:	4691      	mov	r9, r2
 8002026:	eb18 0005 	adds.w	r0, r8, r5
 800202a:	eb49 0106 	adc.w	r1, r9, r6
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	461d      	mov	r5, r3
 8002034:	f04f 0600 	mov.w	r6, #0
 8002038:	196b      	adds	r3, r5, r5
 800203a:	eb46 0406 	adc.w	r4, r6, r6
 800203e:	461a      	mov	r2, r3
 8002040:	4623      	mov	r3, r4
 8002042:	f7fe f96d 	bl	8000320 <__aeabi_uldivmod>
 8002046:	4603      	mov	r3, r0
 8002048:	460c      	mov	r4, r1
 800204a:	461a      	mov	r2, r3
 800204c:	4ba5      	ldr	r3, [pc, #660]	; (80022e4 <UART_SetConfig+0x384>)
 800204e:	fba3 2302 	umull	r2, r3, r3, r2
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	461d      	mov	r5, r3
 800205c:	f04f 0600 	mov.w	r6, #0
 8002060:	46a9      	mov	r9, r5
 8002062:	46b2      	mov	sl, r6
 8002064:	eb19 0309 	adds.w	r3, r9, r9
 8002068:	eb4a 040a 	adc.w	r4, sl, sl
 800206c:	4699      	mov	r9, r3
 800206e:	46a2      	mov	sl, r4
 8002070:	eb19 0905 	adds.w	r9, r9, r5
 8002074:	eb4a 0a06 	adc.w	sl, sl, r6
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800208c:	4689      	mov	r9, r1
 800208e:	4692      	mov	sl, r2
 8002090:	eb19 0005 	adds.w	r0, r9, r5
 8002094:	eb4a 0106 	adc.w	r1, sl, r6
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	461d      	mov	r5, r3
 800209e:	f04f 0600 	mov.w	r6, #0
 80020a2:	196b      	adds	r3, r5, r5
 80020a4:	eb46 0406 	adc.w	r4, r6, r6
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	f7fe f938 	bl	8000320 <__aeabi_uldivmod>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <UART_SetConfig+0x384>)
 80020b8:	fba3 1302 	umull	r1, r3, r3, r2
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	2164      	movs	r1, #100	; 0x64
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	3332      	adds	r3, #50	; 0x32
 80020ca:	4a86      	ldr	r2, [pc, #536]	; (80022e4 <UART_SetConfig+0x384>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d8:	4498      	add	r8, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	461d      	mov	r5, r3
 80020de:	f04f 0600 	mov.w	r6, #0
 80020e2:	46a9      	mov	r9, r5
 80020e4:	46b2      	mov	sl, r6
 80020e6:	eb19 0309 	adds.w	r3, r9, r9
 80020ea:	eb4a 040a 	adc.w	r4, sl, sl
 80020ee:	4699      	mov	r9, r3
 80020f0:	46a2      	mov	sl, r4
 80020f2:	eb19 0905 	adds.w	r9, r9, r5
 80020f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800210a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800210e:	4689      	mov	r9, r1
 8002110:	4692      	mov	sl, r2
 8002112:	eb19 0005 	adds.w	r0, r9, r5
 8002116:	eb4a 0106 	adc.w	r1, sl, r6
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	461d      	mov	r5, r3
 8002120:	f04f 0600 	mov.w	r6, #0
 8002124:	196b      	adds	r3, r5, r5
 8002126:	eb46 0406 	adc.w	r4, r6, r6
 800212a:	461a      	mov	r2, r3
 800212c:	4623      	mov	r3, r4
 800212e:	f7fe f8f7 	bl	8000320 <__aeabi_uldivmod>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	461a      	mov	r2, r3
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <UART_SetConfig+0x384>)
 800213a:	fba3 1302 	umull	r1, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2164      	movs	r1, #100	; 0x64
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	3332      	adds	r3, #50	; 0x32
 800214c:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <UART_SetConfig+0x384>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 0207 	and.w	r2, r3, #7
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4442      	add	r2, r8
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e26f      	b.n	8002642 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fc37 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 8002166:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	461d      	mov	r5, r3
 800216c:	f04f 0600 	mov.w	r6, #0
 8002170:	46a8      	mov	r8, r5
 8002172:	46b1      	mov	r9, r6
 8002174:	eb18 0308 	adds.w	r3, r8, r8
 8002178:	eb49 0409 	adc.w	r4, r9, r9
 800217c:	4698      	mov	r8, r3
 800217e:	46a1      	mov	r9, r4
 8002180:	eb18 0805 	adds.w	r8, r8, r5
 8002184:	eb49 0906 	adc.w	r9, r9, r6
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002194:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002198:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800219c:	4688      	mov	r8, r1
 800219e:	4691      	mov	r9, r2
 80021a0:	eb18 0005 	adds.w	r0, r8, r5
 80021a4:	eb49 0106 	adc.w	r1, r9, r6
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	461d      	mov	r5, r3
 80021ae:	f04f 0600 	mov.w	r6, #0
 80021b2:	196b      	adds	r3, r5, r5
 80021b4:	eb46 0406 	adc.w	r4, r6, r6
 80021b8:	461a      	mov	r2, r3
 80021ba:	4623      	mov	r3, r4
 80021bc:	f7fe f8b0 	bl	8000320 <__aeabi_uldivmod>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <UART_SetConfig+0x384>)
 80021c8:	fba3 2302 	umull	r2, r3, r3, r2
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	461d      	mov	r5, r3
 80021d6:	f04f 0600 	mov.w	r6, #0
 80021da:	46a9      	mov	r9, r5
 80021dc:	46b2      	mov	sl, r6
 80021de:	eb19 0309 	adds.w	r3, r9, r9
 80021e2:	eb4a 040a 	adc.w	r4, sl, sl
 80021e6:	4699      	mov	r9, r3
 80021e8:	46a2      	mov	sl, r4
 80021ea:	eb19 0905 	adds.w	r9, r9, r5
 80021ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002206:	4689      	mov	r9, r1
 8002208:	4692      	mov	sl, r2
 800220a:	eb19 0005 	adds.w	r0, r9, r5
 800220e:	eb4a 0106 	adc.w	r1, sl, r6
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	461d      	mov	r5, r3
 8002218:	f04f 0600 	mov.w	r6, #0
 800221c:	196b      	adds	r3, r5, r5
 800221e:	eb46 0406 	adc.w	r4, r6, r6
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fe f87b 	bl	8000320 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	461a      	mov	r2, r3
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <UART_SetConfig+0x384>)
 8002232:	fba3 1302 	umull	r1, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2164      	movs	r1, #100	; 0x64
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <UART_SetConfig+0x384>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002252:	4498      	add	r8, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	461d      	mov	r5, r3
 8002258:	f04f 0600 	mov.w	r6, #0
 800225c:	46a9      	mov	r9, r5
 800225e:	46b2      	mov	sl, r6
 8002260:	eb19 0309 	adds.w	r3, r9, r9
 8002264:	eb4a 040a 	adc.w	r4, sl, sl
 8002268:	4699      	mov	r9, r3
 800226a:	46a2      	mov	sl, r4
 800226c:	eb19 0905 	adds.w	r9, r9, r5
 8002270:	eb4a 0a06 	adc.w	sl, sl, r6
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002288:	4689      	mov	r9, r1
 800228a:	4692      	mov	sl, r2
 800228c:	eb19 0005 	adds.w	r0, r9, r5
 8002290:	eb4a 0106 	adc.w	r1, sl, r6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	461d      	mov	r5, r3
 800229a:	f04f 0600 	mov.w	r6, #0
 800229e:	196b      	adds	r3, r5, r5
 80022a0:	eb46 0406 	adc.w	r4, r6, r6
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	f7fe f83a 	bl	8000320 <__aeabi_uldivmod>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <UART_SetConfig+0x384>)
 80022b4:	fba3 1302 	umull	r1, r3, r3, r2
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	2164      	movs	r1, #100	; 0x64
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3332      	adds	r3, #50	; 0x32
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <UART_SetConfig+0x384>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4442      	add	r2, r8
 80022d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80022da:	e1b2      	b.n	8002642 <UART_SetConfig+0x6e2>
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4ad7      	ldr	r2, [pc, #860]	; (800264c <UART_SetConfig+0x6ec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d005      	beq.n	80022fe <UART_SetConfig+0x39e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4ad6      	ldr	r2, [pc, #856]	; (8002650 <UART_SetConfig+0x6f0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	f040 80d1 	bne.w	80024a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022fe:	f7ff fb7d 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8002302:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	469a      	mov	sl, r3
 8002308:	f04f 0b00 	mov.w	fp, #0
 800230c:	46d0      	mov	r8, sl
 800230e:	46d9      	mov	r9, fp
 8002310:	eb18 0308 	adds.w	r3, r8, r8
 8002314:	eb49 0409 	adc.w	r4, r9, r9
 8002318:	4698      	mov	r8, r3
 800231a:	46a1      	mov	r9, r4
 800231c:	eb18 080a 	adds.w	r8, r8, sl
 8002320:	eb49 090b 	adc.w	r9, r9, fp
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002330:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002334:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002338:	4688      	mov	r8, r1
 800233a:	4691      	mov	r9, r2
 800233c:	eb1a 0508 	adds.w	r5, sl, r8
 8002340:	eb4b 0609 	adc.w	r6, fp, r9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4619      	mov	r1, r3
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	0094      	lsls	r4, r2, #2
 8002358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800235c:	008b      	lsls	r3, r1, #2
 800235e:	461a      	mov	r2, r3
 8002360:	4623      	mov	r3, r4
 8002362:	4628      	mov	r0, r5
 8002364:	4631      	mov	r1, r6
 8002366:	f7fd ffdb 	bl	8000320 <__aeabi_uldivmod>
 800236a:	4603      	mov	r3, r0
 800236c:	460c      	mov	r4, r1
 800236e:	461a      	mov	r2, r3
 8002370:	4bb8      	ldr	r3, [pc, #736]	; (8002654 <UART_SetConfig+0x6f4>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	469b      	mov	fp, r3
 8002380:	f04f 0c00 	mov.w	ip, #0
 8002384:	46d9      	mov	r9, fp
 8002386:	46e2      	mov	sl, ip
 8002388:	eb19 0309 	adds.w	r3, r9, r9
 800238c:	eb4a 040a 	adc.w	r4, sl, sl
 8002390:	4699      	mov	r9, r3
 8002392:	46a2      	mov	sl, r4
 8002394:	eb19 090b 	adds.w	r9, r9, fp
 8002398:	eb4a 0a0c 	adc.w	sl, sl, ip
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023b0:	4689      	mov	r9, r1
 80023b2:	4692      	mov	sl, r2
 80023b4:	eb1b 0509 	adds.w	r5, fp, r9
 80023b8:	eb4c 060a 	adc.w	r6, ip, sl
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	f04f 0400 	mov.w	r4, #0
 80023ce:	0094      	lsls	r4, r2, #2
 80023d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023d4:	008b      	lsls	r3, r1, #2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4623      	mov	r3, r4
 80023da:	4628      	mov	r0, r5
 80023dc:	4631      	mov	r1, r6
 80023de:	f7fd ff9f 	bl	8000320 <__aeabi_uldivmod>
 80023e2:	4603      	mov	r3, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <UART_SetConfig+0x6f4>)
 80023ea:	fba3 1302 	umull	r1, r3, r3, r2
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2164      	movs	r1, #100	; 0x64
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	3332      	adds	r3, #50	; 0x32
 80023fc:	4a95      	ldr	r2, [pc, #596]	; (8002654 <UART_SetConfig+0x6f4>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	4498      	add	r8, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	469b      	mov	fp, r3
 800240e:	f04f 0c00 	mov.w	ip, #0
 8002412:	46d9      	mov	r9, fp
 8002414:	46e2      	mov	sl, ip
 8002416:	eb19 0309 	adds.w	r3, r9, r9
 800241a:	eb4a 040a 	adc.w	r4, sl, sl
 800241e:	4699      	mov	r9, r3
 8002420:	46a2      	mov	sl, r4
 8002422:	eb19 090b 	adds.w	r9, r9, fp
 8002426:	eb4a 0a0c 	adc.w	sl, sl, ip
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002436:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800243a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800243e:	4689      	mov	r9, r1
 8002440:	4692      	mov	sl, r2
 8002442:	eb1b 0509 	adds.w	r5, fp, r9
 8002446:	eb4c 060a 	adc.w	r6, ip, sl
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	0094      	lsls	r4, r2, #2
 800245e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002462:	008b      	lsls	r3, r1, #2
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	4628      	mov	r0, r5
 800246a:	4631      	mov	r1, r6
 800246c:	f7fd ff58 	bl	8000320 <__aeabi_uldivmod>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	461a      	mov	r2, r3
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <UART_SetConfig+0x6f4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a72      	ldr	r2, [pc, #456]	; (8002654 <UART_SetConfig+0x6f4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4442      	add	r2, r8
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	e0d0      	b.n	8002642 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a0:	f7ff fa98 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 80024a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	469a      	mov	sl, r3
 80024aa:	f04f 0b00 	mov.w	fp, #0
 80024ae:	46d0      	mov	r8, sl
 80024b0:	46d9      	mov	r9, fp
 80024b2:	eb18 0308 	adds.w	r3, r8, r8
 80024b6:	eb49 0409 	adc.w	r4, r9, r9
 80024ba:	4698      	mov	r8, r3
 80024bc:	46a1      	mov	r9, r4
 80024be:	eb18 080a 	adds.w	r8, r8, sl
 80024c2:	eb49 090b 	adc.w	r9, r9, fp
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024da:	4688      	mov	r8, r1
 80024dc:	4691      	mov	r9, r2
 80024de:	eb1a 0508 	adds.w	r5, sl, r8
 80024e2:	eb4b 0609 	adc.w	r6, fp, r9
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	f04f 0400 	mov.w	r4, #0
 80024f8:	0094      	lsls	r4, r2, #2
 80024fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024fe:	008b      	lsls	r3, r1, #2
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	4628      	mov	r0, r5
 8002506:	4631      	mov	r1, r6
 8002508:	f7fd ff0a 	bl	8000320 <__aeabi_uldivmod>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	461a      	mov	r2, r3
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <UART_SetConfig+0x6f4>)
 8002514:	fba3 2302 	umull	r2, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	469b      	mov	fp, r3
 8002522:	f04f 0c00 	mov.w	ip, #0
 8002526:	46d9      	mov	r9, fp
 8002528:	46e2      	mov	sl, ip
 800252a:	eb19 0309 	adds.w	r3, r9, r9
 800252e:	eb4a 040a 	adc.w	r4, sl, sl
 8002532:	4699      	mov	r9, r3
 8002534:	46a2      	mov	sl, r4
 8002536:	eb19 090b 	adds.w	r9, r9, fp
 800253a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800254a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800254e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002552:	4689      	mov	r9, r1
 8002554:	4692      	mov	sl, r2
 8002556:	eb1b 0509 	adds.w	r5, fp, r9
 800255a:	eb4c 060a 	adc.w	r6, ip, sl
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4619      	mov	r1, r3
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	f04f 0400 	mov.w	r4, #0
 8002570:	0094      	lsls	r4, r2, #2
 8002572:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002576:	008b      	lsls	r3, r1, #2
 8002578:	461a      	mov	r2, r3
 800257a:	4623      	mov	r3, r4
 800257c:	4628      	mov	r0, r5
 800257e:	4631      	mov	r1, r6
 8002580:	f7fd fece 	bl	8000320 <__aeabi_uldivmod>
 8002584:	4603      	mov	r3, r0
 8002586:	460c      	mov	r4, r1
 8002588:	461a      	mov	r2, r3
 800258a:	4b32      	ldr	r3, [pc, #200]	; (8002654 <UART_SetConfig+0x6f4>)
 800258c:	fba3 1302 	umull	r1, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	2164      	movs	r1, #100	; 0x64
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	3332      	adds	r3, #50	; 0x32
 800259e:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <UART_SetConfig+0x6f4>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	4498      	add	r8, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	469b      	mov	fp, r3
 80025b0:	f04f 0c00 	mov.w	ip, #0
 80025b4:	46d9      	mov	r9, fp
 80025b6:	46e2      	mov	sl, ip
 80025b8:	eb19 0309 	adds.w	r3, r9, r9
 80025bc:	eb4a 040a 	adc.w	r4, sl, sl
 80025c0:	4699      	mov	r9, r3
 80025c2:	46a2      	mov	sl, r4
 80025c4:	eb19 090b 	adds.w	r9, r9, fp
 80025c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025e0:	4689      	mov	r9, r1
 80025e2:	4692      	mov	sl, r2
 80025e4:	eb1b 0509 	adds.w	r5, fp, r9
 80025e8:	eb4c 060a 	adc.w	r6, ip, sl
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0094      	lsls	r4, r2, #2
 8002600:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002604:	008b      	lsls	r3, r1, #2
 8002606:	461a      	mov	r2, r3
 8002608:	4623      	mov	r3, r4
 800260a:	4628      	mov	r0, r5
 800260c:	4631      	mov	r1, r6
 800260e:	f7fd fe87 	bl	8000320 <__aeabi_uldivmod>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	461a      	mov	r2, r3
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <UART_SetConfig+0x6f4>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2164      	movs	r1, #100	; 0x64
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <UART_SetConfig+0x6f4>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 020f 	and.w	r2, r3, #15
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4442      	add	r2, r8
 800263e:	609a      	str	r2, [r3, #8]
}
 8002640:	e7ff      	b.n	8002642 <UART_SetConfig+0x6e2>
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264c:	40011000 	.word	0x40011000
 8002650:	40011400 	.word	0x40011400
 8002654:	51eb851f 	.word	0x51eb851f

08002658 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0208 	add.w	r2, r3, #8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f103 0208 	add.w	r2, r3, #8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0208 	add.w	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6852      	ldr	r2, [r2, #4]
 800271a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d103      	bne.n	800272e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800274e:	b580      	push	{r7, lr}
 8002750:	b08c      	sub	sp, #48	; 0x30
 8002752:	af04      	add	r7, sp, #16
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f000 febe 	bl	80034e4 <pvPortMalloc>
 8002768:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002770:	2058      	movs	r0, #88	; 0x58
 8002772:	f000 feb7 	bl	80034e4 <pvPortMalloc>
 8002776:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
 8002784:	e005      	b.n	8002792 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f000 ff88 	bl	800369c <vPortFree>
 800278c:	e001      	b.n	8002792 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002798:	88fa      	ldrh	r2, [r7, #6]
 800279a:	2300      	movs	r3, #0
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f80e 	bl	80027d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027b4:	69f8      	ldr	r0, [r7, #28]
 80027b6:	f000 f8a1 	bl	80028fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e002      	b.n	80027c6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027c6:	69bb      	ldr	r3, [r7, #24]
    }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	461a      	mov	r2, r3
 80027e8:	21a5      	movs	r1, #165	; 0xa5
 80027ea:	f003 fb8d 	bl	8005f08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027f8:	3b01      	subs	r3, #1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f023 0307 	bic.w	r3, r3, #7
 8002806:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <prvInitialiseNewTask+0x56>
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e7fe      	b.n	8002824 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01f      	beq.n	800286c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e012      	b.n	8002858 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	7819      	ldrb	r1, [r3, #0]
 800283a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	4413      	add	r3, r2
 8002840:	3334      	adds	r3, #52	; 0x34
 8002842:	460a      	mov	r2, r1
 8002844:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b09      	cmp	r3, #9
 800285c:	d9e9      	bls.n	8002832 <prvInitialiseNewTask+0x62>
 800285e:	e000      	b.n	8002862 <prvInitialiseNewTask+0x92>
            {
                break;
 8002860:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800286a:	e003      	b.n	8002874 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	2b04      	cmp	r3, #4
 8002878:	d901      	bls.n	800287e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800287a:	2304      	movs	r3, #4
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002888:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	2200      	movs	r2, #0
 800288e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	3304      	adds	r3, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff feff 	bl	8002698 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	3318      	adds	r3, #24
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fefa 	bl	8002698 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f1c3 0205 	rsb	r2, r3, #5
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	3350      	adds	r3, #80	; 0x50
 80028be:	2204      	movs	r2, #4
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fb20 	bl	8005f08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	3354      	adds	r3, #84	; 0x54
 80028cc:	2201      	movs	r2, #1
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fb19 	bl	8005f08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	69b8      	ldr	r0, [r7, #24]
 80028dc:	f000 fb42 	bl	8002f64 <pxPortInitialiseStack>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028f2:	bf00      	nop
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002904:	f000 fcce 	bl	80032a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <prvAddNewTaskToReadyList+0xe4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <prvAddNewTaskToReadyList+0xe4>)
 8002910:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <prvAddNewTaskToReadyList+0xe8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800291a:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <prvAddNewTaskToReadyList+0xe8>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002920:	4b2f      	ldr	r3, [pc, #188]	; (80029e0 <prvAddNewTaskToReadyList+0xe4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d110      	bne.n	800294a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002928:	f000 fa84 	bl	8002e34 <prvInitialiseTaskLists>
 800292c:	e00d      	b.n	800294a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <prvAddNewTaskToReadyList+0xec>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <prvAddNewTaskToReadyList+0xe8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d802      	bhi.n	800294a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <prvAddNewTaskToReadyList+0xe8>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800294a:	4b28      	ldr	r3, [pc, #160]	; (80029ec <prvAddNewTaskToReadyList+0xf0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <prvAddNewTaskToReadyList+0xf0>)
 8002952:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <prvAddNewTaskToReadyList+0xf0>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <prvAddNewTaskToReadyList+0x94>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	f003 f851 	bl	8005a0c <SEGGER_SYSVIEW_OnTaskCreate>
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	461d      	mov	r5, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461c      	mov	r4, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	1ae3      	subs	r3, r4, r3
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	462b      	mov	r3, r5
 800298c:	f001 f84a 	bl	8003a24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 f8be 	bl	8005b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	2201      	movs	r2, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <prvAddNewTaskToReadyList+0xf4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <prvAddNewTaskToReadyList+0xf4>)
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <prvAddNewTaskToReadyList+0xf8>)
 80029b8:	441a      	add	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7ff fe76 	bl	80026b2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029c6:	f000 fc9b 	bl	8003300 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <prvAddNewTaskToReadyList+0xec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <prvAddNewTaskToReadyList+0xe8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000174 	.word	0x20000174
 80029e4:	2000009c 	.word	0x2000009c
 80029e8:	20000180 	.word	0x20000180
 80029ec:	20000190 	.word	0x20000190
 80029f0:	2000017c 	.word	0x2000017c
 80029f4:	200000a0 	.word	0x200000a0

080029f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <vTaskStartScheduler+0x94>)
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	2282      	movs	r2, #130	; 0x82
 8002a0a:	4921      	ldr	r1, [pc, #132]	; (8002a90 <vTaskStartScheduler+0x98>)
 8002a0c:	4821      	ldr	r0, [pc, #132]	; (8002a94 <vTaskStartScheduler+0x9c>)
 8002a0e:	f7ff fe9e 	bl	800274e <xTaskCreate>
 8002a12:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d123      	bne.n	8002a62 <vTaskStartScheduler+0x6a>
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <vTaskStartScheduler+0xa0>)
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a32:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <vTaskStartScheduler+0xa4>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <vTaskStartScheduler+0xa8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <vTaskStartScheduler+0xac>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <vTaskStartScheduler+0x94>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d102      	bne.n	8002a52 <vTaskStartScheduler+0x5a>
 8002a4c:	f002 ffc2 	bl	80059d4 <SEGGER_SYSVIEW_OnIdle>
 8002a50:	e004      	b.n	8002a5c <vTaskStartScheduler+0x64>
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <vTaskStartScheduler+0xac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 f81a 	bl	8005a90 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a5c:	f000 fb0a 	bl	8003074 <xPortStartScheduler>
 8002a60:	e00d      	b.n	8002a7e <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a68:	d109      	bne.n	8002a7e <vTaskStartScheduler+0x86>
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e7fe      	b.n	8002a7c <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <vTaskStartScheduler+0xb0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000198 	.word	0x20000198
 8002a90:	080067b0 	.word	0x080067b0
 8002a94:	08002e11 	.word	0x08002e11
 8002a98:	20000194 	.word	0x20000194
 8002a9c:	20000180 	.word	0x20000180
 8002aa0:	20000178 	.word	0x20000178
 8002aa4:	2000009c 	.word	0x2000009c
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <vTaskSuspendAll+0x18>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <vTaskSuspendAll+0x18>)
 8002ab8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	2000019c 	.word	0x2000019c

08002ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <xTaskResumeAll+0x104>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <xTaskResumeAll+0x2a>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	e7fe      	b.n	8002af0 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002af2:	f000 fbd7 	bl	80032a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <xTaskResumeAll+0x104>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	4a33      	ldr	r2, [pc, #204]	; (8002bcc <xTaskResumeAll+0x104>)
 8002afe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <xTaskResumeAll+0x104>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d159      	bne.n	8002bbc <xTaskResumeAll+0xf4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <xTaskResumeAll+0x108>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d055      	beq.n	8002bbc <xTaskResumeAll+0xf4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b10:	e032      	b.n	8002b78 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <xTaskResumeAll+0x10c>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fdeb 	bl	80026fa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fde6 	bl	80026fa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 ffef 	bl	8005b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <xTaskResumeAll+0x110>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <xTaskResumeAll+0x110>)
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <xTaskResumeAll+0x114>)
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f7ff fda7 	bl	80026b2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <xTaskResumeAll+0x118>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <xTaskResumeAll+0x11c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <xTaskResumeAll+0x10c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1c8      	bne.n	8002b12 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b86:	f000 f9d1 	bl	8002f2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <xTaskResumeAll+0x120>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b96:	f000 f83b 	bl	8002c10 <xTaskIncrementTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <xTaskResumeAll+0x11c>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f1      	bne.n	8002b96 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <xTaskResumeAll+0x120>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <xTaskResumeAll+0x11c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bbc:	f000 fba0 	bl	8003300 <vPortExitCritical>

    return xAlreadyYielded;
 8002bc0:	687b      	ldr	r3, [r7, #4]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000019c 	.word	0x2000019c
 8002bd0:	20000174 	.word	0x20000174
 8002bd4:	20000134 	.word	0x20000134
 8002bd8:	2000017c 	.word	0x2000017c
 8002bdc:	200000a0 	.word	0x200000a0
 8002be0:	2000009c 	.word	0x2000009c
 8002be4:	20000188 	.word	0x20000188
 8002be8:	20000184 	.word	0x20000184

08002bec <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf2:	f000 fc39 	bl	8003468 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <xTaskGetTickCountFromISR+0x20>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c00:	683b      	ldr	r3, [r7, #0]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000178 	.word	0x20000178

08002c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <xTaskIncrementTick+0x10c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d172      	bne.n	8002d08 <xTaskIncrementTick+0xf8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <xTaskIncrementTick+0x110>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <xTaskIncrementTick+0x110>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11f      	bne.n	8002c76 <xTaskIncrementTick+0x66>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <xTaskIncrementTick+0x114>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <xTaskIncrementTick+0x44>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	e7fe      	b.n	8002c52 <xTaskIncrementTick+0x42>
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <xTaskIncrementTick+0x114>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <xTaskIncrementTick+0x118>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <xTaskIncrementTick+0x114>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <xTaskIncrementTick+0x118>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <xTaskIncrementTick+0x11c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <xTaskIncrementTick+0x11c>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	f000 f95b 	bl	8002f2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <xTaskIncrementTick+0x120>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d348      	bcc.n	8002d12 <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <xTaskIncrementTick+0x114>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <xTaskIncrementTick+0x84>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <xTaskIncrementTick+0x120>)
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c90:	601a      	str	r2, [r3, #0]
                    break;
 8002c92:	e03e      	b.n	8002d12 <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <xTaskIncrementTick+0x114>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d203      	bcs.n	8002cb4 <xTaskIncrementTick+0xa4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cac:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <xTaskIncrementTick+0x120>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002cb2:	e02e      	b.n	8002d12 <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fd1e 	bl	80026fa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <xTaskIncrementTick+0xc0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3318      	adds	r3, #24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd15 	bl	80026fa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 ff1e 	bl	8005b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <xTaskIncrementTick+0x124>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <xTaskIncrementTick+0x124>)
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <xTaskIncrementTick+0x128>)
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7ff fcd6 	bl	80026b2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d06:	e7bb      	b.n	8002c80 <xTaskIncrementTick+0x70>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <xTaskIncrementTick+0x12c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <xTaskIncrementTick+0x12c>)
 8002d10:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d12:	697b      	ldr	r3, [r7, #20]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	2000019c 	.word	0x2000019c
 8002d20:	20000178 	.word	0x20000178
 8002d24:	2000012c 	.word	0x2000012c
 8002d28:	20000130 	.word	0x20000130
 8002d2c:	2000018c 	.word	0x2000018c
 8002d30:	20000194 	.word	0x20000194
 8002d34:	2000017c 	.word	0x2000017c
 8002d38:	200000a0 	.word	0x200000a0
 8002d3c:	20000184 	.word	0x20000184

08002d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <vTaskSwitchContext+0xb8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <vTaskSwitchContext+0xbc>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d54:	e04c      	b.n	8002df0 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <vTaskSwitchContext+0xbc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <vTaskSwitchContext+0xc0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	f1c3 031f 	rsb	r3, r3, #31
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4924      	ldr	r1, [pc, #144]	; (8002e04 <vTaskSwitchContext+0xc4>)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <vTaskSwitchContext+0x5a>
        __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	e7fe      	b.n	8002d98 <vTaskSwitchContext+0x58>
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a17      	ldr	r2, [pc, #92]	; (8002e04 <vTaskSwitchContext+0xc4>)
 8002da6:	4413      	add	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d104      	bne.n	8002dca <vTaskSwitchContext+0x8a>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <vTaskSwitchContext+0xc8>)
 8002dd2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <vTaskSwitchContext+0xc8>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <vTaskSwitchContext+0xcc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d102      	bne.n	8002de6 <vTaskSwitchContext+0xa6>
 8002de0:	f002 fdf8 	bl	80059d4 <SEGGER_SYSVIEW_OnIdle>
}
 8002de4:	e004      	b.n	8002df0 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <vTaskSwitchContext+0xc8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 fe50 	bl	8005a90 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	2000019c 	.word	0x2000019c
 8002dfc:	20000188 	.word	0x20000188
 8002e00:	2000017c 	.word	0x2000017c
 8002e04:	200000a0 	.word	0x200000a0
 8002e08:	2000009c 	.word	0x2000009c
 8002e0c:	20000198 	.word	0x20000198

08002e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e18:	f000 f84c 	bl	8002eb4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <prvIdleTask+0x20>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e2c:	e7f4      	b.n	8002e18 <prvIdleTask+0x8>
 8002e2e:	bf00      	nop
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	e00c      	b.n	8002e5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <prvInitialiseTaskLists+0x60>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fc02 	bl	8002658 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3301      	adds	r3, #1
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d9ef      	bls.n	8002e40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <prvInitialiseTaskLists+0x64>)
 8002e62:	f7ff fbf9 	bl	8002658 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <prvInitialiseTaskLists+0x68>)
 8002e68:	f7ff fbf6 	bl	8002658 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <prvInitialiseTaskLists+0x6c>)
 8002e6e:	f7ff fbf3 	bl	8002658 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <prvInitialiseTaskLists+0x70>)
 8002e74:	f7ff fbf0 	bl	8002658 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <prvInitialiseTaskLists+0x74>)
 8002e7a:	f7ff fbed 	bl	8002658 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <prvInitialiseTaskLists+0x78>)
 8002e80:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <prvInitialiseTaskLists+0x64>)
 8002e82:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <prvInitialiseTaskLists+0x7c>)
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <prvInitialiseTaskLists+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200000a0 	.word	0x200000a0
 8002e98:	20000104 	.word	0x20000104
 8002e9c:	20000118 	.word	0x20000118
 8002ea0:	20000134 	.word	0x20000134
 8002ea4:	20000148 	.word	0x20000148
 8002ea8:	20000160 	.word	0x20000160
 8002eac:	2000012c 	.word	0x2000012c
 8002eb0:	20000130 	.word	0x20000130

08002eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eba:	e019      	b.n	8002ef0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ebc:	f000 f9f2 	bl	80032a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <prvCheckTasksWaitingTermination+0x4c>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fc14 	bl	80026fa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <prvCheckTasksWaitingTermination+0x50>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <prvCheckTasksWaitingTermination+0x50>)
 8002eda:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <prvCheckTasksWaitingTermination+0x54>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <prvCheckTasksWaitingTermination+0x54>)
 8002ee4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ee6:	f000 fa0b 	bl	8003300 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f80e 	bl	8002f0c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <prvCheckTasksWaitingTermination+0x54>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e1      	bne.n	8002ebc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000148 	.word	0x20000148
 8002f04:	20000174 	.word	0x20000174
 8002f08:	2000015c 	.word	0x2000015c

08002f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fbbf 	bl	800369c <vPortFree>
                vPortFree( pxTCB );
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fbbc 	bl	800369c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <prvResetNextTaskUnblockTime+0x30>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <prvResetNextTaskUnblockTime+0x34>)
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f42:	e005      	b.n	8002f50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <prvResetNextTaskUnblockTime+0x30>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <prvResetNextTaskUnblockTime+0x34>)
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	2000012c 	.word	0x2000012c
 8002f60:	20000194 	.word	0x20000194

08002f64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b04      	subs	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3b04      	subs	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3b04      	subs	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <pxPortInitialiseStack+0x64>)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3b14      	subs	r3, #20
 8002f9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b04      	subs	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f06f 0202 	mvn.w	r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3b20      	subs	r3, #32
 8002fb8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	08002fcd 	.word	0x08002fcd

08002fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <prvTaskExitError+0x50>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fde:	d009      	beq.n	8002ff4 <prvTaskExitError+0x28>
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e7fe      	b.n	8002ff2 <prvTaskExitError+0x26>
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003006:	bf00      	nop
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0fc      	beq.n	8003008 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000010 	.word	0x20000010

08003020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <pxCurrentTCBConst2>)
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	6808      	ldr	r0, [r1, #0]
 8003026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	f380 8809 	msr	PSP, r0
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f380 8811 	msr	BASEPRI, r0
 800303a:	4770      	bx	lr
 800303c:	f3af 8000 	nop.w

08003040 <pxCurrentTCBConst2>:
 8003040:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop

08003048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <prvPortStartFirstTask+0x24>)
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f380 8808 	msr	MSP, r0
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8814 	msr	CONTROL, r0
 800305a:	b662      	cpsie	i
 800305c:	b661      	cpsie	f
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	df00      	svc	0
 8003068:	bf00      	nop
 800306a:	0000      	.short	0x0000
 800306c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop

08003074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800307a:	4b44      	ldr	r3, [pc, #272]	; (800318c <xPortStartScheduler+0x118>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a44      	ldr	r2, [pc, #272]	; (8003190 <xPortStartScheduler+0x11c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d109      	bne.n	8003098 <xPortStartScheduler+0x24>
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e7fe      	b.n	8003096 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003098:	4b3c      	ldr	r3, [pc, #240]	; (800318c <xPortStartScheduler+0x118>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <xPortStartScheduler+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d109      	bne.n	80030b6 <xPortStartScheduler+0x42>
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e7fe      	b.n	80030b4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <xPortStartScheduler+0x124>)
 80030b8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	22ff      	movs	r2, #255	; 0xff
 80030c6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <xPortStartScheduler+0x128>)
 80030dc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <xPortStartScheduler+0x12c>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030e4:	e009      	b.n	80030fa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <xPortStartScheduler+0x12c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	4a2c      	ldr	r2, [pc, #176]	; (80031a0 <xPortStartScheduler+0x12c>)
 80030ee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d0ef      	beq.n	80030e6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <xPortStartScheduler+0x12c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	d009      	beq.n	8003126 <xPortStartScheduler+0xb2>
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	e7fe      	b.n	8003124 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <xPortStartScheduler+0x12c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <xPortStartScheduler+0x12c>)
 800312e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <xPortStartScheduler+0x12c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <xPortStartScheduler+0x12c>)
 800313a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <xPortStartScheduler+0x130>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <xPortStartScheduler+0x130>)
 800314a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800314e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <xPortStartScheduler+0x130>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <xPortStartScheduler+0x130>)
 8003156:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800315a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800315c:	f000 f954 	bl	8003408 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <xPortStartScheduler+0x134>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003166:	f000 f973 	bl	8003450 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <xPortStartScheduler+0x138>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <xPortStartScheduler+0x138>)
 8003170:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003174:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003176:	f7ff ff67 	bl	8003048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800317a:	f7ff fde1 	bl	8002d40 <vTaskSwitchContext>
    prvTaskExitError();
 800317e:	f7ff ff25 	bl	8002fcc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	e000ed00 	.word	0xe000ed00
 8003190:	410fc271 	.word	0x410fc271
 8003194:	410fc270 	.word	0x410fc270
 8003198:	e000e400 	.word	0xe000e400
 800319c:	200001a0 	.word	0x200001a0
 80031a0:	200001a4 	.word	0x200001a4
 80031a4:	e000ed20 	.word	0xe000ed20
 80031a8:	20000010 	.word	0x20000010
 80031ac:	e000ef34 	.word	0xe000ef34

080031b0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031b6:	4b35      	ldr	r3, [pc, #212]	; (800328c <vInitPrioGroupValue+0xdc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a35      	ldr	r2, [pc, #212]	; (8003290 <vInitPrioGroupValue+0xe0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <vInitPrioGroupValue+0x24>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e7fe      	b.n	80031d2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <vInitPrioGroupValue+0xdc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <vInitPrioGroupValue+0xe4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d109      	bne.n	80031f2 <vInitPrioGroupValue+0x42>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e7fe      	b.n	80031f0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <vInitPrioGroupValue+0xe8>)
 80031f4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <vInitPrioGroupValue+0xec>)
 8003218:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003220:	e009      	b.n	8003236 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3b01      	subs	r3, #1
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 800322a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b80      	cmp	r3, #128	; 0x80
 8003240:	d0ef      	beq.n	8003222 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	d009      	beq.n	8003262 <vInitPrioGroupValue+0xb2>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e7fe      	b.n	8003260 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 800326a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <vInitPrioGroupValue+0xf0>)
 8003276:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00
 8003290:	410fc271 	.word	0x410fc271
 8003294:	410fc270 	.word	0x410fc270
 8003298:	e000e400 	.word	0xe000e400
 800329c:	200001a0 	.word	0x200001a0
 80032a0:	200001a4 	.word	0x200001a4

080032a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <vPortEnterCritical+0x54>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <vPortEnterCritical+0x54>)
 80032c4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <vPortEnterCritical+0x54>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10e      	bne.n	80032ec <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <vPortEnterCritical+0x58>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <vPortEnterCritical+0x48>
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	e7fe      	b.n	80032ea <vPortEnterCritical+0x46>
    }
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	20000010 	.word	0x20000010
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <vPortExitCritical+0x4c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <vPortExitCritical+0x22>
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	e7fe      	b.n	8003320 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <vPortExitCritical+0x4c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3b01      	subs	r3, #1
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <vPortExitCritical+0x4c>)
 800332a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <vPortExitCritical+0x4c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <vPortExitCritical+0x3e>
 8003334:	2300      	movs	r3, #0
 8003336:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000010 	.word	0x20000010

08003350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003350:	f3ef 8009 	mrs	r0, PSP
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <pxCurrentTCBConst>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	f01e 0f10 	tst.w	lr, #16
 8003360:	bf08      	it	eq
 8003362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	6010      	str	r0, [r2, #0]
 800336c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003374:	f380 8811 	msr	BASEPRI, r0
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f7ff fcde 	bl	8002d40 <vTaskSwitchContext>
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f380 8811 	msr	BASEPRI, r0
 800338c:	bc09      	pop	{r0, r3}
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	6808      	ldr	r0, [r1, #0]
 8003392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003396:	f01e 0f10 	tst.w	lr, #16
 800339a:	bf08      	it	eq
 800339c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033a0:	f380 8809 	msr	PSP, r0
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	f3af 8000 	nop.w

080033b0 <pxCurrentTCBConst>:
 80033b0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop

080033b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80033d0:	f002 fa86 	bl	80058e0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033d4:	f7ff fc1c 	bl	8002c10 <xTaskIncrementTick>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80033de:	f002 fadd 	bl	800599c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <SysTick_Handler+0x4c>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e001      	b.n	80033f0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80033ec:	f002 faba 	bl	8005964 <SEGGER_SYSVIEW_RecordExitISR>
 80033f0:	2300      	movs	r3, #0
 80033f2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <vPortSetupTimerInterrupt+0x34>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <vPortSetupTimerInterrupt+0x38>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <vPortSetupTimerInterrupt+0x3c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <vPortSetupTimerInterrupt+0x40>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <vPortSetupTimerInterrupt+0x44>)
 8003426:	3b01      	subs	r3, #1
 8003428:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <vPortSetupTimerInterrupt+0x34>)
 800342c:	2207      	movs	r2, #7
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010
 8003440:	e000e018 	.word	0xe000e018
 8003444:	20000000 	.word	0x20000000
 8003448:	10624dd3 	.word	0x10624dd3
 800344c:	e000e014 	.word	0xe000e014

08003450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003460 <vPortEnableVFP+0x10>
 8003454:	6801      	ldr	r1, [r0, #0]
 8003456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800345a:	6001      	str	r1, [r0, #0]
 800345c:	4770      	bx	lr
 800345e:	0000      	.short	0x0000
 8003460:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop

08003468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800346e:	f3ef 8305 	mrs	r3, IPSR
 8003472:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d913      	bls.n	80034a2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <vPortValidateInterruptPriority+0x6c>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <vPortValidateInterruptPriority+0x70>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	7afa      	ldrb	r2, [r7, #11]
 800348a:	429a      	cmp	r2, r3
 800348c:	d209      	bcs.n	80034a2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e7fe      	b.n	80034a0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <vPortValidateInterruptPriority+0x74>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <vPortValidateInterruptPriority+0x78>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d909      	bls.n	80034c6 <vPortValidateInterruptPriority+0x5e>
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	e7fe      	b.n	80034c4 <vPortValidateInterruptPriority+0x5c>
    }
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e3f0 	.word	0xe000e3f0
 80034d8:	200001a0 	.word	0x200001a0
 80034dc:	e000ed0c 	.word	0xe000ed0c
 80034e0:	200001a4 	.word	0x200001a4

080034e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80034f0:	f7ff fadc 	bl	8002aac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034f4:	4b63      	ldr	r3, [pc, #396]	; (8003684 <pvPortMalloc+0x1a0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034fc:	f000 f92e 	bl	800375c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <pvPortMalloc+0x1a4>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 80a5 	bne.w	8003658 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02c      	beq.n	800356e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003514:	2208      	movs	r2, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d226      	bcs.n	800356e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003520:	2208      	movs	r2, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	2b00      	cmp	r3, #0
 8003530:	d020      	beq.n	8003574 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	3308      	adds	r3, #8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d213      	bcs.n	8003568 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	3308      	adds	r3, #8
 8003548:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00f      	beq.n	8003574 <pvPortMalloc+0x90>
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e7fe      	b.n	8003566 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800356c:	e002      	b.n	8003574 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	e000      	b.n	8003576 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003574:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d06d      	beq.n	8003658 <pvPortMalloc+0x174>
 800357c:	4b43      	ldr	r3, [pc, #268]	; (800368c <pvPortMalloc+0x1a8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	d868      	bhi.n	8003658 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003586:	4b42      	ldr	r3, [pc, #264]	; (8003690 <pvPortMalloc+0x1ac>)
 8003588:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <pvPortMalloc+0x1ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003590:	e004      	b.n	800359c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d903      	bls.n	80035ae <pvPortMalloc+0xca>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035ae:	4b35      	ldr	r3, [pc, #212]	; (8003684 <pvPortMalloc+0x1a0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d04f      	beq.n	8003658 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	4413      	add	r3, r2
 80035c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	2308      	movs	r3, #8
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d91e      	bls.n	8003618 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <pvPortMalloc+0x11c>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e7fe      	b.n	80035fe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003612:	69b8      	ldr	r0, [r7, #24]
 8003614:	f000 f904 	bl	8003820 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003618:	4b1c      	ldr	r3, [pc, #112]	; (800368c <pvPortMalloc+0x1a8>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <pvPortMalloc+0x1a8>)
 8003624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <pvPortMalloc+0x1a8>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <pvPortMalloc+0x1b0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d203      	bcs.n	800363a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <pvPortMalloc+0x1a8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <pvPortMalloc+0x1b0>)
 8003638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <pvPortMalloc+0x1a4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	431a      	orrs	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <pvPortMalloc+0x1b4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <pvPortMalloc+0x1b4>)
 8003656:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003658:	f7ff fa36 	bl	8002ac8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <pvPortMalloc+0x196>
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e7fe      	b.n	8003678 <pvPortMalloc+0x194>
    return pvReturn;
 800367a:	69fb      	ldr	r3, [r7, #28]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200191b0 	.word	0x200191b0
 8003688:	200191c4 	.word	0x200191c4
 800368c:	200191b4 	.word	0x200191b4
 8003690:	200191a8 	.word	0x200191a8
 8003694:	200191b8 	.word	0x200191b8
 8003698:	200191bc 	.word	0x200191bc

0800369c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04b      	beq.n	8003746 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036ae:	2308      	movs	r3, #8
 80036b0:	425b      	negs	r3, r3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <vPortFree+0xb4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <vPortFree+0x42>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e7fe      	b.n	80036dc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <vPortFree+0x5e>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	e7fe      	b.n	80036f8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <vPortFree+0xb4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01e      	beq.n	8003746 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11a      	bne.n	8003746 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <vPortFree+0xb4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003720:	f7ff f9c4 	bl	8002aac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <vPortFree+0xb8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4413      	add	r3, r2
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <vPortFree+0xb8>)
 8003730:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f000 f874 	bl	8003820 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <vPortFree+0xbc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a06      	ldr	r2, [pc, #24]	; (8003758 <vPortFree+0xbc>)
 8003740:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003742:	f7ff f9c1 	bl	8002ac8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200191c4 	.word	0x200191c4
 8003754:	200191b4 	.word	0x200191b4
 8003758:	200191c0 	.word	0x200191c0

0800375c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003762:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8003766:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <prvHeapInit+0xac>)
 800376a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3307      	adds	r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0307 	bic.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <prvHeapInit+0xac>)
 800378c:	4413      	add	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <prvHeapInit+0xb0>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <prvHeapInit+0xb0>)
 800379c:	2200      	movs	r2, #0
 800379e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037a8:	2208      	movs	r2, #8
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <prvHeapInit+0xb4>)
 80037bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <prvHeapInit+0xb4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <prvHeapInit+0xb4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <prvHeapInit+0xb4>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <prvHeapInit+0xb8>)
 80037ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a09      	ldr	r2, [pc, #36]	; (8003818 <prvHeapInit+0xbc>)
 80037f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <prvHeapInit+0xc0>)
 80037f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	200001a8 	.word	0x200001a8
 800380c:	200191a8 	.word	0x200191a8
 8003810:	200191b0 	.word	0x200191b0
 8003814:	200191b8 	.word	0x200191b8
 8003818:	200191b4 	.word	0x200191b4
 800381c:	200191c4 	.word	0x200191c4

08003820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <prvInsertBlockIntoFreeList+0xac>)
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e002      	b.n	8003834 <prvInsertBlockIntoFreeList+0x14>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d8f7      	bhi.n	800382e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d108      	bne.n	8003862 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d118      	bne.n	80038a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <prvInsertBlockIntoFreeList+0xb0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d00d      	beq.n	800389e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e008      	b.n	80038b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <prvInsertBlockIntoFreeList+0xb0>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e003      	b.n	80038b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d002      	beq.n	80038be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	200191a8 	.word	0x200191a8
 80038d0:	200191b0 	.word	0x200191b0

080038d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80038d8:	4803      	ldr	r0, [pc, #12]	; (80038e8 <_cbSendSystemDesc+0x14>)
 80038da:	f001 ffad 	bl	8005838 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80038de:	4803      	ldr	r0, [pc, #12]	; (80038ec <_cbSendSystemDesc+0x18>)
 80038e0:	f001 ffaa 	bl	8005838 <SEGGER_SYSVIEW_SendSysDesc>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	080067b8 	.word	0x080067b8
 80038ec:	080067f8 	.word	0x080067f8

080038f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <SEGGER_SYSVIEW_Conf+0x20>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <SEGGER_SYSVIEW_Conf+0x20>)
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <SEGGER_SYSVIEW_Conf+0x24>)
 80038fe:	4a06      	ldr	r2, [pc, #24]	; (8003918 <SEGGER_SYSVIEW_Conf+0x28>)
 8003900:	f001 fc1e 	bl	8005140 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003904:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003908:	f001 fc5e 	bl	80051c8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000000 	.word	0x20000000
 8003914:	080038d5 	.word	0x080038d5
 8003918:	0800688c 	.word	0x0800688c

0800391c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	e034      	b.n	8003992 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003928:	491e      	ldr	r1, [pc, #120]	; (80039a4 <_cbSendTaskList+0x88>)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	491a      	ldr	r1, [pc, #104]	; (80039a4 <_cbSendTaskList+0x88>)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3304      	adds	r3, #4
 8003948:	681c      	ldr	r4, [r3, #0]
 800394a:	4916      	ldr	r1, [pc, #88]	; (80039a4 <_cbSendTaskList+0x88>)
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3308      	adds	r3, #8
 800395a:	681d      	ldr	r5, [r3, #0]
 800395c:	4911      	ldr	r1, [pc, #68]	; (80039a4 <_cbSendTaskList+0x88>)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	330c      	adds	r3, #12
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	490d      	ldr	r1, [pc, #52]	; (80039a4 <_cbSendTaskList+0x88>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3310      	adds	r3, #16
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4633      	mov	r3, r6
 8003984:	462a      	mov	r2, r5
 8003986:	4621      	mov	r1, r4
 8003988:	f000 f8b4 	bl	8003af4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3301      	adds	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <_cbSendTaskList+0x8c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d3c5      	bcc.n	8003928 <_cbSendTaskList+0xc>
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a4:	200191c8 	.word	0x200191c8
 80039a8:	20019268 	.word	0x20019268

080039ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80039b2:	f7ff f91b 	bl	8002bec <xTaskGetTickCountFromISR>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80039c0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80039c4:	462b      	mov	r3, r5
 80039c6:	4634      	mov	r4, r6
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	0162      	lsls	r2, r4, #5
 80039d2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80039d6:	0159      	lsls	r1, r3, #5
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	1b5b      	subs	r3, r3, r5
 80039de:	eb64 0406 	sbc.w	r4, r4, r6
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	00a2      	lsls	r2, r4, #2
 80039ec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80039f0:	0099      	lsls	r1, r3, #2
 80039f2:	460b      	mov	r3, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	195b      	adds	r3, r3, r5
 80039f8:	eb44 0406 	adc.w	r4, r4, r6
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	00e2      	lsls	r2, r4, #3
 8003a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a0a:	00d9      	lsls	r1, r3, #3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4614      	mov	r4, r2
 8003a10:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003a14:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003a32:	2205      	movs	r2, #5
 8003a34:	492b      	ldr	r1, [pc, #172]	; (8003ae4 <SYSVIEW_AddTask+0xc0>)
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f002 fa4c 	bl	8005ed4 <memcmp>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d04b      	beq.n	8003ada <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	d903      	bls.n	8003a52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003a4a:	4828      	ldr	r0, [pc, #160]	; (8003aec <SYSVIEW_AddTask+0xc8>)
 8003a4c:	f002 f994 	bl	8005d78 <SEGGER_SYSVIEW_Warn>
    return;
 8003a50:	e044      	b.n	8003adc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4926      	ldr	r1, [pc, #152]	; (8003af0 <SYSVIEW_AddTask+0xcc>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4921      	ldr	r1, [pc, #132]	; (8003af0 <SYSVIEW_AddTask+0xcc>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3304      	adds	r3, #4
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	491b      	ldr	r1, [pc, #108]	; (8003af0 <SYSVIEW_AddTask+0xcc>)
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4916      	ldr	r1, [pc, #88]	; (8003af0 <SYSVIEW_AddTask+0xcc>)
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4910      	ldr	r1, [pc, #64]	; (8003af0 <SYSVIEW_AddTask+0xcc>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3310      	adds	r3, #16
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <SYSVIEW_AddTask+0xc4>)
 8003ac6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f80e 	bl	8003af4 <SYSVIEW_SendTaskInfo>
 8003ad8:	e000      	b.n	8003adc <SYSVIEW_AddTask+0xb8>
    return;
 8003ada:	bf00      	nop

}
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08006808 	.word	0x08006808
 8003ae8:	20019268 	.word	0x20019268
 8003aec:	08006810 	.word	0x08006810
 8003af0:	200191c8 	.word	0x200191c8

08003af4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	2214      	movs	r2, #20
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f002 f9fc 	bl	8005f08 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fd8d 	bl	8005648 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	; 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <__NVIC_EnableIRQ>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	; (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	; (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	; (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003bce:	f002 f92f 	bl	8005e30 <SEGGER_SYSVIEW_IsStarted>
 8003bd2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003bda:	f001 fbb9 	bl	8005350 <SEGGER_SYSVIEW_Start>
  }
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <_cbOnUARTRx+0x3c>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d806      	bhi.n	8003c08 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <_cbOnUARTRx+0x3c>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <_cbOnUARTRx+0x3c>)
 8003c04:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003c06:	e009      	b.n	8003c1c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003c08:	f7ff ffde 	bl	8003bc8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <_cbOnUARTRx+0x3c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4618      	mov	r0, r3
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	2201      	movs	r2, #1
 8003c16:	4619      	mov	r1, r3
 8003c18:	f000 fb9a 	bl	8004350 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003c1c:	bf00      	nop
}
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000014 	.word	0x20000014

08003c28 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <_cbOnUARTTx+0x5c>)
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d80f      	bhi.n	8003c58 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <_cbOnUARTTx+0x5c>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <_cbOnUARTTx+0x60>)
 8003c40:	5c9a      	ldrb	r2, [r3, r2]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <_cbOnUARTTx+0x5c>)
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <_cbOnUARTTx+0x5c>)
 8003c50:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c56:	e00f      	b.n	8003c78 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <_cbOnUARTTx+0x5c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fa1b 	bl	800409c <SEGGER_RTT_ReadUpBufferNoLock>
 8003c66:	4603      	mov	r3, r0
 8003c68:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da02      	bge.n	8003c76 <_cbOnUARTTx+0x4e>
    r = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e000      	b.n	8003c78 <_cbOnUARTTx+0x50>
  }
Done:
 8003c76:	bf00      	nop
  return r;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000014 	.word	0x20000014
 8003c88:	08006894 	.word	0x08006894

08003c8c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <SEGGER_UART_init+0x1c>)
 8003c96:	4905      	ldr	r1, [pc, #20]	; (8003cac <SEGGER_UART_init+0x20>)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f863 	bl	8003d64 <HIF_UART_Init>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	08003be9 	.word	0x08003be9
 8003cac:	08003c29 	.word	0x08003c29

08003cb0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <USART2_IRQHandler+0x80>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d011      	beq.n	8003cea <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <USART2_IRQHandler+0x84>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 030b 	and.w	r3, r3, #11
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <USART2_IRQHandler+0x88>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <USART2_IRQHandler+0x88>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	79fa      	ldrb	r2, [r7, #7]
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01a      	beq.n	8003d2a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <USART2_IRQHandler+0x8c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <USART2_IRQHandler+0x8c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1dfa      	adds	r2, r7, #7
 8003d02:	4610      	mov	r0, r2
 8003d04:	4798      	blx	r3
 8003d06:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <USART2_IRQHandler+0x90>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <USART2_IRQHandler+0x90>)
 8003d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e006      	b.n	8003d2a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <USART2_IRQHandler+0x80>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003d20:	79fa      	ldrb	r2, [r7, #7]
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <USART2_IRQHandler+0x84>)
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e000      	b.n	8003d2a <USART2_IRQHandler+0x7a>
      return;
 8003d28:	bf00      	nop
    }
  }
}
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40004400 	.word	0x40004400
 8003d34:	40004404 	.word	0x40004404
 8003d38:	2001926c 	.word	0x2001926c
 8003d3c:	20019270 	.word	0x20019270
 8003d40:	4000440c 	.word	0x4000440c

08003d44 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	4000440c 	.word	0x4000440c

08003d64 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d70:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HIF_UART_Init+0xc8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <HIF_UART_Init+0xc8>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HIF_UART_Init+0xcc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HIF_UART_Init+0xcc>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d88:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HIF_UART_Init+0xd0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d94:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003d9c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <HIF_UART_Init+0xd0>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HIF_UART_Init+0xd4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003db8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HIF_UART_Init+0xd4>)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HIF_UART_Init+0xd8>)
 8003dc2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003dc6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HIF_UART_Init+0xdc>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HIF_UART_Init+0xe0>)
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HIF_UART_Init+0xe4>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	d302      	bcc.n	8003dfa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003df4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003df8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HIF_UART_Init+0xe8>)
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <HIF_UART_Init+0xec>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <HIF_UART_Init+0xf0>)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003e16:	2106      	movs	r1, #6
 8003e18:	2026      	movs	r0, #38	; 0x26
 8003e1a:	f7ff feab 	bl	8003b74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003e1e:	2026      	movs	r0, #38	; 0x26
 8003e20:	f7ff fe8a 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003e24:	bf00      	nop
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023840 	.word	0x40023840
 8003e30:	40023830 	.word	0x40023830
 8003e34:	40020020 	.word	0x40020020
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	4000440c 	.word	0x4000440c
 8003e40:	40004410 	.word	0x40004410
 8003e44:	40004414 	.word	0x40004414
 8003e48:	0501bd00 	.word	0x0501bd00
 8003e4c:	40004408 	.word	0x40004408
 8003e50:	2001926c 	.word	0x2001926c
 8003e54:	20019270 	.word	0x20019270

08003e58 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <_DoInit+0xa0>)
 8003e60:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e62:	22a8      	movs	r2, #168	; 0xa8
 8003e64:	2100      	movs	r1, #0
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f002 f84e 	bl	8005f08 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2203      	movs	r2, #3
 8003e70:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2203      	movs	r2, #3
 8003e76:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <_DoInit+0xa4>)
 8003e7c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <_DoInit+0xa8>)
 8003e82:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e8a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	; (8003efc <_DoInit+0xa4>)
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <_DoInit+0xac>)
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2210      	movs	r2, #16
 8003eae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ec2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e00c      	b.n	8003ee6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1c3 030f 	rsb	r3, r3, #15
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <_DoInit+0xb0>)
 8003ed4:	5cd1      	ldrb	r1, [r2, r3]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	460a      	mov	r2, r1
 8003ede:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d9ef      	bls.n	8003ecc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003eec:	f3bf 8f5f 	dmb	sy
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	2001a830 	.word	0x2001a830
 8003efc:	08006860 	.word	0x08006860
 8003f00:	20019274 	.word	0x20019274
 8003f04:	20019674 	.word	0x20019674
 8003f08:	08006898 	.word	0x08006898

08003f0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d905      	bls.n	8003f3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e007      	b.n	8003f4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	69b9      	ldr	r1, [r7, #24]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	1acb      	subs	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bf28      	it	cs
 8003f5a:	4613      	movcs	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bf28      	it	cs
 8003f66:	4613      	movcs	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f001 ffba 	bl	8005ef2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	4413      	add	r3, r2
 8003f84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	4413      	add	r3, r2
 8003f9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d101      	bne.n	8003fac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1b2      	bne.n	8003f22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d911      	bls.n	800400e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	6938      	ldr	r0, [r7, #16]
 8003ffa:	f001 ff7a 	bl	8005ef2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ffe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800400c:	e01f      	b.n	800404e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	6938      	ldr	r0, [r7, #16]
 8004022:	f001 ff66 	bl	8005ef2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4619      	mov	r1, r3
 800403e:	6938      	ldr	r0, [r7, #16]
 8004040:	f001 ff57 	bl	8005ef2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004044:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	60da      	str	r2, [r3, #12]
}
 800404e:	bf00      	nop
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d808      	bhi.n	8004084 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e004      	b.n	800408e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	; 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80040a8:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80040b6:	f7ff fecf 	bl	8003e58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d92b      	bls.n	8004140 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bf28      	it	cs
 80040fa:	4613      	movcs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	4413      	add	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	6939      	ldr	r1, [r7, #16]
 800410c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800410e:	f001 fef0 	bl	8005ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 8004112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4413      	add	r3, r2
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800412a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004138:	429a      	cmp	r2, r3
 800413a:	d101      	bne.n	8004140 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4293      	cmp	r3, r2
 800414e:	bf28      	it	cs
 8004150:	4613      	movcs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d019      	beq.n	800418e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	4413      	add	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	6939      	ldr	r1, [r7, #16]
 8004168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416a:	f001 fec2 	bl	8005ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 800416e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4413      	add	r3, r2
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800419c:	4618      	mov	r0, r3
 800419e:	3730      	adds	r7, #48	; 0x30
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	2001a830 	.word	0x2001a830

080041a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80041c2:	f7ff fe49 	bl	8003e58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3360      	adds	r3, #96	; 0x60
 80041d2:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80041d4:	4413      	add	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d92b      	bls.n	800424c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4293      	cmp	r3, r2
 8004204:	bf28      	it	cs
 8004206:	4613      	movcs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	4413      	add	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421a:	f001 fe6a 	bl	8005ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 800421e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4413      	add	r3, r2
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	429a      	cmp	r2, r3
 8004246:	d101      	bne.n	800424c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004248:	2300      	movs	r3, #0
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4293      	cmp	r3, r2
 800425a:	bf28      	it	cs
 800425c:	4613      	movcs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d019      	beq.n	800429a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	4413      	add	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004276:	f001 fe3c 	bl	8005ef2 <memcpy>
    NumBytesRead += NumBytesRem;
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4413      	add	r3, r2
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2001a830 	.word	0x2001a830

080042b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	3360      	adds	r3, #96	; 0x60
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 80042d2:	4413      	add	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d017      	beq.n	800430e <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d302      	bcc.n	80042e8 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d023      	beq.n	800432e <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 80042e6:	e029      	b.n	800433c <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042e8:	6978      	ldr	r0, [r7, #20]
 80042ea:	f7ff feb4 	bl	8004056 <_GetAvailWriteSpace>
 80042ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d202      	bcs.n	80042fe <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042fc:	e021      	b.n	8004342 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	6978      	ldr	r0, [r7, #20]
 8004308:	f7ff fe5d 	bl	8003fc6 <_WriteNoCheck>
    break;
 800430c:	e019      	b.n	8004342 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff fea1 	bl	8004056 <_GetAvailWriteSpace>
 8004314:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4293      	cmp	r3, r2
 800431c:	bf28      	it	cs
 800431e:	4613      	movcs	r3, r2
 8004320:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	69b9      	ldr	r1, [r7, #24]
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff fe4d 	bl	8003fc6 <_WriteNoCheck>
    break;
 800432c:	e009      	b.n	8004342 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff fdea 	bl	8003f0c <_WriteBlocking>
 8004338:	61f8      	str	r0, [r7, #28]
    break;
 800433a:	e002      	b.n	8004342 <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
    break;
 8004340:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004342:	69fb      	ldr	r3, [r7, #28]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	2001a830 	.word	0x2001a830

08004350 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800436a:	f7ff fd75 	bl	8003e58 <_DoInit>
  SEGGER_RTT_LOCK();
 800436e:	f3ef 8311 	mrs	r3, BASEPRI
 8004372:	f04f 0120 	mov.w	r1, #32
 8004376:	f381 8811 	msr	BASEPRI, r1
 800437a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff ff97 	bl	80042b4 <SEGGER_RTT_WriteDownBufferNoLock>
 8004386:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800438e:	697b      	ldr	r3, [r7, #20]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	2001a830 	.word	0x2001a830

0800439c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80043aa:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <SEGGER_RTT_AllocUpBuffer+0x20>
 80043b8:	f7ff fd4e 	bl	8003e58 <_DoInit>
  SEGGER_RTT_LOCK();
 80043bc:	f3ef 8311 	mrs	r3, BASEPRI
 80043c0:	f04f 0120 	mov.w	r1, #32
 80043c4:	f381 8811 	msr	BASEPRI, r1
 80043c8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043cc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80043d2:	6939      	ldr	r1, [r7, #16]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	3304      	adds	r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dbeb      	blt.n	80043d2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80043fa:	e000      	b.n	80043fe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043fc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	429a      	cmp	r2, r3
 8004406:	da3f      	bge.n	8004488 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004408:	6939      	ldr	r1, [r7, #16]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800441c:	6939      	ldr	r1, [r7, #16]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	3304      	adds	r3, #4
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	3320      	adds	r3, #32
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3328      	adds	r3, #40	; 0x28
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800445a:	6939      	ldr	r1, [r7, #16]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	3324      	adds	r3, #36	; 0x24
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800446e:	6939      	ldr	r1, [r7, #16]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	440b      	add	r3, r1
 800447c:	332c      	adds	r3, #44	; 0x2c
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004482:	f3bf 8f5f 	dmb	sy
 8004486:	e002      	b.n	800448e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800448c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004494:	69fb      	ldr	r3, [r7, #28]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	2001a830 	.word	0x2001a830

080044a4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80044b2:	4b21      	ldr	r3, [pc, #132]	; (8004538 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80044c0:	f7ff fcca 	bl	8003e58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044c6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d82c      	bhi.n	8004528 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80044ce:	f3ef 8311 	mrs	r3, BASEPRI
 80044d2:	f04f 0120 	mov.w	r1, #32
 80044d6:	f381 8811 	msr	BASEPRI, r1
 80044da:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	3360      	adds	r3, #96	; 0x60
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004516:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004518:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e002      	b.n	800452e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	2001a830 	.word	0x2001a830

0800453c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004552:	e002      	b.n	800455a <_EncodeStr+0x1e>
      Len++;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3301      	adds	r3, #1
 8004558:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f6      	bne.n	8004554 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d901      	bls.n	8004572 <_EncodeStr+0x36>
      Len = Limit;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2bfe      	cmp	r3, #254	; 0xfe
 8004576:	d806      	bhi.n	8004586 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	60fa      	str	r2, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e011      	b.n	80045aa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	60fa      	str	r2, [r7, #12]
 800458c:	22ff      	movs	r2, #255	; 0xff
 800458e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	60fa      	str	r2, [r7, #12]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	0a19      	lsrs	r1, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	60fa      	str	r2, [r7, #12]
 80045a6:	b2ca      	uxtb	r2, r1
 80045a8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045ae:	e00a      	b.n	80045c6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	1c53      	adds	r3, r2, #1
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	60f9      	str	r1, [r7, #12]
 80045bc:	7812      	ldrb	r2, [r2, #0]
 80045be:	701a      	strb	r2, [r3, #0]
    n++;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3f0      	bcc.n	80045b0 <_EncodeStr+0x74>
  }
  return pPayload;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3307      	adds	r3, #7
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045fa:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <_HandleIncomingPacket+0xd0>)
 80045fc:	7e1b      	ldrb	r3, [r3, #24]
 80045fe:	4618      	mov	r0, r3
 8004600:	1cfb      	adds	r3, r7, #3
 8004602:	2201      	movs	r2, #1
 8004604:	4619      	mov	r1, r3
 8004606:	f7ff fdcf 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
 800460a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04c      	beq.n	80046ac <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d022      	beq.n	800465e <_HandleIncomingPacket+0x6a>
 8004618:	2b05      	cmp	r3, #5
 800461a:	dc0b      	bgt.n	8004634 <_HandleIncomingPacket+0x40>
 800461c:	2b02      	cmp	r3, #2
 800461e:	d015      	beq.n	800464c <_HandleIncomingPacket+0x58>
 8004620:	2b02      	cmp	r3, #2
 8004622:	dc02      	bgt.n	800462a <_HandleIncomingPacket+0x36>
 8004624:	2b01      	cmp	r3, #1
 8004626:	d00e      	beq.n	8004646 <_HandleIncomingPacket+0x52>
 8004628:	e033      	b.n	8004692 <_HandleIncomingPacket+0x9e>
 800462a:	2b03      	cmp	r3, #3
 800462c:	d011      	beq.n	8004652 <_HandleIncomingPacket+0x5e>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d012      	beq.n	8004658 <_HandleIncomingPacket+0x64>
 8004632:	e02e      	b.n	8004692 <_HandleIncomingPacket+0x9e>
 8004634:	2b07      	cmp	r3, #7
 8004636:	d018      	beq.n	800466a <_HandleIncomingPacket+0x76>
 8004638:	2b07      	cmp	r3, #7
 800463a:	db13      	blt.n	8004664 <_HandleIncomingPacket+0x70>
 800463c:	2b7f      	cmp	r3, #127	; 0x7f
 800463e:	d037      	beq.n	80046b0 <_HandleIncomingPacket+0xbc>
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d015      	beq.n	8004670 <_HandleIncomingPacket+0x7c>
 8004644:	e025      	b.n	8004692 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004646:	f000 fe83 	bl	8005350 <SEGGER_SYSVIEW_Start>
      break;
 800464a:	e036      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800464c:	f000 ff3c 	bl	80054c8 <SEGGER_SYSVIEW_Stop>
      break;
 8004650:	e033      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004652:	f001 f915 	bl	8005880 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004656:	e030      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004658:	f001 f8da 	bl	8005810 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800465c:	e02d      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800465e:	f000 ff59 	bl	8005514 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004662:	e02a      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004664:	f001 fb36 	bl	8005cd4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004668:	e027      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800466a:	f001 fb15 	bl	8005c98 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800466e:	e024      	b.n	80046ba <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <_HandleIncomingPacket+0xd0>)
 8004672:	7e1b      	ldrb	r3, [r3, #24]
 8004674:	4618      	mov	r0, r3
 8004676:	1cfb      	adds	r3, r7, #3
 8004678:	2201      	movs	r2, #1
 800467a:	4619      	mov	r1, r3
 800467c:	f7ff fd94 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
 8004680:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	4618      	mov	r0, r3
 800468c:	f001 fa84 	bl	8005b98 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004690:	e010      	b.n	80046b4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	b25b      	sxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	da0e      	bge.n	80046b8 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800469a:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <_HandleIncomingPacket+0xd0>)
 800469c:	7e1b      	ldrb	r3, [r3, #24]
 800469e:	4618      	mov	r0, r3
 80046a0:	1cfb      	adds	r3, r7, #3
 80046a2:	2201      	movs	r2, #1
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7ff fd7f 	bl	80041a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80046aa:	e005      	b.n	80046b8 <_HandleIncomingPacket+0xc4>
    }
  }
 80046ac:	bf00      	nop
 80046ae:	e004      	b.n	80046ba <_HandleIncomingPacket+0xc6>
      break;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <_HandleIncomingPacket+0xc6>
      break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <_HandleIncomingPacket+0xc6>
      break;
 80046b8:	bf00      	nop
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2001a68c 	.word	0x2001a68c

080046c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80046ce:	2301      	movs	r3, #1
 80046d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e2:	e00b      	b.n	80046fc <_TrySendOverflowPacket+0x34>
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	09db      	lsrs	r3, r3, #7
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004700:	d8f0      	bhi.n	80046e4 <_TrySendOverflowPacket+0x1c>
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <_TrySendOverflowPacket+0xe4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	e00b      	b.n	8004744 <_TrySendOverflowPacket+0x7c>
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	6279      	str	r1, [r7, #36]	; 0x24
 8004736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	09db      	lsrs	r3, r3, #7
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b7f      	cmp	r3, #127	; 0x7f
 8004748:	d8f0      	bhi.n	800472c <_TrySendOverflowPacket+0x64>
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	627a      	str	r2, [r7, #36]	; 0x24
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	4618      	mov	r0, r3
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	461a      	mov	r2, r3
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	4619      	mov	r1, r3
 800476c:	f7fb fd38 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004770:	4603      	mov	r3, r0
 8004772:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004774:	f7ff fae6 	bl	8003d44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800477e:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e004      	b.n	800479c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <_TrySendOverflowPacket+0xe0>)
 800479a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800479c:	693b      	ldr	r3, [r7, #16]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3730      	adds	r7, #48	; 0x30
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2001a68c 	.word	0x2001a68c
 80047ac:	e0001004 	.word	0xe0001004

080047b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80047bc:	4b9b      	ldr	r3, [pc, #620]	; (8004a2c <_SendPacket+0x27c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d010      	beq.n	80047e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80047c4:	4b99      	ldr	r3, [pc, #612]	; (8004a2c <_SendPacket+0x27c>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 812b 	beq.w	8004a24 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80047ce:	4b97      	ldr	r3, [pc, #604]	; (8004a2c <_SendPacket+0x27c>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d109      	bne.n	80047ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80047d6:	f7ff ff77 	bl	80046c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80047da:	4b94      	ldr	r3, [pc, #592]	; (8004a2c <_SendPacket+0x27c>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	f040 8122 	bne.w	8004a28 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 80047e4:	e001      	b.n	80047ea <_SendPacket+0x3a>
    goto Send;
 80047e6:	bf00      	nop
 80047e8:	e000      	b.n	80047ec <_SendPacket+0x3c>
Send:
 80047ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b1f      	cmp	r3, #31
 80047f0:	d809      	bhi.n	8004806 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80047f2:	4b8e      	ldr	r3, [pc, #568]	; (8004a2c <_SendPacket+0x27c>)
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	f040 8117 	bne.w	8004a34 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b17      	cmp	r3, #23
 800480a:	d807      	bhi.n	800481c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b01      	subs	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e0c4      	b.n	80049a6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b7f      	cmp	r3, #127	; 0x7f
 8004828:	d912      	bls.n	8004850 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	09da      	lsrs	r2, r3, #7
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3b01      	subs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	3a01      	subs	r2, #1
 8004842:	60fa      	str	r2, [r7, #12]
 8004844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e006      	b.n	800485e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3b01      	subs	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b7e      	cmp	r3, #126	; 0x7e
 8004862:	d807      	bhi.n	8004874 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e098      	b.n	80049a6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487a:	d212      	bcs.n	80048a2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	09da      	lsrs	r2, r3, #7
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	3a01      	subs	r2, #1
 8004894:	60fa      	str	r2, [r7, #12]
 8004896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e081      	b.n	80049a6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a8:	d21d      	bcs.n	80048e6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	0b9a      	lsrs	r2, r3, #14
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	09db      	lsrs	r3, r3, #7
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	3a01      	subs	r2, #1
 80048c4:	60fa      	str	r2, [r7, #12]
 80048c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	3a01      	subs	r2, #1
 80048d8:	60fa      	str	r2, [r7, #12]
 80048da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e05f      	b.n	80049a6 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ec:	d228      	bcs.n	8004940 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0d5a      	lsrs	r2, r3, #21
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0b9b      	lsrs	r3, r3, #14
 8004902:	b2db      	uxtb	r3, r3
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	3a01      	subs	r2, #1
 8004908:	60fa      	str	r2, [r7, #12]
 800490a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	09db      	lsrs	r3, r3, #7
 8004918:	b2db      	uxtb	r3, r3
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	3a01      	subs	r2, #1
 800491e:	60fa      	str	r2, [r7, #12]
 8004920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	3a01      	subs	r2, #1
 8004932:	60fa      	str	r2, [r7, #12]
 8004934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e032      	b.n	80049a6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	0f1a      	lsrs	r2, r3, #28
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0d5b      	lsrs	r3, r3, #21
 8004954:	b2db      	uxtb	r3, r3
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	3a01      	subs	r2, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0b9b      	lsrs	r3, r3, #14
 800496a:	b2db      	uxtb	r3, r3
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	3a01      	subs	r2, #1
 8004970:	60fa      	str	r2, [r7, #12]
 8004972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	09db      	lsrs	r3, r3, #7
 8004980:	b2db      	uxtb	r3, r3
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	3a01      	subs	r2, #1
 8004986:	60fa      	str	r2, [r7, #12]
 8004988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	3a01      	subs	r2, #1
 800499a:	60fa      	str	r2, [r7, #12]
 800499c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049a6:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <_SendPacket+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049ac:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <_SendPacket+0x27c>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	e00b      	b.n	80049d8 <_SendPacket+0x228>
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	1c59      	adds	r1, r3, #1
 80049c8:	6279      	str	r1, [r7, #36]	; 0x24
 80049ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	09db      	lsrs	r3, r3, #7
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b7f      	cmp	r3, #127	; 0x7f
 80049dc:	d8f0      	bhi.n	80049c0 <_SendPacket+0x210>
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	627a      	str	r2, [r7, #36]	; 0x24
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <_SendPacket+0x27c>)
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	4618      	mov	r0, r3
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	f7fb fbef 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a02:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004a04:	f7ff f99e 	bl	8003d44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a0e:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <_SendPacket+0x27c>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	60d3      	str	r3, [r2, #12]
 8004a14:	e00f      	b.n	8004a36 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_SendPacket+0x27c>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <_SendPacket+0x27c>)
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e008      	b.n	8004a36 <_SendPacket+0x286>
    goto SendDone;
 8004a24:	bf00      	nop
 8004a26:	e006      	b.n	8004a36 <_SendPacket+0x286>
      goto SendDone;
 8004a28:	bf00      	nop
 8004a2a:	e004      	b.n	8004a36 <_SendPacket+0x286>
 8004a2c:	2001a68c 	.word	0x2001a68c
 8004a30:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004a34:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <_SendPacket+0x2d8>)
 8004a38:	7e1b      	ldrb	r3, [r3, #24]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <_SendPacket+0x2dc>)
 8004a3e:	460b      	mov	r3, r1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	440b      	add	r3, r1
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	336c      	adds	r3, #108	; 0x6c
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <_SendPacket+0x2d8>)
 8004a4e:	7e1b      	ldrb	r3, [r3, #24]
 8004a50:	4618      	mov	r0, r3
 8004a52:	490e      	ldr	r1, [pc, #56]	; (8004a8c <_SendPacket+0x2dc>)
 8004a54:	4603      	mov	r3, r0
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4403      	add	r3, r0
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3370      	adds	r3, #112	; 0x70
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d00b      	beq.n	8004a7e <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <_SendPacket+0x2d8>)
 8004a68:	789b      	ldrb	r3, [r3, #2]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <_SendPacket+0x2d8>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a74:	f7ff fdbe 	bl	80045f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <_SendPacket+0x2d8>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a7e:	bf00      	nop
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2001a68c 	.word	0x2001a68c
 8004a8c:	2001a830 	.word	0x2001a830

08004a90 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d80a      	bhi.n	8004ac0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6051      	str	r1, [r2, #4]
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d15a      	bne.n	8004b7e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	e00b      	b.n	8004b02 <_StoreChar+0x72>
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	6279      	str	r1, [r7, #36]	; 0x24
 8004af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	09db      	lsrs	r3, r3, #7
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b7f      	cmp	r3, #127	; 0x7f
 8004b06:	d8f0      	bhi.n	8004aea <_StoreChar+0x5a>
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	e00b      	b.n	8004b3a <_StoreChar+0xaa>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	1c59      	adds	r1, r3, #1
 8004b2a:	61f9      	str	r1, [r7, #28]
 8004b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	09db      	lsrs	r3, r3, #7
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3e:	d8f0      	bhi.n	8004b22 <_StoreChar+0x92>
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	61fa      	str	r2, [r7, #28]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	221a      	movs	r2, #26
 8004b56:	6939      	ldr	r1, [r7, #16]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fe29 	bl	80047b0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd3a 	bl	80045dc <_PreparePacket>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004ba2:	e007      	b.n	8004bb4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	623b      	str	r3, [r7, #32]
    Width++;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d2f3      	bcs.n	8004ba4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d901      	bls.n	8004bc8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11f      	bne.n	8004c12 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <_PrintUnsigned+0x66>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <_PrintUnsigned+0x66>
        c = '0';
 8004be8:	2330      	movs	r3, #48	; 0x30
 8004bea:	76fb      	strb	r3, [r7, #27]
 8004bec:	e001      	b.n	8004bf2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004bee:	2320      	movs	r3, #32
 8004bf0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bf2:	e007      	b.n	8004c04 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004bfa:	7efb      	ldrb	r3, [r7, #27]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff46 	bl	8004a90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <_PrintUnsigned+0x8a>
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3f0      	bcc.n	8004bf4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d903      	bls.n	8004c20 <_PrintUnsigned+0x98>
      NumDigits--;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	e009      	b.n	8004c34 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d200      	bcs.n	8004c34 <_PrintUnsigned+0xac>
        break;
 8004c32:	e005      	b.n	8004c40 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c3e:	e7e8      	b.n	8004c12 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <_PrintUnsigned+0x128>)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff ff14 	bl	8004a90 <_StoreChar>
    Digit /= Base;
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e3      	bne.n	8004c40 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c88:	e006      	b.n	8004c98 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004c90:	2120      	movs	r1, #32
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff fefc 	bl	8004a90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <_PrintUnsigned+0x11e>
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3f1      	bcc.n	8004c8a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	3728      	adds	r7, #40	; 0x28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	080068b8 	.word	0x080068b8

08004cb4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bfb8      	it	lt
 8004cc8:	425b      	neglt	r3, r3
 8004cca:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004cd0:	e007      	b.n	8004ce2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
    Width++;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	daf3      	bge.n	8004cd2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d901      	bls.n	8004cf6 <_PrintInt+0x42>
    Width = NumDigits;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <_PrintInt+0x5e>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db04      	blt.n	8004d0c <_PrintInt+0x58>
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <_PrintInt+0x5e>
    FieldWidth--;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <_PrintInt+0x6e>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <_PrintInt+0x9c>
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d111      	bne.n	8004d50 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00e      	beq.n	8004d50 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d32:	e006      	b.n	8004d42 <_PrintInt+0x8e>
        FieldWidth--;
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fea7 	bl	8004a90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <_PrintInt+0x9c>
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3f1      	bcc.n	8004d34 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da07      	bge.n	8004d66 <_PrintInt+0xb2>
    v = -v;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	425b      	negs	r3, r3
 8004d5a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004d5c:	212d      	movs	r1, #45	; 0x2d
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fe96 	bl	8004a90 <_StoreChar>
 8004d64:	e008      	b.n	8004d78 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004d70:	212b      	movs	r1, #43	; 0x2b
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fe8c 	bl	8004a90 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d019      	beq.n	8004db6 <_PrintInt+0x102>
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d114      	bne.n	8004db6 <_PrintInt+0x102>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d111      	bne.n	8004db6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00e      	beq.n	8004db6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d98:	e006      	b.n	8004da8 <_PrintInt+0xf4>
        FieldWidth--;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004da0:	2130      	movs	r1, #48	; 0x30
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fe74 	bl	8004a90 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <_PrintInt+0x102>
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3f1      	bcc.n	8004d9a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff fedf 	bl	8004b88 <_PrintUnsigned>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b098      	sub	sp, #96	; 0x60
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004de0:	f3ef 8311 	mrs	r3, BASEPRI
 8004de4:	f04f 0120 	mov.w	r1, #32
 8004de8:	f381 8811 	msr	BASEPRI, r1
 8004dec:	633b      	str	r3, [r7, #48]	; 0x30
 8004dee:	48ac      	ldr	r0, [pc, #688]	; (80050a0 <_VPrintTarget+0x2cc>)
 8004df0:	f7ff fbf4 	bl	80045dc <_PreparePacket>
 8004df4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004df6:	4baa      	ldr	r3, [pc, #680]	; (80050a0 <_VPrintTarget+0x2cc>)
 8004df8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3301      	adds	r3, #1
 8004e06:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8140 	beq.w	80050a4 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8004e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e28:	2b25      	cmp	r3, #37	; 0x25
 8004e2a:	f040 812a 	bne.w	8005082 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e42:	3b23      	subs	r3, #35	; 0x23
 8004e44:	2b0d      	cmp	r3, #13
 8004e46:	d83f      	bhi.n	8004ec8 <_VPrintTarget+0xf4>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <_VPrintTarget+0x7c>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004ec9 	.word	0x08004ec9
 8004e58:	08004ec9 	.word	0x08004ec9
 8004e5c:	08004ec9 	.word	0x08004ec9
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004ec9 	.word	0x08004ec9
 8004e6c:	08004ec9 	.word	0x08004ec9
 8004e70:	08004ea9 	.word	0x08004ea9
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004ec9 	.word	0x08004ec9
 8004e84:	08004e99 	.word	0x08004e99
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e01a      	b.n	8004ece <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e012      	b.n	8004ece <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e00a      	b.n	8004ece <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eba:	f043 0308 	orr.w	r3, r3, #8
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e002      	b.n	8004ece <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	bf00      	nop
        }
      } while (v);
 8004ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1b0      	bne.n	8004e36 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ee6:	d912      	bls.n	8004f0e <_VPrintTarget+0x13a>
 8004ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eec:	2b39      	cmp	r3, #57	; 0x39
 8004eee:	d80e      	bhi.n	8004f0e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	461a      	mov	r2, r3
 8004f02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f06:	4413      	add	r3, r2
 8004f08:	3b30      	subs	r3, #48	; 0x30
 8004f0a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004f0c:	e7e4      	b.n	8004ed8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004f1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f20:	d11d      	bne.n	8004f5e <_VPrintTarget+0x18a>
        sFormat++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f34:	2b2f      	cmp	r3, #47	; 0x2f
 8004f36:	d912      	bls.n	8004f5e <_VPrintTarget+0x18a>
 8004f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f3c:	2b39      	cmp	r3, #57	; 0x39
 8004f3e:	d80e      	bhi.n	8004f5e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	461a      	mov	r2, r3
 8004f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f56:	4413      	add	r3, r2
 8004f58:	3b30      	subs	r3, #48	; 0x30
 8004f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004f5c:	e7e4      	b.n	8004f28 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f6a:	2b6c      	cmp	r3, #108	; 0x6c
 8004f6c:	d003      	beq.n	8004f76 <_VPrintTarget+0x1a2>
 8004f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f72:	2b68      	cmp	r3, #104	; 0x68
 8004f74:	d107      	bne.n	8004f86 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004f84:	e7ef      	b.n	8004f66 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d022      	beq.n	8004fd4 <_VPrintTarget+0x200>
 8004f8e:	2b64      	cmp	r3, #100	; 0x64
 8004f90:	dc06      	bgt.n	8004fa0 <_VPrintTarget+0x1cc>
 8004f92:	2b58      	cmp	r3, #88	; 0x58
 8004f94:	d044      	beq.n	8005020 <_VPrintTarget+0x24c>
 8004f96:	2b63      	cmp	r3, #99	; 0x63
 8004f98:	d009      	beq.n	8004fae <_VPrintTarget+0x1da>
 8004f9a:	2b25      	cmp	r3, #37	; 0x25
 8004f9c:	d066      	beq.n	800506c <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004f9e:	e06c      	b.n	800507a <_VPrintTarget+0x2a6>
      switch (c) {
 8004fa0:	2b75      	cmp	r3, #117	; 0x75
 8004fa2:	d02a      	beq.n	8004ffa <_VPrintTarget+0x226>
 8004fa4:	2b78      	cmp	r3, #120	; 0x78
 8004fa6:	d03b      	beq.n	8005020 <_VPrintTarget+0x24c>
 8004fa8:	2b70      	cmp	r3, #112	; 0x70
 8004faa:	d04c      	beq.n	8005046 <_VPrintTarget+0x272>
        break;
 8004fac:	e065      	b.n	800507a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1d19      	adds	r1, r3, #4
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6011      	str	r1, [r2, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004fc2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fd5f 	bl	8004a90 <_StoreChar>
        break;
 8004fd2:	e052      	b.n	800507a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004fe2:	f107 0014 	add.w	r0, r7, #20
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff0:	220a      	movs	r2, #10
 8004ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ff4:	f7ff fe5e 	bl	8004cb4 <_PrintInt>
        break;
 8004ff8:	e03f      	b.n	800507a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	1d19      	adds	r1, r3, #4
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6011      	str	r1, [r2, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800500a:	f107 0014 	add.w	r0, r7, #20
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005018:	220a      	movs	r2, #10
 800501a:	f7ff fdb5 	bl	8004b88 <_PrintUnsigned>
        break;
 800501e:	e02c      	b.n	800507a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6011      	str	r1, [r2, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800502e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005030:	f107 0014 	add.w	r0, r7, #20
 8005034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503e:	2210      	movs	r2, #16
 8005040:	f7ff fda2 	bl	8004b88 <_PrintUnsigned>
        break;
 8005044:	e019      	b.n	800507a <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1d19      	adds	r1, r3, #4
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6011      	str	r1, [r2, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005054:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005056:	f107 0014 	add.w	r0, r7, #20
 800505a:	2300      	movs	r3, #0
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	2308      	movs	r3, #8
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2308      	movs	r3, #8
 8005064:	2210      	movs	r2, #16
 8005066:	f7ff fd8f 	bl	8004b88 <_PrintUnsigned>
        break;
 800506a:	e006      	b.n	800507a <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	2125      	movs	r1, #37	; 0x25
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fd0c 	bl	8004a90 <_StoreChar>
        break;
 8005078:	bf00      	nop
      }
      sFormat++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e007      	b.n	8005092 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 8005082:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fcff 	bl	8004a90 <_StoreChar>
    }
  } while (*sFormat);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f47f aeb8 	bne.w	8004e0c <_VPrintTarget+0x38>
 800509c:	e003      	b.n	80050a6 <_VPrintTarget+0x2d2>
 800509e:	bf00      	nop
 80050a0:	2001a6bc 	.word	0x2001a6bc
      break;
 80050a4:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d041      	beq.n	8005130 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	643b      	str	r3, [r7, #64]	; 0x40
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050bc:	e00b      	b.n	80050d6 <_VPrintTarget+0x302>
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c4:	1c59      	adds	r1, r3, #1
 80050c6:	6439      	str	r1, [r7, #64]	; 0x40
 80050c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	09db      	lsrs	r3, r3, #7
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	2b7f      	cmp	r3, #127	; 0x7f
 80050da:	d8f0      	bhi.n	80050be <_VPrintTarget+0x2ea>
 80050dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	643a      	str	r2, [r7, #64]	; 0x40
 80050e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f0:	2300      	movs	r3, #0
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
 80050f4:	e00b      	b.n	800510e <_VPrintTarget+0x33a>
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	2b7f      	cmp	r3, #127	; 0x7f
 8005112:	d8f0      	bhi.n	80050f6 <_VPrintTarget+0x322>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	63ba      	str	r2, [r7, #56]	; 0x38
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	69b9      	ldr	r1, [r7, #24]
 8005128:	221a      	movs	r2, #26
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fb40 	bl	80047b0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005136:	bf00      	nop
 8005138:	3758      	adds	r7, #88	; 0x58
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800514e:	2300      	movs	r3, #0
 8005150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005154:	4917      	ldr	r1, [pc, #92]	; (80051b4 <SEGGER_SYSVIEW_Init+0x74>)
 8005156:	4818      	ldr	r0, [pc, #96]	; (80051b8 <SEGGER_SYSVIEW_Init+0x78>)
 8005158:	f7ff f920 	bl	800439c <SEGGER_RTT_AllocUpBuffer>
 800515c:	4603      	mov	r3, r0
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b16      	ldr	r3, [pc, #88]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 8005162:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 8005166:	785a      	ldrb	r2, [r3, #1]
 8005168:	4b14      	ldr	r3, [pc, #80]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 800516a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 800516e:	7e1b      	ldrb	r3, [r3, #24]
 8005170:	4618      	mov	r0, r3
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2308      	movs	r3, #8
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <SEGGER_SYSVIEW_Init+0x80>)
 800517a:	490f      	ldr	r1, [pc, #60]	; (80051b8 <SEGGER_SYSVIEW_Init+0x78>)
 800517c:	f7ff f992 	bl	80044a4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005180:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <SEGGER_SYSVIEW_Init+0x84>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 800518c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800519a:	4a08      	ldr	r2, [pc, #32]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80051a0:	4a06      	ldr	r2, [pc, #24]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <SEGGER_SYSVIEW_Init+0x7c>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20019684 	.word	0x20019684
 80051b8:	0800686c 	.word	0x0800686c
 80051bc:	2001a68c 	.word	0x2001a68c
 80051c0:	2001a684 	.word	0x2001a684
 80051c4:	e0001004 	.word	0xe0001004

080051c8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80051d0:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6113      	str	r3, [r2, #16]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	2001a68c 	.word	0x2001a68c

080051e8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051f0:	f3ef 8311 	mrs	r3, BASEPRI
 80051f4:	f04f 0120 	mov.w	r1, #32
 80051f8:	f381 8811 	msr	BASEPRI, r1
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4808      	ldr	r0, [pc, #32]	; (8005220 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005200:	f7ff f9ec 	bl	80045dc <_PreparePacket>
 8005204:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	f7ff fad0 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f383 8811 	msr	BASEPRI, r3
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	2001a6bc 	.word	0x2001a6bc

08005224 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800522e:	f3ef 8311 	mrs	r3, BASEPRI
 8005232:	f04f 0120 	mov.w	r1, #32
 8005236:	f381 8811 	msr	BASEPRI, r1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	4816      	ldr	r0, [pc, #88]	; (8005298 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800523e:	f7ff f9cd 	bl	80045dc <_PreparePacket>
 8005242:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e00b      	b.n	800526a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	61f9      	str	r1, [r7, #28]
 800525c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b7f      	cmp	r3, #127	; 0x7f
 800526e:	d8f0      	bhi.n	8005252 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	6938      	ldr	r0, [r7, #16]
 8005286:	f7ff fa93 	bl	80047b0 <_SendPacket>
  RECORD_END();
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f383 8811 	msr	BASEPRI, r3
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	2001a6bc 	.word	0x2001a6bc

0800529c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052a8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ac:	f04f 0120 	mov.w	r1, #32
 80052b0:	f381 8811 	msr	BASEPRI, r1
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	4825      	ldr	r0, [pc, #148]	; (800534c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80052b8:	f7ff f990 	bl	80045dc <_PreparePacket>
 80052bc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	e00b      	b.n	80052e4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	09db      	lsrs	r3, r3, #7
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b7f      	cmp	r3, #127	; 0x7f
 80052e8:	d8f0      	bhi.n	80052cc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e00b      	b.n	800531c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	6279      	str	r1, [r7, #36]	; 0x24
 800530e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b7f      	cmp	r3, #127	; 0x7f
 8005320:	d8f0      	bhi.n	8005304 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	627a      	str	r2, [r7, #36]	; 0x24
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	69b8      	ldr	r0, [r7, #24]
 8005338:	f7ff fa3a 	bl	80047b0 <_SendPacket>
  RECORD_END();
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f383 8811 	msr	BASEPRI, r3
}
 8005342:	bf00      	nop
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2001a6bc 	.word	0x2001a6bc

08005350 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005356:	4b59      	ldr	r3, [pc, #356]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800535c:	f3ef 8311 	mrs	r3, BASEPRI
 8005360:	f04f 0120 	mov.w	r1, #32
 8005364:	f381 8811 	msr	BASEPRI, r1
 8005368:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800536a:	4b54      	ldr	r3, [pc, #336]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	220a      	movs	r2, #10
 8005370:	4953      	ldr	r1, [pc, #332]	; (80054c0 <SEGGER_SYSVIEW_Start+0x170>)
 8005372:	4618      	mov	r0, r3
 8005374:	f7fa ff34 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800537e:	f7fe fce1 	bl	8003d44 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005382:	200a      	movs	r0, #10
 8005384:	f7ff ff30 	bl	80051e8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005388:	f3ef 8311 	mrs	r3, BASEPRI
 800538c:	f04f 0120 	mov.w	r1, #32
 8005390:	f381 8811 	msr	BASEPRI, r1
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	484b      	ldr	r0, [pc, #300]	; (80054c4 <SEGGER_SYSVIEW_Start+0x174>)
 8005398:	f7ff f920 	bl	80045dc <_PreparePacket>
 800539c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	4b45      	ldr	r3, [pc, #276]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ac:	e00b      	b.n	80053c6 <SEGGER_SYSVIEW_Start+0x76>
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	1c59      	adds	r1, r3, #1
 80053b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	09db      	lsrs	r3, r3, #7
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ca:	d8f0      	bhi.n	80053ae <SEGGER_SYSVIEW_Start+0x5e>
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	e00b      	b.n	8005400 <SEGGER_SYSVIEW_Start+0xb0>
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6279      	str	r1, [r7, #36]	; 0x24
 80053f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	09db      	lsrs	r3, r3, #7
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	2b7f      	cmp	r3, #127	; 0x7f
 8005404:	d8f0      	bhi.n	80053e8 <SEGGER_SYSVIEW_Start+0x98>
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	627a      	str	r2, [r7, #36]	; 0x24
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	4b28      	ldr	r3, [pc, #160]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e00b      	b.n	800543a <SEGGER_SYSVIEW_Start+0xea>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	1c59      	adds	r1, r3, #1
 800542a:	61f9      	str	r1, [r7, #28]
 800542c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	09db      	lsrs	r3, r3, #7
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b7f      	cmp	r3, #127	; 0x7f
 800543e:	d8f0      	bhi.n	8005422 <SEGGER_SYSVIEW_Start+0xd2>
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	61fa      	str	r2, [r7, #28]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e00b      	b.n	8005472 <SEGGER_SYSVIEW_Start+0x122>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	6179      	str	r1, [r7, #20]
 8005464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	09db      	lsrs	r3, r3, #7
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b7f      	cmp	r3, #127	; 0x7f
 8005476:	d8f0      	bhi.n	800545a <SEGGER_SYSVIEW_Start+0x10a>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	617a      	str	r2, [r7, #20]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005488:	2218      	movs	r2, #24
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff f98f 	bl	80047b0 <_SendPacket>
      RECORD_END();
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <SEGGER_SYSVIEW_Start+0x16c>)
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80054a6:	f000 f9eb 	bl	8005880 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80054aa:	f000 f9b1 	bl	8005810 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80054ae:	f000 fc11 	bl	8005cd4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80054b2:	bf00      	nop
 80054b4:	3730      	adds	r7, #48	; 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	2001a68c 	.word	0x2001a68c
 80054c0:	080068ac 	.word	0x080068ac
 80054c4:	2001a6bc 	.word	0x2001a6bc

080054c8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054ce:	f3ef 8311 	mrs	r3, BASEPRI
 80054d2:	f04f 0120 	mov.w	r1, #32
 80054d6:	f381 8811 	msr	BASEPRI, r1
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	480b      	ldr	r0, [pc, #44]	; (800550c <SEGGER_SYSVIEW_Stop+0x44>)
 80054de:	f7ff f87d 	bl	80045dc <_PreparePacket>
 80054e2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <SEGGER_SYSVIEW_Stop+0x48>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80054ec:	220b      	movs	r2, #11
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6838      	ldr	r0, [r7, #0]
 80054f2:	f7ff f95d 	bl	80047b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <SEGGER_SYSVIEW_Stop+0x48>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f383 8811 	msr	BASEPRI, r3
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	2001a6bc 	.word	0x2001a6bc
 8005510:	2001a68c 	.word	0x2001a68c

08005514 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800551a:	f3ef 8311 	mrs	r3, BASEPRI
 800551e:	f04f 0120 	mov.w	r1, #32
 8005522:	f381 8811 	msr	BASEPRI, r1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	4845      	ldr	r0, [pc, #276]	; (8005640 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800552a:	f7ff f857 	bl	80045dc <_PreparePacket>
 800552e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005538:	4b42      	ldr	r3, [pc, #264]	; (8005644 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	e00b      	b.n	8005558 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	b2da      	uxtb	r2, r3
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	1c59      	adds	r1, r3, #1
 8005548:	62f9      	str	r1, [r7, #44]	; 0x2c
 800554a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	09db      	lsrs	r3, r3, #7
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	2b7f      	cmp	r3, #127	; 0x7f
 800555c:	d8f0      	bhi.n	8005540 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	4b34      	ldr	r3, [pc, #208]	; (8005644 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	e00b      	b.n	8005592 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	6279      	str	r1, [r7, #36]	; 0x24
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	627a      	str	r2, [r7, #36]	; 0x24
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e00b      	b.n	80055cc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	61f9      	str	r1, [r7, #28]
 80055be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	09db      	lsrs	r3, r3, #7
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b7f      	cmp	r3, #127	; 0x7f
 80055d0:	d8f0      	bhi.n	80055b4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	61fa      	str	r2, [r7, #28]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e00b      	b.n	8005604 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	6179      	str	r1, [r7, #20]
 80055f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	09db      	lsrs	r3, r3, #7
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d8f0      	bhi.n	80055ec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	617a      	str	r2, [r7, #20]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800561a:	2218      	movs	r2, #24
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	68b8      	ldr	r0, [r7, #8]
 8005620:	f7ff f8c6 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005632:	4b04      	ldr	r3, [pc, #16]	; (8005644 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	4798      	blx	r3
  }
}
 8005638:	bf00      	nop
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2001a6bc 	.word	0x2001a6bc
 8005644:	2001a68c 	.word	0x2001a68c

08005648 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b092      	sub	sp, #72	; 0x48
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005650:	f3ef 8311 	mrs	r3, BASEPRI
 8005654:	f04f 0120 	mov.w	r1, #32
 8005658:	f381 8811 	msr	BASEPRI, r1
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	486a      	ldr	r0, [pc, #424]	; (8005808 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005660:	f7fe ffbc 	bl	80045dc <_PreparePacket>
 8005664:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b66      	ldr	r3, [pc, #408]	; (800580c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	643b      	str	r3, [r7, #64]	; 0x40
 800567a:	e00b      	b.n	8005694 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	b2da      	uxtb	r2, r3
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	6479      	str	r1, [r7, #68]	; 0x44
 8005686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	643b      	str	r3, [r7, #64]	; 0x40
 8005694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005696:	2b7f      	cmp	r3, #127	; 0x7f
 8005698:	d8f0      	bhi.n	800567c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800569a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	647a      	str	r2, [r7, #68]	; 0x44
 80056a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b4:	e00b      	b.n	80056ce <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	2b7f      	cmp	r3, #127	; 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	4619      	mov	r1, r3
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7fe ff25 	bl	800453c <_EncodeStr>
 80056f2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80056f4:	2209      	movs	r2, #9
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	6938      	ldr	r0, [r7, #16]
 80056fa:	f7ff f859 	bl	80047b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b40      	ldr	r3, [pc, #256]	; (800580c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	e00b      	b.n	800572c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	6379      	str	r1, [r7, #52]	; 0x34
 800571e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	09db      	lsrs	r3, r3, #7
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2b7f      	cmp	r3, #127	; 0x7f
 8005730:	d8f0      	bhi.n	8005714 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	637a      	str	r2, [r7, #52]	; 0x34
 8005738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
 800574c:	e00b      	b.n	8005766 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	b2da      	uxtb	r2, r3
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	09db      	lsrs	r3, r3, #7
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	2b7f      	cmp	r3, #127	; 0x7f
 800576a:	d8f0      	bhi.n	800574e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	e00b      	b.n	80057a0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	6279      	str	r1, [r7, #36]	; 0x24
 8005792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	09db      	lsrs	r3, r3, #7
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b7f      	cmp	r3, #127	; 0x7f
 80057a4:	d8f0      	bhi.n	8005788 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	627a      	str	r2, [r7, #36]	; 0x24
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e00b      	b.n	80057d8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	61f9      	str	r1, [r7, #28]
 80057ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	09db      	lsrs	r3, r3, #7
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b7f      	cmp	r3, #127	; 0x7f
 80057dc:	d8f0      	bhi.n	80057c0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	61fa      	str	r2, [r7, #28]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80057ee:	2215      	movs	r2, #21
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f7fe ffdc 	bl	80047b0 <_SendPacket>
  RECORD_END();
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f383 8811 	msr	BASEPRI, r3
}
 80057fe:	bf00      	nop
 8005800:	3748      	adds	r7, #72	; 0x48
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	2001a6bc 	.word	0x2001a6bc
 800580c:	2001a68c 	.word	0x2001a68c

08005810 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005826:	4b03      	ldr	r3, [pc, #12]	; (8005834 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4798      	blx	r3
  }
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2001a68c 	.word	0x2001a68c

08005838 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005840:	f3ef 8311 	mrs	r3, BASEPRI
 8005844:	f04f 0120 	mov.w	r1, #32
 8005848:	f381 8811 	msr	BASEPRI, r1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	480b      	ldr	r0, [pc, #44]	; (800587c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005850:	f7fe fec4 	bl	80045dc <_PreparePacket>
 8005854:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	6938      	ldr	r0, [r7, #16]
 800585c:	f7fe fe6e 	bl	800453c <_EncodeStr>
 8005860:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005862:	220e      	movs	r2, #14
 8005864:	68f9      	ldr	r1, [r7, #12]
 8005866:	6938      	ldr	r0, [r7, #16]
 8005868:	f7fe ffa2 	bl	80047b0 <_SendPacket>
  RECORD_END();
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f383 8811 	msr	BASEPRI, r3
}
 8005872:	bf00      	nop
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	2001a6bc 	.word	0x2001a6bc

08005880 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d019      	beq.n	80058c2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d014      	beq.n	80058c2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4798      	blx	r3
 80058a0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80058a4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80058a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	0013      	movs	r3, r2
 80058b4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80058b6:	461a      	mov	r2, r3
 80058b8:	4601      	mov	r1, r0
 80058ba:	200d      	movs	r0, #13
 80058bc:	f7ff fcee 	bl	800529c <SEGGER_SYSVIEW_RecordU32x2>
 80058c0:	e005      	b.n	80058ce <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	200c      	movs	r0, #12
 80058ca:	f7ff fcab 	bl	8005224 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	2001a68c 	.word	0x2001a68c
 80058dc:	e0001004 	.word	0xe0001004

080058e0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058e6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ea:	f04f 0120 	mov.w	r1, #32
 80058ee:	f381 8811 	msr	BASEPRI, r1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	4819      	ldr	r0, [pc, #100]	; (800595c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80058f6:	f7fe fe71 	bl	80045dc <_PreparePacket>
 80058fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005900:	4b17      	ldr	r3, [pc, #92]	; (8005960 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	e00b      	b.n	800592c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	6179      	str	r1, [r7, #20]
 800591e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	09db      	lsrs	r3, r3, #7
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b7f      	cmp	r3, #127	; 0x7f
 8005930:	d8f0      	bhi.n	8005914 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	617a      	str	r2, [r7, #20]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005942:	2202      	movs	r2, #2
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	68b8      	ldr	r0, [r7, #8]
 8005948:	f7fe ff32 	bl	80047b0 <_SendPacket>
  RECORD_END();
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f383 8811 	msr	BASEPRI, r3
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	2001a6bc 	.word	0x2001a6bc
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800596a:	f3ef 8311 	mrs	r3, BASEPRI
 800596e:	f04f 0120 	mov.w	r1, #32
 8005972:	f381 8811 	msr	BASEPRI, r1
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	4807      	ldr	r0, [pc, #28]	; (8005998 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800597a:	f7fe fe2f 	bl	80045dc <_PreparePacket>
 800597e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005980:	2203      	movs	r2, #3
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6838      	ldr	r0, [r7, #0]
 8005986:	f7fe ff13 	bl	80047b0 <_SendPacket>
  RECORD_END();
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f383 8811 	msr	BASEPRI, r3
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2001a6bc 	.word	0x2001a6bc

0800599c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059a2:	f3ef 8311 	mrs	r3, BASEPRI
 80059a6:	f04f 0120 	mov.w	r1, #32
 80059aa:	f381 8811 	msr	BASEPRI, r1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	4807      	ldr	r0, [pc, #28]	; (80059d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80059b2:	f7fe fe13 	bl	80045dc <_PreparePacket>
 80059b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80059b8:	2212      	movs	r2, #18
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6838      	ldr	r0, [r7, #0]
 80059be:	f7fe fef7 	bl	80047b0 <_SendPacket>
  RECORD_END();
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f383 8811 	msr	BASEPRI, r3
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2001a6bc 	.word	0x2001a6bc

080059d4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059da:	f3ef 8311 	mrs	r3, BASEPRI
 80059de:	f04f 0120 	mov.w	r1, #32
 80059e2:	f381 8811 	msr	BASEPRI, r1
 80059e6:	607b      	str	r3, [r7, #4]
 80059e8:	4807      	ldr	r0, [pc, #28]	; (8005a08 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80059ea:	f7fe fdf7 	bl	80045dc <_PreparePacket>
 80059ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80059f0:	2211      	movs	r2, #17
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	f7fe fedb 	bl	80047b0 <_SendPacket>
  RECORD_END();
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f383 8811 	msr	BASEPRI, r3
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	2001a6bc 	.word	0x2001a6bc

08005a0c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a14:	f3ef 8311 	mrs	r3, BASEPRI
 8005a18:	f04f 0120 	mov.w	r1, #32
 8005a1c:	f381 8811 	msr	BASEPRI, r1
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	4819      	ldr	r0, [pc, #100]	; (8005a88 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005a24:	f7fe fdda 	bl	80045dc <_PreparePacket>
 8005a28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a2e:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e00b      	b.n	8005a5a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	61f9      	str	r1, [r7, #28]
 8005a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5e:	d8f0      	bhi.n	8005a42 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	61fa      	str	r2, [r7, #28]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a70:	2208      	movs	r2, #8
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f7fe fe9b 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f383 8811 	msr	BASEPRI, r3
}
 8005a80:	bf00      	nop
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	2001a6bc 	.word	0x2001a6bc
 8005a8c:	2001a68c 	.word	0x2001a68c

08005a90 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a98:	f3ef 8311 	mrs	r3, BASEPRI
 8005a9c:	f04f 0120 	mov.w	r1, #32
 8005aa0:	f381 8811 	msr	BASEPRI, r1
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	4819      	ldr	r0, [pc, #100]	; (8005b0c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005aa8:	f7fe fd98 	bl	80045dc <_PreparePacket>
 8005aac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ab2:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e00b      	b.n	8005ade <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	61f9      	str	r1, [r7, #28]
 8005ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae2:	d8f0      	bhi.n	8005ac6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	61fa      	str	r2, [r7, #28]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005af4:	2204      	movs	r2, #4
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	6938      	ldr	r0, [r7, #16]
 8005afa:	f7fe fe59 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f383 8811 	msr	BASEPRI, r3
}
 8005b04:	bf00      	nop
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	2001a6bc 	.word	0x2001a6bc
 8005b10:	2001a68c 	.word	0x2001a68c

08005b14 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b20:	f04f 0120 	mov.w	r1, #32
 8005b24:	f381 8811 	msr	BASEPRI, r1
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	4819      	ldr	r0, [pc, #100]	; (8005b90 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005b2c:	f7fe fd56 	bl	80045dc <_PreparePacket>
 8005b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e00b      	b.n	8005b62 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	1c59      	adds	r1, r3, #1
 8005b52:	61f9      	str	r1, [r7, #28]
 8005b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	09db      	lsrs	r3, r3, #7
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b7f      	cmp	r3, #127	; 0x7f
 8005b66:	d8f0      	bhi.n	8005b4a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b78:	2206      	movs	r2, #6
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	6938      	ldr	r0, [r7, #16]
 8005b7e:	f7fe fe17 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f383 8811 	msr	BASEPRI, r3
}
 8005b88:	bf00      	nop
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	2001a6bc 	.word	0x2001a6bc
 8005b94:	2001a68c 	.word	0x2001a68c

08005b98 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	; 0x30
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d06d      	beq.n	8005c86 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb4:	e008      	b.n	8005bc8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3f2      	bcc.n	8005bb6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005bd0:	e000      	b.n	8005bd4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005bd2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d055      	beq.n	8005c86 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bda:	f3ef 8311 	mrs	r3, BASEPRI
 8005bde:	f04f 0120 	mov.w	r1, #32
 8005be2:	f381 8811 	msr	BASEPRI, r1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	482a      	ldr	r0, [pc, #168]	; (8005c94 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005bea:	f7fe fcf7 	bl	80045dc <_PreparePacket>
 8005bee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	e00b      	b.n	8005c16 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	6279      	str	r1, [r7, #36]	; 0x24
 8005c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1a:	d8f0      	bhi.n	8005bfe <SEGGER_SYSVIEW_SendModule+0x66>
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	627a      	str	r2, [r7, #36]	; 0x24
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e00b      	b.n	8005c50 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	61f9      	str	r1, [r7, #28]
 8005c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	09db      	lsrs	r3, r3, #7
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b7f      	cmp	r3, #127	; 0x7f
 8005c54:	d8f0      	bhi.n	8005c38 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7fe fc64 	bl	800453c <_EncodeStr>
 8005c74:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c76:	2216      	movs	r2, #22
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f7fe fd98 	bl	80047b0 <_SendPacket>
      RECORD_END();
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005c86:	bf00      	nop
 8005c88:	3730      	adds	r7, #48	; 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	2001a6b4 	.word	0x2001a6b4
 8005c94:	2001a6bc 	.word	0x2001a6bc

08005c98 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00f      	beq.n	8005cc6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f2      	bne.n	8005cac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	2001a6b4 	.word	0x2001a6b4

08005cd4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005cda:	f3ef 8311 	mrs	r3, BASEPRI
 8005cde:	f04f 0120 	mov.w	r1, #32
 8005ce2:	f381 8811 	msr	BASEPRI, r1
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	4817      	ldr	r0, [pc, #92]	; (8005d48 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005cea:	f7fe fc77 	bl	80045dc <_PreparePacket>
 8005cee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e00b      	b.n	8005d18 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	6179      	str	r1, [r7, #20]
 8005d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	09db      	lsrs	r3, r3, #7
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1c:	d8f0      	bhi.n	8005d00 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	617a      	str	r2, [r7, #20]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d2e:	221b      	movs	r2, #27
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	68b8      	ldr	r0, [r7, #8]
 8005d34:	f7fe fd3c 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f383 8811 	msr	BASEPRI, r3
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2001a6bc 	.word	0x2001a6bc
 8005d4c:	2001a6b8 	.word	0x2001a6b8

08005d50 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005d50:	b40f      	push	{r0, r1, r2, r3}
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	461a      	mov	r2, r3
 8005d62:	2100      	movs	r1, #0
 8005d64:	6938      	ldr	r0, [r7, #16]
 8005d66:	f7ff f835 	bl	8004dd4 <_VPrintTarget>
  va_end(ParamList);
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d74:	b004      	add	sp, #16
 8005d76:	4770      	bx	lr

08005d78 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d80:	f3ef 8311 	mrs	r3, BASEPRI
 8005d84:	f04f 0120 	mov.w	r1, #32
 8005d88:	f381 8811 	msr	BASEPRI, r1
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	4827      	ldr	r0, [pc, #156]	; (8005e2c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d90:	f7fe fc24 	bl	80045dc <_PreparePacket>
 8005d94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d96:	2280      	movs	r2, #128	; 0x80
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f7fe fbce 	bl	800453c <_EncodeStr>
 8005da0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	2301      	movs	r3, #1
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e00b      	b.n	8005dc4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	6279      	str	r1, [r7, #36]	; 0x24
 8005db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	09db      	lsrs	r3, r3, #7
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc8:	d8f0      	bhi.n	8005dac <SEGGER_SYSVIEW_Warn+0x34>
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e00b      	b.n	8005dfc <SEGGER_SYSVIEW_Warn+0x84>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	61f9      	str	r1, [r7, #28]
 8005dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	09db      	lsrs	r3, r3, #7
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005e00:	d8f0      	bhi.n	8005de4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	61fa      	str	r2, [r7, #28]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e12:	221a      	movs	r2, #26
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	6938      	ldr	r0, [r7, #16]
 8005e18:	f7fe fcca 	bl	80047b0 <_SendPacket>
  RECORD_END();
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f383 8811 	msr	BASEPRI, r3
}
 8005e22:	bf00      	nop
 8005e24:	3728      	adds	r7, #40	; 0x28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2001a6bc 	.word	0x2001a6bc

08005e30 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e36:	7e1b      	ldrb	r3, [r3, #24]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	440b      	add	r3, r1
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	336c      	adds	r3, #108	; 0x6c
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e4c:	7e1b      	ldrb	r3, [r3, #24]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	490d      	ldr	r1, [pc, #52]	; (8005e88 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005e52:	4603      	mov	r3, r0
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4403      	add	r3, r0
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3370      	adds	r3, #112	; 0x70
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d00b      	beq.n	8005e7c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d107      	bne.n	8005e7c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e72:	f7fe fbbf 	bl	80045f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005e7c:	4b01      	ldr	r3, [pc, #4]	; (8005e84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2001a68c 	.word	0x2001a68c
 8005e88:	2001a830 	.word	0x2001a830

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4e0d      	ldr	r6, [pc, #52]	; (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	; (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1ba4      	subs	r4, r4, r6
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2500      	movs	r5, #0
 8005e98:	42a5      	cmp	r5, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4e0b      	ldr	r6, [pc, #44]	; (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 fc58 	bl	8006754 <_init>
 8005ea4:	1ba4      	subs	r4, r4, r6
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	42a5      	cmp	r5, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eb4:	4798      	blx	r3
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ebe:	4798      	blx	r3
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	08006904 	.word	0x08006904
 8005ec8:	08006904 	.word	0x08006904
 8005ecc:	08006904 	.word	0x08006904
 8005ed0:	08006908 	.word	0x08006908

08005ed4 <memcmp>:
 8005ed4:	b530      	push	{r4, r5, lr}
 8005ed6:	2400      	movs	r4, #0
 8005ed8:	42a2      	cmp	r2, r4
 8005eda:	d101      	bne.n	8005ee0 <memcmp+0xc>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e007      	b.n	8005ef0 <memcmp+0x1c>
 8005ee0:	5d03      	ldrb	r3, [r0, r4]
 8005ee2:	3401      	adds	r4, #1
 8005ee4:	190d      	adds	r5, r1, r4
 8005ee6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005eea:	42ab      	cmp	r3, r5
 8005eec:	d0f4      	beq.n	8005ed8 <memcmp+0x4>
 8005eee:	1b58      	subs	r0, r3, r5
 8005ef0:	bd30      	pop	{r4, r5, pc}

08005ef2 <memcpy>:
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	440a      	add	r2, r1
 8005ef8:	4291      	cmp	r1, r2
 8005efa:	d100      	bne.n	8005efe <memcpy+0xc>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f06:	e7f7      	b.n	8005ef8 <memcpy+0x6>

08005f08 <memset>:
 8005f08:	4402      	add	r2, r0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d100      	bne.n	8005f12 <memset+0xa>
 8005f10:	4770      	bx	lr
 8005f12:	f803 1b01 	strb.w	r1, [r3], #1
 8005f16:	e7f9      	b.n	8005f0c <memset+0x4>

08005f18 <sniprintf>:
 8005f18:	b40c      	push	{r2, r3}
 8005f1a:	b530      	push	{r4, r5, lr}
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <sniprintf+0x64>)
 8005f1e:	1e0c      	subs	r4, r1, #0
 8005f20:	b09d      	sub	sp, #116	; 0x74
 8005f22:	681d      	ldr	r5, [r3, #0]
 8005f24:	da08      	bge.n	8005f38 <sniprintf+0x20>
 8005f26:	238b      	movs	r3, #139	; 0x8b
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f2e:	b01d      	add	sp, #116	; 0x74
 8005f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f34:	b002      	add	sp, #8
 8005f36:	4770      	bx	lr
 8005f38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f40:	bf14      	ite	ne
 8005f42:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005f46:	4623      	moveq	r3, r4
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	9307      	str	r3, [sp, #28]
 8005f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f50:	9002      	str	r0, [sp, #8]
 8005f52:	9006      	str	r0, [sp, #24]
 8005f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f5a:	ab21      	add	r3, sp, #132	; 0x84
 8005f5c:	a902      	add	r1, sp, #8
 8005f5e:	4628      	mov	r0, r5
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	f000 f867 	bl	8006034 <_svfiprintf_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	bfbc      	itt	lt
 8005f6a:	238b      	movlt	r3, #139	; 0x8b
 8005f6c:	602b      	strlt	r3, [r5, #0]
 8005f6e:	2c00      	cmp	r4, #0
 8005f70:	d0dd      	beq.n	8005f2e <sniprintf+0x16>
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e7d9      	b.n	8005f2e <sniprintf+0x16>
 8005f7a:	bf00      	nop
 8005f7c:	2000001c 	.word	0x2000001c

08005f80 <__ssputs_r>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	688e      	ldr	r6, [r1, #8]
 8005f86:	429e      	cmp	r6, r3
 8005f88:	4682      	mov	sl, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4690      	mov	r8, r2
 8005f8e:	4699      	mov	r9, r3
 8005f90:	d837      	bhi.n	8006002 <__ssputs_r+0x82>
 8005f92:	898a      	ldrh	r2, [r1, #12]
 8005f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f98:	d031      	beq.n	8005ffe <__ssputs_r+0x7e>
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	6909      	ldr	r1, [r1, #16]
 8005f9e:	1a6f      	subs	r7, r5, r1
 8005fa0:	6965      	ldr	r5, [r4, #20]
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8005fac:	f109 0301 	add.w	r3, r9, #1
 8005fb0:	443b      	add	r3, r7
 8005fb2:	429d      	cmp	r5, r3
 8005fb4:	bf38      	it	cc
 8005fb6:	461d      	movcc	r5, r3
 8005fb8:	0553      	lsls	r3, r2, #21
 8005fba:	d530      	bpl.n	800601e <__ssputs_r+0x9e>
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f000 fb21 	bl	8006604 <_malloc_r>
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	b950      	cbnz	r0, 8005fdc <__ssputs_r+0x5c>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	f8ca 3000 	str.w	r3, [sl]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fdc:	463a      	mov	r2, r7
 8005fde:	6921      	ldr	r1, [r4, #16]
 8005fe0:	f7ff ff87 	bl	8005ef2 <memcpy>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	6126      	str	r6, [r4, #16]
 8005ff2:	6165      	str	r5, [r4, #20]
 8005ff4:	443e      	add	r6, r7
 8005ff6:	1bed      	subs	r5, r5, r7
 8005ff8:	6026      	str	r6, [r4, #0]
 8005ffa:	60a5      	str	r5, [r4, #8]
 8005ffc:	464e      	mov	r6, r9
 8005ffe:	454e      	cmp	r6, r9
 8006000:	d900      	bls.n	8006004 <__ssputs_r+0x84>
 8006002:	464e      	mov	r6, r9
 8006004:	4632      	mov	r2, r6
 8006006:	4641      	mov	r1, r8
 8006008:	6820      	ldr	r0, [r4, #0]
 800600a:	f000 fa93 	bl	8006534 <memmove>
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	441e      	add	r6, r3
 8006018:	6026      	str	r6, [r4, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	e7dc      	b.n	8005fd8 <__ssputs_r+0x58>
 800601e:	462a      	mov	r2, r5
 8006020:	f000 fb4a 	bl	80066b8 <_realloc_r>
 8006024:	4606      	mov	r6, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d1e2      	bne.n	8005ff0 <__ssputs_r+0x70>
 800602a:	6921      	ldr	r1, [r4, #16]
 800602c:	4650      	mov	r0, sl
 800602e:	f000 fa9b 	bl	8006568 <_free_r>
 8006032:	e7c8      	b.n	8005fc6 <__ssputs_r+0x46>

08006034 <_svfiprintf_r>:
 8006034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	461d      	mov	r5, r3
 800603a:	898b      	ldrh	r3, [r1, #12]
 800603c:	061f      	lsls	r7, r3, #24
 800603e:	b09d      	sub	sp, #116	; 0x74
 8006040:	4680      	mov	r8, r0
 8006042:	460c      	mov	r4, r1
 8006044:	4616      	mov	r6, r2
 8006046:	d50f      	bpl.n	8006068 <_svfiprintf_r+0x34>
 8006048:	690b      	ldr	r3, [r1, #16]
 800604a:	b96b      	cbnz	r3, 8006068 <_svfiprintf_r+0x34>
 800604c:	2140      	movs	r1, #64	; 0x40
 800604e:	f000 fad9 	bl	8006604 <_malloc_r>
 8006052:	6020      	str	r0, [r4, #0]
 8006054:	6120      	str	r0, [r4, #16]
 8006056:	b928      	cbnz	r0, 8006064 <_svfiprintf_r+0x30>
 8006058:	230c      	movs	r3, #12
 800605a:	f8c8 3000 	str.w	r3, [r8]
 800605e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006062:	e0c8      	b.n	80061f6 <_svfiprintf_r+0x1c2>
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	6163      	str	r3, [r4, #20]
 8006068:	2300      	movs	r3, #0
 800606a:	9309      	str	r3, [sp, #36]	; 0x24
 800606c:	2320      	movs	r3, #32
 800606e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006072:	2330      	movs	r3, #48	; 0x30
 8006074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006078:	9503      	str	r5, [sp, #12]
 800607a:	f04f 0b01 	mov.w	fp, #1
 800607e:	4637      	mov	r7, r6
 8006080:	463d      	mov	r5, r7
 8006082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006086:	b10b      	cbz	r3, 800608c <_svfiprintf_r+0x58>
 8006088:	2b25      	cmp	r3, #37	; 0x25
 800608a:	d13e      	bne.n	800610a <_svfiprintf_r+0xd6>
 800608c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006090:	d00b      	beq.n	80060aa <_svfiprintf_r+0x76>
 8006092:	4653      	mov	r3, sl
 8006094:	4632      	mov	r2, r6
 8006096:	4621      	mov	r1, r4
 8006098:	4640      	mov	r0, r8
 800609a:	f7ff ff71 	bl	8005f80 <__ssputs_r>
 800609e:	3001      	adds	r0, #1
 80060a0:	f000 80a4 	beq.w	80061ec <_svfiprintf_r+0x1b8>
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	4453      	add	r3, sl
 80060a8:	9309      	str	r3, [sp, #36]	; 0x24
 80060aa:	783b      	ldrb	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 809d 	beq.w	80061ec <_svfiprintf_r+0x1b8>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c4:	931a      	str	r3, [sp, #104]	; 0x68
 80060c6:	462f      	mov	r7, r5
 80060c8:	2205      	movs	r2, #5
 80060ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80060ce:	4850      	ldr	r0, [pc, #320]	; (8006210 <_svfiprintf_r+0x1dc>)
 80060d0:	f7fa f8d6 	bl	8000280 <memchr>
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	b9d0      	cbnz	r0, 800610e <_svfiprintf_r+0xda>
 80060d8:	06d9      	lsls	r1, r3, #27
 80060da:	bf44      	itt	mi
 80060dc:	2220      	movmi	r2, #32
 80060de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060e2:	071a      	lsls	r2, r3, #28
 80060e4:	bf44      	itt	mi
 80060e6:	222b      	movmi	r2, #43	; 0x2b
 80060e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060ec:	782a      	ldrb	r2, [r5, #0]
 80060ee:	2a2a      	cmp	r2, #42	; 0x2a
 80060f0:	d015      	beq.n	800611e <_svfiprintf_r+0xea>
 80060f2:	9a07      	ldr	r2, [sp, #28]
 80060f4:	462f      	mov	r7, r5
 80060f6:	2000      	movs	r0, #0
 80060f8:	250a      	movs	r5, #10
 80060fa:	4639      	mov	r1, r7
 80060fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006100:	3b30      	subs	r3, #48	; 0x30
 8006102:	2b09      	cmp	r3, #9
 8006104:	d94d      	bls.n	80061a2 <_svfiprintf_r+0x16e>
 8006106:	b1b8      	cbz	r0, 8006138 <_svfiprintf_r+0x104>
 8006108:	e00f      	b.n	800612a <_svfiprintf_r+0xf6>
 800610a:	462f      	mov	r7, r5
 800610c:	e7b8      	b.n	8006080 <_svfiprintf_r+0x4c>
 800610e:	4a40      	ldr	r2, [pc, #256]	; (8006210 <_svfiprintf_r+0x1dc>)
 8006110:	1a80      	subs	r0, r0, r2
 8006112:	fa0b f000 	lsl.w	r0, fp, r0
 8006116:	4318      	orrs	r0, r3
 8006118:	9004      	str	r0, [sp, #16]
 800611a:	463d      	mov	r5, r7
 800611c:	e7d3      	b.n	80060c6 <_svfiprintf_r+0x92>
 800611e:	9a03      	ldr	r2, [sp, #12]
 8006120:	1d11      	adds	r1, r2, #4
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	9103      	str	r1, [sp, #12]
 8006126:	2a00      	cmp	r2, #0
 8006128:	db01      	blt.n	800612e <_svfiprintf_r+0xfa>
 800612a:	9207      	str	r2, [sp, #28]
 800612c:	e004      	b.n	8006138 <_svfiprintf_r+0x104>
 800612e:	4252      	negs	r2, r2
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	9207      	str	r2, [sp, #28]
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	783b      	ldrb	r3, [r7, #0]
 800613a:	2b2e      	cmp	r3, #46	; 0x2e
 800613c:	d10c      	bne.n	8006158 <_svfiprintf_r+0x124>
 800613e:	787b      	ldrb	r3, [r7, #1]
 8006140:	2b2a      	cmp	r3, #42	; 0x2a
 8006142:	d133      	bne.n	80061ac <_svfiprintf_r+0x178>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	9203      	str	r2, [sp, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb8      	it	lt
 8006150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006154:	3702      	adds	r7, #2
 8006156:	9305      	str	r3, [sp, #20]
 8006158:	4d2e      	ldr	r5, [pc, #184]	; (8006214 <_svfiprintf_r+0x1e0>)
 800615a:	7839      	ldrb	r1, [r7, #0]
 800615c:	2203      	movs	r2, #3
 800615e:	4628      	mov	r0, r5
 8006160:	f7fa f88e 	bl	8000280 <memchr>
 8006164:	b138      	cbz	r0, 8006176 <_svfiprintf_r+0x142>
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	1b40      	subs	r0, r0, r5
 800616a:	fa03 f000 	lsl.w	r0, r3, r0
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	4303      	orrs	r3, r0
 8006172:	3701      	adds	r7, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	7839      	ldrb	r1, [r7, #0]
 8006178:	4827      	ldr	r0, [pc, #156]	; (8006218 <_svfiprintf_r+0x1e4>)
 800617a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800617e:	2206      	movs	r2, #6
 8006180:	1c7e      	adds	r6, r7, #1
 8006182:	f7fa f87d 	bl	8000280 <memchr>
 8006186:	2800      	cmp	r0, #0
 8006188:	d038      	beq.n	80061fc <_svfiprintf_r+0x1c8>
 800618a:	4b24      	ldr	r3, [pc, #144]	; (800621c <_svfiprintf_r+0x1e8>)
 800618c:	bb13      	cbnz	r3, 80061d4 <_svfiprintf_r+0x1a0>
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	3307      	adds	r3, #7
 8006192:	f023 0307 	bic.w	r3, r3, #7
 8006196:	3308      	adds	r3, #8
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619c:	444b      	add	r3, r9
 800619e:	9309      	str	r3, [sp, #36]	; 0x24
 80061a0:	e76d      	b.n	800607e <_svfiprintf_r+0x4a>
 80061a2:	fb05 3202 	mla	r2, r5, r2, r3
 80061a6:	2001      	movs	r0, #1
 80061a8:	460f      	mov	r7, r1
 80061aa:	e7a6      	b.n	80060fa <_svfiprintf_r+0xc6>
 80061ac:	2300      	movs	r3, #0
 80061ae:	3701      	adds	r7, #1
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	4619      	mov	r1, r3
 80061b4:	250a      	movs	r5, #10
 80061b6:	4638      	mov	r0, r7
 80061b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061bc:	3a30      	subs	r2, #48	; 0x30
 80061be:	2a09      	cmp	r2, #9
 80061c0:	d903      	bls.n	80061ca <_svfiprintf_r+0x196>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0c8      	beq.n	8006158 <_svfiprintf_r+0x124>
 80061c6:	9105      	str	r1, [sp, #20]
 80061c8:	e7c6      	b.n	8006158 <_svfiprintf_r+0x124>
 80061ca:	fb05 2101 	mla	r1, r5, r1, r2
 80061ce:	2301      	movs	r3, #1
 80061d0:	4607      	mov	r7, r0
 80061d2:	e7f0      	b.n	80061b6 <_svfiprintf_r+0x182>
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	4622      	mov	r2, r4
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <_svfiprintf_r+0x1ec>)
 80061dc:	a904      	add	r1, sp, #16
 80061de:	4640      	mov	r0, r8
 80061e0:	f3af 8000 	nop.w
 80061e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80061e8:	4681      	mov	r9, r0
 80061ea:	d1d6      	bne.n	800619a <_svfiprintf_r+0x166>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	065b      	lsls	r3, r3, #25
 80061f0:	f53f af35 	bmi.w	800605e <_svfiprintf_r+0x2a>
 80061f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061f6:	b01d      	add	sp, #116	; 0x74
 80061f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fc:	ab03      	add	r3, sp, #12
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4622      	mov	r2, r4
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <_svfiprintf_r+0x1ec>)
 8006204:	a904      	add	r1, sp, #16
 8006206:	4640      	mov	r0, r8
 8006208:	f000 f882 	bl	8006310 <_printf_i>
 800620c:	e7ea      	b.n	80061e4 <_svfiprintf_r+0x1b0>
 800620e:	bf00      	nop
 8006210:	080068c8 	.word	0x080068c8
 8006214:	080068ce 	.word	0x080068ce
 8006218:	080068d2 	.word	0x080068d2
 800621c:	00000000 	.word	0x00000000
 8006220:	08005f81 	.word	0x08005f81

08006224 <_printf_common>:
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	4691      	mov	r9, r2
 800622a:	461f      	mov	r7, r3
 800622c:	688a      	ldr	r2, [r1, #8]
 800622e:	690b      	ldr	r3, [r1, #16]
 8006230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006234:	4293      	cmp	r3, r2
 8006236:	bfb8      	it	lt
 8006238:	4613      	movlt	r3, r2
 800623a:	f8c9 3000 	str.w	r3, [r9]
 800623e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006242:	4606      	mov	r6, r0
 8006244:	460c      	mov	r4, r1
 8006246:	b112      	cbz	r2, 800624e <_printf_common+0x2a>
 8006248:	3301      	adds	r3, #1
 800624a:	f8c9 3000 	str.w	r3, [r9]
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	0699      	lsls	r1, r3, #26
 8006252:	bf42      	ittt	mi
 8006254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006258:	3302      	addmi	r3, #2
 800625a:	f8c9 3000 	strmi.w	r3, [r9]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	f015 0506 	ands.w	r5, r5, #6
 8006264:	d107      	bne.n	8006276 <_printf_common+0x52>
 8006266:	f104 0a19 	add.w	sl, r4, #25
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	f8d9 2000 	ldr.w	r2, [r9]
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	42ab      	cmp	r3, r5
 8006274:	dc28      	bgt.n	80062c8 <_printf_common+0xa4>
 8006276:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	3300      	adds	r3, #0
 800627e:	bf18      	it	ne
 8006280:	2301      	movne	r3, #1
 8006282:	0692      	lsls	r2, r2, #26
 8006284:	d42d      	bmi.n	80062e2 <_printf_common+0xbe>
 8006286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628a:	4639      	mov	r1, r7
 800628c:	4630      	mov	r0, r6
 800628e:	47c0      	blx	r8
 8006290:	3001      	adds	r0, #1
 8006292:	d020      	beq.n	80062d6 <_printf_common+0xb2>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	68e5      	ldr	r5, [r4, #12]
 8006298:	f8d9 2000 	ldr.w	r2, [r9]
 800629c:	f003 0306 	and.w	r3, r3, #6
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	bf08      	it	eq
 80062a4:	1aad      	subeq	r5, r5, r2
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	bf0c      	ite	eq
 80062ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b0:	2500      	movne	r5, #0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bfc4      	itt	gt
 80062b6:	1a9b      	subgt	r3, r3, r2
 80062b8:	18ed      	addgt	r5, r5, r3
 80062ba:	f04f 0900 	mov.w	r9, #0
 80062be:	341a      	adds	r4, #26
 80062c0:	454d      	cmp	r5, r9
 80062c2:	d11a      	bne.n	80062fa <_printf_common+0xd6>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e008      	b.n	80062da <_printf_common+0xb6>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4652      	mov	r2, sl
 80062cc:	4639      	mov	r1, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	47c0      	blx	r8
 80062d2:	3001      	adds	r0, #1
 80062d4:	d103      	bne.n	80062de <_printf_common+0xba>
 80062d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	3501      	adds	r5, #1
 80062e0:	e7c3      	b.n	800626a <_printf_common+0x46>
 80062e2:	18e1      	adds	r1, r4, r3
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	2030      	movs	r0, #48	; 0x30
 80062e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ec:	4422      	add	r2, r4
 80062ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f6:	3302      	adds	r3, #2
 80062f8:	e7c5      	b.n	8006286 <_printf_common+0x62>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4622      	mov	r2, r4
 80062fe:	4639      	mov	r1, r7
 8006300:	4630      	mov	r0, r6
 8006302:	47c0      	blx	r8
 8006304:	3001      	adds	r0, #1
 8006306:	d0e6      	beq.n	80062d6 <_printf_common+0xb2>
 8006308:	f109 0901 	add.w	r9, r9, #1
 800630c:	e7d8      	b.n	80062c0 <_printf_common+0x9c>
	...

08006310 <_printf_i>:
 8006310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006314:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006318:	460c      	mov	r4, r1
 800631a:	7e09      	ldrb	r1, [r1, #24]
 800631c:	b085      	sub	sp, #20
 800631e:	296e      	cmp	r1, #110	; 0x6e
 8006320:	4617      	mov	r7, r2
 8006322:	4606      	mov	r6, r0
 8006324:	4698      	mov	r8, r3
 8006326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006328:	f000 80b3 	beq.w	8006492 <_printf_i+0x182>
 800632c:	d822      	bhi.n	8006374 <_printf_i+0x64>
 800632e:	2963      	cmp	r1, #99	; 0x63
 8006330:	d036      	beq.n	80063a0 <_printf_i+0x90>
 8006332:	d80a      	bhi.n	800634a <_printf_i+0x3a>
 8006334:	2900      	cmp	r1, #0
 8006336:	f000 80b9 	beq.w	80064ac <_printf_i+0x19c>
 800633a:	2958      	cmp	r1, #88	; 0x58
 800633c:	f000 8083 	beq.w	8006446 <_printf_i+0x136>
 8006340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006344:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006348:	e032      	b.n	80063b0 <_printf_i+0xa0>
 800634a:	2964      	cmp	r1, #100	; 0x64
 800634c:	d001      	beq.n	8006352 <_printf_i+0x42>
 800634e:	2969      	cmp	r1, #105	; 0x69
 8006350:	d1f6      	bne.n	8006340 <_printf_i+0x30>
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	6813      	ldr	r3, [r2, #0]
 8006356:	0605      	lsls	r5, r0, #24
 8006358:	f103 0104 	add.w	r1, r3, #4
 800635c:	d52a      	bpl.n	80063b4 <_printf_i+0xa4>
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	da03      	bge.n	800636e <_printf_i+0x5e>
 8006366:	222d      	movs	r2, #45	; 0x2d
 8006368:	425b      	negs	r3, r3
 800636a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800636e:	486f      	ldr	r0, [pc, #444]	; (800652c <_printf_i+0x21c>)
 8006370:	220a      	movs	r2, #10
 8006372:	e039      	b.n	80063e8 <_printf_i+0xd8>
 8006374:	2973      	cmp	r1, #115	; 0x73
 8006376:	f000 809d 	beq.w	80064b4 <_printf_i+0x1a4>
 800637a:	d808      	bhi.n	800638e <_printf_i+0x7e>
 800637c:	296f      	cmp	r1, #111	; 0x6f
 800637e:	d020      	beq.n	80063c2 <_printf_i+0xb2>
 8006380:	2970      	cmp	r1, #112	; 0x70
 8006382:	d1dd      	bne.n	8006340 <_printf_i+0x30>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	f043 0320 	orr.w	r3, r3, #32
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	e003      	b.n	8006396 <_printf_i+0x86>
 800638e:	2975      	cmp	r1, #117	; 0x75
 8006390:	d017      	beq.n	80063c2 <_printf_i+0xb2>
 8006392:	2978      	cmp	r1, #120	; 0x78
 8006394:	d1d4      	bne.n	8006340 <_printf_i+0x30>
 8006396:	2378      	movs	r3, #120	; 0x78
 8006398:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800639c:	4864      	ldr	r0, [pc, #400]	; (8006530 <_printf_i+0x220>)
 800639e:	e055      	b.n	800644c <_printf_i+0x13c>
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	1d19      	adds	r1, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6011      	str	r1, [r2, #0]
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b0:	2301      	movs	r3, #1
 80063b2:	e08c      	b.n	80064ce <_printf_i+0x1be>
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6011      	str	r1, [r2, #0]
 80063b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063bc:	bf18      	it	ne
 80063be:	b21b      	sxthne	r3, r3
 80063c0:	e7cf      	b.n	8006362 <_printf_i+0x52>
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	6825      	ldr	r5, [r4, #0]
 80063c6:	1d18      	adds	r0, r3, #4
 80063c8:	6010      	str	r0, [r2, #0]
 80063ca:	0628      	lsls	r0, r5, #24
 80063cc:	d501      	bpl.n	80063d2 <_printf_i+0xc2>
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	e002      	b.n	80063d8 <_printf_i+0xc8>
 80063d2:	0668      	lsls	r0, r5, #25
 80063d4:	d5fb      	bpl.n	80063ce <_printf_i+0xbe>
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	4854      	ldr	r0, [pc, #336]	; (800652c <_printf_i+0x21c>)
 80063da:	296f      	cmp	r1, #111	; 0x6f
 80063dc:	bf14      	ite	ne
 80063de:	220a      	movne	r2, #10
 80063e0:	2208      	moveq	r2, #8
 80063e2:	2100      	movs	r1, #0
 80063e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063e8:	6865      	ldr	r5, [r4, #4]
 80063ea:	60a5      	str	r5, [r4, #8]
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	f2c0 8095 	blt.w	800651c <_printf_i+0x20c>
 80063f2:	6821      	ldr	r1, [r4, #0]
 80063f4:	f021 0104 	bic.w	r1, r1, #4
 80063f8:	6021      	str	r1, [r4, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d13d      	bne.n	800647a <_printf_i+0x16a>
 80063fe:	2d00      	cmp	r5, #0
 8006400:	f040 808e 	bne.w	8006520 <_printf_i+0x210>
 8006404:	4665      	mov	r5, ip
 8006406:	2a08      	cmp	r2, #8
 8006408:	d10b      	bne.n	8006422 <_printf_i+0x112>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	07db      	lsls	r3, r3, #31
 800640e:	d508      	bpl.n	8006422 <_printf_i+0x112>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	6862      	ldr	r2, [r4, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	bfde      	ittt	le
 8006418:	2330      	movle	r3, #48	; 0x30
 800641a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800641e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006422:	ebac 0305 	sub.w	r3, ip, r5
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	f8cd 8000 	str.w	r8, [sp]
 800642c:	463b      	mov	r3, r7
 800642e:	aa03      	add	r2, sp, #12
 8006430:	4621      	mov	r1, r4
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff fef6 	bl	8006224 <_printf_common>
 8006438:	3001      	adds	r0, #1
 800643a:	d14d      	bne.n	80064d8 <_printf_i+0x1c8>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006440:	b005      	add	sp, #20
 8006442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006446:	4839      	ldr	r0, [pc, #228]	; (800652c <_printf_i+0x21c>)
 8006448:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	6821      	ldr	r1, [r4, #0]
 8006450:	1d1d      	adds	r5, r3, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6015      	str	r5, [r2, #0]
 8006456:	060a      	lsls	r2, r1, #24
 8006458:	d50b      	bpl.n	8006472 <_printf_i+0x162>
 800645a:	07ca      	lsls	r2, r1, #31
 800645c:	bf44      	itt	mi
 800645e:	f041 0120 	orrmi.w	r1, r1, #32
 8006462:	6021      	strmi	r1, [r4, #0]
 8006464:	b91b      	cbnz	r3, 800646e <_printf_i+0x15e>
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	f022 0220 	bic.w	r2, r2, #32
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	2210      	movs	r2, #16
 8006470:	e7b7      	b.n	80063e2 <_printf_i+0xd2>
 8006472:	064d      	lsls	r5, r1, #25
 8006474:	bf48      	it	mi
 8006476:	b29b      	uxthmi	r3, r3
 8006478:	e7ef      	b.n	800645a <_printf_i+0x14a>
 800647a:	4665      	mov	r5, ip
 800647c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006480:	fb02 3311 	mls	r3, r2, r1, r3
 8006484:	5cc3      	ldrb	r3, [r0, r3]
 8006486:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800648a:	460b      	mov	r3, r1
 800648c:	2900      	cmp	r1, #0
 800648e:	d1f5      	bne.n	800647c <_printf_i+0x16c>
 8006490:	e7b9      	b.n	8006406 <_printf_i+0xf6>
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	6961      	ldr	r1, [r4, #20]
 8006498:	1d18      	adds	r0, r3, #4
 800649a:	6010      	str	r0, [r2, #0]
 800649c:	0628      	lsls	r0, r5, #24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	d501      	bpl.n	80064a6 <_printf_i+0x196>
 80064a2:	6019      	str	r1, [r3, #0]
 80064a4:	e002      	b.n	80064ac <_printf_i+0x19c>
 80064a6:	066a      	lsls	r2, r5, #25
 80064a8:	d5fb      	bpl.n	80064a2 <_printf_i+0x192>
 80064aa:	8019      	strh	r1, [r3, #0]
 80064ac:	2300      	movs	r3, #0
 80064ae:	6123      	str	r3, [r4, #16]
 80064b0:	4665      	mov	r5, ip
 80064b2:	e7b9      	b.n	8006428 <_printf_i+0x118>
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	1d19      	adds	r1, r3, #4
 80064b8:	6011      	str	r1, [r2, #0]
 80064ba:	681d      	ldr	r5, [r3, #0]
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	2100      	movs	r1, #0
 80064c0:	4628      	mov	r0, r5
 80064c2:	f7f9 fedd 	bl	8000280 <memchr>
 80064c6:	b108      	cbz	r0, 80064cc <_printf_i+0x1bc>
 80064c8:	1b40      	subs	r0, r0, r5
 80064ca:	6060      	str	r0, [r4, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2300      	movs	r3, #0
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d6:	e7a7      	b.n	8006428 <_printf_i+0x118>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	462a      	mov	r2, r5
 80064dc:	4639      	mov	r1, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0aa      	beq.n	800643c <_printf_i+0x12c>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	079b      	lsls	r3, r3, #30
 80064ea:	d413      	bmi.n	8006514 <_printf_i+0x204>
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	4298      	cmp	r0, r3
 80064f2:	bfb8      	it	lt
 80064f4:	4618      	movlt	r0, r3
 80064f6:	e7a3      	b.n	8006440 <_printf_i+0x130>
 80064f8:	2301      	movs	r3, #1
 80064fa:	464a      	mov	r2, r9
 80064fc:	4639      	mov	r1, r7
 80064fe:	4630      	mov	r0, r6
 8006500:	47c0      	blx	r8
 8006502:	3001      	adds	r0, #1
 8006504:	d09a      	beq.n	800643c <_printf_i+0x12c>
 8006506:	3501      	adds	r5, #1
 8006508:	68e3      	ldr	r3, [r4, #12]
 800650a:	9a03      	ldr	r2, [sp, #12]
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	42ab      	cmp	r3, r5
 8006510:	dcf2      	bgt.n	80064f8 <_printf_i+0x1e8>
 8006512:	e7eb      	b.n	80064ec <_printf_i+0x1dc>
 8006514:	2500      	movs	r5, #0
 8006516:	f104 0919 	add.w	r9, r4, #25
 800651a:	e7f5      	b.n	8006508 <_printf_i+0x1f8>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1ac      	bne.n	800647a <_printf_i+0x16a>
 8006520:	7803      	ldrb	r3, [r0, #0]
 8006522:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006526:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652a:	e76c      	b.n	8006406 <_printf_i+0xf6>
 800652c:	080068d9 	.word	0x080068d9
 8006530:	080068ea 	.word	0x080068ea

08006534 <memmove>:
 8006534:	4288      	cmp	r0, r1
 8006536:	b510      	push	{r4, lr}
 8006538:	eb01 0302 	add.w	r3, r1, r2
 800653c:	d807      	bhi.n	800654e <memmove+0x1a>
 800653e:	1e42      	subs	r2, r0, #1
 8006540:	4299      	cmp	r1, r3
 8006542:	d00a      	beq.n	800655a <memmove+0x26>
 8006544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006548:	f802 4f01 	strb.w	r4, [r2, #1]!
 800654c:	e7f8      	b.n	8006540 <memmove+0xc>
 800654e:	4283      	cmp	r3, r0
 8006550:	d9f5      	bls.n	800653e <memmove+0xa>
 8006552:	1881      	adds	r1, r0, r2
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	42d3      	cmn	r3, r2
 8006558:	d100      	bne.n	800655c <memmove+0x28>
 800655a:	bd10      	pop	{r4, pc}
 800655c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006560:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006564:	e7f7      	b.n	8006556 <memmove+0x22>
	...

08006568 <_free_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	2900      	cmp	r1, #0
 800656e:	d045      	beq.n	80065fc <_free_r+0x94>
 8006570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006574:	1f0c      	subs	r4, r1, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfb8      	it	lt
 800657a:	18e4      	addlt	r4, r4, r3
 800657c:	f000 f8d2 	bl	8006724 <__malloc_lock>
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <_free_r+0x98>)
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	4610      	mov	r0, r2
 8006586:	b933      	cbnz	r3, 8006596 <_free_r+0x2e>
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	6014      	str	r4, [r2, #0]
 800658c:	4628      	mov	r0, r5
 800658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006592:	f000 b8c8 	b.w	8006726 <__malloc_unlock>
 8006596:	42a3      	cmp	r3, r4
 8006598:	d90c      	bls.n	80065b4 <_free_r+0x4c>
 800659a:	6821      	ldr	r1, [r4, #0]
 800659c:	1862      	adds	r2, r4, r1
 800659e:	4293      	cmp	r3, r2
 80065a0:	bf04      	itt	eq
 80065a2:	681a      	ldreq	r2, [r3, #0]
 80065a4:	685b      	ldreq	r3, [r3, #4]
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	bf04      	itt	eq
 80065aa:	1852      	addeq	r2, r2, r1
 80065ac:	6022      	streq	r2, [r4, #0]
 80065ae:	6004      	str	r4, [r0, #0]
 80065b0:	e7ec      	b.n	800658c <_free_r+0x24>
 80065b2:	4613      	mov	r3, r2
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	b10a      	cbz	r2, 80065bc <_free_r+0x54>
 80065b8:	42a2      	cmp	r2, r4
 80065ba:	d9fa      	bls.n	80065b2 <_free_r+0x4a>
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	1858      	adds	r0, r3, r1
 80065c0:	42a0      	cmp	r0, r4
 80065c2:	d10b      	bne.n	80065dc <_free_r+0x74>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	4401      	add	r1, r0
 80065c8:	1858      	adds	r0, r3, r1
 80065ca:	4282      	cmp	r2, r0
 80065cc:	6019      	str	r1, [r3, #0]
 80065ce:	d1dd      	bne.n	800658c <_free_r+0x24>
 80065d0:	6810      	ldr	r0, [r2, #0]
 80065d2:	6852      	ldr	r2, [r2, #4]
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	4401      	add	r1, r0
 80065d8:	6019      	str	r1, [r3, #0]
 80065da:	e7d7      	b.n	800658c <_free_r+0x24>
 80065dc:	d902      	bls.n	80065e4 <_free_r+0x7c>
 80065de:	230c      	movs	r3, #12
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	e7d3      	b.n	800658c <_free_r+0x24>
 80065e4:	6820      	ldr	r0, [r4, #0]
 80065e6:	1821      	adds	r1, r4, r0
 80065e8:	428a      	cmp	r2, r1
 80065ea:	bf04      	itt	eq
 80065ec:	6811      	ldreq	r1, [r2, #0]
 80065ee:	6852      	ldreq	r2, [r2, #4]
 80065f0:	6062      	str	r2, [r4, #4]
 80065f2:	bf04      	itt	eq
 80065f4:	1809      	addeq	r1, r1, r0
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	605c      	str	r4, [r3, #4]
 80065fa:	e7c7      	b.n	800658c <_free_r+0x24>
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
 80065fe:	bf00      	nop
 8006600:	2001a7a0 	.word	0x2001a7a0

08006604 <_malloc_r>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	1ccd      	adds	r5, r1, #3
 8006608:	f025 0503 	bic.w	r5, r5, #3
 800660c:	3508      	adds	r5, #8
 800660e:	2d0c      	cmp	r5, #12
 8006610:	bf38      	it	cc
 8006612:	250c      	movcc	r5, #12
 8006614:	2d00      	cmp	r5, #0
 8006616:	4606      	mov	r6, r0
 8006618:	db01      	blt.n	800661e <_malloc_r+0x1a>
 800661a:	42a9      	cmp	r1, r5
 800661c:	d903      	bls.n	8006626 <_malloc_r+0x22>
 800661e:	230c      	movs	r3, #12
 8006620:	6033      	str	r3, [r6, #0]
 8006622:	2000      	movs	r0, #0
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	f000 f87d 	bl	8006724 <__malloc_lock>
 800662a:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <_malloc_r+0xac>)
 800662c:	6814      	ldr	r4, [r2, #0]
 800662e:	4621      	mov	r1, r4
 8006630:	b991      	cbnz	r1, 8006658 <_malloc_r+0x54>
 8006632:	4c20      	ldr	r4, [pc, #128]	; (80066b4 <_malloc_r+0xb0>)
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	b91b      	cbnz	r3, 8006640 <_malloc_r+0x3c>
 8006638:	4630      	mov	r0, r6
 800663a:	f000 f863 	bl	8006704 <_sbrk_r>
 800663e:	6020      	str	r0, [r4, #0]
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f85e 	bl	8006704 <_sbrk_r>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d124      	bne.n	8006696 <_malloc_r+0x92>
 800664c:	230c      	movs	r3, #12
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f868 	bl	8006726 <__malloc_unlock>
 8006656:	e7e4      	b.n	8006622 <_malloc_r+0x1e>
 8006658:	680b      	ldr	r3, [r1, #0]
 800665a:	1b5b      	subs	r3, r3, r5
 800665c:	d418      	bmi.n	8006690 <_malloc_r+0x8c>
 800665e:	2b0b      	cmp	r3, #11
 8006660:	d90f      	bls.n	8006682 <_malloc_r+0x7e>
 8006662:	600b      	str	r3, [r1, #0]
 8006664:	50cd      	str	r5, [r1, r3]
 8006666:	18cc      	adds	r4, r1, r3
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f85c 	bl	8006726 <__malloc_unlock>
 800666e:	f104 000b 	add.w	r0, r4, #11
 8006672:	1d23      	adds	r3, r4, #4
 8006674:	f020 0007 	bic.w	r0, r0, #7
 8006678:	1ac3      	subs	r3, r0, r3
 800667a:	d0d3      	beq.n	8006624 <_malloc_r+0x20>
 800667c:	425a      	negs	r2, r3
 800667e:	50e2      	str	r2, [r4, r3]
 8006680:	e7d0      	b.n	8006624 <_malloc_r+0x20>
 8006682:	428c      	cmp	r4, r1
 8006684:	684b      	ldr	r3, [r1, #4]
 8006686:	bf16      	itet	ne
 8006688:	6063      	strne	r3, [r4, #4]
 800668a:	6013      	streq	r3, [r2, #0]
 800668c:	460c      	movne	r4, r1
 800668e:	e7eb      	b.n	8006668 <_malloc_r+0x64>
 8006690:	460c      	mov	r4, r1
 8006692:	6849      	ldr	r1, [r1, #4]
 8006694:	e7cc      	b.n	8006630 <_malloc_r+0x2c>
 8006696:	1cc4      	adds	r4, r0, #3
 8006698:	f024 0403 	bic.w	r4, r4, #3
 800669c:	42a0      	cmp	r0, r4
 800669e:	d005      	beq.n	80066ac <_malloc_r+0xa8>
 80066a0:	1a21      	subs	r1, r4, r0
 80066a2:	4630      	mov	r0, r6
 80066a4:	f000 f82e 	bl	8006704 <_sbrk_r>
 80066a8:	3001      	adds	r0, #1
 80066aa:	d0cf      	beq.n	800664c <_malloc_r+0x48>
 80066ac:	6025      	str	r5, [r4, #0]
 80066ae:	e7db      	b.n	8006668 <_malloc_r+0x64>
 80066b0:	2001a7a0 	.word	0x2001a7a0
 80066b4:	2001a7a4 	.word	0x2001a7a4

080066b8 <_realloc_r>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	4607      	mov	r7, r0
 80066bc:	4614      	mov	r4, r2
 80066be:	460e      	mov	r6, r1
 80066c0:	b921      	cbnz	r1, 80066cc <_realloc_r+0x14>
 80066c2:	4611      	mov	r1, r2
 80066c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066c8:	f7ff bf9c 	b.w	8006604 <_malloc_r>
 80066cc:	b922      	cbnz	r2, 80066d8 <_realloc_r+0x20>
 80066ce:	f7ff ff4b 	bl	8006568 <_free_r>
 80066d2:	4625      	mov	r5, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	f000 f826 	bl	8006728 <_malloc_usable_size_r>
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d20f      	bcs.n	8006700 <_realloc_r+0x48>
 80066e0:	4621      	mov	r1, r4
 80066e2:	4638      	mov	r0, r7
 80066e4:	f7ff ff8e 	bl	8006604 <_malloc_r>
 80066e8:	4605      	mov	r5, r0
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d0f2      	beq.n	80066d4 <_realloc_r+0x1c>
 80066ee:	4631      	mov	r1, r6
 80066f0:	4622      	mov	r2, r4
 80066f2:	f7ff fbfe 	bl	8005ef2 <memcpy>
 80066f6:	4631      	mov	r1, r6
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff ff35 	bl	8006568 <_free_r>
 80066fe:	e7e9      	b.n	80066d4 <_realloc_r+0x1c>
 8006700:	4635      	mov	r5, r6
 8006702:	e7e7      	b.n	80066d4 <_realloc_r+0x1c>

08006704 <_sbrk_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4c06      	ldr	r4, [pc, #24]	; (8006720 <_sbrk_r+0x1c>)
 8006708:	2300      	movs	r3, #0
 800670a:	4605      	mov	r5, r0
 800670c:	4608      	mov	r0, r1
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	f000 f812 	bl	8006738 <_sbrk>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_sbrk_r+0x1a>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	b103      	cbz	r3, 800671e <_sbrk_r+0x1a>
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	2001a8d8 	.word	0x2001a8d8

08006724 <__malloc_lock>:
 8006724:	4770      	bx	lr

08006726 <__malloc_unlock>:
 8006726:	4770      	bx	lr

08006728 <_malloc_usable_size_r>:
 8006728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672c:	1f18      	subs	r0, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfbc      	itt	lt
 8006732:	580b      	ldrlt	r3, [r1, r0]
 8006734:	18c0      	addlt	r0, r0, r3
 8006736:	4770      	bx	lr

08006738 <_sbrk>:
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <_sbrk+0x14>)
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	4602      	mov	r2, r0
 800673e:	b909      	cbnz	r1, 8006744 <_sbrk+0xc>
 8006740:	4903      	ldr	r1, [pc, #12]	; (8006750 <_sbrk+0x18>)
 8006742:	6019      	str	r1, [r3, #0]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	4402      	add	r2, r0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	4770      	bx	lr
 800674c:	2001a7a8 	.word	0x2001a7a8
 8006750:	2001a8e0 	.word	0x2001a8e0

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
